{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":".NET Backend Geli\u015ftirici M\u00fclakat Rehberi","text":""},{"location":"#rehberin-amac","title":"\ud83c\udfaf Rehberin Amac\u0131","text":"<p>Bu rehber, .NET backend geli\u015ftiricilerinin m\u00fclakat s\u00fcre\u00e7lerinde ba\u015far\u0131l\u0131 olmalar\u0131 i\u00e7in haz\u0131rlanm\u0131\u015f kapsaml\u0131 bir kaynakt\u0131r. Amac\u0131m\u0131z:</p> <ul> <li>M\u00fclakatlarda sorulabilecek t\u00fcm konular\u0131 kapsamak</li> <li>Her seviye i\u00e7in \u00f6zel haz\u0131rlanm\u0131\u015f sorular sunmak</li> <li>Ger\u00e7ek m\u00fclakat senaryolar\u0131n\u0131 payla\u015fmak</li> <li>Detayl\u0131 cevaplar ve a\u00e7\u0131klamalar sa\u011flamak</li> <li>Pratik yapma f\u0131rsat\u0131 sunmak</li> </ul>"},{"location":"#istatistikler-ve-icerik-ozeti","title":"\ud83d\udcca \u0130statistikler ve \u0130\u00e7erik \u00d6zeti","text":""},{"location":"#genel-istatistikler","title":"Genel \u0130statistikler","text":"<ul> <li>Toplam Seviye: 3 (Junior, Mid-Level, Senior)</li> <li>Toplam Konu Ba\u015fl\u0131\u011f\u0131: 35</li> <li>Toplam Alt Konu: 180+</li> <li>Toplam M\u00fclakat \u00d6rne\u011fi: 15</li> <li>Toplam Soru Say\u0131s\u0131: 400+</li> <li>Toplam Kod \u00d6rne\u011fi: 800+</li> </ul>"},{"location":"#junior-developer-icerigi","title":"Junior Developer \u0130\u00e7eri\u011fi","text":"<ul> <li>10 ana konu ba\u015fl\u0131\u011f\u0131</li> <li>70+ alt konu</li> <li>5 m\u00fclakat \u00f6rne\u011fi</li> <li>100+ soru</li> <li>Temel seviye algoritma ve veri yap\u0131lar\u0131</li> <li>ASP.NET Core temelleri</li> <li>Veritaban\u0131 i\u015flemleri</li> <li>API geli\u015ftirme</li> <li>G\u00fcvenlik temelleri</li> <li>C# temelleri (19 alt konu)</li> <li>Temel .NET kavramlar\u0131</li> <li>Web Development Basics</li> <li>Development Tools</li> </ul>"},{"location":"#mid-level-developer-icerigi","title":"Mid-Level Developer \u0130\u00e7eri\u011fi","text":"<ul> <li>22 ana konu ba\u015fl\u0131\u011f\u0131</li> <li>110+ alt konu</li> <li>1 m\u00fclakat \u00f6rne\u011fi</li> <li>20+ soru</li> <li>\u0130leri C# konular\u0131</li> <li>Entity Framework (16 alt konu)</li> <li>Caching Stratejileri</li> <li>Logging ve Monitoring</li> <li>Asenkron \u0130\u015flemler</li> <li>Message Queue</li> <li>Testing</li> <li>Design Patterns</li> <li>SOLID Prensipleri</li> <li>Clean Architecture</li> <li>Microservices</li> <li>Performance Optimization</li> <li>Mimari</li> <li>API Design &amp; Development</li> <li>Database &amp; Data Management</li> <li>Security &amp; Authentication</li> <li>DevOps &amp; Deployment</li> <li>Advanced .NET Concepts</li> <li>Monitoring &amp; Observability</li> <li>Testing Strategies</li> <li>Architecture Patterns</li> </ul>"},{"location":"#senior-developer-icerigi","title":"Senior Developer \u0130\u00e7eri\u011fi","text":"<ul> <li>11 ana konu ba\u015fl\u0131\u011f\u0131</li> <li>11+ alt konu</li> <li>1 m\u00fclakat \u00f6rne\u011fi</li> <li>20+ soru</li> <li>System Design</li> <li>Cloud Architecture</li> <li>DevOps Practices</li> <li>Advanced Security</li> <li>Advanced System Design</li> <li>Cloud-Native Architecture</li> <li>Advanced DevOps</li> <li>Performance Engineering</li> <li>Data Engineering</li> <li>Team Leadership</li> </ul>"},{"location":"#one-ckan-ozellikler","title":"\ud83d\ude80 \u00d6ne \u00c7\u0131kan \u00d6zellikler","text":""},{"location":"#kapsaml-icerik","title":"\ud83d\udcda Kapsaml\u0131 \u0130\u00e7erik","text":"<ul> <li>3 Seviye: Junior, Mid-Level, Senior geli\u015ftiriciler i\u00e7in \u00f6zel haz\u0131rlanm\u0131\u015f</li> <li>180+ Alt Konu: Her seviyede detayl\u0131 konu kapsam\u0131</li> <li>G\u00fcncel Teknolojiler: .NET 8, ASP.NET Core, Entity Framework Core</li> </ul>"},{"location":"#pratik-odakl","title":"\ud83d\udcbb Pratik Odakl\u0131","text":"<ul> <li>Kod \u00d6rnekleri: Her konuda C# kod \u00f6rnekleri</li> <li>Ger\u00e7ek Senaryolar: M\u00fclakat \u00f6rnekleri ve pratik sorular</li> <li>Best Practices: En iyi uygulamalar ve \u00f6neriler</li> </ul>"},{"location":"#guvenlik-odakl","title":"\ud83d\udd12 G\u00fcvenlik Odakl\u0131","text":"<ul> <li>Security Basics: Junior seviyede temel g\u00fcvenlik</li> <li>Advanced Security: Mid-Level ve Senior seviyede ileri g\u00fcvenlik</li> <li>Authentication &amp; Authorization: JWT, OAuth 2.0, Identity Management</li> </ul>"},{"location":"#cloud-devops","title":"\u2601\ufe0f Cloud &amp; DevOps","text":"<ul> <li>Containerization: Docker, Kubernetes</li> <li>CI/CD: GitHub Actions, Azure DevOps</li> <li>Cloud Services: Azure, AWS entegrasyonu</li> <li>Infrastructure as Code: Terraform, ARM templates</li> </ul>"},{"location":"#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":"<ul> <li>Distributed Tracing: OpenTelemetry</li> <li>Metrics Collection: Prometheus, Grafana</li> <li>Log Aggregation: ELK Stack, Serilog</li> <li>Health Checks: Application monitoring</li> </ul>"},{"location":"#testing-quality","title":"\ud83e\uddea Testing &amp; Quality","text":"<ul> <li>Unit Testing: xUnit, NUnit</li> <li>Integration Testing: Test containers</li> <li>Performance Testing: NBomber</li> <li>Contract Testing: Pact.NET</li> <li>Property-Based Testing: FsCheck</li> </ul>"},{"location":"#ogrenme-yol-haritas","title":"\ud83c\udf93 \u00d6\u011frenme Yol Haritas\u0131","text":""},{"location":"#junior-developer","title":"\ud83d\udfe2 Junior Developer","text":"<p>Hedef: Temel .NET ve C# kavramlar\u0131n\u0131 \u00f6\u011frenmek - Temel .NET kavramlar\u0131 ve CLR - C# programlama dili temelleri - ASP.NET Core web framework - Veritaban\u0131 i\u015flemleri ve Entity Framework - API geli\u015ftirme ve REST principles - Web development temelleri - Development tools kullan\u0131m\u0131</p>"},{"location":"#mid-level-developer","title":"\ud83d\udfe1 Mid-Level Developer","text":"<p>Hedef: \u0130leri konular ve mimari prensipleri - \u0130leri C# konular\u0131 ve advanced features - Design patterns ve SOLID principles - Clean Architecture ve microservices - Performance optimization ve caching - Security ve authentication - DevOps practices ve deployment - Monitoring ve observability</p>"},{"location":"#senior-developer","title":"\ud83d\udd34 Senior Developer","text":"<p>Hedef: System design ve leadership - Large-scale system design - Cloud-native architecture - Advanced DevOps ve SRE practices - Performance engineering - Data engineering ve analytics - Team leadership ve technical decision making</p>"},{"location":"#iletisim-ve-takip","title":"\ud83e\udd1d \u0130leti\u015fim ve Takip","text":"<ul> <li>GitHub: muratdincc</li> <li>LinkedIn: Murat Din\u00e7</li> <li>Medium: Murat Din\u00e7</li> </ul> <p>Bu projeyi takip etmek ve g\u00fcncellemelerden haberdar olmak i\u00e7in: - \u2b50 GitHub'da star'layabilirsiniz - \ud83d\udc40 Watch'layarak g\u00fcncellemeleri takip edebilirsiniz - \ud83d\udd17 LinkedIn ve Medium \u00fczerinden beni takip edebilirsiniz</p> <p>Sevgiler, Murat Din\u00e7 Microsoft MVP </p>"},{"location":"junior/algorithms/","title":"Algoritmalar","text":""},{"location":"junior/algorithms/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, yaz\u0131l\u0131m geli\u015ftirmede s\u0131k\u00e7a kullan\u0131lan temel algoritmalar\u0131 ve veri yap\u0131lar\u0131n\u0131 inceleyece\u011fiz. Her bir algoritma ve veri yap\u0131s\u0131 i\u00e7in detayl\u0131 a\u00e7\u0131klamalar, C# \u00f6rnekleri ve performans analizleri sunulacakt\u0131r.</p>"},{"location":"junior/algorithms/#temel-algoritmalar","title":"Temel Algoritmalar","text":"<ol> <li>Array Algorithms</li> <li>Dizi i\u015flemleri</li> <li>Arama algoritmalar\u0131</li> <li> <p>S\u0131ralama algoritmalar\u0131</p> </li> <li> <p>String Algorithms</p> </li> <li>String i\u015flemleri</li> <li>Pattern matching</li> <li> <p>Palindrome kontrol\u00fc</p> </li> <li> <p>Number Algorithms</p> </li> <li>Matematiksel algoritmalar</li> <li>Asal say\u0131 kontrol\u00fc</li> <li> <p>GCD hesaplama</p> </li> <li> <p>Dynamic Programming</p> </li> <li>Fibonacci dizisi</li> <li>En uzun artan alt dizi</li> <li> <p>Knapsack problemi</p> </li> <li> <p>Sorting Algorithms</p> </li> <li>Bubble Sort</li> <li>Quick Sort</li> <li>Merge Sort</li> </ol>"},{"location":"junior/algorithms/#veri-yaplar","title":"Veri Yap\u0131lar\u0131","text":"<ol> <li>Linked List Algorithms</li> <li>Tek y\u00f6nl\u00fc ba\u011fl\u0131 liste</li> <li>\u00c7ift y\u00f6nl\u00fc ba\u011fl\u0131 liste</li> <li> <p>Dairesel ba\u011fl\u0131 liste</p> </li> <li> <p>Tree Algorithms</p> </li> <li>Binary Tree</li> <li>Binary Search Tree</li> <li> <p>AVL Tree</p> </li> <li> <p>Hash Table Algorithms</p> </li> <li>Hash fonksiyonlar\u0131</li> <li>\u00c7ak\u0131\u015fma \u00e7\u00f6z\u00fcmleme</li> <li>Performans analizi</li> </ol>"},{"location":"junior/algorithms/#best-practices","title":"Best Practices","text":"<ul> <li>Algoritma se\u00e7imi</li> <li>Karma\u015f\u0131kl\u0131k analizi</li> <li>Bellek kullan\u0131m\u0131</li> <li>Optimizasyon teknikleri</li> </ul>"},{"location":"junior/algorithms/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Algorithms and Data Structures</li> <li>C# Algorithms</li> <li>Big-O Cheat Sheet </li> </ul>"},{"location":"junior/algorithms/array-algorithms/","title":"Array Algorithms","text":""},{"location":"junior/algorithms/array-algorithms/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Dizi algoritmalar\u0131, yaz\u0131l\u0131m geli\u015ftirmede en s\u0131k kullan\u0131lan algoritma t\u00fcrlerinden biridir. Bu b\u00f6l\u00fcmde, diziler \u00fczerinde yap\u0131lan temel i\u015flemleri ve bunlar\u0131n C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/algorithms/array-algorithms/#temel-dizi-islemleri","title":"Temel Dizi \u0130\u015flemleri","text":""},{"location":"junior/algorithms/array-algorithms/#1-en-buyuk-ve-en-kucuk-eleman-bulma","title":"1. En B\u00fcy\u00fck ve En K\u00fc\u00e7\u00fck Eleman Bulma","text":"<pre><code>public class MinMaxFinder\n{\n    public (int min, int max) FindMinMax(int[] array)\n    {\n        if (array == null || array.Length == 0)\n            throw new ArgumentException(\"Dizi bo\u015f olamaz\");\n\n        int min = array[0];\n        int max = array[0];\n\n        for (int i = 1; i &lt; array.Length; i++)\n        {\n            if (array[i] &lt; min)\n                min = array[i];\n            if (array[i] &gt; max)\n                max = array[i];\n        }\n\n        return (min, max);\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/array-algorithms/#2-diziyi-tersine-cevirme","title":"2. Diziyi Tersine \u00c7evirme","text":"<pre><code>public class ArrayReverser\n{\n    public void ReverseArray(int[] array)\n    {\n        if (array == null)\n            throw new ArgumentNullException(nameof(array));\n\n        int start = 0;\n        int end = array.Length - 1;\n\n        while (start &lt; end)\n        {\n            int temp = array[start];\n            array[start] = array[end];\n            array[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/array-algorithms/#3-eksik-sayy-bulma","title":"3. Eksik Say\u0131y\u0131 Bulma","text":"<pre><code>public class MissingNumberFinder\n{\n    public int FindMissingNumber(int[] array)\n    {\n        if (array == null)\n            throw new ArgumentNullException(nameof(array));\n\n        int n = array.Length + 1;\n        int expectedSum = n * (n + 1) / 2;\n        int actualSum = array.Sum();\n\n        return expectedSum - actualSum;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/array-algorithms/#arama-algoritmalar","title":"Arama Algoritmalar\u0131","text":""},{"location":"junior/algorithms/array-algorithms/#1-linear-search","title":"1. Linear Search","text":"<pre><code>public class LinearSearch\n{\n    public int Search(int[] array, int target)\n    {\n        for (int i = 0; i &lt; array.Length; i++)\n        {\n            if (array[i] == target)\n                return i;\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/array-algorithms/#2-binary-search","title":"2. Binary Search","text":"<pre><code>public class BinarySearch\n{\n    public int Search(int[] array, int target)\n    {\n        int left = 0;\n        int right = array.Length - 1;\n\n        while (left &lt;= right)\n        {\n            int mid = left + (right - left) / 2;\n\n            if (array[mid] == target)\n                return mid;\n\n            if (array[mid] &lt; target)\n                left = mid + 1;\n            else\n                right = mid - 1;\n        }\n\n        return -1;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/array-algorithms/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Linear Search O(1) O(n) O(n) O(1) Binary Search O(1) O(log n) O(log n) O(1) Min/Max Bulma O(n) O(n) O(n) O(1) Tersine \u00c7evirme O(n) O(n) O(n) O(1)"},{"location":"junior/algorithms/array-algorithms/#best-practices","title":"Best Practices","text":"<ol> <li>Dizi s\u0131n\u0131rlar\u0131n\u0131 kontrol et</li> <li>Null kontrol\u00fc yap</li> <li>Gereksiz d\u00f6ng\u00fclerden ka\u00e7\u0131n</li> <li>Bellek kullan\u0131m\u0131n\u0131 optimize et</li> <li>Hata durumlar\u0131n\u0131 y\u00f6net</li> </ol>"},{"location":"junior/algorithms/array-algorithms/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>Dizi s\u0131ralama</li> <li>Dizi filtreleme</li> <li>Dizi birle\u015ftirme</li> <li>Dizi kar\u015f\u0131la\u015ft\u0131rma</li> <li>Dizi d\u00f6n\u00fc\u015ft\u00fcrme</li> </ol>"},{"location":"junior/algorithms/array-algorithms/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Array Class Documentation</li> <li>C# Arrays Tutorial</li> <li>Array Algorithms in C# </li> </ul>"},{"location":"junior/algorithms/dynamic-programming/","title":"Dynamic Programming","text":""},{"location":"junior/algorithms/dynamic-programming/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Dinamik programlama, karma\u015f\u0131k problemleri daha k\u00fc\u00e7\u00fck alt problemlere b\u00f6lerek \u00e7\u00f6zen bir algoritma tasar\u0131m tekni\u011fidir. Bu b\u00f6l\u00fcmde, dinamik programlama yakla\u015f\u0131m\u0131n\u0131 ve C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/algorithms/dynamic-programming/#temel-dinamik-programlama-algoritmalar","title":"Temel Dinamik Programlama Algoritmalar\u0131","text":""},{"location":"junior/algorithms/dynamic-programming/#1-fibonacci-saylar","title":"1. Fibonacci Say\u0131lar\u0131","text":"<pre><code>public class FibonacciDP\n{\n    public int CalculateFibonacci(int n)\n    {\n        if (n &lt;= 1)\n            return n;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n\n        for (int i = 2; i &lt;= n; i++)\n        {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/dynamic-programming/#2-en-uzun-artan-alt-dizi","title":"2. En Uzun Artan Alt Dizi","text":"<pre><code>public class LongestIncreasingSubsequence\n{\n    public int FindLIS(int[] nums)\n    {\n        if (nums == null || nums.Length == 0)\n            return 0;\n\n        int[] dp = new int[nums.Length];\n        Array.Fill(dp, 1);\n\n        for (int i = 1; i &lt; nums.Length; i++)\n        {\n            for (int j = 0; j &lt; i; j++)\n            {\n                if (nums[i] &gt; nums[j])\n                {\n                    dp[i] = Math.Max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n\n        return dp.Max();\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/dynamic-programming/#3-0-1-knapsack-problemi","title":"3. 0-1 Knapsack Problemi","text":"<pre><code>public class Knapsack\n{\n    public int MaxValue(int[] weights, int[] values, int capacity)\n    {\n        int n = weights.Length;\n        int[,] dp = new int[n + 1, capacity + 1];\n\n        for (int i = 1; i &lt;= n; i++)\n        {\n            for (int w = 1; w &lt;= capacity; w++)\n            {\n                if (weights[i - 1] &lt;= w)\n                {\n                    dp[i, w] = Math.Max(\n                        values[i - 1] + dp[i - 1, w - weights[i - 1]],\n                        dp[i - 1, w]\n                    );\n                }\n                else\n                {\n                    dp[i, w] = dp[i - 1, w];\n                }\n            }\n        }\n\n        return dp[n, capacity];\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/dynamic-programming/#dinamik-programlama-teknikleri","title":"Dinamik Programlama Teknikleri","text":""},{"location":"junior/algorithms/dynamic-programming/#1-memoization","title":"1. Memoization","text":"<pre><code>public class MemoizationExample\n{\n    private Dictionary&lt;int, int&gt; memo = new Dictionary&lt;int, int&gt;();\n\n    public int Calculate(int n)\n    {\n        if (memo.ContainsKey(n))\n            return memo[n];\n\n        int result;\n        if (n &lt;= 1)\n            result = n;\n        else\n            result = Calculate(n - 1) + Calculate(n - 2);\n\n        memo[n] = result;\n        return result;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/dynamic-programming/#2-tabulation","title":"2. Tabulation","text":"<pre><code>public class TabulationExample\n{\n    public int Calculate(int n)\n    {\n        int[] table = new int[n + 1];\n        table[0] = 0;\n        table[1] = 1;\n\n        for (int i = 2; i &lt;= n; i++)\n        {\n            table[i] = table[i - 1] + table[i - 2];\n        }\n\n        return table[n];\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/dynamic-programming/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Fibonacci O(n) O(n) O(n) O(n) LIS O(n\u00b2) O(n\u00b2) O(n\u00b2) O(n) Knapsack O(nW) O(nW) O(nW) O(nW)"},{"location":"junior/algorithms/dynamic-programming/#best-practices","title":"Best Practices","text":"<ol> <li>Alt problemleri tan\u0131mla</li> <li>\u00d6zyinelemeli form\u00fcl\u00fc bul</li> <li>Tablo boyutunu optimize et</li> <li>Bellek kullan\u0131m\u0131n\u0131 dikkate al</li> <li>Hata durumlar\u0131n\u0131 y\u00f6net</li> </ol>"},{"location":"junior/algorithms/dynamic-programming/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>En k\u0131sa yol problemleri</li> <li>En uzun ortak alt dizi</li> <li>Para \u00fcst\u00fc verme</li> <li>Matris \u00e7arp\u0131m\u0131</li> <li>Dizi b\u00f6lme</li> </ol>"},{"location":"junior/algorithms/dynamic-programming/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Dynamic Programming Tutorial</li> <li>C# Dynamic Programming Examples</li> <li>Dynamic Programming Patterns </li> </ul>"},{"location":"junior/algorithms/hash-table-algorithms/","title":"Hash Table Algorithms","text":""},{"location":"junior/algorithms/hash-table-algorithms/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Hash Table algoritmalar\u0131, veri yap\u0131lar\u0131nda h\u0131zl\u0131 eri\u015fim ve depolama i\u00e7in kullan\u0131lan temel algoritmalard\u0131r. Bu b\u00f6l\u00fcmde, hash tablosu i\u015flemleri i\u00e7in kullan\u0131lan temel algoritmalar\u0131 ve bunlar\u0131n C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/algorithms/hash-table-algorithms/#temel-hash-table-islemleri","title":"Temel Hash Table \u0130\u015flemleri","text":""},{"location":"junior/algorithms/hash-table-algorithms/#1-hash-fonksiyonu","title":"1. Hash Fonksiyonu","text":"<pre><code>public class HashFunction\n{\n    public int GetHash(string key, int tableSize)\n    {\n        int hash = 0;\n        foreach (char c in key)\n        {\n            hash = (hash * 31 + c) % tableSize;\n        }\n        return hash;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/hash-table-algorithms/#2-hash-table-olusturma","title":"2. Hash Table Olu\u015fturma","text":"<pre><code>public class HashTable&lt;TKey, TValue&gt;\n{\n    private class HashNode\n    {\n        public TKey Key { get; set; }\n        public TValue Value { get; set; }\n        public HashNode Next { get; set; }\n\n        public HashNode(TKey key, TValue value)\n        {\n            Key = key;\n            Value = value;\n            Next = null;\n        }\n    }\n\n    private HashNode[] buckets;\n    private int size;\n    private readonly int capacity;\n\n    public HashTable(int capacity = 16)\n    {\n        this.capacity = capacity;\n        buckets = new HashNode[capacity];\n        size = 0;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/hash-table-algorithms/#3-ekleme-ve-arama","title":"3. Ekleme ve Arama","text":"<pre><code>public class HashTable&lt;TKey, TValue&gt;\n{\n    // ... \u00f6nceki kod ...\n\n    public void Add(TKey key, TValue value)\n    {\n        int index = GetBucketIndex(key);\n        HashNode head = buckets[index];\n\n        while (head != null)\n        {\n            if (head.Key.Equals(key))\n            {\n                head.Value = value;\n                return;\n            }\n            head = head.Next;\n        }\n\n        HashNode newNode = new HashNode(key, value);\n        newNode.Next = buckets[index];\n        buckets[index] = newNode;\n        size++;\n    }\n\n    public TValue Get(TKey key)\n    {\n        int index = GetBucketIndex(key);\n        HashNode head = buckets[index];\n\n        while (head != null)\n        {\n            if (head.Key.Equals(key))\n                return head.Value;\n            head = head.Next;\n        }\n\n        throw new KeyNotFoundException();\n    }\n\n    private int GetBucketIndex(TKey key)\n    {\n        return Math.Abs(key.GetHashCode() % capacity);\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/hash-table-algorithms/#ileri-hash-table-algoritmalar","title":"\u0130leri Hash Table Algoritmalar\u0131","text":""},{"location":"junior/algorithms/hash-table-algorithms/#1-caksma-cozumleme-chaining","title":"1. \u00c7ak\u0131\u015fma \u00c7\u00f6z\u00fcmleme (Chaining)","text":"<pre><code>public class HashTableWithChaining&lt;TKey, TValue&gt;\n{\n    private List&lt;HashNode&gt;[] buckets;\n    private int size;\n    private readonly int capacity;\n\n    public HashTableWithChaining(int capacity = 16)\n    {\n        this.capacity = capacity;\n        buckets = new List&lt;HashNode&gt;[capacity];\n        for (int i = 0; i &lt; capacity; i++)\n        {\n            buckets[i] = new List&lt;HashNode&gt;();\n        }\n        size = 0;\n    }\n\n    public void Add(TKey key, TValue value)\n    {\n        int index = GetBucketIndex(key);\n        var bucket = buckets[index];\n\n        foreach (var node in bucket)\n        {\n            if (node.Key.Equals(key))\n            {\n                node.Value = value;\n                return;\n            }\n        }\n\n        bucket.Add(new HashNode(key, value));\n        size++;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/hash-table-algorithms/#2-ack-adresleme-open-addressing","title":"2. A\u00e7\u0131k Adresleme (Open Addressing)","text":"<pre><code>public class HashTableWithOpenAddressing&lt;TKey, TValue&gt;\n{\n    private class HashEntry\n    {\n        public TKey Key { get; set; }\n        public TValue Value { get; set; }\n        public bool IsDeleted { get; set; }\n\n        public HashEntry(TKey key, TValue value)\n        {\n            Key = key;\n            Value = value;\n            IsDeleted = false;\n        }\n    }\n\n    private HashEntry[] table;\n    private int size;\n    private readonly int capacity;\n\n    public HashTableWithOpenAddressing(int capacity = 16)\n    {\n        this.capacity = capacity;\n        table = new HashEntry[capacity];\n        size = 0;\n    }\n\n    public void Add(TKey key, TValue value)\n    {\n        int index = GetBucketIndex(key);\n        int startIndex = index;\n\n        do\n        {\n            if (table[index] == null || table[index].IsDeleted)\n            {\n                table[index] = new HashEntry(key, value);\n                size++;\n                return;\n            }\n\n            if (table[index].Key.Equals(key))\n            {\n                table[index].Value = value;\n                return;\n            }\n\n            index = (index + 1) % capacity;\n        } while (index != startIndex);\n\n        throw new InvalidOperationException(\"Hash table is full\");\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/hash-table-algorithms/#3-dinamik-yeniden-boyutlandrma","title":"3. Dinamik Yeniden Boyutland\u0131rma","text":"<pre><code>public class HashTable&lt;TKey, TValue&gt;\n{\n    // ... \u00f6nceki kod ...\n\n    private void Resize()\n    {\n        int newCapacity = capacity * 2;\n        HashNode[] newBuckets = new HashNode[newCapacity];\n\n        foreach (var bucket in buckets)\n        {\n            HashNode current = bucket;\n            while (current != null)\n            {\n                int newIndex = Math.Abs(current.Key.GetHashCode() % newCapacity);\n                HashNode next = current.Next;\n                current.Next = newBuckets[newIndex];\n                newBuckets[newIndex] = current;\n                current = next;\n            }\n        }\n\n        buckets = newBuckets;\n        capacity = newCapacity;\n    }\n\n    public void Add(TKey key, TValue value)\n    {\n        if (size &gt;= capacity * 0.75)\n        {\n            Resize();\n        }\n        // ... mevcut ekleme kodu ...\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/hash-table-algorithms/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Ekleme O(1) O(1) O(n) O(n) Arama O(1) O(1) O(n) O(n) Silme O(1) O(1) O(n) O(n) Yeniden Boyutland\u0131rma O(n) O(n) O(n) O(n)"},{"location":"junior/algorithms/hash-table-algorithms/#best-practices","title":"Best Practices","text":"<ol> <li>\u0130yi bir hash fonksiyonu se\u00e7</li> <li>\u00c7ak\u0131\u015fma \u00e7\u00f6z\u00fcmleme stratejisini dikkatli se\u00e7</li> <li>Y\u00fck fakt\u00f6r\u00fcn\u00fc kontrol et</li> <li>Bellek kullan\u0131m\u0131n\u0131 optimize et</li> <li>Hata durumlar\u0131n\u0131 y\u00f6net</li> </ol>"},{"location":"junior/algorithms/hash-table-algorithms/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>S\u00f6zl\u00fck uygulamalar\u0131</li> <li>\u00d6nbellek sistemleri</li> <li>Veri indeksleme</li> <li>Veri filtreleme</li> <li>Sistem tasar\u0131m\u0131</li> </ol>"},{"location":"junior/algorithms/hash-table-algorithms/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Hash Table in C#</li> <li>C# Dictionary</li> <li>Data Structures and Algorithms </li> </ul>"},{"location":"junior/algorithms/linked-list-algorithms/","title":"Linked List Algorithms","text":""},{"location":"junior/algorithms/linked-list-algorithms/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Ba\u011fl\u0131 liste algoritmalar\u0131, veri yap\u0131lar\u0131nda s\u0131ral\u0131 veri depolamak i\u00e7in kullan\u0131lan temel algoritmalard\u0131r. Bu b\u00f6l\u00fcmde, ba\u011fl\u0131 liste i\u015flemleri i\u00e7in kullan\u0131lan temel algoritmalar\u0131 ve bunlar\u0131n C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/algorithms/linked-list-algorithms/#temel-bagl-liste-islemleri","title":"Temel Ba\u011fl\u0131 Liste \u0130\u015flemleri","text":""},{"location":"junior/algorithms/linked-list-algorithms/#1-bagl-liste-dugumu","title":"1. Ba\u011fl\u0131 Liste D\u00fc\u011f\u00fcm\u00fc","text":"<pre><code>public class ListNode\n{\n    public int Value { get; set; }\n    public ListNode Next { get; set; }\n\n    public ListNode(int value)\n    {\n        Value = value;\n        Next = null;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/linked-list-algorithms/#2-bagl-liste-tersine-cevirme","title":"2. Ba\u011fl\u0131 Liste Tersine \u00c7evirme","text":"<pre><code>public class LinkedListReverser\n{\n    public ListNode ReverseList(ListNode head)\n    {\n        ListNode prev = null;\n        ListNode current = head;\n        ListNode next = null;\n\n        while (current != null)\n        {\n            next = current.Next;\n            current.Next = prev;\n            prev = current;\n            current = next;\n        }\n\n        return prev;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/linked-list-algorithms/#3-bagl-liste-birlestirme","title":"3. Ba\u011fl\u0131 Liste Birle\u015ftirme","text":"<pre><code>public class LinkedListMerger\n{\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2)\n    {\n        ListNode dummy = new ListNode(0);\n        ListNode current = dummy;\n\n        while (l1 != null &amp;&amp; l2 != null)\n        {\n            if (l1.Value &lt;= l2.Value)\n            {\n                current.Next = l1;\n                l1 = l1.Next;\n            }\n            else\n            {\n                current.Next = l2;\n                l2 = l2.Next;\n            }\n            current = current.Next;\n        }\n\n        current.Next = l1 ?? l2;\n        return dummy.Next;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/linked-list-algorithms/#ileri-bagl-liste-algoritmalar","title":"\u0130leri Ba\u011fl\u0131 Liste Algoritmalar\u0131","text":""},{"location":"junior/algorithms/linked-list-algorithms/#1-dongu-tespiti","title":"1. D\u00f6ng\u00fc Tespiti","text":"<pre><code>public class CycleDetector\n{\n    public bool HasCycle(ListNode head)\n    {\n        if (head == null || head.Next == null)\n            return false;\n\n        ListNode slow = head;\n        ListNode fast = head.Next;\n\n        while (slow != fast)\n        {\n            if (fast == null || fast.Next == null)\n                return false;\n\n            slow = slow.Next;\n            fast = fast.Next.Next;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/linked-list-algorithms/#2-ortadaki-dugumu-bulma","title":"2. Ortadaki D\u00fc\u011f\u00fcm\u00fc Bulma","text":"<pre><code>public class MiddleNodeFinder\n{\n    public ListNode FindMiddle(ListNode head)\n    {\n        ListNode slow = head;\n        ListNode fast = head;\n\n        while (fast != null &amp;&amp; fast.Next != null)\n        {\n            slow = slow.Next;\n            fast = fast.Next.Next;\n        }\n\n        return slow;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/linked-list-algorithms/#3-knc-dugumu-silme","title":"3. K'\u0131nc\u0131 D\u00fc\u011f\u00fcm\u00fc Silme","text":"<pre><code>public class KthNodeRemover\n{\n    public ListNode RemoveNthFromEnd(ListNode head, int n)\n    {\n        ListNode dummy = new ListNode(0);\n        dummy.Next = head;\n        ListNode first = dummy;\n        ListNode second = dummy;\n\n        for (int i = 1; i &lt;= n + 1; i++)\n        {\n            first = first.Next;\n        }\n\n        while (first != null)\n        {\n            first = first.Next;\n            second = second.Next;\n        }\n\n        second.Next = second.Next.Next;\n        return dummy.Next;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/linked-list-algorithms/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Tersine \u00c7evirme O(n) O(n) O(n) O(1) Birle\u015ftirme O(n) O(n) O(n) O(1) D\u00f6ng\u00fc Tespiti O(n) O(n) O(n) O(1) Ortadaki D\u00fc\u011f\u00fcm O(n) O(n) O(n) O(1)"},{"location":"junior/algorithms/linked-list-algorithms/#best-practices","title":"Best Practices","text":"<ol> <li>Null kontrollerini yap</li> <li>Bellek s\u0131z\u0131nt\u0131lar\u0131n\u0131 \u00f6nle</li> <li>D\u00f6ng\u00fcsel referanslar\u0131 kontrol et</li> <li>Performans\u0131 optimize et</li> <li>Hata durumlar\u0131n\u0131 y\u00f6net</li> </ol>"},{"location":"junior/algorithms/linked-list-algorithms/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>Veri yap\u0131s\u0131 implementasyonu</li> <li>Algoritma optimizasyonu</li> <li>Bellek y\u00f6netimi</li> <li>Veri i\u015fleme</li> <li>Sistem tasar\u0131m\u0131</li> </ol>"},{"location":"junior/algorithms/linked-list-algorithms/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Linked List in C#</li> <li>C# Collections</li> <li>Data Structures and Algorithms </li> </ul>"},{"location":"junior/algorithms/sorting-algorithms/","title":"Sorting Algorithms","text":""},{"location":"junior/algorithms/sorting-algorithms/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>S\u0131ralama algoritmalar\u0131, veri yap\u0131lar\u0131n\u0131 belirli bir d\u00fczene g\u00f6re s\u0131ralamak i\u00e7in kullan\u0131lan temel algoritmalard\u0131r. Bu b\u00f6l\u00fcmde, yayg\u0131n s\u0131ralama algoritmalar\u0131n\u0131 ve bunlar\u0131n C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/algorithms/sorting-algorithms/#temel-sralama-algoritmalar","title":"Temel S\u0131ralama Algoritmalar\u0131","text":""},{"location":"junior/algorithms/sorting-algorithms/#1-bubble-sort","title":"1. Bubble Sort","text":"<pre><code>public class BubbleSort\n{\n    public void Sort(int[] array)\n    {\n        int n = array.Length;\n        for (int i = 0; i &lt; n - 1; i++)\n        {\n            for (int j = 0; j &lt; n - i - 1; j++)\n            {\n                if (array[j] &gt; array[j + 1])\n                {\n                    int temp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = temp;\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/sorting-algorithms/#2-quick-sort","title":"2. Quick Sort","text":"<pre><code>public class QuickSort\n{\n    public void Sort(int[] array)\n    {\n        Sort(array, 0, array.Length - 1);\n    }\n\n    private void Sort(int[] array, int low, int high)\n    {\n        if (low &lt; high)\n        {\n            int pi = Partition(array, low, high);\n            Sort(array, low, pi - 1);\n            Sort(array, pi + 1, high);\n        }\n    }\n\n    private int Partition(int[] array, int low, int high)\n    {\n        int pivot = array[high];\n        int i = low - 1;\n\n        for (int j = low; j &lt; high; j++)\n        {\n            if (array[j] &lt; pivot)\n            {\n                i++;\n                int temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n\n        int temp1 = array[i + 1];\n        array[i + 1] = array[high];\n        array[high] = temp1;\n\n        return i + 1;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/sorting-algorithms/#3-merge-sort","title":"3. Merge Sort","text":"<pre><code>public class MergeSort\n{\n    public void Sort(int[] array)\n    {\n        Sort(array, 0, array.Length - 1);\n    }\n\n    private void Sort(int[] array, int left, int right)\n    {\n        if (left &lt; right)\n        {\n            int mid = left + (right - left) / 2;\n            Sort(array, left, mid);\n            Sort(array, mid + 1, right);\n            Merge(array, left, mid, right);\n        }\n    }\n\n    private void Merge(int[] array, int left, int mid, int right)\n    {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n\n        Array.Copy(array, left, L, 0, n1);\n        Array.Copy(array, mid + 1, R, 0, n2);\n\n        int i = 0, j = 0;\n        int k = left;\n\n        while (i &lt; n1 &amp;&amp; j &lt; n2)\n        {\n            if (L[i] &lt;= R[j])\n            {\n                array[k] = L[i];\n                i++;\n            }\n            else\n            {\n                array[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        while (i &lt; n1)\n        {\n            array[k] = L[i];\n            i++;\n            k++;\n        }\n\n        while (j &lt; n2)\n        {\n            array[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/sorting-algorithms/#ileri-sralama-algoritmalar","title":"\u0130leri S\u0131ralama Algoritmalar\u0131","text":""},{"location":"junior/algorithms/sorting-algorithms/#1-heap-sort","title":"1. Heap Sort","text":"<pre><code>public class HeapSort\n{\n    public void Sort(int[] array)\n    {\n        int n = array.Length;\n\n        for (int i = n / 2 - 1; i &gt;= 0; i--)\n            Heapify(array, n, i);\n\n        for (int i = n - 1; i &gt; 0; i--)\n        {\n            int temp = array[0];\n            array[0] = array[i];\n            array[i] = temp;\n\n            Heapify(array, i, 0);\n        }\n    }\n\n    private void Heapify(int[] array, int n, int i)\n    {\n        int largest = i;\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n\n        if (left &lt; n &amp;&amp; array[left] &gt; array[largest])\n            largest = left;\n\n        if (right &lt; n &amp;&amp; array[right] &gt; array[largest])\n            largest = right;\n\n        if (largest != i)\n        {\n            int swap = array[i];\n            array[i] = array[largest];\n            array[largest] = swap;\n\n            Heapify(array, n, largest);\n        }\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/sorting-algorithms/#2-counting-sort","title":"2. Counting Sort","text":"<pre><code>public class CountingSort\n{\n    public void Sort(int[] array)\n    {\n        int max = array.Max();\n        int min = array.Min();\n        int range = max - min + 1;\n\n        int[] count = new int[range];\n        int[] output = new int[array.Length];\n\n        for (int i = 0; i &lt; array.Length; i++)\n            count[array[i] - min]++;\n\n        for (int i = 1; i &lt; count.Length; i++)\n            count[i] += count[i - 1];\n\n        for (int i = array.Length - 1; i &gt;= 0; i--)\n        {\n            output[count[array[i] - min] - 1] = array[i];\n            count[array[i] - min]--;\n        }\n\n        Array.Copy(output, array, array.Length);\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/sorting-algorithms/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Bubble Sort O(n) O(n\u00b2) O(n\u00b2) O(1) Quick Sort O(n log n) O(n log n) O(n\u00b2) O(log n) Merge Sort O(n log n) O(n log n) O(n log n) O(n) Heap Sort O(n log n) O(n log n) O(n log n) O(1) Counting Sort O(n + k) O(n + k) O(n + k) O(n + k)"},{"location":"junior/algorithms/sorting-algorithms/#best-practices","title":"Best Practices","text":"<ol> <li>Veri boyutunu dikkate al</li> <li>Veri tipini g\u00f6z \u00f6n\u00fcnde bulundur</li> <li>Bellek kullan\u0131m\u0131n\u0131 optimize et</li> <li>Kararl\u0131l\u0131k gereksinimlerini de\u011ferlendir</li> <li>Hata durumlar\u0131n\u0131 y\u00f6net</li> </ol>"},{"location":"junior/algorithms/sorting-algorithms/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>B\u00fcy\u00fck veri setleri</li> <li>K\u0131smi s\u0131ral\u0131 veriler</li> <li>Tekrar eden elemanlar</li> <li>Karma veri tipleri</li> <li>\u00d6zel s\u0131ralama kriterleri</li> </ol>"},{"location":"junior/algorithms/sorting-algorithms/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Sorting Algorithms in C#</li> <li>C# Array.Sort</li> <li>Sorting Algorithm Comparison </li> </ul>"},{"location":"junior/algorithms/string-algorithms/","title":"String Algorithms","text":""},{"location":"junior/algorithms/string-algorithms/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>String algoritmalar\u0131, metin i\u015fleme ve metin arama gibi i\u015flemlerde kullan\u0131lan temel algoritmalard\u0131r. Bu b\u00f6l\u00fcmde, string i\u015flemleri i\u00e7in kullan\u0131lan temel algoritmalar\u0131 ve bunlar\u0131n C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/algorithms/string-algorithms/#temel-string-islemleri","title":"Temel String \u0130\u015flemleri","text":""},{"location":"junior/algorithms/string-algorithms/#1-palindrome-kontrolu","title":"1. Palindrome Kontrol\u00fc","text":"<pre><code>public class PalindromeChecker\n{\n    public bool IsPalindrome(string text)\n    {\n        if (string.IsNullOrEmpty(text))\n            return true;\n\n        int left = 0;\n        int right = text.Length - 1;\n\n        while (left &lt; right)\n        {\n            if (char.ToLower(text[left]) != char.ToLower(text[right]))\n                return false;\n\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/string-algorithms/#2-anagram-kontrolu","title":"2. Anagram Kontrol\u00fc","text":"<pre><code>public class AnagramChecker\n{\n    public bool AreAnagrams(string s1, string s2)\n    {\n        if (s1.Length != s2.Length)\n            return false;\n\n        var charCount = new int[256];\n\n        foreach (char c in s1)\n            charCount[c]++;\n\n        foreach (char c in s2)\n        {\n            charCount[c]--;\n            if (charCount[c] &lt; 0)\n                return false;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/string-algorithms/#3-en-uzun-palindromik-alt-string","title":"3. En Uzun Palindromik Alt String","text":"<pre><code>public class LongestPalindromicSubstringFinder\n{\n    public string FindLongestPalindrome(string s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return string.Empty;\n\n        int start = 0;\n        int maxLength = 1;\n\n        for (int i = 0; i &lt; s.Length; i++)\n        {\n            int len1 = ExpandAroundCenter(s, i, i);\n            int len2 = ExpandAroundCenter(s, i, i + 1);\n            int len = Math.Max(len1, len2);\n\n            if (len &gt; maxLength)\n            {\n                start = i - (len - 1) / 2;\n                maxLength = len;\n            }\n        }\n\n        return s.Substring(start, maxLength);\n    }\n\n    private int ExpandAroundCenter(string s, int left, int right)\n    {\n        while (left &gt;= 0 &amp;&amp; right &lt; s.Length &amp;&amp; s[left] == s[right])\n        {\n            left--;\n            right++;\n        }\n        return right - left - 1;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/string-algorithms/#string-arama-algoritmalar","title":"String Arama Algoritmalar\u0131","text":""},{"location":"junior/algorithms/string-algorithms/#1-naive-string-search","title":"1. Naive String Search","text":"<pre><code>public class NaiveStringSearch\n{\n    public List&lt;int&gt; Search(string text, string pattern)\n    {\n        var positions = new List&lt;int&gt;();\n        int n = text.Length;\n        int m = pattern.Length;\n\n        for (int i = 0; i &lt;= n - m; i++)\n        {\n            int j;\n            for (j = 0; j &lt; m; j++)\n            {\n                if (text[i + j] != pattern[j])\n                    break;\n            }\n\n            if (j == m)\n                positions.Add(i);\n        }\n\n        return positions;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/string-algorithms/#2-kmp-algorithm","title":"2. KMP Algorithm","text":"<pre><code>public class KMPSearch\n{\n    public List&lt;int&gt; Search(string text, string pattern)\n    {\n        var positions = new List&lt;int&gt;();\n        int[] lps = ComputeLPSArray(pattern);\n        int i = 0;\n        int j = 0;\n\n        while (i &lt; text.Length)\n        {\n            if (pattern[j] == text[i])\n            {\n                i++;\n                j++;\n            }\n\n            if (j == pattern.Length)\n            {\n                positions.Add(i - j);\n                j = lps[j - 1];\n            }\n            else if (i &lt; text.Length &amp;&amp; pattern[j] != text[i])\n            {\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i++;\n            }\n        }\n\n        return positions;\n    }\n\n    private int[] ComputeLPSArray(string pattern)\n    {\n        int[] lps = new int[pattern.Length];\n        int len = 0;\n        int i = 1;\n\n        while (i &lt; pattern.Length)\n        {\n            if (pattern[i] == pattern[len])\n            {\n                len++;\n                lps[i] = len;\n                i++;\n            }\n            else\n            {\n                if (len != 0)\n                    len = lps[len - 1];\n                else\n                {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n\n        return lps;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/string-algorithms/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Naive Search O(n) O(n*m) O(n*m) O(1) KMP O(n) O(n) O(n) O(m) Palindrome O(n) O(n) O(n) O(1) Anagram O(n) O(n) O(n) O(1)"},{"location":"junior/algorithms/string-algorithms/#best-practices","title":"Best Practices","text":"<ol> <li>String null kontrol\u00fc yap</li> <li>B\u00fcy\u00fck/k\u00fc\u00e7\u00fck harf duyarl\u0131l\u0131\u011f\u0131n\u0131 dikkate al</li> <li>Unicode karakterleri dikkate al</li> <li>String immutability'yi g\u00f6z \u00f6n\u00fcnde bulundur</li> <li>StringBuilder kullan\u0131m\u0131n\u0131 de\u011ferlendir</li> </ol>"},{"location":"junior/algorithms/string-algorithms/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>Metin arama</li> <li>Metin de\u011fi\u015ftirme</li> <li>Metin kar\u015f\u0131la\u015ft\u0131rma</li> <li>Metin s\u0131k\u0131\u015ft\u0131rma</li> <li>Metin \u015fifreleme</li> </ol>"},{"location":"junior/algorithms/string-algorithms/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>String Class Documentation</li> <li>C# String Tutorial</li> <li>String Algorithms in C# </li> </ul>"},{"location":"junior/algorithms/tree-algorithms/","title":"Tree Algorithms","text":""},{"location":"junior/algorithms/tree-algorithms/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>A\u011fa\u00e7 algoritmalar\u0131, hiyerar\u015fik veri yap\u0131lar\u0131n\u0131 i\u015flemek i\u00e7in kullan\u0131lan temel algoritmalard\u0131r. Bu b\u00f6l\u00fcmde, a\u011fa\u00e7 veri yap\u0131lar\u0131 ve bunlar\u0131n C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/algorithms/tree-algorithms/#temel-agac-islemleri","title":"Temel A\u011fa\u00e7 \u0130\u015flemleri","text":""},{"location":"junior/algorithms/tree-algorithms/#1-agac-dugumu","title":"1. A\u011fa\u00e7 D\u00fc\u011f\u00fcm\u00fc","text":"<pre><code>public class TreeNode\n{\n    public int Value { get; set; }\n    public TreeNode Left { get; set; }\n    public TreeNode Right { get; set; }\n\n    public TreeNode(int value)\n    {\n        Value = value;\n        Left = null;\n        Right = null;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/tree-algorithms/#2-agac-yuksekligi","title":"2. A\u011fa\u00e7 Y\u00fcksekli\u011fi","text":"<pre><code>public class TreeHeightCalculator\n{\n    public int CalculateHeight(TreeNode root)\n    {\n        if (root == null)\n            return 0;\n\n        int leftHeight = CalculateHeight(root.Left);\n        int rightHeight = CalculateHeight(root.Right);\n\n        return Math.Max(leftHeight, rightHeight) + 1;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/tree-algorithms/#3-agac-gezinme","title":"3. A\u011fa\u00e7 Gezinme","text":"<pre><code>public class TreeTraversal\n{\n    // Pre-order traversal\n    public void PreOrder(TreeNode root)\n    {\n        if (root == null)\n            return;\n\n        Console.Write(root.Value + \" \");\n        PreOrder(root.Left);\n        PreOrder(root.Right);\n    }\n\n    // In-order traversal\n    public void InOrder(TreeNode root)\n    {\n        if (root == null)\n            return;\n\n        InOrder(root.Left);\n        Console.Write(root.Value + \" \");\n        InOrder(root.Right);\n    }\n\n    // Post-order traversal\n    public void PostOrder(TreeNode root)\n    {\n        if (root == null)\n            return;\n\n        PostOrder(root.Left);\n        PostOrder(root.Right);\n        Console.Write(root.Value + \" \");\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/tree-algorithms/#ileri-agac-algoritmalar","title":"\u0130leri A\u011fa\u00e7 Algoritmalar\u0131","text":""},{"location":"junior/algorithms/tree-algorithms/#1-binary-search-tree","title":"1. Binary Search Tree","text":"<pre><code>public class BinarySearchTree\n{\n    public TreeNode Insert(TreeNode root, int value)\n    {\n        if (root == null)\n            return new TreeNode(value);\n\n        if (value &lt; root.Value)\n            root.Left = Insert(root.Left, value);\n        else if (value &gt; root.Value)\n            root.Right = Insert(root.Right, value);\n\n        return root;\n    }\n\n    public TreeNode Search(TreeNode root, int value)\n    {\n        if (root == null || root.Value == value)\n            return root;\n\n        if (value &lt; root.Value)\n            return Search(root.Left, value);\n\n        return Search(root.Right, value);\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/tree-algorithms/#2-agac-dengeleme","title":"2. A\u011fa\u00e7 Dengeleme","text":"<pre><code>public class TreeBalancer\n{\n    public bool IsBalanced(TreeNode root)\n    {\n        return CheckHeight(root) != -1;\n    }\n\n    private int CheckHeight(TreeNode root)\n    {\n        if (root == null)\n            return 0;\n\n        int leftHeight = CheckHeight(root.Left);\n        if (leftHeight == -1)\n            return -1;\n\n        int rightHeight = CheckHeight(root.Right);\n        if (rightHeight == -1)\n            return -1;\n\n        if (Math.Abs(leftHeight - rightHeight) &gt; 1)\n            return -1;\n\n        return Math.Max(leftHeight, rightHeight) + 1;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/tree-algorithms/#3-en-dusuk-ortak-ata","title":"3. En D\u00fc\u015f\u00fck Ortak Ata","text":"<pre><code>public class LowestCommonAncestor\n{\n    public TreeNode FindLCA(TreeNode root, TreeNode p, TreeNode q)\n    {\n        if (root == null || root == p || root == q)\n            return root;\n\n        TreeNode left = FindLCA(root.Left, p, q);\n        TreeNode right = FindLCA(root.Right, p, q);\n\n        if (left != null &amp;&amp; right != null)\n            return root;\n\n        return left ?? right;\n    }\n}\n</code></pre>"},{"location":"junior/algorithms/tree-algorithms/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Y\u00fckseklik O(n) O(n) O(n) O(h) Gezinme O(n) O(n) O(n) O(h) BST Arama O(log n) O(log n) O(n) O(h) BST Ekleme O(log n) O(log n) O(n) O(h)"},{"location":"junior/algorithms/tree-algorithms/#best-practices","title":"Best Practices","text":"<ol> <li>Null kontrollerini yap</li> <li>Denge durumunu kontrol et</li> <li>Bellek kullan\u0131m\u0131n\u0131 optimize et</li> <li>\u00d6zyinelemeyi dikkatli kullan</li> <li>Hata durumlar\u0131n\u0131 y\u00f6net</li> </ol>"},{"location":"junior/algorithms/tree-algorithms/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>Veri yap\u0131s\u0131 implementasyonu</li> <li>Arama algoritmalar\u0131</li> <li>S\u0131ralama algoritmalar\u0131</li> <li>Veri i\u015fleme</li> <li>Sistem tasar\u0131m\u0131</li> </ol>"},{"location":"junior/algorithms/tree-algorithms/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Tree Data Structure in C#</li> <li>C# Collections</li> <li>Data Structures and Algorithms </li> </ul>"},{"location":"junior/api-development/","title":"API Development","text":""},{"location":"junior/api-development/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>API (Application Programming Interface) geli\u015ftirme, modern yaz\u0131l\u0131m mimarilerinin temel ta\u015flar\u0131ndan biridir. RESTful API'ler, mikroservis mimarileri ve gRPC gibi teknolojiler, farkl\u0131 sistemlerin birbiriyle ileti\u015fim kurmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"junior/api-development/#icindekiler","title":"\u0130\u00e7indekiler","text":"<ol> <li>REST API</li> <li>REST prensipleri</li> <li>Endpoint tasar\u0131m\u0131</li> <li>Resource naming</li> <li>HATEOAS</li> <li> <p>RESTful best practices</p> </li> <li> <p>HTTP Methods</p> </li> <li>GET</li> <li>POST</li> <li>PUT</li> <li>PATCH</li> <li>DELETE</li> <li>HEAD</li> <li> <p>OPTIONS</p> </li> <li> <p>Status Codes</p> </li> <li>1xx: Bilgilendirme</li> <li>2xx: Ba\u015far\u0131l\u0131</li> <li>3xx: Y\u00f6nlendirme</li> <li>4xx: \u0130stemci Hatas\u0131</li> <li> <p>5xx: Sunucu Hatas\u0131</p> </li> <li> <p>API Versioning</p> </li> <li>URL versioning</li> <li>Header versioning</li> <li>Media type versioning</li> <li>Versioning stratejileri</li> <li> <p>Breaking changes y\u00f6netimi</p> </li> <li> <p>API Documentation</p> </li> <li>Swagger/OpenAPI</li> <li>API dok\u00fcmantasyonu olu\u015fturma</li> <li>\u00d6rnek istekler</li> <li>Hata kodlar\u0131</li> <li> <p>API test ara\u00e7lar\u0131</p> </li> <li> <p>API G\u00fcvenli\u011fi</p> </li> <li>Authentication</li> <li>Authorization</li> <li>JWT</li> <li>OAuth</li> <li> <p>API Keys</p> </li> <li> <p>API Testi</p> </li> <li>Unit testler</li> <li>Integration testler</li> <li>Postman</li> <li>Load testler</li> <li> <p>Security testler</p> </li> <li> <p>API Performans\u0131</p> </li> <li>Caching</li> <li>Rate limiting</li> <li>Compression</li> <li>Pagination</li> <li>Monitoring</li> </ol>"},{"location":"junior/api-development/#ogrenme-hedefleri","title":"\u00d6\u011frenme Hedefleri","text":"<p>Bu b\u00f6l\u00fcm\u00fc tamamlad\u0131ktan sonra: - RESTful API tasar\u0131m prensiplerini anlayabilecek - API g\u00fcvenli\u011fi konular\u0131nda bilgi sahibi olacak - API dok\u00fcmantasyonu olu\u015fturabilecek - API testlerini yazabilecek - API performans optimizasyonu yapabileceksiniz</p>"},{"location":"junior/api-development/#on-kosullar","title":"\u00d6n Ko\u015fullar","text":"<p>Bu b\u00f6l\u00fcm\u00fc takip etmek i\u00e7in: - Temel C# bilgisi - HTTP protokol\u00fc hakk\u0131nda bilgi - Visual Studio veya VS Code kullan\u0131m\u0131 - .NET Core SDK kurulumu - Postman veya benzeri API test ara\u00e7lar\u0131</p>"},{"location":"junior/api-development/#best-practices","title":"Best Practices","text":"<ol> <li>API Tasar\u0131m\u0131</li> <li>REST prensiplerine uyun</li> <li>Anlaml\u0131 endpoint isimleri kullan\u0131n</li> <li>Versioning stratejisi belirleyin</li> <li> <p>Hata y\u00f6netimini standartla\u015ft\u0131r\u0131n</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>HTTPS kullan\u0131n</li> <li>Input validasyonu yap\u0131n</li> <li>Rate limiting uygulay\u0131n</li> <li> <p>Loglama yap\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Caching stratejisi belirleyin</li> <li>Pagination kullan\u0131n</li> <li>Response compression uygulay\u0131n</li> <li>Monitoring yap\u0131n</li> </ol>"},{"location":"junior/api-development/#ornek-proje-yaps","title":"\u00d6rnek Proje Yap\u0131s\u0131","text":"<pre><code>API.Project/\n\u251c\u2500\u2500 Controllers/\n\u2502   \u251c\u2500\u2500 ProductsController.cs\n\u2502   \u251c\u2500\u2500 OrdersController.cs\n\u2502   \u2514\u2500\u2500 AuthController.cs\n\u251c\u2500\u2500 Models/\n\u2502   \u251c\u2500\u2500 DTOs/\n\u2502   \u2514\u2500\u2500 Entities/\n\u251c\u2500\u2500 Services/\n\u2502   \u251c\u2500\u2500 ProductService.cs\n\u2502   \u2514\u2500\u2500 OrderService.cs\n\u251c\u2500\u2500 Middleware/\n\u2502   \u251c\u2500\u2500 ExceptionMiddleware.cs\n\u2502   \u2514\u2500\u2500 LoggingMiddleware.cs\n\u2514\u2500\u2500 Tests/\n    \u251c\u2500\u2500 UnitTests/\n    \u2514\u2500\u2500 IntegrationTests/\n</code></pre>"},{"location":"junior/api-development/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":"<ol> <li>REST ve SOAP aras\u0131ndaki farklar nelerdir?</li> <li>API versiyonlama stratejileri nelerdir?</li> <li>JWT ve OAuth aras\u0131ndaki farklar nelerdir?</li> <li>API rate limiting nas\u0131l uygulan\u0131r?</li> <li>API monitoring nas\u0131l yap\u0131l\u0131r?</li> </ol>"},{"location":"junior/api-development/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>REST API Best Practices</li> <li>ASP.NET Core Web API</li> <li>API Security Best Practices</li> <li>API Testing </li> </ul>"},{"location":"junior/api-development/api-documentation/","title":"API Documentation","text":""},{"location":"junior/api-development/api-documentation/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>API dok\u00fcmantasyonu, API'lerin nas\u0131l kullan\u0131laca\u011f\u0131n\u0131, endpoint'lerin ne i\u015fe yarad\u0131\u011f\u0131n\u0131 ve nas\u0131l entegre edilece\u011fini a\u00e7\u0131klayan teknik bir belgedir. \u0130yi bir API dok\u00fcmantasyonu, geli\u015ftiricilerin API'yi h\u0131zl\u0131 ve do\u011fru bir \u015fekilde kullanmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"junior/api-development/api-documentation/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/api-development/api-documentation/#1-swaggeropenapi-nedir-ve-nasl-kullanlr","title":"1. Swagger/OpenAPI nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Swagger/OpenAPI, RESTful API'leri tan\u0131mlamak, olu\u015fturmak ve dok\u00fcmante etmek i\u00e7in kullan\u0131lan bir ara\u00e7t\u0131r. ASP.NET Core'da Swashbuckle paketi ile entegre edilir.</p> <p>\u00d6rnek Kod: <pre><code>// Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSwaggerGen(c =&gt;\n    {\n        c.SwaggerDoc(\"v1\", new OpenApiInfo\n        {\n            Title = \"Product API\",\n            Version = \"v1\",\n            Description = \"Product management API\",\n            Contact = new OpenApiContact\n            {\n                Name = \"API Support\",\n                Email = \"support@company.com\"\n            }\n        });\n    });\n}\n\npublic void Configure(IApplicationBuilder app)\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(c =&gt;\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Product API V1\");\n    });\n}\n\n// Controller\n[ApiController]\n[Route(\"api/[controller]\")]\n[Produces(\"application/json\")]\npublic class ProductsController : ControllerBase\n{\n    /// &lt;summary&gt;\n    /// Gets all products\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;List of products&lt;/returns&gt;\n    /// &lt;response code=\"200\"&gt;Returns the list of products&lt;/response&gt;\n    /// &lt;response code=\"400\"&gt;If the request is invalid&lt;/response&gt;\n    [HttpGet]\n    [ProducesResponseType(typeof(IEnumerable&lt;Product&gt;), 200)]\n    [ProducesResponseType(400)]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/api-documentation/#2-xml-dokumantasyon-nasl-olusturulur","title":"2. XML dok\u00fcmantasyon nas\u0131l olu\u015fturulur?","text":"<p>Cevap: XML dok\u00fcmantasyonu i\u00e7in: - Proje ayarlar\u0131nda XML dok\u00fcmantasyonu etkinle\u015ftirilir - /// yorumlar\u0131 kullan\u0131l\u0131r - Swagger'a XML dosyas\u0131 eklenir</p> <p>\u00d6rnek Kod: <pre><code>// Proje dosyas\u0131 (.csproj)\n&lt;PropertyGroup&gt;\n    &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;\n    &lt;NoWarn&gt;$(NoWarn);1591&lt;/NoWarn&gt;\n&lt;/PropertyGroup&gt;\n\n// Controller\n/// &lt;summary&gt;\n/// Products API controller\n/// &lt;/summary&gt;\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    /// &lt;summary&gt;\n    /// Gets a specific product by id\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"id\"&gt;The product id&lt;/param&gt;\n    /// &lt;returns&gt;A product&lt;/returns&gt;\n    /// &lt;response code=\"200\"&gt;Returns the requested product&lt;/response&gt;\n    /// &lt;response code=\"404\"&gt;If the product is not found&lt;/response&gt;\n    [HttpGet(\"{id}\")]\n    [ProducesResponseType(typeof(Product), 200)]\n    [ProducesResponseType(404)]\n    public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/api-documentation/#3-api-dokumantasyonunda-neler-bulunmaldr","title":"3. API dok\u00fcmantasyonunda neler bulunmal\u0131d\u0131r?","text":"<p>Cevap: API dok\u00fcmantasyonunda bulunmas\u0131 gerekenler: - Genel API a\u00e7\u0131klamas\u0131 - Authentication bilgileri - Endpoint a\u00e7\u0131klamalar\u0131 - Request/Response \u00f6rnekleri - Hata kodlar\u0131 - Rate limiting bilgileri</p> <p>\u00d6rnek Kod: <pre><code>// Startup.cs\nservices.AddSwaggerGen(c =&gt;\n{\n    c.SwaggerDoc(\"v1\", new OpenApiInfo\n    {\n        Title = \"Product API\",\n        Version = \"v1\",\n        Description = \"Product management API with authentication\",\n        Contact = new OpenApiContact\n        {\n            Name = \"API Support\",\n            Email = \"support@company.com\"\n        },\n        License = new OpenApiLicense\n        {\n            Name = \"API License\",\n            Url = new Uri(\"https://company.com/license\")\n        }\n    });\n\n    // Authentication \u015femas\u0131\n    c.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme\n    {\n        Description = \"JWT Authorization header using the Bearer scheme\",\n        Name = \"Authorization\",\n        In = ParameterLocation.Header,\n        Type = SecuritySchemeType.ApiKey\n    });\n\n    // Rate limiting bilgisi\n    c.OperationFilter&lt;RateLimitOperationFilter&gt;();\n});\n</code></pre></p>"},{"location":"junior/api-development/api-documentation/#4-api-dokumantasyonu-nasl-test-edilir","title":"4. API dok\u00fcmantasyonu nas\u0131l test edilir?","text":"<p>Cevap: API dok\u00fcmantasyonu testi i\u00e7in: - Swagger UI \u00fczerinden test - Postman koleksiyonlar\u0131 - Otomatik test ara\u00e7lar\u0131 - Dok\u00fcmantasyon do\u011frulama</p> <p>\u00d6rnek Kod: <pre><code>// Test controller\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class DocumentationTestsController : ControllerBase\n{\n    /// &lt;summary&gt;\n    /// Tests API documentation\n    /// &lt;/summary&gt;\n    /// &lt;remarks&gt;\n    /// Sample request:\n    ///\n    ///     POST /api/documentationtests\n    ///     {\n    ///        \"testCase\": \"string\",\n    ///        \"expectedResult\": \"string\"\n    ///     }\n    ///\n    /// &lt;/remarks&gt;\n    [HttpPost]\n    [ProducesResponseType(typeof(TestResult), 200)]\n    [ProducesResponseType(400)]\n    public async Task&lt;ActionResult&lt;TestResult&gt;&gt; TestDocumentation(TestRequest request)\n    {\n        // Test logic\n    }\n}\n\n// Test model\npublic class TestRequest\n{\n    /// &lt;summary&gt;\n    /// Test case description\n    /// &lt;/summary&gt;\n    /// &lt;example&gt;Authentication test&lt;/example&gt;\n    public string TestCase { get; set; }\n\n    /// &lt;summary&gt;\n    /// Expected result\n    /// &lt;/summary&gt;\n    /// &lt;example&gt;Success&lt;/example&gt;\n    public string ExpectedResult { get; set; }\n}\n</code></pre></p>"},{"location":"junior/api-development/api-documentation/#5-api-dokumantasyonu-nasl-guncellenir","title":"5. API dok\u00fcmantasyonu nas\u0131l g\u00fcncellenir?","text":"<p>Cevap: API dok\u00fcmantasyonu g\u00fcncelleme: - Versiyon kontrol\u00fc - De\u011fi\u015fiklik logu - Otomatik g\u00fcncelleme - Dok\u00fcmantasyon review</p> <p>\u00d6rnek Kod: <pre><code>// Versioned documentation\nservices.AddSwaggerGen(c =&gt;\n{\n    c.SwaggerDoc(\"v1\", new OpenApiInfo\n    {\n        Title = \"Product API\",\n        Version = \"v1\",\n        Description = \"Product management API - Version 1\"\n    });\n\n    c.SwaggerDoc(\"v2\", new OpenApiInfo\n    {\n        Title = \"Product API\",\n        Version = \"v2\",\n        Description = \"Product management API - Version 2\"\n    });\n});\n\n// Change log\n/// &lt;summary&gt;\n/// Products API controller\n/// &lt;/summary&gt;\n/// &lt;remarks&gt;\n/// Version History:\n/// - 1.0: Initial version\n/// - 1.1: Added pagination\n/// - 2.0: Added new features\n/// &lt;/remarks&gt;\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    // ...\n}\n</code></pre></p>"},{"location":"junior/api-development/api-documentation/#best-practices","title":"Best Practices","text":"<ol> <li>Dok\u00fcmantasyon Kalitesi</li> <li>A\u00e7\u0131k ve anla\u015f\u0131l\u0131r olun</li> <li>\u00d6rnekler ekleyin</li> <li>G\u00fcncel tutun</li> <li> <p>Tutarl\u0131 olun</p> </li> <li> <p>Dok\u00fcmantasyon Ara\u00e7lar\u0131</p> </li> <li>Swagger/OpenAPI kullan\u0131n</li> <li>XML dok\u00fcmantasyonu ekleyin</li> <li>Test ara\u00e7lar\u0131 kullan\u0131n</li> <li> <p>CI/CD entegrasyonu yap\u0131n</p> </li> <li> <p>Dok\u00fcmantasyon Y\u00f6netimi</p> </li> <li>Versiyon kontrol\u00fc yap\u0131n</li> <li>De\u011fi\u015fiklik logu tutun</li> <li>Review s\u00fcreci olu\u015fturun</li> <li>Otomatik g\u00fcncelleme kullan\u0131n</li> </ol>"},{"location":"junior/api-development/api-documentation/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Web API Documentation</li> <li>OpenAPI Specification</li> <li>API Documentation Best Practices </li> </ul>"},{"location":"junior/api-development/api-versioning/","title":"API Versioning","text":""},{"location":"junior/api-development/api-versioning/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>API versiyonlama, API'lerin zaman i\u00e7inde de\u011fi\u015fimini y\u00f6netmek i\u00e7in kullan\u0131lan bir stratejidir. Bu, geriye d\u00f6n\u00fck uyumlulu\u011fu korurken yeni \u00f6zelliklerin eklenmesine ve mevcut \u00f6zelliklerin de\u011fi\u015ftirilmesine olanak tan\u0131r.</p>"},{"location":"junior/api-development/api-versioning/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/api-development/api-versioning/#1-api-versiyonlama-stratejileri-nelerdir","title":"1. API versiyonlama stratejileri nelerdir?","text":"<p>Cevap: Temel API versiyonlama stratejileri: - URL versiyonlama: <code>/api/v1/products</code> - Header versiyonlama: <code>Accept: application/vnd.company.api.v1+json</code> - Media Type versiyonlama: <code>Content-Type: application/vnd.company.api.v1+json</code> - Query String versiyonlama: <code>/api/products?version=1</code></p> <p>\u00d6rnek Kod: <pre><code>// URL versiyonlama\n[ApiVersion(\"1.0\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        // ...\n    }\n}\n\n// Header versiyonlama\n[ApiVersion(\"1.0\")]\n[Route(\"api/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/api-versioning/#2-aspnet-coreda-api-versiyonlama-nasl-yaplr","title":"2. ASP.NET Core'da API versiyonlama nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: ASP.NET Core'da API versiyonlama i\u00e7in: - Microsoft.AspNetCore.Mvc.Versioning paketi kullan\u0131l\u0131r - Startup.cs'de servis olarak eklenir - Controller'larda ApiVersion attribute'u kullan\u0131l\u0131r - Farkl\u0131 versiyonlama stratejileri desteklenir</p> <p>\u00d6rnek Kod: <pre><code>// Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddApiVersioning(options =&gt;\n    {\n        options.DefaultApiVersion = new ApiVersion(1, 0);\n        options.AssumeDefaultVersionWhenUnspecified = true;\n        options.ReportApiVersions = true;\n        options.ApiVersionReader = ApiVersionReader.Combine(\n            new UrlSegmentApiVersionReader(),\n            new HeaderApiVersionReader(\"x-api-version\"),\n            new QueryStringApiVersionReader(\"api-version\")\n        );\n    });\n}\n\n// Controller\n[ApiVersion(\"1.0\")]\n[ApiVersion(\"2.0\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        // ...\n    }\n\n    [HttpGet, MapToApiVersion(\"2.0\")]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;ProductV2&gt;&gt;&gt; GetProductsV2()\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/api-versioning/#3-breaking-changes-nasl-yonetilir","title":"3. Breaking changes nas\u0131l y\u00f6netilir?","text":"<p>Cevap: Breaking changes y\u00f6netimi i\u00e7in: - Yeni versiyon olu\u015fturulur - Eski versiyon desteklenmeye devam eder - Ge\u00e7i\u015f s\u00fcreci planlan\u0131r - Dok\u00fcmantasyon g\u00fcncellenir</p> <p>\u00d6rnek Kod: <pre><code>// V1 Controller\n[ApiVersion(\"1.0\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        // Eski implementasyon\n    }\n}\n\n// V2 Controller\n[ApiVersion(\"2.0\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\npublic class ProductsV2Controller : ControllerBase\n{\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;ProductV2&gt;&gt;&gt; GetProducts()\n    {\n        // Yeni implementasyon\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/api-versioning/#4-versiyon-gecis-stratejileri-nelerdir","title":"4. Versiyon ge\u00e7i\u015f stratejileri nelerdir?","text":"<p>Cevap: Versiyon ge\u00e7i\u015f stratejileri: - Paralel \u00e7al\u0131\u015fma - Kademeli ge\u00e7i\u015f - Zorunlu ge\u00e7i\u015f - Otomatik y\u00f6nlendirme</p> <p>\u00d6rnek Kod: <pre><code>// Versiyon y\u00f6nlendirme\npublic class ApiVersionRedirectMiddleware\n{\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.Path.Value.Contains(\"/api/\"))\n        {\n            var version = context.Request.Headers[\"x-api-version\"].ToString();\n            if (string.IsNullOrEmpty(version))\n            {\n                context.Request.Headers[\"x-api-version\"] = \"2.0\";\n            }\n        }\n        await _next(context);\n    }\n}\n\n// Versiyon kontrol\u00fc\n[ApiVersion(\"1.0\", Deprecated = true)]\n[ApiVersion(\"2.0\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        if (HttpContext.GetRequestedApiVersion() == new ApiVersion(1, 0))\n        {\n            // Deprecated versiyon i\u00e7in uyar\u0131\n            Response.Headers.Add(\"Warning\", \"299 - This API version is deprecated\");\n        }\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/api-versioning/#5-api-versiyonlama-best-practices-nelerdir","title":"5. API versiyonlama best practices nelerdir?","text":"<p>Cevap: API versiyonlama best practices: - Semantic versioning kullan\u0131n - Versiyonlar\u0131 dok\u00fcmante edin - Geriye d\u00f6n\u00fck uyumlulu\u011fu koruyun - Versiyon ge\u00e7i\u015f plan\u0131 olu\u015fturun</p> <p>\u00d6rnek Kod: <pre><code>// Semantic versioning\n[ApiVersion(\"1.0.0\")]\n[ApiVersion(\"2.0.0\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    // ...\n}\n\n// Versiyon dok\u00fcmantasyonu\n/// &lt;summary&gt;\n/// Products API v2.0\n/// &lt;/summary&gt;\n[ApiVersion(\"2.0\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\npublic class ProductsV2Controller : ControllerBase\n{\n    /// &lt;summary&gt;\n    /// Gets all products with enhanced features\n    /// &lt;/summary&gt;\n    [HttpGet]\n    [ProducesResponseType(typeof(IEnumerable&lt;ProductV2&gt;), 200)]\n    [ProducesResponseType(400)]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;ProductV2&gt;&gt;&gt; GetProducts()\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/api-versioning/#best-practices","title":"Best Practices","text":"<ol> <li>Versiyonlama Stratejisi</li> <li>Semantic versioning kullan\u0131n</li> <li>Tutarl\u0131 bir strateji se\u00e7in</li> <li>Versiyonlar\u0131 dok\u00fcmante edin</li> <li> <p>Ge\u00e7i\u015f plan\u0131 olu\u015fturun</p> </li> <li> <p>Geriye D\u00f6n\u00fck Uyumluluk</p> </li> <li>Breaking changes'den ka\u00e7\u0131n\u0131n</li> <li>Eski versiyonlar\u0131 destekleyin</li> <li>Ge\u00e7i\u015f s\u00fcresi tan\u0131y\u0131n</li> <li> <p>Uyar\u0131lar ekleyin</p> </li> <li> <p>Dok\u00fcmantasyon</p> </li> <li>Versiyon de\u011fi\u015fikliklerini belgeleyin</li> <li>\u00d6rnek istekleri ekleyin</li> <li>Ge\u00e7i\u015f k\u0131lavuzu haz\u0131rlay\u0131n</li> <li>Deprecated API'leri i\u015faretleyin</li> </ol>"},{"location":"junior/api-development/api-versioning/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core API Versioning</li> <li>API Versioning Best Practices</li> <li>Semantic Versioning </li> </ul>"},{"location":"junior/api-development/http-methods/","title":"HTTP Methods","text":""},{"location":"junior/api-development/http-methods/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>HTTP metodlar\u0131, RESTful API'lerde kaynaklar \u00fczerinde ger\u00e7ekle\u015ftirilecek i\u015flemleri belirten standart HTTP istek tipleridir. Her metodun belirli bir amac\u0131 ve kullan\u0131m alan\u0131 vard\u0131r.</p>"},{"location":"junior/api-development/http-methods/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/api-development/http-methods/#1-temel-http-metodlar-nelerdir-ve-ne-icin-kullanlr","title":"1. Temel HTTP metodlar\u0131 nelerdir ve ne i\u00e7in kullan\u0131l\u0131r?","text":"<p>Cevap: Temel HTTP metodlar\u0131: - GET: Kaynaklar\u0131 okumak i\u00e7in - POST: Yeni kaynak olu\u015fturmak i\u00e7in - PUT: Kayna\u011f\u0131 tamamen g\u00fcncellemek i\u00e7in - PATCH: Kayna\u011f\u0131n bir k\u0131sm\u0131n\u0131 g\u00fcncellemek i\u00e7in - DELETE: Kayna\u011f\u0131 silmek i\u00e7in - HEAD: Kaynak hakk\u0131nda meta bilgi almak i\u00e7in - OPTIONS: Sunucunun destekledi\u011fi metodlar\u0131 \u00f6\u011frenmek i\u00e7in</p> <p>\u00d6rnek Kod: <pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    // GET: api/products\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        return await _productService.GetAllAsync();\n    }\n\n    // POST: api/products\n    [HttpPost]\n    public async Task&lt;ActionResult&lt;Product&gt;&gt; CreateProduct(ProductCreateDto productDto)\n    {\n        var product = await _productService.CreateAsync(productDto);\n        return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);\n    }\n\n    // PUT: api/products/5\n    [HttpPut(\"{id}\")]\n    public async Task&lt;IActionResult&gt; UpdateProduct(int id, ProductUpdateDto productDto)\n    {\n        await _productService.UpdateAsync(id, productDto);\n        return NoContent();\n    }\n\n    // DELETE: api/products/5\n    [HttpDelete(\"{id}\")]\n    public async Task&lt;IActionResult&gt; DeleteProduct(int id)\n    {\n        await _productService.DeleteAsync(id);\n        return NoContent();\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/http-methods/#2-get-ve-post-metodlar-arasndaki-farklar-nelerdir","title":"2. GET ve POST metodlar\u0131 aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: GET ve POST farklar\u0131: - GET: Verileri URL'de ta\u015f\u0131r, POST: Request body'de ta\u015f\u0131r - GET: \u00d6nbelle\u011fe al\u0131nabilir, POST: \u00d6nbelle\u011fe al\u0131namaz - GET: G\u00fcvenli metod, POST: G\u00fcvenli de\u011fil - GET: Idempotent, POST: Idempotent de\u011fil - GET: Veri boyutu s\u0131n\u0131rl\u0131, POST: S\u0131n\u0131rs\u0131z</p> <p>\u00d6rnek Kod: <pre><code>// GET \u00f6rne\u011fi\n[HttpGet(\"search\")]\npublic async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; SearchProducts(\n    [FromQuery] string name,\n    [FromQuery] decimal? minPrice,\n    [FromQuery] decimal? maxPrice)\n{\n    return await _productService.SearchAsync(name, minPrice, maxPrice);\n}\n\n// POST \u00f6rne\u011fi\n[HttpPost(\"complex-search\")]\npublic async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; ComplexSearch(\n    [FromBody] ProductSearchDto searchDto)\n{\n    return await _productService.ComplexSearchAsync(searchDto);\n}\n</code></pre></p>"},{"location":"junior/api-development/http-methods/#3-put-ve-patch-metodlar-arasndaki-farklar-nelerdir","title":"3. PUT ve PATCH metodlar\u0131 aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: PUT ve PATCH farklar\u0131: - PUT: T\u00fcm kayna\u011f\u0131 g\u00fcnceller - PATCH: Kayna\u011f\u0131n belirli alanlar\u0131n\u0131 g\u00fcnceller - PUT: Idempotent - PATCH: Idempotent olmayabilir - PUT: T\u00fcm alanlar\u0131 g\u00f6ndermek zorunlu - PATCH: Sadece de\u011fi\u015fen alanlar\u0131 g\u00f6nderir</p> <p>\u00d6rnek Kod: <pre><code>// PUT \u00f6rne\u011fi\n[HttpPut(\"{id}\")]\npublic async Task&lt;IActionResult&gt; UpdateProduct(int id, ProductUpdateDto productDto)\n{\n    // T\u00fcm alanlar g\u00fcncellenir\n    await _productService.UpdateAsync(id, productDto);\n    return NoContent();\n}\n\n// PATCH \u00f6rne\u011fi\n[HttpPatch(\"{id}\")]\npublic async Task&lt;IActionResult&gt; PatchProduct(int id, JsonPatchDocument&lt;ProductUpdateDto&gt; patchDoc)\n{\n    // Sadece belirtilen alanlar g\u00fcncellenir\n    var product = await _productService.GetByIdAsync(id);\n    if (product == null)\n    {\n        return NotFound();\n    }\n\n    var productDto = new ProductUpdateDto();\n    patchDoc.ApplyTo(productDto);\n    await _productService.PatchAsync(id, productDto);\n    return NoContent();\n}\n</code></pre></p>"},{"location":"junior/api-development/http-methods/#4-http-metodlarnn-guvenlik-ozellikleri-nelerdir","title":"4. HTTP metodlar\u0131n\u0131n g\u00fcvenlik \u00f6zellikleri nelerdir?","text":"<p>Cevap: HTTP metodlar\u0131n\u0131n g\u00fcvenlik \u00f6zellikleri: - Safe Methods: GET, HEAD, OPTIONS - Idempotent Methods: GET, HEAD, PUT, DELETE - Cacheable Methods: GET, HEAD - Body Allowed: POST, PUT, PATCH</p> <p>\u00d6rnek Kod: <pre><code>// G\u00fcvenli metod \u00f6rne\u011fi\n[HttpGet]\npublic async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n{\n    return await _productService.GetAllAsync();\n}\n\n// G\u00fcvenli olmayan metod \u00f6rne\u011fi\n[HttpPost]\npublic async Task&lt;ActionResult&lt;Product&gt;&gt; CreateProduct(ProductCreateDto productDto)\n{\n    // CSRF token kontrol\u00fc\n    if (!await _antiForgeryService.ValidateRequestAsync())\n    {\n        return BadRequest(\"Invalid request\");\n    }\n\n    var product = await _productService.CreateAsync(productDto);\n    return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);\n}\n</code></pre></p>"},{"location":"junior/api-development/http-methods/#5-http-metodlarnn-performans-etkileri-nelerdir","title":"5. HTTP metodlar\u0131n\u0131n performans etkileri nelerdir?","text":"<p>Cevap: Performans etkileri: - GET: \u00d6nbelleklenebilir, h\u0131zl\u0131 - POST: Her seferinde yeni kaynak olu\u015fturur - PUT: T\u00fcm kayna\u011f\u0131 g\u00fcnceller - PATCH: Sadece de\u011fi\u015fen k\u0131sm\u0131 g\u00fcnceller - DELETE: Kaynak silinir</p> <p>\u00d6rnek Kod: <pre><code>// Performans optimizasyonu \u00f6rne\u011fi\n[HttpGet]\n[ResponseCache(Duration = 60)] // 60 saniye \u00f6nbellekleme\npublic async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n{\n    return await _productService.GetAllAsync();\n}\n\n// Batch i\u015flem \u00f6rne\u011fi\n[HttpPost(\"batch\")]\npublic async Task&lt;ActionResult&gt; CreateProducts([FromBody] List&lt;ProductCreateDto&gt; products)\n{\n    await _productService.CreateBatchAsync(products);\n    return Ok();\n}\n</code></pre></p>"},{"location":"junior/api-development/http-methods/#best-practices","title":"Best Practices","text":"<ol> <li>Metod Se\u00e7imi</li> <li>Amaca uygun metod se\u00e7in</li> <li>REST prensiplerine uyun</li> <li>Idempotent metodlar\u0131 tercih edin</li> <li> <p>G\u00fcvenli metodlar\u0131 dikkatli kullan\u0131n</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>CSRF korumas\u0131 ekleyin</li> <li>Input validasyonu yap\u0131n</li> <li>Yetkilendirme kontrolleri yap\u0131n</li> <li> <p>Rate limiting uygulay\u0131n</p> </li> <li> <p>Performans</p> </li> <li>\u00d6nbellekleme kullan\u0131n</li> <li>Batch i\u015flemleri tercih edin</li> <li>Gereksiz veri transferinden ka\u00e7\u0131n\u0131n</li> <li>Compression kullan\u0131n</li> </ol>"},{"location":"junior/api-development/http-methods/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>HTTP Methods</li> <li>REST API Best Practices</li> <li>HTTP/1.1 Specification </li> </ul>"},{"location":"junior/api-development/rest-api/","title":"REST API","text":""},{"location":"junior/api-development/rest-api/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>REST (Representational State Transfer), web servisleri i\u00e7in bir mimari stildir. RESTful API'ler, HTTP protokol\u00fcn\u00fc kullanarak kaynaklara eri\u015fim sa\u011flar ve istemci-sunucu aras\u0131ndaki ileti\u015fimi standartla\u015ft\u0131r\u0131r.</p>"},{"location":"junior/api-development/rest-api/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/api-development/rest-api/#1-rest-nedir-ve-temel-prensipleri-nelerdir","title":"1. REST nedir ve temel prensipleri nelerdir?","text":"<p>Cevap: REST'in temel prensipleri: - Client-Server: \u0130stemci ve sunucu birbirinden ba\u011f\u0131ms\u0131z - Stateless: Her istek kendi i\u00e7inde ba\u011f\u0131ms\u0131z - Cacheable: \u0130stekler \u00f6nbelle\u011fe al\u0131nabilir - Uniform Interface: Standart aray\u00fcz - Layered System: Katmanl\u0131 mimari - Code on Demand (opsiyonel): \u0130stemciye kod g\u00f6nderilebilir</p> <p>\u00d6rnek Kod: <pre><code>// RESTful controller \u00f6rne\u011fi\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    private readonly IProductService _productService;\n\n    public ProductsController(IProductService productService)\n    {\n        _productService = productService;\n    }\n\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        var products = await _productService.GetAllAsync();\n        return Ok(products);\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)\n    {\n        var product = await _productService.GetByIdAsync(id);\n        if (product == null)\n        {\n            return NotFound();\n        }\n        return Ok(product);\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/rest-api/#2-resource-naming-kurallar-nelerdir","title":"2. Resource naming kurallar\u0131 nelerdir?","text":"<p>Cevap: Resource naming kurallar\u0131: - \u0130simler \u00e7o\u011ful olmal\u0131 - K\u00fc\u00e7\u00fck harf kullan\u0131lmal\u0131 - Tire (-) ile kelimeler ayr\u0131lmal\u0131 - \u0130\u00e7 i\u00e7e kaynaklar i\u00e7in hiyerar\u015fik yap\u0131 - Anlaml\u0131 isimler se\u00e7ilmeli</p> <p>\u00d6rnek Kod: <pre><code>// Do\u011fru resource naming \u00f6rnekleri\n[Route(\"api/products\")]\n[Route(\"api/products/{productId}/reviews\")]\n[Route(\"api/users/{userId}/orders\")]\n[Route(\"api/categories/{categoryId}/products\")]\n\n// Yanl\u0131\u015f resource naming \u00f6rnekleri\n[Route(\"api/getProducts\")]\n[Route(\"api/Product\")]\n[Route(\"api/product_list\")]\n</code></pre></p>"},{"location":"junior/api-development/rest-api/#3-hateoas-nedir-ve-nasl-kullanlr","title":"3. HATEOAS nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: HATEOAS (Hypermedia as the Engine of Application State): - Kaynaklar aras\u0131 ili\u015fkileri linklerle g\u00f6sterir - \u0130stemciye sonraki ad\u0131mlar\u0131 g\u00f6sterir - API'nin ke\u015ffedilebilirli\u011fini art\u0131r\u0131r - Ba\u011f\u0131ml\u0131l\u0131klar\u0131 azalt\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// HATEOAS \u00f6rne\u011fi\npublic class ProductResource\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public List&lt;Link&gt; Links { get; set; }\n}\n\npublic class Link\n{\n    public string Href { get; set; }\n    public string Rel { get; set; }\n    public string Method { get; set; }\n}\n\n// Controller'da kullan\u0131m\u0131\n[HttpGet(\"{id}\")]\npublic async Task&lt;ActionResult&lt;ProductResource&gt;&gt; GetProduct(int id)\n{\n    var product = await _productService.GetByIdAsync(id);\n    if (product == null)\n    {\n        return NotFound();\n    }\n\n    var resource = new ProductResource\n    {\n        Id = product.Id,\n        Name = product.Name,\n        Price = product.Price,\n        Links = new List&lt;Link&gt;\n        {\n            new Link { Href = $\"/api/products/{id}\", Rel = \"self\", Method = \"GET\" },\n            new Link { Href = $\"/api/products/{id}\", Rel = \"update\", Method = \"PUT\" },\n            new Link { Href = $\"/api/products/{id}\", Rel = \"delete\", Method = \"DELETE\" }\n        }\n    };\n\n    return Ok(resource);\n}\n</code></pre></p>"},{"location":"junior/api-development/rest-api/#4-restful-apilerde-hata-yonetimi-nasl-yaplr","title":"4. RESTful API'lerde hata y\u00f6netimi nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Hata y\u00f6netimi i\u00e7in: - Standart HTTP status code'lar\u0131 kullan\u0131n - Hata mesajlar\u0131n\u0131 detayl\u0131 verin - Hata format\u0131n\u0131 standartla\u015ft\u0131r\u0131n - Validation hatalar\u0131n\u0131 ayr\u0131 ele al\u0131n</p> <p>\u00d6rnek Kod: <pre><code>// Hata y\u00f6netimi \u00f6rne\u011fi\npublic class ApiResponse&lt;T&gt;\n{\n    public bool Success { get; set; }\n    public T Data { get; set; }\n    public string Message { get; set; }\n    public List&lt;string&gt; Errors { get; set; }\n}\n\n[HttpPost]\npublic async Task&lt;ActionResult&lt;ApiResponse&lt;Product&gt;&gt;&gt; CreateProduct(ProductCreateDto productDto)\n{\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(new ApiResponse&lt;Product&gt;\n        {\n            Success = false,\n            Message = \"Validation error\",\n            Errors = ModelState.Values\n                .SelectMany(v =&gt; v.Errors)\n                .Select(e =&gt; e.ErrorMessage)\n                .ToList()\n        });\n    }\n\n    try\n    {\n        var product = await _productService.CreateAsync(productDto);\n        return Ok(new ApiResponse&lt;Product&gt;\n        {\n            Success = true,\n            Data = product,\n            Message = \"Product created successfully\"\n        });\n    }\n    catch (Exception ex)\n    {\n        return StatusCode(500, new ApiResponse&lt;Product&gt;\n        {\n            Success = false,\n            Message = \"An error occurred\",\n            Errors = new List&lt;string&gt; { ex.Message }\n        });\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/rest-api/#5-restful-apilerde-pagination-nasl-uygulanr","title":"5. RESTful API'lerde pagination nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Pagination i\u00e7in: - Query parametreleri kullan\u0131n - Metadata bilgisi ekleyin - Link header'lar\u0131 kullan\u0131n - Sayfa boyutunu s\u0131n\u0131rlay\u0131n</p> <p>\u00d6rnek Kod: <pre><code>// Pagination \u00f6rne\u011fi\npublic class PagedResponse&lt;T&gt;\n{\n    public IEnumerable&lt;T&gt; Items { get; set; }\n    public int PageNumber { get; set; }\n    public int PageSize { get; set; }\n    public int TotalPages { get; set; }\n    public int TotalItems { get; set; }\n    public bool HasPrevious =&gt; PageNumber &gt; 1;\n    public bool HasNext =&gt; PageNumber &lt; TotalPages;\n}\n\n[HttpGet]\npublic async Task&lt;ActionResult&lt;PagedResponse&lt;Product&gt;&gt;&gt; GetProducts(\n    [FromQuery] int pageNumber = 1,\n    [FromQuery] int pageSize = 10)\n{\n    var (products, totalItems) = await _productService.GetPagedAsync(pageNumber, pageSize);\n\n    var response = new PagedResponse&lt;Product&gt;\n    {\n        Items = products,\n        PageNumber = pageNumber,\n        PageSize = pageSize,\n        TotalItems = totalItems,\n        TotalPages = (int)Math.Ceiling(totalItems / (double)pageSize)\n    };\n\n    return Ok(response);\n}\n</code></pre></p>"},{"location":"junior/api-development/rest-api/#best-practices","title":"Best Practices","text":"<ol> <li>API Tasar\u0131m\u0131</li> <li>REST prensiplerine uyun</li> <li>Anlaml\u0131 resource isimleri kullan\u0131n</li> <li>HTTP metodlar\u0131n\u0131 do\u011fru kullan\u0131n</li> <li> <p>HATEOAS uygulay\u0131n</p> </li> <li> <p>Hata Y\u00f6netimi</p> </li> <li>Standart HTTP status code'lar\u0131 kullan\u0131n</li> <li>Detayl\u0131 hata mesajlar\u0131 verin</li> <li>Validation hatalar\u0131n\u0131 ayr\u0131 ele al\u0131n</li> <li> <p>Loglama yap\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Pagination kullan\u0131n</li> <li>Caching uygulay\u0131n</li> <li>Response compression kullan\u0131n</li> <li>Gereksiz veri g\u00f6ndermeyin</li> </ol>"},{"location":"junior/api-development/rest-api/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>REST API Best Practices</li> <li>REST Architectural Style</li> <li>HATEOAS </li> </ul>"},{"location":"junior/api-development/status-codes/","title":"Status Codes","text":""},{"location":"junior/api-development/status-codes/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>HTTP durum kodlar\u0131, bir HTTP iste\u011finin sonucunu belirten \u00fc\u00e7 basamakl\u0131 say\u0131lard\u0131r. RESTful API'lerde, iste\u011fin ba\u015far\u0131l\u0131 olup olmad\u0131\u011f\u0131n\u0131 ve sonucun ne oldu\u011funu belirtmek i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"junior/api-development/status-codes/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/api-development/status-codes/#1-temel-http-durum-kodlar-nelerdir-ve-ne-icin-kullanlr","title":"1. Temel HTTP durum kodlar\u0131 nelerdir ve ne i\u00e7in kullan\u0131l\u0131r?","text":"<p>Cevap: Temel HTTP durum kodlar\u0131: - 1xx: Bilgilendirme - 2xx: Ba\u015far\u0131l\u0131 - 3xx: Y\u00f6nlendirme - 4xx: \u0130stemci Hatas\u0131 - 5xx: Sunucu Hatas\u0131</p> <p>\u00d6rnek Kod: <pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    // 200 OK\n    [HttpGet]\n    public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n    {\n        var products = await _productService.GetAllAsync();\n        return Ok(products);\n    }\n\n    // 201 Created\n    [HttpPost]\n    public async Task&lt;ActionResult&lt;Product&gt;&gt; CreateProduct(ProductCreateDto productDto)\n    {\n        var product = await _productService.CreateAsync(productDto);\n        return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);\n    }\n\n    // 204 No Content\n    [HttpPut(\"{id}\")]\n    public async Task&lt;IActionResult&gt; UpdateProduct(int id, ProductUpdateDto productDto)\n    {\n        await _productService.UpdateAsync(id, productDto);\n        return NoContent();\n    }\n\n    // 404 Not Found\n    [HttpGet(\"{id}\")]\n    public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)\n    {\n        var product = await _productService.GetByIdAsync(id);\n        if (product == null)\n        {\n            return NotFound();\n        }\n        return Ok(product);\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/status-codes/#2-2xx-basarl-durum-kodlar-nelerdir","title":"2. 2xx ba\u015far\u0131l\u0131 durum kodlar\u0131 nelerdir?","text":"<p>Cevap: 2xx ba\u015far\u0131l\u0131 durum kodlar\u0131: - 200 OK: \u0130stek ba\u015far\u0131l\u0131 - 201 Created: Kaynak olu\u015fturuldu - 202 Accepted: \u0130stek kabul edildi - 204 No Content: \u0130\u00e7erik yok - 206 Partial Content: K\u0131smi i\u00e7erik</p> <p>\u00d6rnek Kod: <pre><code>// 200 OK\n[HttpGet]\npublic async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()\n{\n    return Ok(await _productService.GetAllAsync());\n}\n\n// 201 Created\n[HttpPost]\npublic async Task&lt;ActionResult&lt;Product&gt;&gt; CreateProduct(ProductCreateDto productDto)\n{\n    var product = await _productService.CreateAsync(productDto);\n    return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);\n}\n\n// 202 Accepted\n[HttpPost(\"process\")]\npublic async Task&lt;ActionResult&gt; ProcessOrder(int orderId)\n{\n    _backgroundJobService.Enqueue(() =&gt; _orderService.ProcessAsync(orderId));\n    return Accepted();\n}\n\n// 204 No Content\n[HttpPut(\"{id}\")]\npublic async Task&lt;IActionResult&gt; UpdateProduct(int id, ProductUpdateDto productDto)\n{\n    await _productService.UpdateAsync(id, productDto);\n    return NoContent();\n}\n</code></pre></p>"},{"location":"junior/api-development/status-codes/#3-4xx-istemci-hata-kodlar-nelerdir","title":"3. 4xx istemci hata kodlar\u0131 nelerdir?","text":"<p>Cevap: 4xx istemci hata kodlar\u0131: - 400 Bad Request: Ge\u00e7ersiz istek - 401 Unauthorized: Yetkisiz eri\u015fim - 403 Forbidden: Eri\u015fim engellendi - 404 Not Found: Kaynak bulunamad\u0131 - 409 Conflict: \u00c7ak\u0131\u015fma</p> <p>\u00d6rnek Kod: <pre><code>// 400 Bad Request\n[HttpPost]\npublic async Task&lt;ActionResult&lt;Product&gt;&gt; CreateProduct(ProductCreateDto productDto)\n{\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n    // ...\n}\n\n// 401 Unauthorized\n[HttpGet(\"secure\")]\n[Authorize]\npublic async Task&lt;ActionResult&gt; GetSecureData()\n{\n    // ...\n}\n\n// 403 Forbidden\n[HttpDelete(\"{id}\")]\n[Authorize(Roles = \"Admin\")]\npublic async Task&lt;IActionResult&gt; DeleteProduct(int id)\n{\n    // ...\n}\n\n// 404 Not Found\n[HttpGet(\"{id}\")]\npublic async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)\n{\n    var product = await _productService.GetByIdAsync(id);\n    if (product == null)\n    {\n        return NotFound();\n    }\n    return Ok(product);\n}\n\n// 409 Conflict\n[HttpPost]\npublic async Task&lt;ActionResult&lt;Product&gt;&gt; CreateProduct(ProductCreateDto productDto)\n{\n    if (await _productService.ExistsAsync(productDto.Name))\n    {\n        return Conflict(\"Product already exists\");\n    }\n    // ...\n}\n</code></pre></p>"},{"location":"junior/api-development/status-codes/#4-5xx-sunucu-hata-kodlar-nelerdir","title":"4. 5xx sunucu hata kodlar\u0131 nelerdir?","text":"<p>Cevap: 5xx sunucu hata kodlar\u0131: - 500 Internal Server Error: Sunucu hatas\u0131 - 501 Not Implemented: Uygulanmam\u0131\u015f - 502 Bad Gateway: Ge\u00e7ersiz a\u011f ge\u00e7idi - 503 Service Unavailable: Servis kullan\u0131lam\u0131yor - 504 Gateway Timeout: A\u011f ge\u00e7idi zaman a\u015f\u0131m\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Global hata y\u00f6netimi\npublic class GlobalExceptionHandler\n{\n    public async Task HandleExceptionAsync(HttpContext context, Exception exception)\n    {\n        context.Response.ContentType = \"application/json\";\n\n        switch (exception)\n        {\n            case ValidationException:\n                context.Response.StatusCode = 400;\n                break;\n            case NotFoundException:\n                context.Response.StatusCode = 404;\n                break;\n            case UnauthorizedException:\n                context.Response.StatusCode = 401;\n                break;\n            default:\n                context.Response.StatusCode = 500;\n                break;\n        }\n\n        await context.Response.WriteAsync(new ErrorDetails\n        {\n            StatusCode = context.Response.StatusCode,\n            Message = exception.Message\n        }.ToString());\n    }\n}\n</code></pre></p>"},{"location":"junior/api-development/status-codes/#5-ozel-durum-kodlar-nasl-olusturulur","title":"5. \u00d6zel durum kodlar\u0131 nas\u0131l olu\u015fturulur?","text":"<p>Cevap: \u00d6zel durum kodlar\u0131 i\u00e7in: - ActionResult d\u00f6n\u00fc\u015f tipi kullan\u0131n - StatusCode metodunu kullan\u0131n - ProblemDetails s\u0131n\u0131f\u0131n\u0131 kullan\u0131n - \u00d6zel hata s\u0131n\u0131flar\u0131 olu\u015fturun</p> <p>\u00d6rnek Kod: <pre><code>// \u00d6zel durum kodu \u00f6rne\u011fi\n[HttpPost(\"custom\")]\npublic async Task&lt;ActionResult&gt; CustomAction()\n{\n    // \u00d6zel durum kodu\n    return StatusCode(418, new { Message = \"I'm a teapot\" });\n\n    // ProblemDetails kullan\u0131m\u0131\n    return Problem(\n        title: \"Custom Error\",\n        detail: \"Something went wrong\",\n        statusCode: 418\n    );\n\n    // \u00d6zel hata s\u0131n\u0131f\u0131\n    return StatusCode(418, new CustomError\n    {\n        Code = \"TEAPOT_ERROR\",\n        Message = \"I'm a teapot\",\n        Details = \"Cannot brew coffee\"\n    });\n}\n</code></pre></p>"},{"location":"junior/api-development/status-codes/#best-practices","title":"Best Practices","text":"<ol> <li>Durum Kodu Se\u00e7imi</li> <li>Do\u011fru durum kodunu kullan\u0131n</li> <li>Tutarl\u0131 olun</li> <li>A\u00e7\u0131klay\u0131c\u0131 hata mesajlar\u0131 verin</li> <li> <p>ProblemDetails kullan\u0131n</p> </li> <li> <p>Hata Y\u00f6netimi</p> </li> <li>Global hata yakalama kullan\u0131n</li> <li>\u00d6zel hata s\u0131n\u0131flar\u0131 olu\u015fturun</li> <li>Loglama yap\u0131n</li> <li> <p>Hata detaylar\u0131n\u0131 g\u00fcvenli \u015fekilde iletin</p> </li> <li> <p>Dok\u00fcmantasyon</p> </li> <li>Durum kodlar\u0131n\u0131 dok\u00fcmante edin</li> <li>\u00d6rnek yan\u0131tlar ekleyin</li> <li>Hata senaryolar\u0131n\u0131 a\u00e7\u0131klay\u0131n</li> <li>\u00c7\u00f6z\u00fcm \u00f6nerileri sunun</li> </ol>"},{"location":"junior/api-development/status-codes/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>HTTP Status Codes</li> <li>Problem Details for HTTP APIs</li> <li>ASP.NET Core Web API Error Handling </li> </ul>"},{"location":"junior/aspnet-core-basics/","title":"ASP.NET Core Temelleri","text":""},{"location":"junior/aspnet-core-basics/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, modern web uygulamalar\u0131 geli\u015ftirmek i\u00e7in kullan\u0131lan ASP.NET Core framework'\u00fcn\u00fcn temel kavramlar\u0131n\u0131 ve bile\u015fenlerini inceleyece\u011fiz.</p>"},{"location":"junior/aspnet-core-basics/#icindekiler","title":"\u0130\u00e7indekiler","text":"<ol> <li>Middleware</li> <li>Dependency Injection</li> <li>Routing</li> <li>Model Binding</li> <li> <p>Validation</p> </li> <li> <p>Authentication</p> </li> <li>Cookie authentication</li> <li>JWT authentication</li> <li>Identity framework</li> <li>Authorization</li> </ol>"},{"location":"junior/aspnet-core-basics/#ogrenme-hedefleri","title":"\u00d6\u011frenme Hedefleri","text":"<p>Bu b\u00f6l\u00fcm\u00fc tamamlad\u0131\u011f\u0131n\u0131zda: - ASP.NET Core'un temel mimarisini anlayacaks\u0131n\u0131z - Middleware pipeline'\u0131n\u0131 yap\u0131land\u0131rabileceksiniz - Dependency Injection'\u0131 etkin \u015fekilde kullanabileceksiniz - Routing mekanizmas\u0131n\u0131 y\u00f6netebileceksiniz - Model binding ve validation i\u015flemlerini yapabileceksiniz - Authentication ve authorization mekanizmalar\u0131n\u0131 uygulayabileceksiniz</p>"},{"location":"junior/aspnet-core-basics/#on-gereksinimler","title":"\u00d6n Gereksinimler","text":"<p>Bu b\u00f6l\u00fcm\u00fc takip etmek i\u00e7in: - C# programlama dili bilgisi - .NET Core temel kavramlar\u0131 - Visual Studio veya VS Code kurulumu - .NET SDK kurulumu</p>"},{"location":"junior/aspnet-core-basics/#best-practices","title":"Best Practices","text":"<ol> <li>Mimari</li> <li>Clean Architecture</li> <li>SOLID prensipleri</li> <li>Dependency Injection</li> <li> <p>Middleware pipeline</p> </li> <li> <p>Performans</p> </li> <li>Response compression</li> <li>Caching</li> <li>Async/await</li> <li> <p>Connection pooling</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation</li> <li>Authentication</li> <li>Authorization</li> <li>HTTPS</li> </ol>"},{"location":"junior/aspnet-core-basics/#ornek-proje-yaps","title":"\u00d6rnek Proje Yap\u0131s\u0131","text":"<pre><code>ASPNetCoreBasics/\n\u251c\u2500\u2500 Controllers/\n\u2502   \u251c\u2500\u2500 HomeController.cs\n\u2502   \u2514\u2500\u2500 AccountController.cs\n\u251c\u2500\u2500 Models/\n\u2502   \u251c\u2500\u2500 User.cs\n\u2502   \u2514\u2500\u2500 Product.cs\n\u251c\u2500\u2500 Services/\n\u2502   \u251c\u2500\u2500 IUserService.cs\n\u2502   \u2514\u2500\u2500 UserService.cs\n\u251c\u2500\u2500 Middleware/\n\u2502   \u2514\u2500\u2500 CustomMiddleware.cs\n\u2514\u2500\u2500 Program.cs\n</code></pre>"},{"location":"junior/aspnet-core-basics/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":"<ol> <li>ASP.NET Core ve ASP.NET Framework aras\u0131ndaki farklar nelerdir?</li> <li>Cross-platform deste\u011fi</li> <li>Performans iyile\u015ftirmeleri</li> <li>Mod\u00fcler yap\u0131</li> <li> <p>Dependency Injection</p> </li> <li> <p>Middleware nedir ve ne i\u015fe yarar?</p> </li> <li>Request pipeline bile\u015feni</li> <li>S\u0131ral\u0131 i\u015flem</li> <li>Request/Response manip\u00fclasyonu</li> <li> <p>Authentication/Authorization</p> </li> <li> <p>Dependency Injection neden \u00f6nemlidir?</p> </li> <li>Loose coupling</li> <li>Test edilebilirlik</li> <li>Kod organizasyonu</li> <li>Service lifetime y\u00f6netimi</li> </ol>"},{"location":"junior/aspnet-core-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Dok\u00fcmantasyonu</li> <li>ASP.NET Core Fundamentals</li> <li>ASP.NET Core Best Practices </li> </ul>"},{"location":"junior/aspnet-core-basics/dependency-injection/","title":"Dependency Injection","text":""},{"location":"junior/aspnet-core-basics/dependency-injection/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Dependency Injection (DI), nesnelerin ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131 d\u0131\u015far\u0131dan almas\u0131n\u0131 sa\u011flayan bir tasar\u0131m desenidir. ASP.NET Core'da built-in DI container bulunur ve bu sayede loose coupling, test edilebilirlik ve mod\u00fclerlik sa\u011flan\u0131r.</p>"},{"location":"junior/aspnet-core-basics/dependency-injection/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/aspnet-core-basics/dependency-injection/#1-dependency-injection-nedir-ve-neden-kullanlr","title":"1. Dependency Injection nedir ve neden kullan\u0131l\u0131r?","text":"<p>Cevap: Dependency Injection, bir nesnenin ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131n d\u0131\u015far\u0131dan verilmesi prensibidir. Kullan\u0131m nedenleri: - Loose coupling sa\u011flar - Test edilebilirli\u011fi art\u0131r\u0131r - Kod bak\u0131m\u0131n\u0131 kolayla\u015ft\u0131r\u0131r - Mod\u00fcler yap\u0131y\u0131 destekler</p> <p>\u00d6rnek Kod: <pre><code>// DI kullanmadan\npublic class UserService\n{\n    private readonly UserRepository _repository = new UserRepository();\n}\n\n// DI ile\npublic class UserService\n{\n    private readonly IUserRepository _repository;\n\n    public UserService(IUserRepository repository)\n    {\n        _repository = repository;\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/dependency-injection/#2-service-lifetimes-nelerdir","title":"2. Service lifetimes nelerdir?","text":"<p>Cevap: ASP.NET Core'da \u00fc\u00e7 farkl\u0131 service lifetime vard\u0131r: - Singleton: Uygulama ya\u015fam d\u00f6ng\u00fcs\u00fc boyunca tek instance - Scoped: Her HTTP iste\u011fi i\u00e7in yeni instance - Transient: Her servis talebinde yeni instance</p> <p>\u00d6rnek Kod: <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton&lt;ICacheService, CacheService&gt;();\n    services.AddScoped&lt;IUserService, UserService&gt;();\n    services.AddTransient&lt;IEmailService, EmailService&gt;();\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/dependency-injection/#3-constructor-injection-ve-method-injection-arasndaki-farklar-nelerdir","title":"3. Constructor injection ve method injection aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Constructor injection: - S\u0131n\u0131f seviyesinde ba\u011f\u0131ml\u0131l\u0131k - T\u00fcm metodlar i\u00e7in kullan\u0131labilir - Daha yayg\u0131n kullan\u0131m - Test edilebilirlik a\u00e7\u0131s\u0131ndan avantajl\u0131</p> <p>Method injection: - Metod seviyesinde ba\u011f\u0131ml\u0131l\u0131k - Sadece ilgili metod i\u00e7in kullan\u0131l\u0131r - Daha az yayg\u0131n - Ge\u00e7ici ba\u011f\u0131ml\u0131l\u0131klar i\u00e7in uygun</p> <p>\u00d6rnek Kod: <pre><code>// Constructor injection\npublic class UserService\n{\n    private readonly IUserRepository _repository;\n\n    public UserService(IUserRepository repository)\n    {\n        _repository = repository;\n    }\n}\n\n// Method injection\npublic class UserService\n{\n    public void SendEmail(IEmailService emailService, string message)\n    {\n        emailService.Send(message);\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/dependency-injection/#4-service-collectiona-servis-nasl-kaydedilir","title":"4. Service collection'a servis nas\u0131l kaydedilir?","text":"<p>Cevap: Servisler ConfigureServices metodunda kaydedilir: - AddSingleton: Tek instance - AddScoped: Request ba\u015f\u0131na instance - AddTransient: Her talepte instance - AddScoped vs AddTransient kullan\u0131m senaryolar\u0131</p> <p>\u00d6rnek Kod: <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // Interface-implementation mapping\n    services.AddScoped&lt;IUserService, UserService&gt;();\n\n    // Concrete type\n    services.AddSingleton&lt;CacheService&gt;();\n\n    // Factory method\n    services.AddTransient&lt;IService&gt;(sp =&gt; \n        new Service(sp.GetRequiredService&lt;ILogger&gt;()));\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/dependency-injection/#5-di-containerdan-servis-nasl-resolve-edilir","title":"5. DI container'dan servis nas\u0131l resolve edilir?","text":"<p>Cevap: Servisler \u015fu yollarla resolve edilebilir: - Constructor injection (\u00f6nerilen) - IServiceProvider kullan\u0131m\u0131 - [FromServices] attribute'u - ActivatorUtilities</p> <p>\u00d6rnek Kod: <pre><code>// Constructor injection\npublic class HomeController : Controller\n{\n    private readonly IUserService _userService;\n\n    public HomeController(IUserService userService)\n    {\n        _userService = userService;\n    }\n}\n\n// IServiceProvider\npublic class CustomMiddleware\n{\n    public async Task InvokeAsync(HttpContext context, IServiceProvider serviceProvider)\n    {\n        var service = serviceProvider.GetRequiredService&lt;IService&gt;();\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/dependency-injection/#best-practices","title":"Best Practices","text":"<ol> <li>Servis Kayd\u0131</li> <li>Interface kullan\u0131n</li> <li>Do\u011fru lifetime se\u00e7in</li> <li>Servisleri mod\u00fcler tutun</li> <li> <p>Circular dependency'den ka\u00e7\u0131n\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Gereksiz servis kayd\u0131 yapmay\u0131n</li> <li>Singleton servisleri thread-safe yap\u0131n</li> <li>Memory leak'leri \u00f6nleyin</li> <li> <p>Dispose pattern'i uygulay\u0131n</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Mock'lanabilir servisler tasarlay\u0131n</li> <li>Interface'leri k\u00fc\u00e7\u00fck tutun</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin</li> <li>Unit test yaz\u0131n</li> </ol>"},{"location":"junior/aspnet-core-basics/dependency-injection/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Dependency Injection</li> <li>Dependency Injection Guidelines</li> <li>Service Lifetimes </li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/","title":"Middleware","text":""},{"location":"junior/aspnet-core-basics/middleware/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Middleware, ASP.NET Core uygulamalar\u0131nda HTTP isteklerini i\u015fleyen ve yan\u0131tlar\u0131 olu\u015fturan bile\u015fenlerdir. Bu bile\u015fenler, istek pipeline'\u0131nda s\u0131ral\u0131 olarak \u00e7al\u0131\u015f\u0131r ve her biri belirli bir i\u015flevi yerine getirir.</p>"},{"location":"junior/aspnet-core-basics/middleware/#middleware-nedir","title":"Middleware Nedir?","text":"<ul> <li>HTTP isteklerini i\u015fleyen bile\u015fenler</li> <li>Pipeline i\u00e7inde s\u0131ral\u0131 \u00e7al\u0131\u015fma</li> <li>Request ve response manip\u00fclasyonu</li> <li>\u00d6zelle\u015ftirilebilir yap\u0131</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#middleware-pipeline","title":"Middleware Pipeline","text":"<pre><code>public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    // Exception handling middleware\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseExceptionHandler(\"/Error\");\n    }\n\n    // Static files middleware\n    app.UseStaticFiles();\n\n    // Routing middleware\n    app.UseRouting();\n\n    // Authentication middleware\n    app.UseAuthentication();\n\n    // Authorization middleware\n    app.UseAuthorization();\n\n    // Endpoint middleware\n    app.UseEndpoints(endpoints =&gt;\n    {\n        endpoints.MapControllers();\n    });\n}\n</code></pre>"},{"location":"junior/aspnet-core-basics/middleware/#middleware-turleri","title":"Middleware T\u00fcrleri","text":""},{"location":"junior/aspnet-core-basics/middleware/#1-built-in-middleware","title":"1. Built-in Middleware","text":"<pre><code>// Exception handling\napp.UseExceptionHandler(\"/Error\");\n\n// Static files\napp.UseStaticFiles();\n\n// Routing\napp.UseRouting();\n\n// Authentication\napp.UseAuthentication();\n\n// Authorization\napp.UseAuthorization();\n\n// CORS\napp.UseCors(\"MyPolicy\");\n\n// Compression\napp.UseResponseCompression();\n</code></pre>"},{"location":"junior/aspnet-core-basics/middleware/#2-custom-middleware","title":"2. Custom Middleware","text":"<pre><code>public class CustomMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public CustomMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        // Request i\u015fleme\n        await _next(context);\n        // Response i\u015fleme\n    }\n}\n\n// Extension method\npublic static class CustomMiddlewareExtensions\n{\n    public static IApplicationBuilder UseCustomMiddleware(\n        this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware&lt;CustomMiddleware&gt;();\n    }\n}\n\n// Kullan\u0131m\u0131\napp.UseCustomMiddleware();\n</code></pre>"},{"location":"junior/aspnet-core-basics/middleware/#middleware-yasam-dongusu","title":"Middleware Ya\u015fam D\u00f6ng\u00fcs\u00fc","text":""},{"location":"junior/aspnet-core-basics/middleware/#1-olusturma","title":"1. Olu\u015fturma","text":"<ul> <li>Constructor injection</li> <li>Singleton ya\u015fam d\u00f6ng\u00fcs\u00fc</li> <li>RequestDelegate parametresi</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#2-calsma","title":"2. \u00c7al\u0131\u015fma","text":"<ul> <li>Invoke/InvokeAsync metodu</li> <li>Request i\u015fleme</li> <li>Next middleware \u00e7a\u011fr\u0131s\u0131</li> <li>Response i\u015fleme</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#3-sonlandrma","title":"3. Sonland\u0131rma","text":"<ul> <li>Dispose pattern</li> <li>Kaynak temizleme</li> <li>Exception handling</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#best-practices","title":"Best Practices","text":""},{"location":"junior/aspnet-core-basics/middleware/#1-middleware-sralamas","title":"1. Middleware S\u0131ralamas\u0131","text":"<ul> <li>Exception handling en ba\u015fta</li> <li>Static files routing'den \u00f6nce</li> <li>Authentication authorization'dan \u00f6nce</li> <li>Endpoint en sonda</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#2-performans","title":"2. Performans","text":"<ul> <li>Async/await kullan\u0131m\u0131</li> <li>Gereksiz middleware'lerden ka\u00e7\u0131nma</li> <li>Response compression</li> <li>Caching stratejileri</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#3-guvenlik","title":"3. G\u00fcvenlik","text":"<ul> <li>HTTPS y\u00f6nlendirmesi</li> <li>Security headers</li> <li>CORS politikalar\u0131</li> <li>Rate limiting</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":""},{"location":"junior/aspnet-core-basics/middleware/#1-request-logging-middleware","title":"1. Request Logging Middleware","text":"<pre><code>public class RequestLoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;RequestLoggingMiddleware&gt; _logger;\n\n    public RequestLoggingMiddleware(\n        RequestDelegate next,\n        ILogger&lt;RequestLoggingMiddleware&gt; logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var startTime = DateTime.UtcNow;\n\n        await _next(context);\n\n        var endTime = DateTime.UtcNow;\n        var duration = endTime - startTime;\n\n        _logger.LogInformation(\n            \"Request {method} {url} =&gt; {statusCode} ({duration}ms)\",\n            context.Request.Method,\n            context.Request.Path,\n            context.Response.StatusCode,\n            duration.TotalMilliseconds);\n    }\n}\n</code></pre>"},{"location":"junior/aspnet-core-basics/middleware/#2-custom-header-middleware","title":"2. Custom Header Middleware","text":"<pre><code>public class CustomHeaderMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly string _headerName;\n    private readonly string _headerValue;\n\n    public CustomHeaderMiddleware(\n        RequestDelegate next,\n        string headerName,\n        string headerValue)\n    {\n        _next = next;\n        _headerName = headerName;\n        _headerValue = headerValue;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        context.Response.Headers.Add(_headerName, _headerValue);\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"junior/aspnet-core-basics/middleware/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"junior/aspnet-core-basics/middleware/#1-middleware-sralamas-neden-onemlidir","title":"1. Middleware s\u0131ralamas\u0131 neden \u00f6nemlidir?","text":"<ul> <li>\u0130\u015flem s\u0131ras\u0131 belirler</li> <li>Performans\u0131 etkiler</li> <li>G\u00fcvenli\u011fi sa\u011flar</li> <li>Hata y\u00f6netimini kolayla\u015ft\u0131r\u0131r</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#2-custom-middleware-ne-zaman-kullanlmaldr","title":"2. Custom middleware ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>\u00d6zel i\u015flemler gerekti\u011finde</li> <li>Cross-cutting concerns i\u00e7in</li> <li>Request/response manip\u00fclasyonu i\u00e7in</li> <li>Logging ve monitoring i\u00e7in</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#3-middleware-performansn-nasl-optimize-edebilirim","title":"3. Middleware performans\u0131n\u0131 nas\u0131l optimize edebilirim?","text":"<ul> <li>Gereksiz middleware'leri kald\u0131r\u0131n</li> <li>Async/await kullan\u0131n</li> <li>Response compression kullan\u0131n</li> <li>Caching stratejileri uygulay\u0131n</li> </ul>"},{"location":"junior/aspnet-core-basics/middleware/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Middleware</li> <li>Custom Middleware</li> <li>Middleware Order </li> </ul>"},{"location":"junior/aspnet-core-basics/model-binding/","title":"Model Binding","text":""},{"location":"junior/aspnet-core-basics/model-binding/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Model Binding, ASP.NET Core'da HTTP isteklerinden gelen verileri C# nesnelerine otomatik olarak d\u00f6n\u00fc\u015ft\u00fcren mekanizmad\u0131r. Form verileri, route parametreleri, query string ve request body gibi farkl\u0131 kaynaklardan veri ba\u011flama i\u015flemi yapar.</p>"},{"location":"junior/aspnet-core-basics/model-binding/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/aspnet-core-basics/model-binding/#1-model-binding-nedir-ve-nasl-calsr","title":"1. Model Binding nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Model Binding, HTTP iste\u011finden gelen verileri C# nesnelerine d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemidir. \u00c7al\u0131\u015fma prensibi: - Veri kaynaklar\u0131n\u0131 tarar - Uygun property'leri bulur - Tip d\u00f6n\u00fc\u015f\u00fcm\u00fc yapar - Validation kurallar\u0131n\u0131 uygular</p> <p>\u00d6rnek Kod: <pre><code>public class ProductController : Controller\n{\n    // Form verisi binding\n    [HttpPost]\n    public IActionResult Create(Product product)\n    {\n        // ...\n    }\n\n    // Query string binding\n    [HttpGet]\n    public IActionResult Search(string category, decimal? minPrice)\n    {\n        // ...\n    }\n\n    // Route parameter binding\n    [HttpGet(\"{id}\")]\n    public IActionResult GetById(int id)\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/model-binding/#2-model-binding-kaynaklar-nelerdir","title":"2. Model Binding kaynaklar\u0131 nelerdir?","text":"<p>Cevap: Model Binding \u015fu kaynaklardan veri alabilir: - Form data ([FromForm]) - Route data ([FromRoute]) - Query string ([FromQuery]) - Request body ([FromBody]) - Header ([FromHeader])</p> <p>\u00d6rnek Kod: <pre><code>public class OrderController : Controller\n{\n    [HttpPost]\n    public IActionResult Create(\n        [FromBody] Order order,\n        [FromQuery] string promoCode,\n        [FromHeader(Name = \"X-User-Id\")] string userId)\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/model-binding/#3-complex-type-binding-nasl-yaplr","title":"3. Complex type binding nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Complex type binding i\u00e7in: - Nested property'ler desteklenir - Collection binding yap\u0131labilir - Custom model binder kullan\u0131labilir - Validation attribute'lar\u0131 eklenebilir</p> <p>\u00d6rnek Kod: <pre><code>public class Order\n{\n    public int Id { get; set; }\n    public Customer Customer { get; set; }\n    public List&lt;OrderItem&gt; Items { get; set; }\n}\n\npublic class Customer\n{\n    public string Name { get; set; }\n    public Address ShippingAddress { get; set; }\n}\n\n[HttpPost]\npublic IActionResult CreateOrder(Order order)\n{\n    // ...\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/model-binding/#4-custom-model-binder-nasl-olusturulur","title":"4. Custom model binder nas\u0131l olu\u015fturulur?","text":"<p>Cevap: Custom model binder olu\u015fturmak i\u00e7in: - IModelBinder interface'i implemente edilir - BindModelAsync metodu override edilir - Startup.cs'te kaydedilir - Attribute ile kullan\u0131l\u0131r</p> <p>\u00d6rnek Kod: <pre><code>public class CustomModelBinder : IModelBinder\n{\n    public Task BindModelAsync(ModelBindingContext bindingContext)\n    {\n        var value = bindingContext.ValueProvider.GetValue(\"custom\").FirstValue;\n\n        if (string.IsNullOrEmpty(value))\n        {\n            bindingContext.Result = ModelBindingResult.Failed();\n            return Task.CompletedTask;\n        }\n\n        bindingContext.Result = ModelBindingResult.Success(value);\n        return Task.CompletedTask;\n    }\n}\n\n[ModelBinder(BinderType = typeof(CustomModelBinder))]\npublic class CustomModel\n{\n    public string Value { get; set; }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/model-binding/#5-model-binding-validation-nasl-yaplr","title":"5. Model binding validation nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Model binding validation i\u00e7in: - Data annotations kullan\u0131l\u0131r - Custom validation attribute'lar\u0131 yaz\u0131labilir - IValidatableObject interface'i implemente edilebilir - ModelState kontrol\u00fc yap\u0131l\u0131r</p> <p>\u00d6rnek Kod: <pre><code>public class Product\n{\n    [Required]\n    [StringLength(100)]\n    public string Name { get; set; }\n\n    [Range(0, 1000)]\n    public decimal Price { get; set; }\n\n    [CustomValidation]\n    public string Category { get; set; }\n}\n\n[HttpPost]\npublic IActionResult Create(Product product)\n{\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n    // ...\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/model-binding/#best-practices","title":"Best Practices","text":"<ol> <li>Model Tasar\u0131m\u0131</li> <li>Property isimlerini anlaml\u0131 se\u00e7in</li> <li>Validation kurallar\u0131n\u0131 ekleyin</li> <li>Complex type'lar\u0131 mod\u00fcler tutun</li> <li> <p>Interface'leri kullan\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Gereksiz binding'den ka\u00e7\u0131n\u0131n</li> <li>B\u00fcy\u00fck modelleri par\u00e7alay\u0131n</li> <li>Async binding kullan\u0131n</li> <li> <p>Cache mekanizmalar\u0131n\u0131 de\u011ferlendirin</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation yap\u0131n</li> <li>Over-posting'e kar\u015f\u0131 koruyun</li> <li>Sensitive data'lar\u0131 kontrol edin</li> <li>XSS ve CSRF korumas\u0131 ekleyin</li> </ol>"},{"location":"junior/aspnet-core-basics/model-binding/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Model Binding</li> <li>Custom Model Binding</li> <li>Model Validation </li> </ul>"},{"location":"junior/aspnet-core-basics/routing/","title":"Routing","text":""},{"location":"junior/aspnet-core-basics/routing/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Routing, ASP.NET Core uygulamalar\u0131nda gelen HTTP isteklerini ilgili controller action'lar\u0131na y\u00f6nlendiren mekanizmad\u0131r. \u0130ki temel routing yakla\u015f\u0131m\u0131 vard\u0131r: convention-based routing ve attribute routing.</p>"},{"location":"junior/aspnet-core-basics/routing/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/aspnet-core-basics/routing/#1-routing-nedir-ve-nasl-calsr","title":"1. Routing nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Routing, URL'leri controller action'lar\u0131na e\u015fle\u015ftiren bir mekanizmad\u0131r. \u00c7al\u0131\u015fma prensibi: - URL'yi parse eder - Route template'leri kontrol eder - Route de\u011ferlerini \u00e7\u0131kar\u0131r - Controller ve action'\u0131 belirler</p> <p>\u00d6rnek Kod: <pre><code>// Convention-based routing\napp.UseEndpoints(endpoints =&gt;\n{\n    endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\n});\n\n// Attribute routing\n[Route(\"api/[controller]\")]\npublic class ProductsController : Controller\n{\n    [HttpGet(\"{id}\")]\n    public IActionResult GetProduct(int id)\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/routing/#2-convention-based-routing-ve-attribute-routing-arasndaki-farklar-nelerdir","title":"2. Convention-based routing ve attribute routing aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Convention-based routing: - Startup.cs'te tan\u0131mlan\u0131r - Global route kurallar\u0131 - Daha az esnek - Legacy uygulamalar i\u00e7in uygun</p> <p>Attribute routing: - Controller/action seviyesinde tan\u0131mlan\u0131r - Daha esnek ve okunabilir - RESTful API'ler i\u00e7in ideal - Modern yakla\u015f\u0131m</p> <p>\u00d6rnek Kod: <pre><code>// Convention-based\napp.UseEndpoints(endpoints =&gt;\n{\n    endpoints.MapControllerRoute(\n        name: \"blog\",\n        pattern: \"blog/{*article}\",\n        defaults: new { controller = \"Blog\", action = \"Article\" });\n});\n\n// Attribute\n[Route(\"api/[controller]\")]\npublic class BlogController : Controller\n{\n    [HttpGet(\"{article}\")]\n    public IActionResult Article(string article)\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/routing/#3-route-constraints-nedir-ve-nasl-kullanlr","title":"3. Route constraints nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Route constraints, route parametrelerine k\u0131s\u0131tlama getirmek i\u00e7in kullan\u0131l\u0131r: - Veri tipi kontrol\u00fc - Regex pattern kontrol\u00fc - Min/max de\u011fer kontrol\u00fc - Custom constraint'ler</p> <p>\u00d6rnek Kod: <pre><code>// Convention-based constraints\napp.UseEndpoints(endpoints =&gt;\n{\n    endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id:int}\");\n});\n\n// Attribute constraints\n[Route(\"api/[controller]\")]\npublic class ProductsController : Controller\n{\n    [HttpGet(\"{id:int:min(1)}\")]\n    public IActionResult GetProduct(int id)\n    {\n        // ...\n    }\n\n    [HttpGet(\"{name:alpha}\")]\n    public IActionResult GetProductByName(string name)\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/routing/#4-route-parameters-nasl-kullanlr","title":"4. Route parameters nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Route parametreleri \u015fu \u015fekilde kullan\u0131labilir: - Query string parametreleri - Route segment parametreleri - Optional parametreler - Default de\u011ferler</p> <p>\u00d6rnek Kod: <pre><code>[Route(\"api/[controller]\")]\npublic class ProductsController : Controller\n{\n    // Query string: /api/products?category=electronics\n    [HttpGet]\n    public IActionResult GetByCategory(string category)\n    {\n        // ...\n    }\n\n    // Route parameter: /api/products/1\n    [HttpGet(\"{id}\")]\n    public IActionResult GetById(int id)\n    {\n        // ...\n    }\n\n    // Optional parameter: /api/products/search/electronics\n    [HttpGet(\"search/{category?}\")]\n    public IActionResult Search(string category = \"all\")\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/routing/#5-custom-route-handler-nasl-olusturulur","title":"5. Custom route handler nas\u0131l olu\u015fturulur?","text":"<p>Cevap: Custom route handler olu\u015fturmak i\u00e7in: - IRouteConstraint interface'i implemente edilir - Match metodu override edilir - Startup.cs'te kaydedilir - Route'larda kullan\u0131l\u0131r</p> <p>\u00d6rnek Kod: <pre><code>public class CustomRouteConstraint : IRouteConstraint\n{\n    public bool Match(\n        HttpContext httpContext,\n        IRouter route,\n        string routeKey,\n        RouteValueDictionary values,\n        RouteDirection routeDirection)\n    {\n        // Custom logic\n        return true;\n    }\n}\n\n// Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.Configure&lt;RouteOptions&gt;(options =&gt;\n    {\n        options.ConstraintMap.Add(\"custom\", typeof(CustomRouteConstraint));\n    });\n}\n\n// Usage\n[Route(\"api/[controller]\")]\npublic class ProductsController : Controller\n{\n    [HttpGet(\"{id:custom}\")]\n    public IActionResult GetProduct(string id)\n    {\n        // ...\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/routing/#best-practices","title":"Best Practices","text":"<ol> <li>Route Tasar\u0131m\u0131</li> <li>RESTful prensipleri takip edin</li> <li>Anlaml\u0131 URL'ler kullan\u0131n</li> <li>Versioning i\u00e7in prefix kullan\u0131n</li> <li> <p>Route'lar\u0131 mod\u00fcler tutun</p> </li> <li> <p>Performans</p> </li> <li>Route say\u0131s\u0131n\u0131 minimize edin</li> <li>Complex constraint'lerden ka\u00e7\u0131n\u0131n</li> <li>Route cache'ini kullan\u0131n</li> <li> <p>Route order'\u0131 optimize edin</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Route injection'dan ka\u00e7\u0131n\u0131n</li> <li>Sensitive data'lar\u0131 route'ta kullanmay\u0131n</li> <li>Authorization kontrol\u00fc yap\u0131n</li> <li>Rate limiting uygulay\u0131n</li> </ol>"},{"location":"junior/aspnet-core-basics/routing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Routing</li> <li>Route Constraints</li> <li>Attribute Routing </li> </ul>"},{"location":"junior/aspnet-core-basics/validation/","title":"Validation","text":""},{"location":"junior/aspnet-core-basics/validation/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Validation, ASP.NET Core uygulamalar\u0131nda gelen verilerin do\u011frulu\u011funu ve ge\u00e7erlili\u011fini kontrol eden mekanizmad\u0131r. Data annotations, custom validation ve model state kullan\u0131larak ger\u00e7ekle\u015ftirilir.</p>"},{"location":"junior/aspnet-core-basics/validation/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/aspnet-core-basics/validation/#1-validation-nedir-ve-neden-onemlidir","title":"1. Validation nedir ve neden \u00f6nemlidir?","text":"<p>Cevap: Validation, veri do\u011frulama i\u015flemidir. \u00d6nemi: - Veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc sa\u011flar - G\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 \u00f6nler - Kullan\u0131c\u0131 deneyimini iyile\u015ftirir - Hatal\u0131 veri giri\u015fini engeller</p> <p>\u00d6rnek Kod: <pre><code>public class Product\n{\n    [Required(ErrorMessage = \"\u00dcr\u00fcn ad\u0131 zorunludur\")]\n    [StringLength(100, MinimumLength = 3)]\n    public string Name { get; set; }\n\n    [Range(0, 1000, ErrorMessage = \"Fiyat 0-1000 aras\u0131nda olmal\u0131d\u0131r\")]\n    public decimal Price { get; set; }\n\n    [RegularExpression(@\"^[A-Z]{2}\\d{4}$\", ErrorMessage = \"Ge\u00e7ersiz \u00fcr\u00fcn kodu\")]\n    public string ProductCode { get; set; }\n}\n\n[HttpPost]\npublic IActionResult Create(Product product)\n{\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n    // ...\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/validation/#2-data-annotations-nedir-ve-nasl-kullanlr","title":"2. Data annotations nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Data annotations, property'lere eklenen attribute'lar ile validation kurallar\u0131 tan\u0131mlamay\u0131 sa\u011flar. Kullan\u0131m\u0131: - Required: Zorunlu alan - StringLength: String uzunlu\u011fu - Range: Say\u0131sal aral\u0131k - RegularExpression: Regex pattern</p> <p>\u00d6rnek Kod: <pre><code>public class User\n{\n    [Required]\n    [EmailAddress]\n    public string Email { get; set; }\n\n    [Required]\n    [StringLength(100, MinimumLength = 6)]\n    [RegularExpression(@\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{6,}$\")]\n    public string Password { get; set; }\n\n    [Compare(\"Password\")]\n    public string ConfirmPassword { get; set; }\n\n    [Phone]\n    public string PhoneNumber { get; set; }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/validation/#3-custom-validation-nasl-olusturulur","title":"3. Custom validation nas\u0131l olu\u015fturulur?","text":"<p>Cevap: Custom validation i\u00e7in: - ValidationAttribute s\u0131n\u0131f\u0131ndan t\u00fcretilir - IsValid metodu override edilir - ValidationContext kullan\u0131l\u0131r - Error message tan\u0131mlan\u0131r</p> <p>\u00d6rnek Kod: <pre><code>public class CustomValidationAttribute : ValidationAttribute\n{\n    protected override ValidationResult IsValid(\n        object value,\n        ValidationContext validationContext)\n    {\n        if (value == null)\n        {\n            return ValidationResult.Success;\n        }\n\n        var stringValue = value.ToString();\n        if (stringValue.Contains(\"test\"))\n        {\n            return new ValidationResult(\n                \"De\u011fer 'test' i\u00e7eremez\",\n                new[] { validationContext.MemberName });\n        }\n\n        return ValidationResult.Success;\n    }\n}\n\npublic class Product\n{\n    [CustomValidation]\n    public string Name { get; set; }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/validation/#4-ivalidatableobject-interfacei-nasl-kullanlr","title":"4. IValidatableObject interface'i nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: IValidatableObject, kompleks validation kurallar\u0131 i\u00e7in kullan\u0131l\u0131r: - Validate metodu implemente edilir - Cross-property validation yap\u0131labilir - Business logic validation eklenebilir - Custom error messages d\u00f6nd\u00fcr\u00fclebilir</p> <p>\u00d6rnek Kod: <pre><code>public class Order : IValidatableObject\n{\n    public DateTime OrderDate { get; set; }\n    public DateTime DeliveryDate { get; set; }\n    public List&lt;OrderItem&gt; Items { get; set; }\n\n    public IEnumerable&lt;ValidationResult&gt; Validate(\n        ValidationContext validationContext)\n    {\n        if (DeliveryDate &lt; OrderDate)\n        {\n            yield return new ValidationResult(\n                \"Teslimat tarihi sipari\u015f tarihinden \u00f6nce olamaz\",\n                new[] { nameof(DeliveryDate) });\n        }\n\n        if (Items == null || !Items.Any())\n        {\n            yield return new ValidationResult(\n                \"Sipari\u015f en az bir \u00fcr\u00fcn i\u00e7ermelidir\",\n                new[] { nameof(Items) });\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/validation/#5-client-side-validation-nasl-yaplr","title":"5. Client-side validation nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Client-side validation i\u00e7in: - jQuery Validation kullan\u0131l\u0131r - Unobtrusive validation eklenir - Data annotations client-side'a ta\u015f\u0131n\u0131r - Custom validation script'leri yaz\u0131labilir</p> <p>\u00d6rnek Kod: <pre><code>&lt;!-- _Layout.cshtml --&gt;\n&lt;script src=\"~/lib/jquery-validation/dist/jquery.validate.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js\"&gt;&lt;/script&gt;\n\n&lt;!-- View --&gt;\n&lt;form asp-action=\"Create\" method=\"post\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label asp-for=\"Name\"&gt;&lt;/label&gt;\n        &lt;input asp-for=\"Name\" class=\"form-control\" /&gt;\n        &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-group\"&gt;\n        &lt;label asp-for=\"Price\"&gt;&lt;/label&gt;\n        &lt;input asp-for=\"Price\" class=\"form-control\" /&gt;\n        &lt;span asp-validation-for=\"Price\" class=\"text-danger\"&gt;&lt;/span&gt;\n    &lt;/div&gt;\n\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Kaydet&lt;/button&gt;\n&lt;/form&gt;\n</code></pre></p>"},{"location":"junior/aspnet-core-basics/validation/#best-practices","title":"Best Practices","text":"<ol> <li>Validation Stratejisi</li> <li>Hem client hem server validation yap\u0131n</li> <li>Anlaml\u0131 hata mesajlar\u0131 kullan\u0131n</li> <li>Validation kurallar\u0131n\u0131 merkezi tutun</li> <li> <p>Business logic validation'\u0131 ayr\u0131 tutun</p> </li> <li> <p>Performans</p> </li> <li>Gereksiz validation'dan ka\u00e7\u0131n\u0131n</li> <li>Complex validation'lar\u0131 optimize edin</li> <li>Validation cache kullan\u0131n</li> <li> <p>Async validation'\u0131 de\u011ferlendirin</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input sanitization yap\u0131n</li> <li>XSS korumas\u0131 ekleyin</li> <li>SQL injection'a kar\u015f\u0131 koruyun</li> <li>Rate limiting uygulay\u0131n</li> </ol>"},{"location":"junior/aspnet-core-basics/validation/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Validation</li> <li>Custom Validation Attributes</li> <li>Client-side Validation </li> </ul>"},{"location":"junior/basic-dotnet-concepts/","title":"Temel .NET Kavramlar\u0131","text":""},{"location":"junior/basic-dotnet-concepts/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcm, .NET geli\u015ftiricilerinin bilmesi gereken temel kavramlar\u0131 kapsar. CLR, managed/unmanaged code, assembly ve namespace gibi temel yap\u0131lar\u0131 \u00f6\u011freneceksiniz.</p>"},{"location":"junior/basic-dotnet-concepts/#icindekiler","title":"\u0130\u00e7indekiler","text":"<ol> <li>.NET Framework vs .NET Core</li> <li>CLR (Common Language Runtime)</li> <li>Managed ve Unmanaged Code</li> <li>Assembly ve Namespace</li> <li>Garbage Collection</li> </ol>"},{"location":"junior/basic-dotnet-concepts/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/basic-dotnet-concepts/#1-net-framework-ve-net-core-arasndaki-temel-farklar-nelerdir","title":"1. .NET Framework ve .NET Core aras\u0131ndaki temel farklar nelerdir?","text":"<p>Cevap: - .NET Framework Windows'a \u00f6zg\u00fcd\u00fcr, .NET Core \u00e7apraz platformdur - .NET Core daha mod\u00fcler ve hafiftir - .NET Core daha h\u0131zl\u0131 performans sunar - .NET Core container deste\u011fi vard\u0131r - .NET Core a\u00e7\u0131k kaynak kodludur</p> <p>\u00d6rnek Kod: <pre><code>// .NET Framework'te Windows Forms uygulamas\u0131\npublic class WindowsFormApp : Form\n{\n    public WindowsFormApp()\n    {\n        this.Text = \"Windows Forms App\";\n    }\n}\n\n// .NET Core'da Console uygulamas\u0131\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Cross-platform .NET Core App\");\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/#2-clr-nedir-ve-nasl-calsr","title":"2. CLR nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: CLR (Common Language Runtime), .NET uygulamalar\u0131n\u0131n \u00e7al\u0131\u015fma zaman\u0131 ortam\u0131d\u0131r. Temel g\u00f6revleri: - Memory management - Type safety - Exception handling - Security - Thread management</p> <p>\u00d6rnek Kod: <pre><code>// CLR taraf\u0131ndan y\u00f6netilen memory allocation\npublic class MemoryExample\n{\n    public void AllocateMemory()\n    {\n        // CLR heap'te yer ay\u0131r\u0131r\n        var list = new List&lt;int&gt;();\n\n        // CLR garbage collection yapar\n        list = null;\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/#3-managed-ve-unmanaged-code-arasndaki-farklar-nelerdir","title":"3. Managed ve Unmanaged Code aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Managed Code: - CLR taraf\u0131ndan y\u00f6netilir - Otomatik memory management - Type safety - Exception handling</p> <p>Unmanaged Code: - \u0130\u015fletim sistemi taraf\u0131ndan y\u00f6netilir - Manuel memory management - Daha h\u0131zl\u0131 performans - Daha fazla kontrol</p> <p>\u00d6rnek Kod: <pre><code>// Managed Code\npublic class ManagedExample\n{\n    public void ManagedMethod()\n    {\n        var managedResource = new Resource();\n        // CLR otomatik olarak memory'yi y\u00f6netir\n    }\n}\n\n// Unmanaged Code\npublic class UnmanagedExample\n{\n    [DllImport(\"user32.dll\")]\n    public static extern int MessageBox(IntPtr hWnd, String text, String caption, uint type);\n\n    public void UnmanagedMethod()\n    {\n        // Windows API \u00e7a\u011fr\u0131s\u0131 - unmanaged code\n        MessageBox(IntPtr.Zero, \"Hello\", \"Message\", 0);\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/#4-assembly-ve-namespace-kavramlarn-acklaynz","title":"4. Assembly ve Namespace kavramlar\u0131n\u0131 a\u00e7\u0131klay\u0131n\u0131z.","text":"<p>Cevap: Assembly: - .NET'te da\u011f\u0131t\u0131m birimi - DLL veya EXE dosyas\u0131 - Metadata i\u00e7erir - Version bilgisi ta\u015f\u0131r</p> <p>Namespace: - Kod organizasyonu sa\u011flar - \u0130sim \u00e7ak\u0131\u015fmalar\u0131n\u0131 \u00f6nler - Hiyerar\u015fik yap\u0131 sunar - Kod okunabilirli\u011fini art\u0131r\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// Assembly: MyApp.dll\nnamespace MyApp.Data\n{\n    public class Database\n    {\n        // Database i\u015flemleri\n    }\n}\n\nnamespace MyApp.Services\n{\n    public class UserService\n    {\n        // Servis i\u015flemleri\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/#5-garbage-collection-nasl-calsr","title":"5. Garbage Collection nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Garbage Collection: - Otomatik memory y\u00f6netimi - Heap'teki kullan\u0131lmayan nesneleri temizler - Generations (0, 1, 2) kullan\u0131r - Finalization queue y\u00f6netir</p> <p>\u00d6rnek Kod: <pre><code>public class GarbageCollectionExample\n{\n    public void CreateAndCollect()\n    {\n        // Generation 0'da nesne olu\u015fturulur\n        var obj = new LargeObject();\n\n        // Nesne kullan\u0131lmaz hale gelir\n        obj = null;\n\n        // Garbage Collection tetiklenir\n        GC.Collect();\n\n        // Finalization queue kontrol\u00fc\n        GC.WaitForPendingFinalizers();\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/#best-practices","title":"Best Practices","text":"<ol> <li>Memory Y\u00f6netimi</li> <li>IDisposable pattern kullan\u0131m\u0131</li> <li>using statement kullan\u0131m\u0131</li> <li>Large object heap y\u00f6netimi</li> <li> <p>Finalization'dan ka\u00e7\u0131nma</p> </li> <li> <p>Performans</p> </li> <li>Boxing/unboxing'den ka\u00e7\u0131nma</li> <li>String concatenation yerine StringBuilder</li> <li>Collection initializers kullan\u0131m\u0131</li> <li> <p>Async/await pattern kullan\u0131m\u0131</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Code access security</li> <li>Role-based security</li> <li>Cryptography kullan\u0131m\u0131</li> <li>Secure string handling</li> </ol>"},{"location":"junior/basic-dotnet-concepts/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>.NET Documentation</li> <li>CLR via C#</li> <li>Pro .NET Memory Management </li> </ul>"},{"location":"junior/basic-dotnet-concepts/assembly-namespace/","title":"Assembly ve Namespace","text":""},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, .NET'te assembly ve namespace kavramlar\u0131n\u0131, bunlar\u0131n yap\u0131s\u0131n\u0131 ve kullan\u0131m\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#1-assembly-nedir-ve-temel-ozellikleri-nelerdir","title":"1. Assembly nedir ve temel \u00f6zellikleri nelerdir?","text":"<p>Cevap: Assembly, .NET'te da\u011f\u0131t\u0131m birimidir. Temel \u00f6zellikleri: - DLL veya EXE dosyas\u0131 olarak da\u011f\u0131t\u0131l\u0131r - Metadata i\u00e7erir (IL kodu, tip bilgileri) - Version bilgisi ta\u015f\u0131r - G\u00fcvenlik s\u0131n\u0131r\u0131 olu\u015fturur - Tip y\u00fckleme birimidir</p> <p>\u00d6rnek Kod: <pre><code>// Assembly bilgilerini okuma\npublic class AssemblyExample\n{\n    public void GetAssemblyInfo()\n    {\n        // Mevcut assembly'yi alma\n        var assembly = Assembly.GetExecutingAssembly();\n\n        // Assembly bilgilerini yazd\u0131rma\n        Console.WriteLine($\"Assembly Name: {assembly.GetName().Name}\");\n        Console.WriteLine($\"Version: {assembly.GetName().Version}\");\n        Console.WriteLine($\"Location: {assembly.Location}\");\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#2-strong-name-nedir-ve-nasl-kullanlr","title":"2. Strong Name nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Strong Name: - Assembly'ye benzersiz kimlik verir - Public/private key \u00e7ifti kullan\u0131r - Version kontrol\u00fc sa\u011flar - G\u00fcvenlik sa\u011flar</p> <p>\u00d6rnek Kod: <pre><code>// Strong name ile assembly olu\u015fturma\n[assembly: AssemblyKeyFile(\"MyKey.snk\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n\npublic class StrongNameExample\n{\n    public void VerifyStrongName()\n    {\n        var assembly = Assembly.GetExecutingAssembly();\n        var name = assembly.GetName();\n\n        // Strong name kontrol\u00fc\n        if (name.GetPublicKey().Length &gt; 0)\n        {\n            Console.WriteLine(\"Assembly strong name ile imzalanm\u0131\u015f\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#3-namespace-nedir-ve-nasl-kullanlr","title":"3. Namespace nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Namespace: - Kod organizasyonu sa\u011flar - \u0130sim \u00e7ak\u0131\u015fmalar\u0131n\u0131 \u00f6nler - Hiyerar\u015fik yap\u0131 sunar - Kod okunabilirli\u011fini art\u0131r\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// Namespace kullan\u0131m\u0131\nnamespace MyApp.Data\n{\n    public class Database\n    {\n        public void Connect()\n        {\n            // Veritaban\u0131 ba\u011flant\u0131s\u0131\n        }\n    }\n}\n\nnamespace MyApp.Services\n{\n    public class UserService\n    {\n        private readonly Data.Database _db;\n\n        public UserService()\n        {\n            _db = new Data.Database();\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#4-assembly-yukleme-sureci-nasl-calsr","title":"4. Assembly y\u00fckleme s\u00fcreci nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Assembly y\u00fckleme s\u00fcreci: 1. Fusion (Assembly resolver) devreye girer 2. GAC kontrol\u00fc yap\u0131l\u0131r 3. Probing yap\u0131l\u0131r (bin, private path) 4. Assembly manifest kontrol\u00fc 5. Tip y\u00fckleme</p> <p>\u00d6rnek Kod: <pre><code>public class AssemblyLoading\n{\n    public void LoadAssembly()\n    {\n        // Assembly y\u00fckleme\n        var assembly = Assembly.Load(\"MyLibrary\");\n\n        // Tip y\u00fckleme\n        var type = assembly.GetType(\"MyLibrary.MyClass\");\n\n        // Instance olu\u015fturma\n        var instance = Activator.CreateInstance(type);\n    }\n\n    // Custom assembly resolver\n    static AssemblyLoading()\n    {\n        AppDomain.CurrentDomain.AssemblyResolve += (sender, args) =&gt;\n        {\n            // Custom assembly \u00e7\u00f6z\u00fcmleme\n            return Assembly.LoadFrom(\"CustomPath\\\\\" + args.Name + \".dll\");\n        };\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#5-assembly-ve-namespace-arasndaki-iliski-nedir","title":"5. Assembly ve Namespace aras\u0131ndaki ili\u015fki nedir?","text":"<p>Cevap: Assembly ve Namespace ili\u015fkisi: - Assembly fiziksel birimdir - Namespace mant\u0131ksal birimdir - Bir assembly birden fazla namespace i\u00e7erebilir - Bir namespace birden fazla assembly'de olabilir - Namespace'ler assembly s\u0131n\u0131rlar\u0131n\u0131 a\u015fabilir</p> <p>\u00d6rnek Kod: <pre><code>// Farkl\u0131 assembly'lerde ayn\u0131 namespace\n// Assembly1.dll\nnamespace MyApp.Common\n{\n    public class Logger { }\n}\n\n// Assembly2.dll\nnamespace MyApp.Common\n{\n    public class Configuration { }\n}\n\n// Kullan\u0131m\npublic class Example\n{\n    public void UseNamespaces()\n    {\n        // Farkl\u0131 assembly'lerden ayn\u0131 namespace\n        var logger = new MyApp.Common.Logger();\n        var config = new MyApp.Common.Configuration();\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#best-practices","title":"Best Practices","text":"<ol> <li>Assembly Tasar\u0131m\u0131</li> <li>Single responsibility</li> <li>Version y\u00f6netimi</li> <li>Dependency minimizasyonu</li> <li> <p>Strong name kullan\u0131m\u0131</p> </li> <li> <p>Namespace Organizasyonu</p> </li> <li>Anlaml\u0131 isimlendirme</li> <li>Hiyerar\u015fik yap\u0131</li> <li>\u0130sim \u00e7ak\u0131\u015fmalar\u0131ndan ka\u00e7\u0131nma</li> <li> <p>Kod organizasyonu</p> </li> <li> <p>Assembly Y\u00f6netimi</p> </li> <li>Lazy loading</li> <li>Assembly binding</li> <li>Version kontrol\u00fc</li> <li>Security considerations</li> </ol>"},{"location":"junior/basic-dotnet-concepts/assembly-namespace/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Assemblies in .NET</li> <li>Namespaces in C#</li> <li>Strong-Named Assemblies </li> </ul>"},{"location":"junior/basic-dotnet-concepts/clr/","title":"CLR (Common Language Runtime)","text":""},{"location":"junior/basic-dotnet-concepts/clr/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>CLR, .NET uygulamalar\u0131n\u0131n \u00e7al\u0131\u015fma zaman\u0131 ortam\u0131d\u0131r. Bu b\u00f6l\u00fcmde CLR'\u0131n temel bile\u015fenlerini, \u00e7al\u0131\u015fma prensiplerini ve \u00f6nemli \u00f6zelliklerini inceleyece\u011fiz.</p>"},{"location":"junior/basic-dotnet-concepts/clr/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/basic-dotnet-concepts/clr/#1-clr-nedir-ve-temel-gorevleri-nelerdir","title":"1. CLR nedir ve temel g\u00f6revleri nelerdir?","text":"<p>Cevap: CLR (Common Language Runtime), .NET uygulamalar\u0131n\u0131n \u00e7al\u0131\u015fma zaman\u0131 ortam\u0131d\u0131r. Temel g\u00f6revleri: - Memory management (Bellek y\u00f6netimi) - Type safety (Tip g\u00fcvenli\u011fi) - Exception handling (Hata y\u00f6netimi) - Security (G\u00fcvenlik) - Thread management (\u0130\u015f par\u00e7ac\u0131\u011f\u0131 y\u00f6netimi) - Code execution (Kod \u00e7al\u0131\u015ft\u0131rma)</p> <p>\u00d6rnek Kod: <pre><code>public class CLRExample\n{\n    // Memory management \u00f6rne\u011fi\n    public void MemoryExample()\n    {\n        // CLR heap'te yer ay\u0131r\u0131r\n        var list = new List&lt;int&gt;();\n\n        // CLR garbage collection yapar\n        list = null;\n    }\n\n    // Type safety \u00f6rne\u011fi\n    public void TypeSafetyExample()\n    {\n        object obj = \"string\";\n        // CLR runtime'da tip kontrol\u00fc yapar\n        int number = (int)obj; // InvalidCastException\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/clr/#2-clrn-bilesenleri-nelerdir-ve-nasl-calsr","title":"2. CLR'\u0131n bile\u015fenleri nelerdir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: 1. Class Loader:    - Assembly'leri y\u00fckler    - Metadata'y\u0131 okur    - Tip bilgilerini olu\u015fturur</p> <ol> <li>JIT Compiler:</li> <li>IL kodunu native koda d\u00f6n\u00fc\u015ft\u00fcr\u00fcr</li> <li>Optimizasyonlar yapar</li> <li> <p>Code caching kullan\u0131r</p> </li> <li> <p>Garbage Collector:</p> </li> <li>Memory y\u00f6netimi yapar</li> <li>Generations kullan\u0131r (0, 1, 2)</li> <li> <p>Finalization queue y\u00f6netir</p> </li> <li> <p>Security Engine:</p> </li> <li>Code access security</li> <li>Role-based security</li> <li>Permission checking</li> </ol> <p>\u00d6rnek Kod: <pre><code>public class CLRComponents\n{\n    // JIT Compilation \u00f6rne\u011fi\n    public void JITExample()\n    {\n        // \u0130lk \u00e7al\u0131\u015ft\u0131rmada JIT compilation\n        var result = Calculate(5, 10);\n\n        // Sonraki \u00e7al\u0131\u015ft\u0131rmalarda cached native code\n        result = Calculate(5, 10);\n    }\n\n    private int Calculate(int a, int b)\n    {\n        return a + b;\n    }\n\n    // Garbage Collection \u00f6rne\u011fi\n    public void GCExample()\n    {\n        // Generation 0'da nesne olu\u015fturulur\n        var obj = new LargeObject();\n\n        // Nesne kullan\u0131lmaz hale gelir\n        obj = null;\n\n        // Garbage Collection tetiklenir\n        GC.Collect();\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/clr/#3-clrda-memory-management-nasl-calsr","title":"3. CLR'da memory management nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: 1. Heap Yap\u0131s\u0131:    - Small Object Heap (SOH)    - Large Object Heap (LOH)    - Generations (0, 1, 2)</p> <ol> <li>Allocation:</li> <li>Stack allocation (value types)</li> <li>Heap allocation (reference types)</li> <li> <p>Pinned objects</p> </li> <li> <p>Collection:</p> </li> <li>Mark and sweep algoritmas\u0131</li> <li>Compaction</li> <li>Finalization</li> </ol> <p>\u00d6rnek Kod: <pre><code>public class MemoryManagement\n{\n    // Stack allocation\n    public void StackExample()\n    {\n        int number = 42; // Stack'te\n        Point point = new Point(1, 2); // Stack'te (struct)\n    }\n\n    // Heap allocation\n    public void HeapExample()\n    {\n        var list = new List&lt;int&gt;(); // Heap'te\n        var obj = new object(); // Heap'te\n    }\n\n    // Pinned objects\n    public unsafe void PinnedExample()\n    {\n        byte[] buffer = new byte[1000];\n        fixed (byte* ptr = buffer)\n        {\n            // Pointer i\u015flemleri\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/clr/#4-clrda-exception-handling-nasl-calsr","title":"4. CLR'da exception handling nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: 1. Exception Types:    - System.Exception    - Custom exceptions    - Checked/unchecked exceptions</p> <ol> <li>Exception Flow:</li> <li>Try-catch-finally bloklar\u0131</li> <li>Exception propagation</li> <li> <p>Stack unwinding</p> </li> <li> <p>Best Practices:</p> </li> <li>Specific exception handling</li> <li>Exception logging</li> <li>Resource cleanup</li> </ol> <p>\u00d6rnek Kod: <pre><code>public class ExceptionHandling\n{\n    public void HandleException()\n    {\n        try\n        {\n            // Riskli kod\n            ProcessData();\n        }\n        catch (FileNotFoundException ex)\n        {\n            // Spesifik hata y\u00f6netimi\n            LogError(ex);\n            HandleFileNotFound();\n        }\n        catch (Exception ex)\n        {\n            // Genel hata y\u00f6netimi\n            LogError(ex);\n            throw;\n        }\n        finally\n        {\n            // Kaynak temizleme\n            CleanupResources();\n        }\n    }\n\n    private void LogError(Exception ex)\n    {\n        // Hata loglama\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/clr/#5-clrda-thread-management-nasl-calsr","title":"5. CLR'da thread management nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: 1. Thread Pool:    - Worker threads    - I/O completion threads    - Thread scheduling</p> <ol> <li>Synchronization:</li> <li>Lock</li> <li>Monitor</li> <li>Semaphore</li> <li> <p>Mutex</p> </li> <li> <p>Async/Await:</p> </li> <li>Task-based asynchrony</li> <li>State machine</li> <li>Context switching</li> </ol> <p>\u00d6rnek Kod: <pre><code>public class ThreadManagement\n{\n    // Thread Pool kullan\u0131m\u0131\n    public void ThreadPoolExample()\n    {\n        ThreadPool.QueueUserWorkItem(state =&gt;\n        {\n            // Arka plan i\u015fi\n            ProcessData();\n        });\n    }\n\n    // Async/Await kullan\u0131m\u0131\n    public async Task AsyncExample()\n    {\n        await ProcessDataAsync();\n        // Context switch\n        await ProcessMoreDataAsync();\n    }\n\n    // Synchronization\n    private readonly object _lock = new object();\n    public void SynchronizedMethod()\n    {\n        lock (_lock)\n        {\n            // Thread-safe kod\n            UpdateSharedResource();\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/clr/#best-practices","title":"Best Practices","text":"<ol> <li>Memory Management</li> <li>IDisposable pattern kullan\u0131m\u0131</li> <li>using statement</li> <li>Large object heap y\u00f6netimi</li> <li> <p>Finalization'dan ka\u00e7\u0131nma</p> </li> <li> <p>Exception Handling</p> </li> <li>Specific exception handling</li> <li>Exception logging</li> <li>Resource cleanup</li> <li> <p>Exception propagation</p> </li> <li> <p>Thread Safety</p> </li> <li>Immutable objects</li> <li>Thread synchronization</li> <li>Async/await pattern</li> <li>Concurrent collections</li> </ol>"},{"location":"junior/basic-dotnet-concepts/clr/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>CLR via C#</li> <li>.NET Memory Management</li> <li>Threading in .NET </li> </ul>"},{"location":"junior/basic-dotnet-concepts/framework-vs-core/","title":".NET Framework vs .NET Core","text":""},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, .NET Framework ve .NET Core aras\u0131ndaki temel farklar\u0131, kullan\u0131m senaryolar\u0131n\u0131 ve ge\u00e7i\u015f stratejilerini inceleyece\u011fiz.</p>"},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#1-net-framework-ve-net-core-arasndaki-temel-mimari-farklar-nelerdir","title":"1. .NET Framework ve .NET Core aras\u0131ndaki temel mimari farklar nelerdir?","text":"<p>Cevap: - .NET Framework:   - Monolitik yap\u0131   - Windows'a ba\u011f\u0131ml\u0131   - GAC (Global Assembly Cache) kullan\u0131r   - System.Web ba\u011f\u0131ml\u0131l\u0131\u011f\u0131   - IIS gerektirir</p> <ul> <li>.NET Core:</li> <li>Mod\u00fcler yap\u0131</li> <li>Cross-platform</li> <li>NuGet paket y\u00f6netimi</li> <li>Self-contained deployment</li> <li>Kestrel web sunucusu</li> </ul> <p>\u00d6rnek Kod: <pre><code>// .NET Framework Web.config\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;configuration&gt;\n  &lt;system.web&gt;\n    &lt;compilation debug=\"true\" targetFramework=\"4.7.2\" /&gt;\n  &lt;/system.web&gt;\n&lt;/configuration&gt;\n\n// .NET Core appsettings.json\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#2-net-coreun-performans-avantajlar-nelerdir","title":"2. .NET Core'un performans avantajlar\u0131 nelerdir?","text":"<p>Cevap: - Daha h\u0131zl\u0131 ba\u015flang\u0131\u00e7 s\u00fcresi - Daha az memory kullan\u0131m\u0131 - Daha iyi \u00f6l\u00e7eklenebilirlik - Asenkron operasyonlarda daha iyi performans - Container deste\u011fi ile daha iyi kaynak y\u00f6netimi</p> <p>\u00d6rnek Kod: <pre><code>// .NET Core'da performans optimizasyonu\npublic class PerformanceExample\n{\n    // Span&lt;T&gt; kullan\u0131m\u0131\n    public void ProcessData(ReadOnlySpan&lt;byte&gt; data)\n    {\n        // D\u00fc\u015f\u00fck seviyeli memory eri\u015fimi\n    }\n\n    // ValueTask kullan\u0131m\u0131\n    public async ValueTask&lt;int&gt; GetDataAsync()\n    {\n        // Asenkron operasyon optimizasyonu\n        return await Task.FromResult(42);\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#3-net-frameworkten-net-corea-gecis-stratejileri-nelerdir","title":"3. .NET Framework'ten .NET Core'a ge\u00e7i\u015f stratejileri nelerdir?","text":"<p>Cevap: 1. Analiz a\u015famas\u0131:    - Ba\u011f\u0131ml\u0131l\u0131klar\u0131n tespiti    - Windows-specific kodlar\u0131n belirlenmesi    - Third-party k\u00fct\u00fcphanelerin kontrol\u00fc</p> <ol> <li>Ge\u00e7i\u015f plan\u0131:</li> <li>Ad\u0131m ad\u0131m ge\u00e7i\u015f</li> <li>Side-by-side deployment</li> <li> <p>Feature flag kullan\u0131m\u0131</p> </li> <li> <p>Test stratejisi:</p> </li> <li>Unit testlerin g\u00fcncellenmesi</li> <li>Integration testlerinin yaz\u0131lmas\u0131</li> <li>Performance testlerinin yap\u0131lmas\u0131</li> </ol> <p>\u00d6rnek Kod: <pre><code>// .NET Framework'ten .NET Core'a ge\u00e7i\u015f \u00f6rne\u011fi\npublic class MigrationExample\n{\n    // Eski .NET Framework kodu\n    public void OldMethod()\n    {\n        using (var connection = new SqlConnection(\"connectionString\"))\n        {\n            // ADO.NET kullan\u0131m\u0131\n        }\n    }\n\n    // Yeni .NET Core kodu\n    public async Task NewMethod()\n    {\n        using var connection = new SqlConnection(\"connectionString\");\n        await connection.OpenAsync();\n        // Dapper veya Entity Framework Core kullan\u0131m\u0131\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#4-net-coreun-container-destegi-nasl-calsr","title":"4. .NET Core'un container deste\u011fi nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: - Docker deste\u011fi - Microservice mimarisi i\u00e7in uygunluk - Container orchestration (Kubernetes) entegrasyonu - Environment-based configuration - Health check deste\u011fi</p> <p>\u00d6rnek Kod: <pre><code>// .NET Core Docker deste\u011fi\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n\n    public static IHostBuilder CreateHostBuilder(string[] args) =&gt;\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =&gt;\n            {\n                webBuilder.UseStartup&lt;Startup&gt;();\n            });\n}\n\n// Dockerfile \u00f6rne\u011fi\nFROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#5-net-coreda-dependency-injection-nasl-calsr","title":"5. .NET Core'da dependency injection nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: - Built-in DI container - Service lifetime y\u00f6netimi (Singleton, Scoped, Transient) - Constructor injection - Interface-based programming - Configuration binding</p> <p>\u00d6rnek Kod: <pre><code>// Startup.cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        // Singleton service\n        services.AddSingleton&lt;ICacheService, CacheService&gt;();\n\n        // Scoped service\n        services.AddScoped&lt;IUserService, UserService&gt;();\n\n        // Transient service\n        services.AddTransient&lt;IEmailService, EmailService&gt;();\n    }\n}\n\n// Controller kullan\u0131m\u0131\npublic class UserController : ControllerBase\n{\n    private readonly IUserService _userService;\n\n    public UserController(IUserService userService)\n    {\n        _userService = userService;\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#best-practices","title":"Best Practices","text":"<ol> <li>Ge\u00e7i\u015f Stratejisi</li> <li>Incremental migration</li> <li>Feature toggle kullan\u0131m\u0131</li> <li>A/B testing</li> <li> <p>Rollback plan\u0131</p> </li> <li> <p>Performans Optimizasyonu</p> </li> <li>Async/await pattern</li> <li>Memory management</li> <li>Caching stratejileri</li> <li> <p>Connection pooling</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>HTTPS enforcement</li> <li>CORS yap\u0131land\u0131rmas\u0131</li> <li>Authentication/Authorization</li> <li>Security headers</li> </ol>"},{"location":"junior/basic-dotnet-concepts/framework-vs-core/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>.NET Core Documentation</li> <li>.NET Framework to .NET Core Migration Guide</li> <li>.NET Core Performance </li> </ul>"},{"location":"junior/basic-dotnet-concepts/garbage-collection/","title":"Garbage Collection","text":""},{"location":"junior/basic-dotnet-concepts/garbage-collection/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, .NET'te bellek y\u00f6netiminin temel mekanizmas\u0131 olan Garbage Collection'\u0131, \u00e7al\u0131\u015fma prensiplerini ve performans optimizasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/basic-dotnet-concepts/garbage-collection/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/basic-dotnet-concepts/garbage-collection/#1-garbage-collection-nedir-ve-nasl-calsr","title":"1. Garbage Collection nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Garbage Collection (GC): - Otomatik bellek y\u00f6netimi sa\u011flar - Kullan\u0131lmayan nesneleri temizler - Heap'teki bellek alan\u0131n\u0131 y\u00f6netir - Generations (0, 1, 2) kullan\u0131r - Mark and Sweep algoritmas\u0131 \u00e7al\u0131\u015ft\u0131r\u0131r</p> <p>\u00d6rnek Kod: <pre><code>public class GCExample\n{\n    public void MemoryAllocation()\n    {\n        // Generation 0'da nesne olu\u015fturulur\n        var obj = new LargeObject();\n\n        // Nesne kullan\u0131lmaz hale gelir\n        obj = null;\n\n        // Garbage Collection tetiklenir\n        GC.Collect();\n\n        // Finalization queue kontrol\u00fc\n        GC.WaitForPendingFinalizers();\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/garbage-collection/#2-generations-kavram-nedir-ve-nasl-calsr","title":"2. Generations kavram\u0131 nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Generations: - Generation 0:   - Yeni olu\u015fturulan nesneler   - S\u0131k GC tetiklenir   - K\u00fc\u00e7\u00fck nesneler</p> <ul> <li>Generation 1:</li> <li>Generation 0'dan kurtulan nesneler</li> <li>Daha az s\u0131kl\u0131kta GC</li> <li> <p>Orta \u00f6m\u00fcrl\u00fc nesneler</p> </li> <li> <p>Generation 2:</p> </li> <li>Generation 1'den kurtulan nesneler</li> <li>Nadiren GC</li> <li>Uzun \u00f6m\u00fcrl\u00fc nesneler</li> </ul> <p>\u00d6rnek Kod: <pre><code>public class GenerationsExample\n{\n    public void TrackGenerations()\n    {\n        var obj = new object();\n\n        // Nesnenin generation'\u0131n\u0131 \u00f6\u011frenme\n        Console.WriteLine(GC.GetGeneration(obj)); // 0\n\n        GC.Collect();\n        Console.WriteLine(GC.GetGeneration(obj)); // 1\n\n        GC.Collect();\n        Console.WriteLine(GC.GetGeneration(obj)); // 2\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/garbage-collection/#3-finalization-nedir-ve-nasl-kullanlr","title":"3. Finalization nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Finalization: - Nesne temizlenmeden \u00f6nce \u00e7al\u0131\u015f\u0131r - Finalizer metodu kullan\u0131r - Finalization queue y\u00f6netir - Performans maliyeti y\u00fcksektir</p> <p>\u00d6rnek Kod: <pre><code>public class FinalizationExample : IDisposable\n{\n    private bool disposed = false;\n\n    // Finalizer\n    ~FinalizationExample()\n    {\n        Dispose(false);\n    }\n\n    // IDisposable implementasyonu\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposed)\n        {\n            if (disposing)\n            {\n                // Managed kaynaklar\u0131 temizle\n            }\n\n            // Unmanaged kaynaklar\u0131 temizle\n            disposed = true;\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/garbage-collection/#4-large-object-heap-loh-nedir-ve-nasl-yonetilir","title":"4. Large Object Heap (LOH) nedir ve nas\u0131l y\u00f6netilir?","text":"<p>Cevap: Large Object Heap: - 85KB'dan b\u00fcy\u00fck nesneler i\u00e7in - \u00d6zel heap b\u00f6lgesi - Compaction yap\u0131lmaz - Memory fragmentation riski</p> <p>\u00d6rnek Kod: <pre><code>public class LOHExample\n{\n    public void ManageLargeObjects()\n    {\n        // LOH'ta yer ayr\u0131l\u0131r\n        var largeArray = new byte[100000];\n\n        // LOH temizli\u011fi\n        largeArray = null;\n        GC.Collect();\n\n        // LOH durumu kontrol\u00fc\n        var lohSize = GC.GetTotalMemory(false);\n        Console.WriteLine($\"LOH Size: {lohSize}\");\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/garbage-collection/#5-gc-performansn-nasl-optimize-edebiliriz","title":"5. GC Performans\u0131n\u0131 nas\u0131l optimize edebiliriz?","text":"<p>Cevap: GC Optimizasyonu: - IDisposable pattern kullan\u0131m\u0131 - using statement - Object pooling - Lazy initialization - StringBuilder kullan\u0131m\u0131 - Collection kapasitesi belirleme</p> <p>\u00d6rnek Kod: <pre><code>public class GCOptimization\n{\n    // Object pooling\n    private static readonly ObjectPool&lt;ExpensiveObject&gt; pool = \n        new ObjectPool&lt;ExpensiveObject&gt;(() =&gt; new ExpensiveObject());\n\n    public void OptimizedMemoryUsage()\n    {\n        // Object pooling kullan\u0131m\u0131\n        var obj = pool.Get();\n        try\n        {\n            // \u0130\u015flemler\n        }\n        finally\n        {\n            pool.Return(obj);\n        }\n\n        // StringBuilder kullan\u0131m\u0131\n        var sb = new StringBuilder(1000);\n        for (int i = 0; i &lt; 1000; i++)\n        {\n            sb.Append(i);\n        }\n\n        // Collection kapasitesi\n        var list = new List&lt;int&gt;(1000);\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/garbage-collection/#best-practices","title":"Best Practices","text":"<ol> <li>Memory Y\u00f6netimi</li> <li>IDisposable pattern kullan\u0131m\u0131</li> <li>using statement</li> <li>Object pooling</li> <li> <p>Lazy initialization</p> </li> <li> <p>Performans Optimizasyonu</p> </li> <li>Finalization'dan ka\u00e7\u0131nma</li> <li>LOH kullan\u0131m\u0131n\u0131 minimize etme</li> <li>Collection kapasitelerini belirleme</li> <li> <p>StringBuilder kullan\u0131m\u0131</p> </li> <li> <p>Debug ve Monitoring</p> </li> <li>Memory profiler kullan\u0131m\u0131</li> <li>GC istatistiklerini izleme</li> <li>Memory leak tespiti</li> <li>Performance counter'lar</li> </ol>"},{"location":"junior/basic-dotnet-concepts/garbage-collection/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Garbage Collection in .NET</li> <li>Memory Management and Garbage Collection</li> <li>GC Class </li> </ul>"},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/","title":"Managed ve Unmanaged Code","text":""},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, .NET'te managed ve unmanaged code kavramlar\u0131n\u0131, aralar\u0131ndaki farklar\u0131 ve kullan\u0131m senaryolar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#1-managed-ve-unmanaged-code-arasndaki-temel-farklar-nelerdir","title":"1. Managed ve Unmanaged Code aras\u0131ndaki temel farklar nelerdir?","text":"<p>Cevap: Managed Code: - CLR taraf\u0131ndan y\u00f6netilir - Otomatik memory management - Type safety - Exception handling - Garbage collection - Platform ba\u011f\u0131ms\u0131zl\u0131k</p> <p>Unmanaged Code: - \u0130\u015fletim sistemi taraf\u0131ndan y\u00f6netilir - Manuel memory management - Daha h\u0131zl\u0131 performans - Daha fazla kontrol - Native kod - Platform ba\u011f\u0131ml\u0131l\u0131k</p> <p>\u00d6rnek Kod: <pre><code>// Managed Code \u00f6rne\u011fi\npublic class ManagedExample\n{\n    public void ManagedMethod()\n    {\n        // CLR taraf\u0131ndan y\u00f6netilen kaynak\n        var list = new List&lt;int&gt;();\n        // Otomatik memory y\u00f6netimi\n        list.Add(1);\n    }\n}\n\n// Unmanaged Code \u00f6rne\u011fi\npublic class UnmanagedExample\n{\n    [DllImport(\"kernel32.dll\")]\n    public static extern IntPtr HeapAlloc(IntPtr hHeap, uint dwFlags, UIntPtr dwBytes);\n\n    public void UnmanagedMethod()\n    {\n        // Manuel memory y\u00f6netimi\n        IntPtr memory = HeapAlloc(GetProcessHeap(), 0, (UIntPtr)1000);\n        // Belle\u011fi serbest b\u0131rakma sorumlulu\u011fu geli\u015ftiricide\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#2-pinvoke-nedir-ve-nasl-kullanlr","title":"2. P/Invoke nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: P/Invoke (Platform Invocation Services): - Unmanaged DLL'leri \u00e7a\u011f\u0131rmak i\u00e7in kullan\u0131l\u0131r - DllImport attribute'u ile tan\u0131mlan\u0131r - Marshaling i\u015flemleri yapar - Memory y\u00f6netimi gerektirir</p> <p>\u00d6rnek Kod: <pre><code>public class PInvokeExample\n{\n    // Windows API \u00e7a\u011fr\u0131s\u0131\n    [DllImport(\"user32.dll\", CharSet = CharSet.Auto)]\n    public static extern int MessageBox(IntPtr hWnd, string text, string caption, uint type);\n\n    // Custom DLL \u00e7a\u011fr\u0131s\u0131\n    [DllImport(\"MyNativeLib.dll\")]\n    public static extern int ProcessData(byte[] data, int length);\n\n    public void ShowMessage()\n    {\n        // Unmanaged kod \u00e7a\u011fr\u0131s\u0131\n        MessageBox(IntPtr.Zero, \"Merhaba\", \"Mesaj\", 0);\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#3-com-interop-nedir-ve-nasl-kullanlr","title":"3. COM Interop nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: COM Interop: - COM bile\u015fenlerini .NET'te kullanmay\u0131 sa\u011flar - Type library import - Runtime Callable Wrapper (RCW) - COM Callable Wrapper (CCW)</p> <p>\u00d6rnek Kod: <pre><code>// COM bile\u015feni kullan\u0131m\u0131\npublic class ComInteropExample\n{\n    public void UseComComponent()\n    {\n        // COM bile\u015feni olu\u015fturma\n        var excel = new Microsoft.Office.Interop.Excel.Application();\n\n        try\n        {\n            // COM bile\u015feni kullan\u0131m\u0131\n            excel.Visible = true;\n            var workbook = excel.Workbooks.Add();\n            // ...\n        }\n        finally\n        {\n            // COM nesnelerini temizleme\n            System.Runtime.InteropServices.Marshal.ReleaseComObject(excel);\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#4-safe-ve-unsafe-code-nedir","title":"4. Safe ve Unsafe Code nedir?","text":"<p>Cevap: Safe Code: - CLR taraf\u0131ndan tam kontrol - Type safety - Memory safety - Exception handling</p> <p>Unsafe Code: - Pointer kullan\u0131m\u0131 - Memory adreslerine direkt eri\u015fim - unsafe keyword'\u00fc gerektirir - Performans optimizasyonu</p> <p>\u00d6rnek Kod: <pre><code>public class SafeUnsafeExample\n{\n    // Safe code\n    public void SafeMethod()\n    {\n        var array = new int[10];\n        array[0] = 42; // CLR bounds checking\n    }\n\n    // Unsafe code\n    public unsafe void UnsafeMethod()\n    {\n        int[] array = new int[10];\n        fixed (int* ptr = array)\n        {\n            // Pointer aritmeti\u011fi\n            *(ptr + 1) = 42;\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#5-memory-management-farkllklar-nelerdir","title":"5. Memory Management farkl\u0131l\u0131klar\u0131 nelerdir?","text":"<p>Cevap: Managed Memory: - CLR taraf\u0131ndan y\u00f6netilir - Garbage collection - Heap allocation - Reference counting</p> <p>Unmanaged Memory: - Manuel y\u00f6netim - malloc/free - Heap/stack allocation - Memory leaks riski</p> <p>\u00d6rnek Kod: <pre><code>public class MemoryManagementExample\n{\n    // Managed memory\n    public void ManagedMemory()\n    {\n        var list = new List&lt;int&gt;();\n        // CLR memory'yi y\u00f6netir\n        list.Add(1);\n        // Garbage collection otomatik temizler\n    }\n\n    // Unmanaged memory\n    public unsafe void UnmanagedMemory()\n    {\n        // Manuel memory allocation\n        int* ptr = (int*)Marshal.AllocHGlobal(sizeof(int));\n        try\n        {\n            *ptr = 42;\n            // Memory kullan\u0131m\u0131\n        }\n        finally\n        {\n            // Manuel temizleme\n            Marshal.FreeHGlobal((IntPtr)ptr);\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#best-practices","title":"Best Practices","text":"<ol> <li>Managed Code Kullan\u0131m\u0131</li> <li>IDisposable pattern</li> <li>using statement</li> <li>Exception handling</li> <li> <p>Resource cleanup</p> </li> <li> <p>Unmanaged Code Kullan\u0131m\u0131</p> </li> <li>Memory leaks \u00f6nleme</li> <li>Error handling</li> <li>Resource cleanup</li> <li> <p>Thread safety</p> </li> <li> <p>Interop Kullan\u0131m\u0131</p> </li> <li>Marshaling optimizasyonu</li> <li>COM nesnelerinin temizlenmesi</li> <li>Exception handling</li> <li>Performance monitoring</li> </ol>"},{"location":"junior/basic-dotnet-concepts/managed-unmanaged/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>P/Invoke Documentation</li> <li>COM Interop</li> <li>Unsafe Code </li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/","title":"Memory Management","text":""},{"location":"junior/basic-dotnet-concepts/memory-management/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Memory Management (Bellek Y\u00f6netimi), .NET uygulamalar\u0131nda bellek kullan\u0131m\u0131n\u0131n verimli ve g\u00fcvenli bir \u015fekilde y\u00f6netilmesini sa\u011flayan mekanizmalar b\u00fct\u00fcn\u00fcd\u00fcr. Bu konu, managed ve unmanaged bellek y\u00f6netimini, bellek tahsisi ve serbest b\u0131rakma i\u015flemlerini kapsar.</p>"},{"location":"junior/basic-dotnet-concepts/memory-management/#bellek-yonetimi-temelleri","title":"Bellek Y\u00f6netimi Temelleri","text":""},{"location":"junior/basic-dotnet-concepts/memory-management/#stack-ve-heap","title":"Stack ve Heap","text":"<ol> <li>Stack</li> <li>De\u011fer tipleri (value types) saklar</li> <li>H\u0131zl\u0131 eri\u015fim</li> <li>Otomatik temizleme</li> <li> <p>S\u0131n\u0131rl\u0131 boyut</p> </li> <li> <p>Heap</p> </li> <li>Referans tipleri (reference types) saklar</li> <li>Dinamik boyut</li> <li>Garbage Collection taraf\u0131ndan y\u00f6netilir</li> <li>Daha yava\u015f eri\u015fim</li> </ol>"},{"location":"junior/basic-dotnet-concepts/memory-management/#deger-ve-referans-tipleri","title":"De\u011fer ve Referans Tipleri","text":"<pre><code>// De\u011fer tipi (Stack'te saklan\u0131r)\nint number = 42;\nDateTime date = DateTime.Now;\n\n// Referans tipi (Heap'te saklan\u0131r)\nstring text = \"Hello\";\nobject obj = new object();\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#managed-bellek-yonetimi","title":"Managed Bellek Y\u00f6netimi","text":""},{"location":"junior/basic-dotnet-concepts/memory-management/#1-nesne-yasam-dongusu","title":"1. Nesne Ya\u015fam D\u00f6ng\u00fcs\u00fc","text":"<ul> <li>Olu\u015fturma (Allocation)</li> <li>Kullan\u0131m</li> <li>Referans kayb\u0131</li> <li>Garbage Collection</li> <li>Temizleme</li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/#2-bellek-tahsisi","title":"2. Bellek Tahsisi","text":"<pre><code>// Yeni nesne olu\u015fturma\nvar person = new Person();\n\n// Dizi olu\u015fturma\nvar numbers = new int[1000];\n\n// Koleksiyon olu\u015fturma\nvar list = new List&lt;string&gt;();\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#3-bellek-serbest-brakma","title":"3. Bellek Serbest B\u0131rakma","text":"<pre><code>// IDisposable kullan\u0131m\u0131\nusing (var resource = new Resource())\n{\n    // Kaynak kullan\u0131m\u0131\n}\n\n// Manuel temizleme\nresource = null;\nGC.Collect();\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#unmanaged-bellek-yonetimi","title":"Unmanaged Bellek Y\u00f6netimi","text":""},{"location":"junior/basic-dotnet-concepts/memory-management/#1-pinvoke-kullanm","title":"1. P/Invoke Kullan\u0131m\u0131","text":"<pre><code>[DllImport(\"kernel32.dll\")]\nstatic extern IntPtr HeapAlloc(IntPtr hHeap, uint dwFlags, UIntPtr dwBytes);\n\n[DllImport(\"kernel32.dll\")]\nstatic extern bool HeapFree(IntPtr hHeap, uint dwFlags, IntPtr lpMem);\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#2-unsafe-kod","title":"2. Unsafe Kod","text":"<pre><code>unsafe\n{\n    int* pointer = stackalloc int[100];\n    // pointer kullan\u0131m\u0131\n}\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#3-marshal-snf","title":"3. Marshal S\u0131n\u0131f\u0131","text":"<pre><code>// Unmanaged bellek tahsisi\nIntPtr ptr = Marshal.AllocHGlobal(1000);\n\n// Bellek serbest b\u0131rakma\nMarshal.FreeHGlobal(ptr);\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#bellek-optimizasyonu","title":"Bellek Optimizasyonu","text":""},{"location":"junior/basic-dotnet-concepts/memory-management/#1-buyuk-nesneler","title":"1. B\u00fcy\u00fck Nesneler","text":"<ul> <li>LOH (Large Object Heap) kullan\u0131m\u0131</li> <li>B\u00fcy\u00fck nesnelerden ka\u00e7\u0131nma</li> <li>Pooling pattern kullan\u0131m\u0131</li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/#2-string-islemleri","title":"2. String \u0130\u015flemleri","text":"<pre><code>// StringBuilder kullan\u0131m\u0131\nvar sb = new StringBuilder();\nsb.Append(\"Hello\");\nsb.Append(\" World\");\n\n// String interpolation\nstring message = $\"Hello {name}\";\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#3-array-pool","title":"3. Array Pool","text":"<pre><code>// ArrayPool kullan\u0131m\u0131\nvar pool = ArrayPool&lt;int&gt;.Shared;\nvar array = pool.Rent(1000);\ntry\n{\n    // array kullan\u0131m\u0131\n}\nfinally\n{\n    pool.Return(array);\n}\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#memory-leak-onleme","title":"Memory Leak \u00d6nleme","text":""},{"location":"junior/basic-dotnet-concepts/memory-management/#1-event-handlerlar","title":"1. Event Handler'lar","text":"<pre><code>public class EventPublisher\n{\n    public event EventHandler SomethingHappened;\n\n    public void Cleanup()\n    {\n        SomethingHappened = null;\n    }\n}\n\npublic class EventSubscriber\n{\n    private EventPublisher publisher;\n\n    public void Subscribe()\n    {\n        publisher.SomethingHappened += OnSomethingHappened;\n    }\n\n    public void Unsubscribe()\n    {\n        publisher.SomethingHappened -= OnSomethingHappened;\n    }\n}\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#2-static-referanslar","title":"2. Static Referanslar","text":"<pre><code>public class Cache\n{\n    private static readonly Dictionary&lt;string, object&gt; _cache = \n        new Dictionary&lt;string, object&gt;();\n\n    public void Add(string key, object value)\n    {\n        _cache[key] = value;\n    }\n\n    public void Remove(string key)\n    {\n        _cache.Remove(key);\n    }\n}\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#3-timer-kullanm","title":"3. Timer Kullan\u0131m\u0131","text":"<pre><code>public class TimerService : IDisposable\n{\n    private Timer _timer;\n\n    public TimerService()\n    {\n        _timer = new Timer(TimerCallback, null, 1000, 1000);\n    }\n\n    public void Dispose()\n    {\n        _timer?.Dispose();\n    }\n}\n</code></pre>"},{"location":"junior/basic-dotnet-concepts/memory-management/#best-practices","title":"Best Practices","text":""},{"location":"junior/basic-dotnet-concepts/memory-management/#1-bellek-yonetimi","title":"1. Bellek Y\u00f6netimi","text":"<ul> <li>IDisposable pattern kullan\u0131n</li> <li>using statement kullan\u0131n</li> <li>Finalizer'lar\u0131 dikkatli kullan\u0131n</li> <li>Weak references kullan\u0131n</li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/#2-performans","title":"2. Performans","text":"<ul> <li>B\u00fcy\u00fck nesnelerden ka\u00e7\u0131n\u0131n</li> <li>String concatenation yerine StringBuilder kullan\u0131n</li> <li>ArrayPool kullan\u0131n</li> <li>Boxing/Unboxing'den ka\u00e7\u0131n\u0131n</li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/#3-guvenlik","title":"3. G\u00fcvenlik","text":"<ul> <li>Unsafe kod kullan\u0131m\u0131n\u0131 minimize edin</li> <li>P/Invoke \u00e7a\u011fr\u0131lar\u0131n\u0131 dikkatli yap\u0131n</li> <li>Bellek s\u0131z\u0131nt\u0131lar\u0131n\u0131 \u00f6nleyin</li> <li>Exception handling kullan\u0131n</li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"junior/basic-dotnet-concepts/memory-management/#1-stack-ve-heap-arasndaki-fark-nedir","title":"1. Stack ve Heap aras\u0131ndaki fark nedir?","text":"<ul> <li>Stack de\u011fer tipleri, Heap referans tipleri saklar</li> <li>Stack otomatik temizlenir, Heap GC taraf\u0131ndan y\u00f6netilir</li> <li>Stack s\u0131n\u0131rl\u0131 boyutlu, Heap dinamik boyutlu</li> <li>Stack h\u0131zl\u0131, Heap daha yava\u015f</li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/#2-memory-leak-nasl-tespit-edilir","title":"2. Memory leak nas\u0131l tespit edilir?","text":"<ul> <li>Memory profiler ara\u00e7lar\u0131 kullan\u0131n</li> <li>GC.Collect() \u00e7a\u011fr\u0131lar\u0131ndan sonra bellek kullan\u0131m\u0131n\u0131 kontrol edin</li> <li>Event handler'lar\u0131 ve static referanslar\u0131 kontrol edin</li> <li>Timer ve unmanaged kaynaklar\u0131 kontrol edin</li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/#3-bellek-optimizasyonu-icin-neler-yaplabilir","title":"3. Bellek optimizasyonu i\u00e7in neler yap\u0131labilir?","text":"<ul> <li>B\u00fcy\u00fck nesnelerden ka\u00e7\u0131n\u0131n</li> <li>String i\u015flemlerinde StringBuilder kullan\u0131n</li> <li>ArrayPool kullan\u0131n</li> <li>Boxing/Unboxing'den ka\u00e7\u0131n\u0131n</li> </ul>"},{"location":"junior/basic-dotnet-concepts/memory-management/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Memory Management</li> <li>Unmanaged Memory</li> <li>Memory Profiling </li> </ul>"},{"location":"junior/csharp-basics/","title":"C# Temelleri","text":""},{"location":"junior/csharp-basics/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, C# programlama dilinin temel kavramlar\u0131n\u0131, veri tiplerini, operat\u00f6rleri ve kontrol yap\u0131lar\u0131n\u0131 inceleyece\u011fiz. Bu konular, C# ile geli\u015ftirme yaparken s\u0131k\u00e7a kar\u015f\u0131la\u015faca\u011f\u0131n\u0131z temel yap\u0131 ta\u015flar\u0131d\u0131r.</p>"},{"location":"junior/csharp-basics/#icindekiler","title":"\u0130\u00e7indekiler","text":"<ol> <li>Temel Veri Tipleri</li> <li>Value Types</li> <li>Reference Types</li> <li>Nullable Types</li> <li> <p>Tip D\u00f6n\u00fc\u015f\u00fcmleri</p> </li> <li> <p>Kontrol Yap\u0131lar\u0131</p> </li> <li>If-Else</li> <li>Switch-Case</li> <li>D\u00f6ng\u00fcler (for, while, do-while)</li> <li> <p>Break ve Continue</p> </li> <li> <p>Nesne Y\u00f6nelimli Programlama</p> </li> <li>S\u0131n\u0131flar ve Nesneler</li> <li>Kal\u0131t\u0131m</li> <li>Polimorfizm</li> <li>Kaps\u00fclleme</li> <li> <p>Soyutlama</p> </li> <li> <p>Koleksiyonlar</p> </li> <li>List</li> <li>Dictionary</li> <li>Array</li> <li> <p>LINQ</p> </li> <li> <p>Delegates ve Events</p> </li> <li>Delegate Tan\u0131mlama</li> <li>Event Tan\u0131mlama</li> <li>Lambda Expressions</li> <li>Event Handling</li> </ol>"},{"location":"junior/csharp-basics/#ogrenme-hedefleri","title":"\u00d6\u011frenme Hedefleri","text":"<p>Bu b\u00f6l\u00fcm\u00fc tamamlad\u0131\u011f\u0131n\u0131zda: - C#'\u0131n temel veri tiplerini ve de\u011fi\u015fken kavram\u0131n\u0131 anlayacaks\u0131n\u0131z - Operat\u00f6rleri ve kontrol yap\u0131lar\u0131n\u0131 etkin \u015fekilde kullanabileceksiniz - Nesne y\u00f6nelimli programlama prensiplerini uygulayabileceksiniz - Metotlar\u0131 ve parametreleri do\u011fru \u015fekilde kullanabileceksiniz - Koleksiyonlar\u0131 ve LINQ sorgular\u0131n\u0131 yazabileceksiniz</p>"},{"location":"junior/csharp-basics/#on-gereksinimler","title":"\u00d6n Gereksinimler","text":"<p>Bu b\u00f6l\u00fcm\u00fc takip etmek i\u00e7in: - Temel programlama bilgisi - Visual Studio veya VS Code kurulumu - .NET SDK kurulumu</p>"},{"location":"junior/csharp-basics/#best-practices","title":"Best Practices","text":"<ol> <li>Kod Organizasyonu</li> <li>Anlaml\u0131 de\u011fi\u015fken isimleri kullan\u0131n</li> <li>Kodunuzu mant\u0131ksal b\u00f6l\u00fcmlere ay\u0131r\u0131n</li> <li>Yorum sat\u0131rlar\u0131 ekleyin</li> <li> <p>Kod tekrar\u0131ndan ka\u00e7\u0131n\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Uygun veri tiplerini se\u00e7in</li> <li>Gereksiz d\u00f6n\u00fc\u015f\u00fcmlerden ka\u00e7\u0131n\u0131n</li> <li>Koleksiyonlar\u0131 do\u011fru kullan\u0131n</li> <li> <p>Memory leak'lerden ka\u00e7\u0131n\u0131n</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validasyonu yap\u0131n</li> <li>Exception handling kullan\u0131n</li> <li>G\u00fcvenli tip d\u00f6n\u00fc\u015f\u00fcmleri yap\u0131n</li> <li>Null kontrollerini unutmay\u0131n</li> </ol>"},{"location":"junior/csharp-basics/#ornek-proje-yaps","title":"\u00d6rnek Proje Yap\u0131s\u0131","text":"<pre><code>CSharpBasics/\n\u251c\u2500\u2500 DataTypes/\n\u2502   \u251c\u2500\u2500 PrimitiveTypes.cs\n\u2502   \u251c\u2500\u2500 ReferenceTypes.cs\n\u2502   \u2514\u2500\u2500 ValueTypes.cs\n\u251c\u2500\u2500 Operators/\n\u2502   \u251c\u2500\u2500 Arithmetic.cs\n\u2502   \u251c\u2500\u2500 Comparison.cs\n\u2502   \u2514\u2500\u2500 Logical.cs\n\u251c\u2500\u2500 OOP/\n\u2502   \u251c\u2500\u2500 Classes.cs\n\u2502   \u251c\u2500\u2500 Inheritance.cs\n\u2502   \u2514\u2500\u2500 Polymorphism.cs\n\u2514\u2500\u2500 Collections/\n    \u251c\u2500\u2500 Lists.cs\n    \u251c\u2500\u2500 Dictionary.cs\n    \u2514\u2500\u2500 LINQ.cs\n</code></pre>"},{"location":"junior/csharp-basics/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":"<ol> <li>Value Type ve Reference Type aras\u0131ndaki fark nedir?</li> <li>Value Type'lar stack'te, Reference Type'lar heap'te saklan\u0131r</li> <li>Value Type'lar de\u011fer kopyalama, Reference Type'lar referans kopyalama yapar</li> <li> <p>Value Type'lar null olamaz (nullable olmad\u0131k\u00e7a)</p> </li> <li> <p>Boxing ve Unboxing nedir?</p> </li> <li>Boxing: Value Type'\u0131 Reference Type'a d\u00f6n\u00fc\u015ft\u00fcrme</li> <li>Unboxing: Reference Type'\u0131 Value Type'a d\u00f6n\u00fc\u015ft\u00fcrme</li> <li> <p>Performans maliyeti y\u00fcksektir</p> </li> <li> <p>LINQ ne i\u015fe yarar?</p> </li> <li>Veri sorgulama ve manip\u00fclasyonu i\u00e7in kullan\u0131l\u0131r</li> <li>SQL benzeri sorgu yaz\u0131m\u0131 sa\u011flar</li> <li>Koleksiyonlar \u00fczerinde i\u015flem yapmay\u0131 kolayla\u015ft\u0131r\u0131r</li> </ol>"},{"location":"junior/csharp-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>C# Programlama K\u0131lavuzu</li> <li>C# Dil Referans\u0131</li> <li>C# Best Practices </li> </ul>"},{"location":"junior/csharp-basics/async-programming/","title":"Asenkron Programlama","text":""},{"location":"junior/csharp-basics/async-programming/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Asenkron programlama, uygulaman\u0131n uzun s\u00fcren i\u015flemleri bloklamadan \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flayan bir programlama tekni\u011fidir. C#'ta async/await anahtar kelimeleri ve Task s\u0131n\u0131f\u0131 kullan\u0131larak asenkron i\u015flemler yap\u0131l\u0131r.</p>"},{"location":"junior/csharp-basics/async-programming/#asyncawait-temelleri","title":"Async/Await Temelleri","text":"<ol> <li> <p>Async Metod Tan\u0131mlama <pre><code>public async Task&lt;string&gt; GetDataAsync()\n{\n    // Asenkron i\u015flem\n    await Task.Delay(1000);\n    return \"Veri\";\n}\n</code></pre></p> </li> <li> <p>Async Void Kullan\u0131m\u0131 <pre><code>public async void HandleButtonClick()\n{\n    try\n    {\n        await ProcessDataAsync();\n    }\n    catch (Exception ex)\n    {\n        // Hata y\u00f6netimi\n    }\n}\n</code></pre></p> </li> <li> <p>Task D\u00f6n\u00fc\u015f Tipleri <pre><code>// Task&lt;T&gt; - De\u011fer d\u00f6nd\u00fcren\npublic async Task&lt;int&gt; GetNumberAsync()\n{\n    return 42;\n}\n\n// Task - De\u011fer d\u00f6nd\u00fcrmeyen\npublic async Task ProcessAsync()\n{\n    await Task.Delay(1000);\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/async-programming/#task-islemleri","title":"Task \u0130\u015flemleri","text":"<ol> <li> <p>Task Olu\u015fturma <pre><code>// Task olu\u015fturma\nTask task = Task.Run(() =&gt; {\n    Console.WriteLine(\"Task \u00e7al\u0131\u015f\u0131yor\");\n});\n\n// Task&lt;T&gt; olu\u015fturma\nTask&lt;int&gt; taskWithResult = Task.Run(() =&gt; {\n    return 42;\n});\n</code></pre></p> </li> <li> <p>Task Bekleme <pre><code>// Task bekleme\nawait task;\n\n// Task sonucu alma\nint result = await taskWithResult;\n\n// Timeout ile bekleme\nif (await Task.WhenAny(task, Task.Delay(5000)) == task)\n{\n    // Task tamamland\u0131\n}\n</code></pre></p> </li> <li> <p>Task \u0130ptali <pre><code>CancellationTokenSource cts = new CancellationTokenSource();\n\nTask task = Task.Run(() =&gt; {\n    while (!cts.Token.IsCancellationRequested)\n    {\n        // \u0130\u015flem\n    }\n}, cts.Token);\n\n// \u0130ptal\ncts.Cancel();\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/async-programming/#paralel-islemler","title":"Paralel \u0130\u015flemler","text":"<ol> <li> <p>Task.WhenAll <pre><code>Task[] tasks = new Task[3];\ntasks[0] = Task.Delay(1000);\ntasks[1] = Task.Delay(2000);\ntasks[2] = Task.Delay(3000);\n\nawait Task.WhenAll(tasks);\n</code></pre></p> </li> <li> <p>Task.WhenAny <pre><code>Task[] tasks = new Task[3];\ntasks[0] = Task.Delay(1000);\ntasks[1] = Task.Delay(2000);\ntasks[2] = Task.Delay(3000);\n\nTask completedTask = await Task.WhenAny(tasks);\n</code></pre></p> </li> <li> <p>Parallel.ForEach <pre><code>var items = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\n\nawait Parallel.ForEachAsync(items, async (item, token) =&gt; {\n    await ProcessItemAsync(item);\n});\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/async-programming/#asenkron-streamler","title":"Asenkron Stream'ler","text":"<ol> <li>IAsyncEnumerable Kullan\u0131m\u0131 <pre><code>public async IAsyncEnumerable&lt;int&gt; GetNumbersAsync()\n{\n    for (int i = 0; i &lt; 10; i++)\n    {\n        await Task.Delay(100);\n        yield return i;\n    }\n}\n\n// Kullan\u0131m\u0131\nawait foreach (var number in GetNumbersAsync())\n{\n    Console.WriteLine(number);\n}\n</code></pre></li> </ol>"},{"location":"junior/csharp-basics/async-programming/#asenkron-exception-handling","title":"Asenkron Exception Handling","text":"<ol> <li> <p>Try-Catch Kullan\u0131m\u0131 <pre><code>try\n{\n    await ProcessAsync();\n}\ncatch (Exception ex)\n{\n    // Hata y\u00f6netimi\n}\n</code></pre></p> </li> <li> <p>AggregateException <pre><code>try\n{\n    await Task.WhenAll(tasks);\n}\ncatch (AggregateException ex)\n{\n    foreach (var innerEx in ex.InnerExceptions)\n    {\n        // Hata y\u00f6netimi\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/async-programming/#asenkron-best-practices","title":"Asenkron Best Practices","text":"<ol> <li> <p>ConfigureAwait Kullan\u0131m\u0131 <pre><code>public async Task ProcessAsync()\n{\n    await Task.Delay(1000).ConfigureAwait(false);\n}\n</code></pre></p> </li> <li> <p>ValueTask Kullan\u0131m\u0131 <pre><code>public async ValueTask&lt;int&gt; GetNumberAsync()\n{\n    if (_cache.TryGetValue(\"number\", out int value))\n        return value;\n\n    return await FetchNumberAsync();\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/async-programming/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Async/Await Temelleri</li> <li>Async/await nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>Task ve ValueTask aras\u0131ndaki farklar nelerdir?</li> <li> <p>Async void ne zaman kullan\u0131lmal\u0131d\u0131r?</p> </li> <li> <p>Task \u0130\u015flemleri</p> </li> <li>Task.Run() ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>Task.WhenAll() ve Task.WhenAny() aras\u0131ndaki farklar nelerdir?</li> <li> <p>Task iptali nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Paralel \u0130\u015flemler</p> </li> <li>Paralel i\u015flemler ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>Task.WhenAll() ve Parallel.ForEach() aras\u0131ndaki farklar nelerdir?</li> <li> <p>Paralel i\u015flemlerde exception handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Asenkron Stream'ler</p> </li> <li>IAsyncEnumerable nedir ve ne i\u015fe yarar?</li> <li>Asenkron stream'ler ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li> <p>Asenkron stream'lerde performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Exception Handling</p> </li> <li>Asenkron metodlarda exception handling nas\u0131l yap\u0131l\u0131r?</li> <li>AggregateException nedir ve nas\u0131l y\u00f6netilir?</li> <li> <p>Asenkron i\u015flemlerde unhandled exception'lar nas\u0131l yakalan\u0131r?</p> </li> <li> <p>Performans</p> </li> <li>Asenkron i\u015flemlerde performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li>ConfigureAwait(false) ne i\u015fe yarar?</li> <li> <p>Asenkron i\u015flemlerde memory kullan\u0131m\u0131 nas\u0131l optimize edilir?</p> </li> <li> <p>Deadlock</p> </li> <li>Asenkron i\u015flemlerde deadlock nas\u0131l olu\u015fur?</li> <li>Deadlock nas\u0131l \u00f6nlenir?</li> <li> <p>ConfigureAwait(false) deadlock'u nas\u0131l \u00f6nler?</p> </li> <li> <p>Resource Y\u00f6netimi</p> </li> <li>Asenkron i\u015flemlerde resource leak nas\u0131l \u00f6nlenir?</li> <li>IDisposable ve asenkron i\u015flemler nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Asenkron i\u015flemlerde connection pooling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Testing</p> </li> <li>Asenkron kodlar nas\u0131l test edilir?</li> <li>Asenkron testlerde best practices nelerdir?</li> <li> <p>Asenkron testlerde mock'lar nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Best Practices</p> <ul> <li>Asenkron programlamada best practices nelerdir?</li> <li>Asenkron metod isimlendirmesi nas\u0131l yap\u0131lmal\u0131d\u0131r?</li> <li>Asenkron i\u015flemlerde logging nas\u0131l yap\u0131lmal\u0131d\u0131r?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/async-programming/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Asenkron Dosya Okuma <pre><code>public async Task&lt;string&gt; ReadFileAsync(string path)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Asenkron HTTP \u0130ste\u011fi <pre><code>public async Task&lt;string&gt; GetDataFromApiAsync(string url)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Asenkron Veritaban\u0131 \u0130\u015flemi <pre><code>public async Task&lt;List&lt;Customer&gt;&gt; GetCustomersAsync()\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Asenkron Stream \u0130\u015flemi <pre><code>public async IAsyncEnumerable&lt;string&gt; ReadLinesAsync(string path)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Asenkron Cache \u0130\u015flemi <pre><code>public async ValueTask&lt;T&gt; GetOrAddAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/async-programming/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Async Programming</li> <li>Task Class</li> <li>Async/Await Best Practices </li> </ul>"},{"location":"junior/csharp-basics/basic-data-types/","title":"Temel Veri Tipleri","text":""},{"location":"junior/csharp-basics/basic-data-types/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, C#'ta kullan\u0131lan temel veri tiplerini, bunlar\u0131n \u00f6zelliklerini ve kullan\u0131m alanlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/csharp-basics/basic-data-types/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/csharp-basics/basic-data-types/#1-value-types-ve-reference-types-arasndaki-temel-farklar-nelerdir","title":"1. Value Types ve Reference Types aras\u0131ndaki temel farklar nelerdir?","text":"<p>Cevap: Value Types: - Stack'te saklan\u0131r - De\u011fer kopyalama yapar - Struct, enum ve primitive tipler - Null olamaz (nullable olmad\u0131k\u00e7a) - Daha h\u0131zl\u0131 eri\u015fim</p> <p>Reference Types: - Heap'te saklan\u0131r - Referans kopyalama yapar - Class, interface, delegate, array - Null olabilir - Daha yava\u015f eri\u015fim</p> <p>\u00d6rnek Kod: <pre><code>// Value Type \u00f6rne\u011fi\nint a = 10;\nint b = a; // De\u011fer kopyalama\nb = 20;    // a de\u011fi\u015fmez\n\n// Reference Type \u00f6rne\u011fi\nclass Person { public string Name; }\nPerson p1 = new Person { Name = \"Ahmet\" };\nPerson p2 = p1;      // Referans kopyalama\np2.Name = \"Mehmet\";  // p1.Name de de\u011fi\u015fir\n</code></pre></p>"},{"location":"junior/csharp-basics/basic-data-types/#2-primitive-veri-tipleri-nelerdir-ve-ne-zaman-kullanlr","title":"2. Primitive veri tipleri nelerdir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Primitive Tipler: - Tam Say\u0131lar:   - byte (0-255)   - short (-32,768 to 32,767)   - int (-2,147,483,648 to 2,147,483,647)   - long (\u00e7ok b\u00fcy\u00fck say\u0131lar)</p> <ul> <li>Ondal\u0131kl\u0131 Say\u0131lar:</li> <li>float (7 basamak hassasiyet)</li> <li>double (15-16 basamak hassasiyet)</li> <li> <p>decimal (28-29 basamak hassasiyet)</p> </li> <li> <p>Di\u011fer:</p> </li> <li>char (tek karakter)</li> <li>bool (true/false)</li> </ul> <p>\u00d6rnek Kod: <pre><code>// Tam say\u0131 \u00f6rnekleri\nbyte age = 25;\nint population = 85000000;\nlong distance = 15000000000L;\n\n// Ondal\u0131kl\u0131 say\u0131 \u00f6rnekleri\nfloat pi = 3.14f;\ndouble gravity = 9.81;\ndecimal price = 99.99m;\n\n// Di\u011fer tipler\nchar grade = 'A';\nbool isActive = true;\n</code></pre></p>"},{"location":"junior/csharp-basics/basic-data-types/#3-nullable-tipler-nedir-ve-nasl-kullanlr","title":"3. Nullable tipler nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Nullable Tipler: - Value type'lara null de\u011fer atama imkan\u0131 - <code>?</code> operat\u00f6r\u00fc ile tan\u0131mlan\u0131r - <code>HasValue</code> ve <code>Value</code> \u00f6zellikleri - Null-coalescing operat\u00f6r\u00fc (<code>??</code>)</p> <p>\u00d6rnek Kod: <pre><code>// Nullable tan\u0131mlama\nint? nullableInt = null;\nDateTime? nullableDate = null;\n\n// Null kontrol\u00fc\nif (nullableInt.HasValue)\n{\n    int value = nullableInt.Value;\n}\n\n// Null-coalescing operat\u00f6r\u00fc\nint result = nullableInt ?? 0;\n\n// Null-conditional operat\u00f6r\u00fc\nstring name = person?.Name ?? \"Bilinmiyor\";\n</code></pre></p>"},{"location":"junior/csharp-basics/basic-data-types/#4-tip-donusumleri-type-conversion-nasl-yaplr","title":"4. Tip d\u00f6n\u00fc\u015f\u00fcmleri (Type Conversion) nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Tip D\u00f6n\u00fc\u015f\u00fcmleri: - Implicit Conversion:   - Otomatik d\u00f6n\u00fc\u015f\u00fcm   - Veri kayb\u0131 yok   - K\u00fc\u00e7\u00fck tip -&gt; B\u00fcy\u00fck tip</p> <ul> <li>Explicit Conversion:</li> <li>Manuel d\u00f6n\u00fc\u015f\u00fcm</li> <li>Veri kayb\u0131 olabilir</li> <li> <p>Cast operat\u00f6r\u00fc kullan\u0131m\u0131</p> </li> <li> <p>Convert S\u0131n\u0131f\u0131:</p> </li> <li>G\u00fcvenli d\u00f6n\u00fc\u015f\u00fcm</li> <li>Exception handling</li> <li>TryParse metodu</li> </ul> <p>\u00d6rnek Kod: <pre><code>// Implicit conversion\nint i = 10;\nlong l = i;  // Otomatik d\u00f6n\u00fc\u015f\u00fcm\n\n// Explicit conversion\ndouble d = 10.5;\nint i = (int)d;  // Manuel d\u00f6n\u00fc\u015f\u00fcm\n\n// Convert s\u0131n\u0131f\u0131\nstring str = \"123\";\nint number = Convert.ToInt32(str);\n\n// TryParse\nstring input = \"123\";\nif (int.TryParse(input, out int result))\n{\n    // Ba\u015far\u0131l\u0131 d\u00f6n\u00fc\u015f\u00fcm\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/basic-data-types/#5-boxing-ve-unboxing-nedir-ve-performans-etkileri-nelerdir","title":"5. Boxing ve Unboxing nedir ve performans etkileri nelerdir?","text":"<p>Cevap: Boxing/Unboxing: - Boxing: Value type -&gt; Reference type - Unboxing: Reference type -&gt; Value type - Performans maliyeti y\u00fcksek - M\u00fcmk\u00fcnse ka\u00e7\u0131n\u0131lmal\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Boxing \u00f6rne\u011fi\nint i = 123;\nobject o = i;  // Boxing\n\n// Unboxing \u00f6rne\u011fi\nint j = (int)o;  // Unboxing\n\n// Performans etkisi\nvar stopwatch = new Stopwatch();\nstopwatch.Start();\n\n// Boxing/Unboxing i\u00e7eren kod\nfor (int k = 0; k &lt; 1000000; k++)\n{\n    object boxed = k;  // Boxing\n    int unboxed = (int)boxed;  // Unboxing\n}\n\nstopwatch.Stop();\nConsole.WriteLine($\"Boxing/Unboxing s\u00fcresi: {stopwatch.ElapsedMilliseconds}ms\");\n</code></pre></p>"},{"location":"junior/csharp-basics/basic-data-types/#best-practices","title":"Best Practices","text":"<ol> <li>Veri Tipi Se\u00e7imi</li> <li>Uygun boyutta tip se\u00e7in</li> <li>Gereksiz b\u00fcy\u00fck tiplerden ka\u00e7\u0131n\u0131n</li> <li> <p>Nullable kullan\u0131m\u0131n\u0131 s\u0131n\u0131rlay\u0131n</p> </li> <li> <p>Tip D\u00f6n\u00fc\u015f\u00fcmleri</p> </li> <li>Implicit conversion tercih edin</li> <li>TryParse kullan\u0131n</li> <li> <p>Boxing/Unboxing'den ka\u00e7\u0131n\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Struct kullan\u0131m\u0131n\u0131 de\u011ferlendirin</li> <li>Referans tiplerini dikkatli kullan\u0131n</li> <li>Memory allocation'\u0131 minimize edin</li> </ol>"},{"location":"junior/csharp-basics/basic-data-types/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>C# Veri Tipleri</li> <li>Nullable Value Types</li> <li>Type Conversion </li> </ul>"},{"location":"junior/csharp-basics/boxing-unboxing/","title":"Boxing ve Unboxing","text":""},{"location":"junior/csharp-basics/boxing-unboxing/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Boxing ve Unboxing, C#'ta value type'lar\u0131n reference type'lara d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi ve tekrar value type'lara d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi i\u015flemleridir. Bu i\u015flemler performans a\u00e7\u0131s\u0131ndan \u00f6nemli etkilere sahiptir.</p>"},{"location":"junior/csharp-basics/boxing-unboxing/#boxing-kutulama","title":"Boxing (Kutulama)","text":"<ol> <li> <p>Temel Boxing <pre><code>// Value type -&gt; object (boxing)\nint number = 42;\nobject boxed = number; // Boxing i\u015flemi\n</code></pre></p> </li> <li> <p>Boxing \u00d6rnekleri <pre><code>// Say\u0131sal tipler\ndouble pi = 3.14;\nobject boxedPi = pi;\n\n// Struct'lar\nDateTime now = DateTime.Now;\nobject boxedNow = now;\n\n// Enum'lar\nDayOfWeek day = DayOfWeek.Monday;\nobject boxedDay = day;\n</code></pre></p> </li> <li> <p>Boxing ve Interface <pre><code>// Value type -&gt; interface (boxing)\nIComparable comparable = 42; // Boxing\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/boxing-unboxing/#unboxing-kutudan-ckarma","title":"Unboxing (Kutudan \u00c7\u0131karma)","text":"<ol> <li> <p>Temel Unboxing <pre><code>// object -&gt; value type (unboxing)\nobject boxed = 42;\nint number = (int)boxed; // Unboxing i\u015flemi\n</code></pre></p> </li> <li> <p>Unboxing \u00d6rnekleri <pre><code>// Say\u0131sal tipler\nobject boxedNumber = 42;\nint number = (int)boxedNumber;\n\n// Struct'lar\nobject boxedDate = DateTime.Now;\nDateTime date = (DateTime)boxedDate;\n\n// Enum'lar\nobject boxedEnum = DayOfWeek.Monday;\nDayOfWeek day = (DayOfWeek)boxedEnum;\n</code></pre></p> </li> <li> <p>Unboxing ve Interface <pre><code>// Interface -&gt; value type (unboxing)\nIComparable comparable = 42;\nint number = (int)comparable;\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/boxing-unboxing/#boxingunboxing-performans-etkileri","title":"Boxing/Unboxing Performans Etkileri","text":"<ol> <li> <p>Bellek Kullan\u0131m\u0131 <pre><code>// Boxing \u00f6ncesi\nint number = 42; // 4 byte\n\n// Boxing sonras\u0131\nobject boxed = number; // 4 byte (de\u011fer) + 8 byte (object header) + 4 byte (type pointer)\n</code></pre></p> </li> <li> <p>Performans \u00d6l\u00e7\u00fcm\u00fc <pre><code>// Boxing olmadan\nint sum = 0;\nfor (int i = 0; i &lt; 1000000; i++)\n{\n    sum += i;\n}\n\n// Boxing ile\nobject sum = 0;\nfor (int i = 0; i &lt; 1000000; i++)\n{\n    sum = (int)sum + i; // Boxing ve unboxing\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/boxing-unboxing/#boxingunboxing-onleme-yontemleri","title":"Boxing/Unboxing \u00d6nleme Y\u00f6ntemleri","text":"<ol> <li> <p>Generic Kullan\u0131m\u0131 <pre><code>// Boxing olmadan\npublic class GenericList&lt;T&gt;\n{\n    private T[] items;\n    // ...\n}\n\n// Boxing ile\npublic class ObjectList\n{\n    private object[] items;\n    // ...\n}\n</code></pre></p> </li> <li> <p>Interface Kullan\u0131m\u0131 <pre><code>// Boxing olmadan\npublic interface IValueContainer&lt;T&gt;\n{\n    T Value { get; }\n}\n\n// Boxing ile\npublic interface IValueContainer\n{\n    object Value { get; }\n}\n</code></pre></p> </li> <li> <p>Struct Kullan\u0131m\u0131 <pre><code>// Boxing olmadan\npublic struct Point\n{\n    public int X { get; }\n    public int Y { get; }\n}\n\n// Boxing ile\npublic class Point\n{\n    public int X { get; }\n    public int Y { get; }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/boxing-unboxing/#boxingunboxing-ve-collections","title":"Boxing/Unboxing ve Collections","text":"<ol> <li> <p>Generic Collections <pre><code>// Boxing olmadan\nList&lt;int&gt; numbers = new List&lt;int&gt;();\nnumbers.Add(42);\n\n// Boxing ile\nArrayList numbers = new ArrayList();\nnumbers.Add(42); // Boxing\n</code></pre></p> </li> <li> <p>Dictionary Kullan\u0131m\u0131 <pre><code>// Boxing olmadan\nDictionary&lt;int, string&gt; dict = new Dictionary&lt;int, string&gt;();\ndict[42] = \"Answer\";\n\n// Boxing ile\nHashtable dict = new Hashtable();\ndict[42] = \"Answer\"; // Boxing\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/boxing-unboxing/#boxingunboxing-ve-linq","title":"Boxing/Unboxing ve LINQ","text":"<ol> <li> <p>LINQ Sorgular\u0131 <pre><code>// Boxing olmadan\nvar numbers = new List&lt;int&gt; { 1, 2, 3 };\nvar sum = numbers.Sum(); // No boxing\n\n// Boxing ile\nvar objects = new ArrayList { 1, 2, 3 };\nvar sum = objects.Cast&lt;int&gt;().Sum(); // Boxing\n</code></pre></p> </li> <li> <p>LINQ ve Value Types <pre><code>// Boxing olmadan\nvar points = new List&lt;Point&gt;();\nvar xSum = points.Sum(p =&gt; p.X);\n\n// Boxing ile\nvar points = new ArrayList();\nvar xSum = points.Cast&lt;Point&gt;().Sum(p =&gt; p.X); // Boxing\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/boxing-unboxing/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Boxing/Unboxing Temelleri</li> <li>Boxing ve Unboxing nedir?</li> <li>Hangi durumlarda boxing/unboxing ger\u00e7ekle\u015fir?</li> <li> <p>Boxing/unboxing'in performans etkileri nelerdir?</p> </li> <li> <p>Bellek Y\u00f6netimi</p> </li> <li>Boxing i\u015flemi bellekte nas\u0131l ger\u00e7ekle\u015fir?</li> <li>Boxing sonras\u0131 olu\u015fan nesne nerede saklan\u0131r?</li> <li> <p>Boxing/unboxing'in garbage collection \u00fczerindeki etkisi nedir?</p> </li> <li> <p>Performans Optimizasyonu</p> </li> <li>Boxing/unboxing nas\u0131l \u00f6nlenebilir?</li> <li>Generic tipler boxing/unboxing'i nas\u0131l \u00f6nler?</li> <li> <p>Value type'lar\u0131n performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Collections ve Boxing</p> </li> <li>Generic collections boxing/unboxing'i nas\u0131l \u00f6nler?</li> <li>ArrayList vs List performans farklar\u0131 nelerdir? <li> <p>Dictionary vs Hashtable boxing/unboxing a\u00e7\u0131s\u0131ndan farklar\u0131 nelerdir?</p> </li> <li> <p>LINQ ve Boxing</p> </li> <li>LINQ sorgular\u0131nda boxing/unboxing nas\u0131l \u00f6nlenir?</li> <li>LINQ ve value type'lar\u0131n kullan\u0131m\u0131nda dikkat edilmesi gerekenler nelerdir?</li> <li> <p>LINQ performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Interface ve Boxing</p> </li> <li>Interface'ler boxing/unboxing'i nas\u0131l etkiler?</li> <li>Generic interface'ler boxing/unboxing'i nas\u0131l \u00f6nler?</li> <li> <p>Interface kullan\u0131m\u0131nda performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Struct ve Boxing</p> </li> <li>Struct'lar boxing/unboxing'i nas\u0131l etkiler?</li> <li>Immutable struct'lar boxing/unboxing'i nas\u0131l etkiler?</li> <li> <p>Struct kullan\u0131m\u0131nda performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Modern C# \u00d6zellikleri</p> </li> <li>C# 7.0 ve sonras\u0131nda boxing/unboxing nas\u0131l geli\u015fti?</li> <li>ref struct ve readonly struct boxing/unboxing'i nas\u0131l etkiler?</li> <li>Modern C# \u00f6zellikleri boxing/unboxing'i nas\u0131l optimize eder?</li>"},{"location":"junior/csharp-basics/boxing-unboxing/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Boxing \u00d6nleyici Generic S\u0131n\u0131f <pre><code>public class ValueContainer&lt;T&gt; where T : struct\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Boxing \u00d6nleyici Collection <pre><code>public class ValueCollection&lt;T&gt; where T : struct\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Boxing \u00d6nleyici Cache <pre><code>public class ValueCache&lt;TKey, TValue&gt; where TValue : struct\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Boxing \u00d6nleyici LINQ Extension <pre><code>public static class ValueTypeExtensions\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Boxing \u00d6nleyici Serializer <pre><code>public class ValueTypeSerializer&lt;T&gt; where T : struct\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/boxing-unboxing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Boxing and Unboxing</li> <li>Microsoft Docs - Performance Tips</li> <li>Microsoft Docs - Generic Collections </li> </ul>"},{"location":"junior/csharp-basics/collections/","title":"Koleksiyonlar","text":""},{"location":"junior/csharp-basics/collections/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, C#'ta veri yap\u0131lar\u0131n\u0131 y\u00f6netmek i\u00e7in kullan\u0131lan koleksiyon tiplerini ve LINQ sorgular\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/csharp-basics/collections/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/csharp-basics/collections/#1-temel-koleksiyon-tipleri-nelerdir-ve-ne-zaman-kullanlr","title":"1. Temel koleksiyon tipleri nelerdir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Temel Koleksiyonlar: - List:   - Dinamik boyutlu dizi   - S\u0131ral\u0131 eri\u015fim   - Add, Remove, IndexOf metodlar\u0131 <ul> <li>Dictionary: <li>Key-Value \u00e7iftleri</li> <li>H\u0131zl\u0131 arama</li> <li> <p>Unique key'ler</p> </li> <li> <p>HashSet: <li>Unique elemanlar</li> <li>H\u0131zl\u0131 arama</li> <li> <p>Set operasyonlar\u0131</p> </li> <li> <p>Queue: <li>FIFO (First In First Out)</li> <li>Enqueue, Dequeue</li> <li> <p>S\u0131ral\u0131 i\u015flemler</p> </li> <li> <p>Stack: <li>LIFO (Last In First Out)</li> <li>Push, Pop</li> <li>Geri alma i\u015flemleri</li> <p>\u00d6rnek Kod: <pre><code>// List kullan\u0131m\u0131\nvar numbers = new List&lt;int&gt; { 1, 2, 3 };\nnumbers.Add(4);\nnumbers.Remove(2);\nint index = numbers.IndexOf(3);\n\n// Dictionary kullan\u0131m\u0131\nvar users = new Dictionary&lt;int, string&gt;();\nusers.Add(1, \"Ahmet\");\nusers.Add(2, \"Mehmet\");\nstring name = users[1];\n\n// HashSet kullan\u0131m\u0131\nvar uniqueNumbers = new HashSet&lt;int&gt; { 1, 2, 3 };\nuniqueNumbers.Add(2); // Tekrar eklenmez\nbool contains = uniqueNumbers.Contains(2);\n\n// Queue kullan\u0131m\u0131\nvar queue = new Queue&lt;string&gt;();\nqueue.Enqueue(\"\u0130lk\");\nqueue.Enqueue(\"\u0130kinci\");\nstring first = queue.Dequeue();\n\n// Stack kullan\u0131m\u0131\nvar stack = new Stack&lt;string&gt;();\nstack.Push(\"Alt\");\nstack.Push(\"\u00dcst\");\nstring top = stack.Pop();\n</code></pre></p>"},{"location":"junior/csharp-basics/collections/#2-linq-nedir-ve-nasl-kullanlr","title":"2. LINQ nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: LINQ (Language Integrated Query): - Veri sorgulama - Method ve Query syntax - Deferred execution - Extension methods</p> <p>\u00d6rnek Kod: <pre><code>// Method syntax\nvar numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(n =&gt; n % 2 == 0)\n                        .OrderByDescending(n =&gt; n)\n                        .ToList();\n\n// Query syntax\nvar query = from n in numbers\n            where n % 2 == 0\n            orderby n descending\n            select n;\n\n// Aggregation\nint sum = numbers.Sum();\ndouble avg = numbers.Average();\nint max = numbers.Max();\n\n// Grouping\nvar people = new List&lt;Person&gt;\n{\n    new Person { Name = \"Ahmet\", Age = 25 },\n    new Person { Name = \"Mehmet\", Age = 30 }\n};\n\nvar groups = people.GroupBy(p =&gt; p.Age);\n</code></pre></p>"},{"location":"junior/csharp-basics/collections/#3-ienumerable-ve-icollection-arasndaki-farklar-nelerdir","title":"3. IEnumerable ve ICollection aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Interface Farklar\u0131: - IEnumerable:   - Sadece okuma   - foreach deste\u011fi   - Deferred execution <ul> <li>ICollection: <li>Okuma ve yazma</li> <li>Count \u00f6zelli\u011fi</li> <li>Add, Remove, Clear</li> <p>\u00d6rnek Kod: <pre><code>// IEnumerable kullan\u0131m\u0131\nIEnumerable&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3 };\nforeach (var number in numbers)\n{\n    Console.WriteLine(number);\n}\n\n// ICollection kullan\u0131m\u0131\nICollection&lt;int&gt; collection = new List&lt;int&gt;();\ncollection.Add(1);\ncollection.Remove(1);\nint count = collection.Count;\n</code></pre></p>"},{"location":"junior/csharp-basics/collections/#4-generic-koleksiyonlar-ve-non-generic-koleksiyonlar-arasndaki-farklar-nelerdir","title":"4. Generic koleksiyonlar ve non-generic koleksiyonlar aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Generic vs Non-Generic: - Generic:   - Tip g\u00fcvenli\u011fi   - Boxing/Unboxing yok   - Performans avantaj\u0131   - Modern kullan\u0131m</p> <ul> <li>Non-Generic:</li> <li>Object tipinde</li> <li>Boxing/Unboxing var</li> <li>Eski kodlarda kullan\u0131m</li> <li>Tip d\u00f6n\u00fc\u015f\u00fcm\u00fc gerekli</li> </ul> <p>\u00d6rnek Kod: <pre><code>// Generic koleksiyon\nList&lt;int&gt; genericList = new List&lt;int&gt;();\ngenericList.Add(1);  // Tip g\u00fcvenli\n\n// Non-generic koleksiyon\nArrayList nonGenericList = new ArrayList();\nnonGenericList.Add(1);  // Boxing\nnonGenericList.Add(\"string\");  // Tip g\u00fcvensiz\nint number = (int)nonGenericList[0];  // Unboxing\n</code></pre></p>"},{"location":"junior/csharp-basics/collections/#5-koleksiyon-performans-optimizasyonu-nasl-yaplr","title":"5. Koleksiyon performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Performans Optimizasyonu: - Kapasite belirleme - Uygun koleksiyon se\u00e7imi - LINQ optimizasyonu - Memory kullan\u0131m\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Kapasite belirleme\nvar list = new List&lt;int&gt;(1000);  // Ba\u015flang\u0131\u00e7 kapasitesi\n\n// Dictionary optimizasyonu\nvar dict = new Dictionary&lt;string, int&gt;(1000, StringComparer.OrdinalIgnoreCase);\n\n// LINQ optimizasyonu\nvar numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\n// K\u00f6t\u00fc kullan\u0131m\nvar result = numbers.Where(n =&gt; n % 2 == 0)\n                   .OrderBy(n =&gt; n)\n                   .ToList()\n                   .FirstOrDefault();\n\n// \u0130yi kullan\u0131m\nvar optimized = numbers.FirstOrDefault(n =&gt; n % 2 == 0);\n</code></pre></p>"},{"location":"junior/csharp-basics/collections/#best-practices","title":"Best Practices","text":"<ol> <li>Koleksiyon Se\u00e7imi</li> <li>Uygun veri yap\u0131s\u0131 se\u00e7imi</li> <li>Performans gereksinimleri</li> <li> <p>Memory kullan\u0131m\u0131</p> </li> <li> <p>LINQ Kullan\u0131m\u0131</p> </li> <li>Deferred execution</li> <li>Materialization</li> <li> <p>Query optimizasyonu</p> </li> <li> <p>Thread Safety</p> </li> <li>Concurrent koleksiyonlar</li> <li>Lock mekanizmalar\u0131</li> <li>Immutable koleksiyonlar</li> </ol>"},{"location":"junior/csharp-basics/collections/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>C# Collections</li> <li>LINQ in C#</li> <li>Generic Collections </li> </ul>"},{"location":"junior/csharp-basics/control-structures/","title":"Kontrol Yap\u0131lar\u0131","text":""},{"location":"junior/csharp-basics/control-structures/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, C#'ta program ak\u0131\u015f\u0131n\u0131 kontrol etmek i\u00e7in kullan\u0131lan temel yap\u0131lar\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/csharp-basics/control-structures/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/csharp-basics/control-structures/#1-if-else-yaps-nedir-ve-nasl-kullanlr","title":"1. If-Else yap\u0131s\u0131 nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: If-Else Yap\u0131s\u0131: - Ko\u015fullu program ak\u0131\u015f\u0131 sa\u011flar - Boolean ifadelerle \u00e7al\u0131\u015f\u0131r - \u0130\u00e7 i\u00e7e kullan\u0131labilir - Ternary operat\u00f6r alternatifi</p> <p>\u00d6rnek Kod: <pre><code>// Temel if-else\nint number = 10;\nif (number &gt; 0)\n{\n    Console.WriteLine(\"Pozitif\");\n}\nelse if (number &lt; 0)\n{\n    Console.WriteLine(\"Negatif\");\n}\nelse\n{\n    Console.WriteLine(\"S\u0131f\u0131r\");\n}\n\n// Ternary operat\u00f6r\nstring result = number &gt; 0 ? \"Pozitif\" : \"Negatif veya S\u0131f\u0131r\";\n\n// \u0130\u00e7 i\u00e7e if-else\nif (number &gt; 0)\n{\n    if (number % 2 == 0)\n    {\n        Console.WriteLine(\"Pozitif \u00e7ift say\u0131\");\n    }\n    else\n    {\n        Console.WriteLine(\"Pozitif tek say\u0131\");\n    }\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/control-structures/#2-switch-case-yaps-nedir-ve-ne-zaman-kullanlr","title":"2. Switch-Case yap\u0131s\u0131 nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Switch-Case: - \u00c7oklu ko\u015ful kontrol\u00fc - Pattern matching deste\u011fi - Case fallthrough \u00f6zelli\u011fi - Expression-based switch</p> <p>\u00d6rnek Kod: <pre><code>// Temel switch-case\nint day = 3;\nswitch (day)\n{\n    case 1:\n        Console.WriteLine(\"Pazartesi\");\n        break;\n    case 2:\n        Console.WriteLine(\"Sal\u0131\");\n        break;\n    case 3:\n        Console.WriteLine(\"\u00c7ar\u015famba\");\n        break;\n    default:\n        Console.WriteLine(\"Ge\u00e7ersiz g\u00fcn\");\n        break;\n}\n\n// Pattern matching\nobject obj = \"Merhaba\";\nswitch (obj)\n{\n    case string s:\n        Console.WriteLine($\"String: {s}\");\n        break;\n    case int i:\n        Console.WriteLine($\"Integer: {i}\");\n        break;\n    case null:\n        Console.WriteLine(\"Null\");\n        break;\n}\n\n// Expression-based switch\nstring result = day switch\n{\n    1 =&gt; \"Pazartesi\",\n    2 =&gt; \"Sal\u0131\",\n    3 =&gt; \"\u00c7ar\u015famba\",\n    _ =&gt; \"Ge\u00e7ersiz g\u00fcn\"\n};\n</code></pre></p>"},{"location":"junior/csharp-basics/control-structures/#3-donguler-nelerdir-ve-nasl-kullanlr","title":"3. D\u00f6ng\u00fcler nelerdir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: D\u00f6ng\u00fc T\u00fcrleri: - for: Belirli say\u0131da tekrar - while: Ko\u015ful sa\u011fland\u0131k\u00e7a - do-while: En az bir kez \u00e7al\u0131\u015f\u0131r - foreach: Koleksiyonlar \u00fczerinde</p> <p>\u00d6rnek Kod: <pre><code>// for d\u00f6ng\u00fcs\u00fc\nfor (int i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n}\n\n// while d\u00f6ng\u00fcs\u00fc\nint j = 0;\nwhile (j &lt; 10)\n{\n    Console.WriteLine(j);\n    j++;\n}\n\n// do-while d\u00f6ng\u00fcs\u00fc\nint k = 0;\ndo\n{\n    Console.WriteLine(k);\n    k++;\n} while (k &lt; 10);\n\n// foreach d\u00f6ng\u00fcs\u00fc\nvar numbers = new[] { 1, 2, 3, 4, 5 };\nforeach (var number in numbers)\n{\n    Console.WriteLine(number);\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/control-structures/#4-break-ve-continue-ifadeleri-ne-ise-yarar","title":"4. Break ve Continue ifadeleri ne i\u015fe yarar?","text":"<p>Cevap: Break/Continue: - Break:   - D\u00f6ng\u00fcy\u00fc sonland\u0131r\u0131r   - Switch-case'den \u00e7\u0131kar   - \u0130\u00e7 i\u00e7e d\u00f6ng\u00fclerde etiket kullan\u0131m\u0131</p> <ul> <li>Continue:</li> <li>Mevcut iterasyonu atlar</li> <li>Sonraki iterasyona ge\u00e7er</li> <li>Ko\u015fullu atlama sa\u011flar</li> </ul> <p>\u00d6rnek Kod: <pre><code>// Break kullan\u0131m\u0131\nfor (int i = 0; i &lt; 10; i++)\n{\n    if (i == 5)\n        break;\n    Console.WriteLine(i);\n}\n\n// Continue kullan\u0131m\u0131\nfor (int i = 0; i &lt; 10; i++)\n{\n    if (i % 2 == 0)\n        continue;\n    Console.WriteLine(i);\n}\n\n// Etiketli break\nouter:\nfor (int i = 0; i &lt; 3; i++)\n{\n    for (int j = 0; j &lt; 3; j++)\n    {\n        if (i == 1 &amp;&amp; j == 1)\n            break outer;\n        Console.WriteLine($\"{i}, {j}\");\n    }\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/control-structures/#5-exception-handling-nasl-yaplr","title":"5. Exception handling nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Exception Handling: - try-catch-finally bloklar\u0131 - \u00d6zel exception tipleri - Exception filtreleme - throw ifadesi</p> <p>\u00d6rnek Kod: <pre><code>// Temel try-catch\ntry\n{\n    int result = 10 / 0;\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine($\"Hata: {ex.Message}\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Genel hata: {ex.Message}\");\n}\nfinally\n{\n    Console.WriteLine(\"Her durumda \u00e7al\u0131\u015f\u0131r\");\n}\n\n// Exception filtreleme\ntry\n{\n    // Kod\n}\ncatch (Exception ex) when (ex.Message.Contains(\"\u00f6zel\"))\n{\n    // \u00d6zel hata i\u015fleme\n}\n\n// \u00d6zel exception\npublic class CustomException : Exception\n{\n    public CustomException(string message) : base(message)\n    {\n    }\n}\n\n// throw kullan\u0131m\u0131\nif (condition)\n{\n    throw new CustomException(\"\u00d6zel hata mesaj\u0131\");\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/control-structures/#best-practices","title":"Best Practices","text":"<ol> <li>Kod Okunabilirli\u011fi</li> <li>Uygun girintileme</li> <li>Anlaml\u0131 ko\u015ful ifadeleri</li> <li> <p>Gereksiz i\u00e7 i\u00e7e yap\u0131lardan ka\u00e7\u0131nma</p> </li> <li> <p>Performans</p> </li> <li>Switch-case kullan\u0131m\u0131</li> <li>D\u00f6ng\u00fc optimizasyonu</li> <li> <p>Exception handling maliyeti</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Null kontrolleri</li> <li>Exception handling</li> <li>Input validasyonu</li> </ol>"},{"location":"junior/csharp-basics/control-structures/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>C# Control Flow</li> <li>C# Iteration Statements</li> <li>C# Exception Handling </li> </ul>"},{"location":"junior/csharp-basics/data-types-variables/","title":"Veri Tipleri ve De\u011fi\u015fkenler","text":""},{"location":"junior/csharp-basics/data-types-variables/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>C# programlama dilinde veri tipleri ve de\u011fi\u015fkenler, uygulaman\u0131n temel yap\u0131 ta\u015flar\u0131d\u0131r. Bu b\u00f6l\u00fcmde, C#'taki temel veri tipleri, de\u011fi\u015fken tan\u0131mlama kurallar\u0131 ve veri tipi d\u00f6n\u00fc\u015f\u00fcmleri ele al\u0131nacakt\u0131r.</p>"},{"location":"junior/csharp-basics/data-types-variables/#temel-veri-tipleri","title":"Temel Veri Tipleri","text":""},{"location":"junior/csharp-basics/data-types-variables/#1-deger-tipleri-value-types","title":"1. De\u011fer Tipleri (Value Types)","text":""},{"location":"junior/csharp-basics/data-types-variables/#saysal-tipler","title":"Say\u0131sal Tipler","text":"<pre><code>// Tam say\u0131 tipleri\nbyte b = 255;                    // 0 to 255\nshort s = 32767;                 // -32,768 to 32,767\nint i = 2147483647;              // -2,147,483,648 to 2,147,483,647\nlong l = 9223372036854775807;    // -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n\n// Ondal\u0131kl\u0131 say\u0131 tipleri\nfloat f = 3.14f;                 // 7 basamak hassasiyet\ndouble d = 3.14159265359;        // 15-16 basamak hassasiyet\ndecimal dec = 3.14159265359m;    // 28-29 basamak hassasiyet\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#diger-deger-tipleri","title":"Di\u011fer De\u011fer Tipleri","text":"<pre><code>// Boolean\nbool isTrue = true;\nbool isFalse = false;\n\n// Karakter\nchar c = 'A';\n\n// Enum\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nDays today = Days.Monday;\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#2-referans-tipleri-reference-types","title":"2. Referans Tipleri (Reference Types)","text":""},{"location":"junior/csharp-basics/data-types-variables/#string","title":"String","text":"<pre><code>string name = \"John\";\nstring message = \"Merhaba D\u00fcnya\";\nstring empty = string.Empty;\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#object","title":"Object","text":"<pre><code>object obj = new object();\nobject number = 42;\nobject text = \"Hello\";\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#array","title":"Array","text":"<pre><code>int[] numbers = new int[5];\nstring[] names = new string[] { \"Ali\", \"Veli\", \"Ay\u015fe\" };\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#degisken-tanmlama","title":"De\u011fi\u015fken Tan\u0131mlama","text":""},{"location":"junior/csharp-basics/data-types-variables/#degisken-tanmlama-kurallar","title":"De\u011fi\u015fken Tan\u0131mlama Kurallar\u0131","text":"<ul> <li>De\u011fi\u015fken isimleri harf veya alt \u00e7izgi (_) ile ba\u015flamal\u0131d\u0131r</li> <li>Rakam ile ba\u015flayamaz</li> <li>\u00d6zel karakterler kullan\u0131lamaz</li> <li>C# anahtar kelimeleri kullan\u0131lamaz</li> <li>B\u00fcy\u00fck/k\u00fc\u00e7\u00fck harf duyarl\u0131d\u0131r</li> </ul>"},{"location":"junior/csharp-basics/data-types-variables/#degisken-tanmlama-ornekleri","title":"De\u011fi\u015fken Tan\u0131mlama \u00d6rnekleri","text":"<pre><code>// Do\u011fru kullan\u0131mlar\nint age = 25;\nstring firstName = \"Ahmet\";\ndouble _price = 99.99;\nbool isValid = true;\n\n// Yanl\u0131\u015f kullan\u0131mlar\n// int 1age = 25;        // Rakam ile ba\u015flayamaz\n// string first-name = \"Ahmet\";  // \u00d6zel karakter kullan\u0131lamaz\n// bool if = true;       // Anahtar kelime kullan\u0131lamaz\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#veri-tipi-donusumleri","title":"Veri Tipi D\u00f6n\u00fc\u015f\u00fcmleri","text":""},{"location":"junior/csharp-basics/data-types-variables/#1-implicit-conversion-ortuk-donusum","title":"1. Implicit Conversion (\u00d6rt\u00fck D\u00f6n\u00fc\u015f\u00fcm)","text":"<pre><code>int i = 10;\nlong l = i;  // int'ten long'a otomatik d\u00f6n\u00fc\u015f\u00fcm\n\nfloat f = 3.14f;\ndouble d = f;  // float'tan double'a otomatik d\u00f6n\u00fc\u015f\u00fcm\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#2-explicit-conversion-ack-donusum","title":"2. Explicit Conversion (A\u00e7\u0131k D\u00f6n\u00fc\u015f\u00fcm)","text":"<pre><code>double d = 3.14;\nint i = (int)d;  // double'dan int'e a\u00e7\u0131k d\u00f6n\u00fc\u015f\u00fcm\n\nlong l = 1000;\nint i = Convert.ToInt32(l);  // Convert s\u0131n\u0131f\u0131 ile d\u00f6n\u00fc\u015f\u00fcm\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#3-parse-ve-tryparse","title":"3. Parse ve TryParse","text":"<pre><code>// Parse\nstring numberStr = \"42\";\nint number = int.Parse(numberStr);\n\n// TryParse\nstring input = \"123\";\nint result;\nif (int.TryParse(input, out result))\n{\n    Console.WriteLine($\"D\u00f6n\u00fc\u015f\u00fcm ba\u015far\u0131l\u0131: {result}\");\n}\nelse\n{\n    Console.WriteLine(\"D\u00f6n\u00fc\u015f\u00fcm ba\u015far\u0131s\u0131z\");\n}\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#best-practices","title":"Best Practices","text":""},{"location":"junior/csharp-basics/data-types-variables/#1-degisken-isimlendirme","title":"1. De\u011fi\u015fken \u0130simlendirme","text":"<ul> <li>Anlaml\u0131 isimler kullan\u0131n</li> <li>camelCase kullan\u0131n</li> <li>K\u0131saltmalardan ka\u00e7\u0131n\u0131n</li> <li>T\u00fcrk\u00e7e karakter kullanmay\u0131n</li> </ul>"},{"location":"junior/csharp-basics/data-types-variables/#2-veri-tipi-secimi","title":"2. Veri Tipi Se\u00e7imi","text":"<ul> <li>Uygun veri tipini se\u00e7in</li> <li>Gereksiz b\u00fcy\u00fck tiplerden ka\u00e7\u0131n\u0131n</li> <li>Hassasiyet gerektiren hesaplamalarda decimal kullan\u0131n</li> <li>Enum kullan\u0131m\u0131n\u0131 tercih edin</li> </ul>"},{"location":"junior/csharp-basics/data-types-variables/#3-tip-guvenligi","title":"3. Tip G\u00fcvenli\u011fi","text":"<ul> <li>var kullan\u0131m\u0131nda dikkatli olun</li> <li>Null kontrol\u00fc yap\u0131n</li> <li>TryParse kullan\u0131n</li> <li>Boxing/Unboxing'den ka\u00e7\u0131n\u0131n</li> </ul>"},{"location":"junior/csharp-basics/data-types-variables/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"junior/csharp-basics/data-types-variables/#1-var-ne-zaman-kullanlmaldr","title":"1. var ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>LINQ sorgular\u0131nda</li> <li>Anonim tiplerde</li> <li>Tip a\u00e7\u0131k oldu\u011funda</li> <li>Kod okunabilirli\u011fini art\u0131rd\u0131\u011f\u0131nda</li> </ul>"},{"location":"junior/csharp-basics/data-types-variables/#2-string-ve-string-arasndaki-fark-nedir","title":"2. String ve string aras\u0131ndaki fark nedir?","text":"<ul> <li>string, System.String'in alias'\u0131d\u0131r</li> <li>Performans fark\u0131 yoktur</li> <li>Tercih edilen kullan\u0131m string'dir</li> <li>\u0130kisi de ayn\u0131 \u015feydir</li> </ul>"},{"location":"junior/csharp-basics/data-types-variables/#3-nullable-tipler-nedir","title":"3. Nullable tipler nedir?","text":"<ul> <li>De\u011fer tiplerine null de\u011fer atanabilmesini sa\u011flar</li> <li>? operat\u00f6r\u00fc ile tan\u0131mlan\u0131r</li> <li>HasValue ve Value \u00f6zellikleri vard\u0131r</li> <li>Null kontrol\u00fc yap\u0131labilir</li> </ul>"},{"location":"junior/csharp-basics/data-types-variables/#ornek-kodlar","title":"\u00d6rnek Kodlar","text":""},{"location":"junior/csharp-basics/data-types-variables/#1-tip-donusumu","title":"1. Tip D\u00f6n\u00fc\u015f\u00fcm\u00fc","text":"<pre><code>public class TypeConversion\n{\n    public void ConvertTypes()\n    {\n        // String to Number\n        string strNumber = \"123\";\n        int number = int.Parse(strNumber);\n\n        // Number to String\n        int value = 42;\n        string strValue = value.ToString();\n\n        // DateTime\n        string dateStr = \"2024-01-01\";\n        DateTime date = DateTime.Parse(dateStr);\n    }\n}\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#2-nullable-types","title":"2. Nullable Types","text":"<pre><code>public class NullableExample\n{\n    public void HandleNullable()\n    {\n        int? nullableInt = null;\n        if (nullableInt.HasValue)\n        {\n            int value = nullableInt.Value;\n            Console.WriteLine($\"De\u011fer: {value}\");\n        }\n        else\n        {\n            Console.WriteLine(\"De\u011fer null\");\n        }\n\n        // Null-coalescing operator\n        int result = nullableInt ?? 0;\n    }\n}\n</code></pre>"},{"location":"junior/csharp-basics/data-types-variables/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>C# Veri Tipleri</li> <li>De\u011fi\u015fkenler ve Tipler</li> <li>Tip D\u00f6n\u00fc\u015f\u00fcmleri </li> </ul>"},{"location":"junior/csharp-basics/datetime-operations/","title":"DateTime \u0130\u015flemleri","text":""},{"location":"junior/csharp-basics/datetime-operations/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>DateTime i\u015flemleri, tarih ve saat verilerini manip\u00fcle etmek i\u00e7in kullan\u0131lan temel operasyonlard\u0131r. C#'ta System.DateTime ve System.TimeSpan s\u0131n\u0131flar\u0131 kullan\u0131larak tarih ve saat i\u015flemleri ger\u00e7ekle\u015ftirilir.</p>"},{"location":"junior/csharp-basics/datetime-operations/#temel-datetime-islemleri","title":"Temel DateTime \u0130\u015flemleri","text":"<ol> <li> <p>DateTime Olu\u015fturma <pre><code>// \u015eu anki tarih ve saat\nDateTime now = DateTime.Now;\n\n// UTC tarih ve saat\nDateTime utcNow = DateTime.UtcNow;\n\n// Belirli bir tarih\nDateTime specificDate = new DateTime(2024, 1, 1);\n\n// Belirli bir tarih ve saat\nDateTime specificDateTime = new DateTime(2024, 1, 1, 12, 30, 0);\n</code></pre></p> </li> <li> <p>DateTime Formatlama <pre><code>DateTime now = DateTime.Now;\n\n// K\u0131sa tarih\nstring shortDate = now.ToShortDateString(); // \"01.01.2024\"\n\n// Uzun tarih\nstring longDate = now.ToLongDateString(); // \"1 Ocak 2024 Pazartesi\"\n\n// K\u0131sa saat\nstring shortTime = now.ToShortTimeString(); // \"12:30\"\n\n// Uzun saat\nstring longTime = now.ToLongTimeString(); // \"12:30:45\"\n\n// Custom format\nstring customFormat = now.ToString(\"dd.MM.yyyy HH:mm:ss\");\n</code></pre></p> </li> <li> <p>DateTime Kar\u015f\u0131la\u015ft\u0131rma <pre><code>DateTime date1 = new DateTime(2024, 1, 1);\nDateTime date2 = new DateTime(2024, 1, 2);\n\n// E\u015fitlik kontrol\u00fc\nbool isEqual = date1 == date2;\n\n// B\u00fcy\u00fck/k\u00fc\u00e7\u00fck kontrol\u00fc\nbool isGreater = date1 &gt; date2;\n\n// CompareTo\nint result = date1.CompareTo(date2);\n</code></pre></p> </li> <li> <p>DateTime Manip\u00fclasyonu <pre><code>DateTime date = new DateTime(2024, 1, 1);\n\n// G\u00fcn ekleme\nDateTime tomorrow = date.AddDays(1);\n\n// Ay ekleme\nDateTime nextMonth = date.AddMonths(1);\n\n// Y\u0131l ekleme\nDateTime nextYear = date.AddYears(1);\n\n// Saat ekleme\nDateTime nextHour = date.AddHours(1);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/datetime-operations/#timespan-islemleri","title":"TimeSpan \u0130\u015flemleri","text":"<ol> <li> <p>TimeSpan Olu\u015fturma <pre><code>// Belirli bir s\u00fcre\nTimeSpan duration = new TimeSpan(1, 30, 0); // 1 saat 30 dakika\n\n// \u0130ki tarih aras\u0131ndaki fark\nDateTime start = new DateTime(2024, 1, 1);\nDateTime end = new DateTime(2024, 1, 2);\nTimeSpan difference = end - start;\n</code></pre></p> </li> <li> <p>TimeSpan \u00d6zellikleri <pre><code>TimeSpan duration = new TimeSpan(1, 30, 0);\n\nint hours = duration.Hours; // 1\nint minutes = duration.Minutes; // 30\nint seconds = duration.Seconds; // 0\ndouble totalHours = duration.TotalHours; // 1.5\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/datetime-operations/#datetime-ve-timezone","title":"DateTime ve TimeZone","text":"<ol> <li> <p>TimeZone D\u00f6n\u00fc\u015f\u00fcmleri <pre><code>DateTime utcNow = DateTime.UtcNow;\n\n// UTC'den local'e\nDateTime localTime = utcNow.ToLocalTime();\n\n// Local'den UTC'ye\nDateTime utcTime = localTime.ToUniversalTime();\n</code></pre></p> </li> <li> <p>TimeZone Bilgisi <pre><code>// Sistem timezone'u\nTimeZoneInfo localZone = TimeZoneInfo.Local;\n\n// Belirli bir timezone\nTimeZoneInfo istanbulZone = TimeZoneInfo.FindSystemTimeZoneById(\"Turkey Standard Time\");\n\n// Timezone d\u00f6n\u00fc\u015f\u00fcm\u00fc\nDateTime istanbulTime = TimeZoneInfo.ConvertTime(DateTime.Now, istanbulZone);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/datetime-operations/#datetime-ve-kultur","title":"DateTime ve K\u00fclt\u00fcr","text":"<ol> <li> <p>K\u00fclt\u00fcre \u00d6zg\u00fc Formatlama <pre><code>DateTime now = DateTime.Now;\n\n// T\u00fcrk\u00e7e format\nstring turkishFormat = now.ToString(\"d\", new CultureInfo(\"tr-TR\"));\n\n// \u0130ngilizce format\nstring englishFormat = now.ToString(\"d\", new CultureInfo(\"en-US\"));\n</code></pre></p> </li> <li> <p>K\u00fclt\u00fcre \u00d6zg\u00fc Tarih Ayr\u0131\u015ft\u0131rma <pre><code>string dateString = \"01.01.2024\";\nDateTime date = DateTime.Parse(dateString, new CultureInfo(\"tr-TR\"));\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/datetime-operations/#datetime-validasyonu","title":"DateTime Validasyonu","text":"<ol> <li> <p>Ge\u00e7erlilik Kontrol\u00fc <pre><code>string dateString = \"31.02.2024\";\nDateTime date;\nbool isValid = DateTime.TryParse(dateString, out date);\n</code></pre></p> </li> <li> <p>Tarih Aral\u0131\u011f\u0131 Kontrol\u00fc <pre><code>DateTime date = new DateTime(2024, 1, 1);\nDateTime minDate = new DateTime(2023, 1, 1);\nDateTime maxDate = new DateTime(2025, 1, 1);\n\nbool isInRange = date &gt;= minDate &amp;&amp; date &lt;= maxDate;\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/datetime-operations/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>DateTime Temelleri</li> <li>DateTime ve DateTimeOffset aras\u0131ndaki farklar nelerdir?</li> <li>DateTime.Now ve DateTime.UtcNow aras\u0131ndaki fark nedir?</li> <li> <p>DateTime'\u0131n precision (hassasiyet) de\u011feri nedir?</p> </li> <li> <p>TimeZone \u0130\u015flemleri</p> </li> <li>TimeZoneInfo s\u0131n\u0131f\u0131 ne i\u015fe yarar?</li> <li>Daylight Saving Time (Yaz Saati) nedir ve nas\u0131l y\u00f6netilir?</li> <li> <p>TimeZone d\u00f6n\u00fc\u015f\u00fcmlerinde dikkat edilmesi gerekenler nelerdir?</p> </li> <li> <p>DateTime Formatlama</p> </li> <li>Custom DateTime formatlar\u0131 nas\u0131l olu\u015fturulur?</li> <li>K\u00fclt\u00fcre \u00f6zg\u00fc DateTime formatlamas\u0131 nas\u0131l yap\u0131l\u0131r?</li> <li> <p>DateTime formatlamada performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>DateTime Manip\u00fclasyonu</p> </li> <li>DateTime.AddXXX() metodlar\u0131 ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>DateTime aritmetik i\u015flemlerinde dikkat edilmesi gerekenler nelerdir?</li> <li> <p>DateTime de\u011ferlerinin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131nda best practices nelerdir?</p> </li> <li> <p>TimeSpan \u0130\u015flemleri</p> </li> <li>TimeSpan ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>TimeSpan ve DateTime aras\u0131ndaki ili\u015fki nedir?</li> <li> <p>TimeSpan formatlamas\u0131 nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>DateTime Validasyonu</p> </li> <li>DateTime.TryParse() ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>DateTime validasyonunda dikkat edilmesi gerekenler nelerdir?</li> <li> <p>DateTime aral\u0131k kontrolleri nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>DateTime ve Veritaban\u0131</p> </li> <li>DateTime de\u011ferleri veritaban\u0131nda nas\u0131l saklanmal\u0131d\u0131r?</li> <li>DateTime ve SQL aras\u0131ndaki d\u00f6n\u00fc\u015f\u00fcmler nas\u0131l yap\u0131l\u0131r?</li> <li> <p>DateTime de\u011ferlerinin veritaban\u0131nda indexlenmesi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>DateTime ve API'ler</p> </li> <li>API'lerde DateTime de\u011ferleri nas\u0131l formatlanmal\u0131d\u0131r?</li> <li>API'lerde TimeZone bilgisi nas\u0131l y\u00f6netilmelidir?</li> <li> <p>API'lerde DateTime validasyonu nas\u0131l yap\u0131lmal\u0131d\u0131r?</p> </li> <li> <p>DateTime ve Performans</p> </li> <li>DateTime i\u015flemlerinde performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li>DateTime.Parse() vs DateTime.TryParse() performans kar\u015f\u0131la\u015ft\u0131rmas\u0131 nas\u0131ld\u0131r?</li> <li> <p>DateTime formatlamada string pooling nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>DateTime ve G\u00fcvenlik</p> <ul> <li>DateTime de\u011ferlerinde g\u00fcvenlik a\u00e7\u0131klar\u0131 nas\u0131l \u00f6nlenir?</li> <li>DateTime injection nedir ve nas\u0131l \u00f6nlenir?</li> <li>DateTime de\u011ferlerinin loglanmas\u0131nda dikkat edilmesi gerekenler nelerdir?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/datetime-operations/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Tarih Fark\u0131 Hesaplama <pre><code>public int CalculateDaysBetween(DateTime startDate, DateTime endDate)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Ya\u015f Hesaplama <pre><code>public int CalculateAge(DateTime birthDate)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>\u0130\u015f G\u00fcn\u00fc Hesaplama <pre><code>public int CalculateBusinessDays(DateTime startDate, DateTime endDate)\n{\n    // Implementasyon (hafta sonlar\u0131 ve resmi tatiller hari\u00e7)\n}\n</code></pre></p> </li> <li> <p>Tarih Formatlama <pre><code>public string FormatDate(DateTime date, string culture)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>TimeZone D\u00f6n\u00fc\u015f\u00fcm\u00fc <pre><code>public DateTime ConvertTimeZone(DateTime date, string sourceZone, string targetZone)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/datetime-operations/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - DateTime</li> <li>DateTime Formatting</li> <li>TimeZoneInfo Class </li> </ul>"},{"location":"junior/csharp-basics/delegates-events/","title":"Delegates ve Events","text":""},{"location":"junior/csharp-basics/delegates-events/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, C#'ta fonksiyon i\u015faret\u00e7ileri olan delegate'leri ve event mekanizmas\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/csharp-basics/delegates-events/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/csharp-basics/delegates-events/#1-delegate-nedir-ve-nasl-kullanlr","title":"1. Delegate nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Delegate: - Fonksiyon i\u015faret\u00e7isi - Tip g\u00fcvenli - Multicast deste\u011fi - Lambda expression deste\u011fi</p> <p>\u00d6rnek Kod: <pre><code>// Delegate tan\u0131mlama\npublic delegate void LogDelegate(string message);\n\n// Delegate kullan\u0131m\u0131\npublic class Logger\n{\n    public void LogToConsole(string message)\n    {\n        Console.WriteLine(message);\n    }\n\n    public void LogToFile(string message)\n    {\n        File.WriteAllText(\"log.txt\", message);\n    }\n}\n\n// Kullan\u0131m\nvar logger = new Logger();\nLogDelegate logDelegate = logger.LogToConsole;\nlogDelegate += logger.LogToFile;  // Multicast\nlogDelegate(\"Test mesaj\u0131\");\n\n// Lambda expression\nLogDelegate lambdaDelegate = msg =&gt; Console.WriteLine($\"Lambda: {msg}\");\nlambdaDelegate(\"Test\");\n</code></pre></p>"},{"location":"junior/csharp-basics/delegates-events/#2-event-nedir-ve-nasl-kullanlr","title":"2. Event nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Event: - Delegate wrapper - Encapsulation sa\u011flar - Publisher-Subscriber pattern - Thread-safe</p> <p>\u00d6rnek Kod: <pre><code>// Event tan\u0131mlama\npublic class Button\n{\n    public event EventHandler Clicked;\n\n    public void Click()\n    {\n        Clicked?.Invoke(this, EventArgs.Empty);\n    }\n}\n\n// Event kullan\u0131m\u0131\npublic class Form\n{\n    private Button _button;\n\n    public Form()\n    {\n        _button = new Button();\n        _button.Clicked += OnButtonClicked;\n    }\n\n    private void OnButtonClicked(object sender, EventArgs e)\n    {\n        Console.WriteLine(\"Buton t\u0131kland\u0131!\");\n    }\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/delegates-events/#3-action-ve-func-delegateleri-nedir","title":"3. Action ve Func delegate'leri nedir?","text":"<p>Cevap: Generic Delegate'ler: - Action:   - Void d\u00f6n\u00fc\u015f tipi   - 0-16 parametre   - Genel ama\u00e7l\u0131</p> <ul> <li>Func:</li> <li>Generic d\u00f6n\u00fc\u015f tipi</li> <li>0-16 parametre</li> <li>Son parametre d\u00f6n\u00fc\u015f tipi</li> </ul> <p>\u00d6rnek Kod: <pre><code>// Action kullan\u0131m\u0131\nAction&lt;string&gt; logAction = message =&gt; Console.WriteLine(message);\nAction&lt;int, int&gt; sumAction = (a, b) =&gt; Console.WriteLine(a + b);\n\n// Func kullan\u0131m\u0131\nFunc&lt;int, int, int&gt; sumFunc = (a, b) =&gt; a + b;\nFunc&lt;string, bool&gt; isValidFunc = s =&gt; !string.IsNullOrEmpty(s);\n\n// Kullan\u0131m\nlogAction(\"Test\");\nint result = sumFunc(5, 3);\nbool valid = isValidFunc(\"test\");\n</code></pre></p>"},{"location":"junior/csharp-basics/delegates-events/#4-event-ve-delegate-arasndaki-farklar-nelerdir","title":"4. Event ve Delegate aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Event vs Delegate: - Event:   - Sadece s\u0131n\u0131f i\u00e7inden tetiklenebilir   - += ve -= operat\u00f6rleri   - Thread-safe   - Encapsulation</p> <ul> <li>Delegate:</li> <li>Her yerden tetiklenebilir</li> <li>= operat\u00f6r\u00fc</li> <li>Thread-safe de\u011fil</li> <li>Direkt eri\u015fim</li> </ul> <p>\u00d6rnek Kod: <pre><code>public class Publisher\n{\n    // Delegate\n    public LogDelegate LogDelegate { get; set; }\n\n    // Event\n    public event EventHandler SomethingHappened;\n\n    public void DoSomething()\n    {\n        // Delegate kullan\u0131m\u0131\n        LogDelegate?.Invoke(\"Log mesaj\u0131\");\n\n        // Event kullan\u0131m\u0131\n        SomethingHappened?.Invoke(this, EventArgs.Empty);\n    }\n}\n\npublic class Subscriber\n{\n    public void Subscribe(Publisher publisher)\n    {\n        // Delegate atama\n        publisher.LogDelegate = LogMessage;\n\n        // Event subscription\n        publisher.SomethingHappened += OnSomethingHappened;\n    }\n\n    private void LogMessage(string message)\n    {\n        Console.WriteLine(message);\n    }\n\n    private void OnSomethingHappened(object sender, EventArgs e)\n    {\n        Console.WriteLine(\"Bir \u015fey oldu!\");\n    }\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/delegates-events/#5-lambda-expression-nedir-ve-nasl-kullanlr","title":"5. Lambda expression nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Lambda Expression: - Anonim fonksiyon - Delegate k\u0131sayolu - Expression/Statement body - Closure deste\u011fi</p> <p>\u00d6rnek Kod: <pre><code>// Expression lambda\nFunc&lt;int, int&gt; square = x =&gt; x * x;\n\n// Statement lambda\nAction&lt;string&gt; print = message =&gt;\n{\n    Console.WriteLine(\"Ba\u015fl\u0131k\");\n    Console.WriteLine(message);\n};\n\n// Closure \u00f6rne\u011fi\nint factor = 2;\nFunc&lt;int, int&gt; multiplier = n =&gt; n * factor;\nConsole.WriteLine(multiplier(5));  // 10\n\n// LINQ ile kullan\u0131m\nvar numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(n =&gt; n % 2 == 0);\n</code></pre></p>"},{"location":"junior/csharp-basics/delegates-events/#best-practices","title":"Best Practices","text":"<ol> <li>Event Kullan\u0131m\u0131</li> <li>EventHandler kullan\u0131m\u0131 <li>Null kontrol\u00fc</li> <li>Thread safety</li> <li> <p>Event naming</p> </li> <li> <p>Delegate Kullan\u0131m\u0131</p> </li> <li>Generic delegate'ler</li> <li>Lambda expression</li> <li>Multicast dikkatli kullan\u0131m</li> <li> <p>Memory leak \u00f6nleme</p> </li> <li> <p>Performans</p> </li> <li>Delegate caching</li> <li>Event invocation optimizasyonu</li> <li>Lambda expression reuse</li> <li>Closure dikkatli kullan\u0131m\u0131</li>"},{"location":"junior/csharp-basics/delegates-events/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>C# Delegates</li> <li>C# Events</li> <li>Lambda Expressions </li> </ul>"},{"location":"junior/csharp-basics/exception-handling/","title":"Exception Handling","text":""},{"location":"junior/csharp-basics/exception-handling/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Exception handling, program \u00e7al\u0131\u015f\u0131rken olu\u015fabilecek beklenmedik durumlar\u0131 y\u00f6netmek i\u00e7in kullan\u0131lan bir mekanizmad\u0131r. C#'ta try-catch-finally bloklar\u0131 kullan\u0131larak exception'lar yakalan\u0131r ve uygun \u015fekilde i\u015flenir.</p>"},{"location":"junior/csharp-basics/exception-handling/#temel-kavramlar","title":"Temel Kavramlar","text":"<ol> <li>Exception T\u00fcrleri</li> <li>System.Exception (T\u00fcm exception'lar\u0131n temel s\u0131n\u0131f\u0131)</li> <li>System.ArgumentException</li> <li>System.ArgumentNullException</li> <li>System.IndexOutOfRangeException</li> <li>System.NullReferenceException</li> <li>System.DivideByZeroException</li> <li>System.IO.IOException</li> <li> <p>System.FormatException</p> </li> <li> <p>Try-Catch-Finally Bloklar\u0131 <pre><code>try\n{\n    // Riskli kod\n}\ncatch (SpecificException ex)\n{\n    // Spesifik exception'\u0131 yakala\n}\ncatch (Exception ex)\n{\n    // Genel exception'\u0131 yakala\n}\nfinally\n{\n    // Her durumda \u00e7al\u0131\u015facak kod\n}\n</code></pre></p> </li> <li> <p>Exception Properties</p> </li> <li>Message: Hata mesaj\u0131</li> <li>StackTrace: Hata olu\u015ftu\u011fu y\u0131\u011f\u0131n izi</li> <li>InnerException: \u0130\u00e7 exception</li> <li>Source: Hatan\u0131n kayna\u011f\u0131</li> <li>HelpLink: Yard\u0131m linki</li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Spesifik Exception'lar\u0131 Yakalama <pre><code>try\n{\n    int.Parse(\"abc\");\n}\ncatch (FormatException ex)\n{\n    Console.WriteLine(\"Ge\u00e7ersiz say\u0131 format\u0131\");\n}\n</code></pre></p> </li> <li> <p>Exception Filtreleme <pre><code>try\n{\n    // Kod\n}\ncatch (Exception ex) when (ex.Message.Contains(\"specific\"))\n{\n    // Filtrelenmi\u015f exception\n}\n</code></pre></p> </li> <li> <p>Custom Exception Olu\u015fturma <pre><code>public class CustomException : Exception\n{\n    public CustomException(string message) : base(message)\n    {\n    }\n\n    public CustomException(string message, Exception inner) \n        : base(message, inner)\n    {\n    }\n}\n</code></pre></p> </li> <li> <p>Exception Loglama <pre><code>try\n{\n    // Kod\n}\ncatch (Exception ex)\n{\n    LogError(ex);\n    throw; // Exception'\u0131 yeniden f\u0131rlat\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#ornek-senaryolar","title":"\u00d6rnek Senaryolar","text":"<ol> <li> <p>Dosya \u0130\u015flemleri <pre><code>try\n{\n    using (StreamReader reader = new StreamReader(\"file.txt\"))\n    {\n        string content = reader.ReadToEnd();\n    }\n}\ncatch (FileNotFoundException ex)\n{\n    Console.WriteLine(\"Dosya bulunamad\u0131\");\n}\ncatch (IOException ex)\n{\n    Console.WriteLine(\"Dosya okuma hatas\u0131\");\n}\n</code></pre></p> </li> <li> <p>Veritaban\u0131 \u0130\u015flemleri <pre><code>try\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        // Veritaban\u0131 i\u015flemleri\n    }\n}\ncatch (SqlException ex)\n{\n    Console.WriteLine(\"Veritaban\u0131 hatas\u0131: \" + ex.Message);\n}\n</code></pre></p> </li> <li> <p>Web \u0130stekleri <pre><code>try\n{\n    using (HttpClient client = new HttpClient())\n    {\n        HttpResponseMessage response = await client.GetAsync(url);\n        response.EnsureSuccessStatusCode();\n    }\n}\ncatch (HttpRequestException ex)\n{\n    Console.WriteLine(\"HTTP iste\u011fi ba\u015far\u0131s\u0131z: \" + ex.Message);\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#exception-handling-stratejileri","title":"Exception Handling Stratejileri","text":"<ol> <li>Fail-Fast</li> <li>Hatalar\u0131 erken yakala</li> <li>Uygulama durumunu koru</li> <li> <p>Detayl\u0131 hata mesajlar\u0131 sa\u011fla</p> </li> <li> <p>Graceful Degradation</p> </li> <li>Alternatif yollar sun</li> <li>Kullan\u0131c\u0131ya bilgi ver</li> <li> <p>Uygulamay\u0131 \u00e7al\u0131\u015f\u0131r durumda tut</p> </li> <li> <p>Retry Pattern <pre><code>public async Task&lt;T&gt; RetryOperation&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; operation, int maxRetries = 3)\n{\n    for (int i = 0; i &lt; maxRetries; i++)\n    {\n        try\n        {\n            return await operation();\n        }\n        catch (Exception ex) when (i &lt; maxRetries - 1)\n        {\n            await Task.Delay(1000 * (i + 1));\n        }\n    }\n    throw new Exception(\"Maksimum deneme say\u0131s\u0131na ula\u015f\u0131ld\u0131\");\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#hata-ayklama-ipuclar","title":"Hata Ay\u0131klama \u0130pu\u00e7lar\u0131","text":"<ol> <li> <p>Debug Modunda Exception'lar\u0131 Yakalama <pre><code>#if DEBUG\ntry\n{\n    // Kod\n}\ncatch (Exception ex)\n{\n    Debug.WriteLine($\"Hata: {ex.Message}\");\n    throw;\n}\n#endif\n</code></pre></p> </li> <li> <p>Exception Breakpoints</p> </li> <li>Visual Studio'da belirli exception'lar i\u00e7in breakpoint ayarla</li> <li> <p>Exception olu\u015ftu\u011funda debugger'\u0131 durdur</p> </li> <li> <p>Exception Details <pre><code>catch (Exception ex)\n{\n    Console.WriteLine($\"Message: {ex.Message}\");\n    Console.WriteLine($\"StackTrace: {ex.StackTrace}\");\n    Console.WriteLine($\"Source: {ex.Source}\");\n    if (ex.InnerException != null)\n    {\n        Console.WriteLine($\"InnerException: {ex.InnerException.Message}\");\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#performans-konular","title":"Performans Konular\u0131","text":"<ol> <li>Exception Overhead</li> <li>Exception'lar pahal\u0131d\u0131r</li> <li>S\u0131k kullan\u0131lan yollarda exception kullanmaktan ka\u00e7\u0131n</li> <li> <p>TryParse gibi alternatifleri tercih et</p> </li> <li> <p>Exception Pooling <pre><code>private static readonly ExceptionPool&lt;CustomException&gt; _exceptionPool = \n    new ExceptionPool&lt;CustomException&gt;();\n\npublic static CustomException GetException(string message)\n{\n    return _exceptionPool.GetOrCreate(() =&gt; new CustomException(message));\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#guvenlik-konular","title":"G\u00fcvenlik Konular\u0131","text":"<ol> <li>Exception Information Exposure</li> <li>Production'da detayl\u0131 hata mesajlar\u0131 g\u00f6sterme</li> <li>Hassas bilgileri loglama</li> <li> <p>Stack trace'i kullan\u0131c\u0131ya g\u00f6sterme</p> </li> <li> <p>Exception Handling in Web Applications <pre><code>public class GlobalExceptionHandler : IExceptionHandler\n{\n    public async Task HandleExceptionAsync(ExceptionContext context)\n    {\n        var response = new ErrorResponse\n        {\n            Message = \"Bir hata olu\u015ftu\",\n            ErrorId = Guid.NewGuid().ToString()\n        };\n\n        context.Result = new ObjectResult(response)\n        {\n            StatusCode = 500\n        };\n\n        // Log the actual exception\n        LogError(context.Exception, response.ErrorId);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Exception Temelleri</li> <li>Exception nedir ve ne zaman kullan\u0131l\u0131r?</li> <li>Checked ve unchecked exception'lar aras\u0131ndaki fark nedir?</li> <li> <p>Exception handling'in avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Exception Hiyerar\u015fisi</p> </li> <li>System.Exception s\u0131n\u0131f\u0131n\u0131n \u00f6zellikleri nelerdir?</li> <li>Custom exception nas\u0131l olu\u015fturulur?</li> <li> <p>Exception inheritance hiyerar\u015fisi nas\u0131l tasarlanmal\u0131d\u0131r?</p> </li> <li> <p>Try-Catch-Finally</p> </li> <li>Try-catch-finally bloklar\u0131n\u0131n \u00e7al\u0131\u015fma s\u0131ras\u0131 nas\u0131ld\u0131r?</li> <li>Multiple catch bloklar\u0131 nas\u0131l s\u0131ralanmal\u0131d\u0131r?</li> <li> <p>Finally blo\u011fu ne zaman kullan\u0131lmal\u0131d\u0131r?</p> </li> <li> <p>Exception Filtreleme</p> </li> <li>Exception filtreleme nedir ve nas\u0131l kullan\u0131l\u0131r?</li> <li>When anahtar kelimesi ne i\u015fe yarar?</li> <li> <p>Exception filtrelemenin performans etkisi nedir?</p> </li> <li> <p>Exception Best Practices</p> </li> <li>Exception'lar ne zaman yakalanmal\u0131d\u0131r?</li> <li>Exception'lar ne zaman yeniden f\u0131rlat\u0131lmal\u0131d\u0131r?</li> <li> <p>Exception mesajlar\u0131 nas\u0131l yaz\u0131lmal\u0131d\u0131r?</p> </li> <li> <p>Exception Logging</p> </li> <li>Exception'lar nas\u0131l loglanmal\u0131d\u0131r?</li> <li>Loglama stratejileri nelerdir?</li> <li> <p>Sensitive bilgiler exception'larda nas\u0131l korunur?</p> </li> <li> <p>Exception ve Performans</p> </li> <li>Exception handling'in performans maliyeti nedir?</li> <li>Exception'lar ne zaman kullan\u0131lmamal\u0131d\u0131r?</li> <li> <p>Exception pooling nedir ve nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Exception ve G\u00fcvenlik</p> </li> <li>Exception'lar g\u00fcvenlik a\u00e7\u0131klar\u0131na nas\u0131l yol a\u00e7abilir?</li> <li>Production ortam\u0131nda exception detaylar\u0131 nas\u0131l y\u00f6netilmelidir?</li> <li> <p>Exception'lar SQL injection'a nas\u0131l yol a\u00e7abilir?</p> </li> <li> <p>Global Exception Handling</p> </li> <li>Global exception handler nas\u0131l implemente edilir?</li> <li>Web uygulamalar\u0131nda exception handling nas\u0131l yap\u0131l\u0131r?</li> <li> <p>API'lerde exception'lar nas\u0131l y\u00f6netilmelidir?</p> </li> <li> <p>Exception ve Asenkron Programlama</p> <ul> <li>Async/await ile exception handling nas\u0131l yap\u0131l\u0131r?</li> <li>Task exception'lar\u0131 nas\u0131l y\u00f6netilir?</li> <li>AggregateException nedir ve nas\u0131l kullan\u0131l\u0131r?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Custom Exception Olu\u015fturma <pre><code>public class ValidationException : Exception\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Exception Filtreleme <pre><code>try\n{\n    // Kod\n}\ncatch (Exception ex) when (ex.Message.Contains(\"specific\"))\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Global Exception Handler <pre><code>public class GlobalExceptionHandler : IExceptionHandler\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Retry Pattern <pre><code>public async Task&lt;T&gt; RetryOperation&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; operation, int maxRetries)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Exception Logging <pre><code>public void LogException(Exception ex, string context)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/exception-handling/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Exception Handling</li> <li>Exception Handling Best Practices</li> <li>C# Exception Handling Patterns </li> </ul>"},{"location":"junior/csharp-basics/extension-methods/","title":"Extension Methods","text":""},{"location":"junior/csharp-basics/extension-methods/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Extension Methods (Geni\u015fletme Metodlar\u0131), mevcut tiplere yeni metodlar eklememizi sa\u011flayan bir C# \u00f6zelli\u011fidir. Bu metodlar, orijinal tipin kaynak koduna eri\u015fmeden veya t\u00fcretme yapmadan, tipin i\u015flevselli\u011fini geni\u015fletmemize olanak tan\u0131r.</p>"},{"location":"junior/csharp-basics/extension-methods/#extension-method-tanmlama","title":"Extension Method Tan\u0131mlama","text":"<ol> <li> <p>Temel Extension Method <pre><code>public static class StringExtensions\n{\n    public static bool IsNullOrEmpty(this string str)\n    {\n        return string.IsNullOrEmpty(str);\n    }\n}\n\n// Kullan\u0131m\u0131\nstring text = \"Merhaba\";\nbool isEmpty = text.IsNullOrEmpty();\n</code></pre></p> </li> <li> <p>Generic Extension Method <pre><code>public static class CollectionExtensions\n{\n    public static bool IsNullOrEmpty&lt;T&gt;(this IEnumerable&lt;T&gt; collection)\n    {\n        return collection == null || !collection.Any();\n    }\n}\n\n// Kullan\u0131m\u0131\nList&lt;int&gt; numbers = new List&lt;int&gt;();\nbool isEmpty = numbers.IsNullOrEmpty();\n</code></pre></p> </li> <li> <p>Parametreli Extension Method <pre><code>public static class StringExtensions\n{\n    public static string Repeat(this string str, int count)\n    {\n        return string.Concat(Enumerable.Repeat(str, count));\n    }\n}\n\n// Kullan\u0131m\u0131\nstring result = \"Merhaba\".Repeat(3); // \"MerhabaMerhabaMerhaba\"\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/extension-methods/#extension-method-kullanm-alanlar","title":"Extension Method Kullan\u0131m Alanlar\u0131","text":"<ol> <li> <p>String \u0130\u015flemleri <pre><code>public static class StringExtensions\n{\n    public static string ToTitleCase(this string str)\n    {\n        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(str.ToLower());\n    }\n\n    public static bool IsValidEmail(this string email)\n    {\n        return Regex.IsMatch(email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\");\n    }\n}\n</code></pre></p> </li> <li> <p>Koleksiyon \u0130\u015flemleri <pre><code>public static class CollectionExtensions\n{\n    public static IEnumerable&lt;T&gt; Shuffle&lt;T&gt;(this IEnumerable&lt;T&gt; source)\n    {\n        return source.OrderBy(x =&gt; Guid.NewGuid());\n    }\n\n    public static IEnumerable&lt;T&gt; DistinctBy&lt;T, TKey&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, TKey&gt; keySelector)\n    {\n        return source.GroupBy(keySelector).Select(x =&gt; x.First());\n    }\n}\n</code></pre></p> </li> <li> <p>DateTime \u0130\u015flemleri <pre><code>public static class DateTimeExtensions\n{\n    public static bool IsWeekend(this DateTime date)\n    {\n        return date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;\n    }\n\n    public static int GetAge(this DateTime birthDate)\n    {\n        var today = DateTime.Today;\n        var age = today.Year - birthDate.Year;\n        if (birthDate.Date &gt; today.AddYears(-age)) age--;\n        return age;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/extension-methods/#extension-method-best-practices","title":"Extension Method Best Practices","text":"<ol> <li> <p>Namespace Kullan\u0131m\u0131 <pre><code>namespace MyApp.Extensions\n{\n    public static class StringExtensions\n    {\n        // Extension methods\n    }\n}\n</code></pre></p> </li> <li> <p>Statik S\u0131n\u0131f Kullan\u0131m\u0131 <pre><code>public static class Extensions\n{\n    // T\u00fcm extension methods burada\n}\n</code></pre></p> </li> <li> <p>Method \u0130simlendirme <pre><code>public static class StringExtensions\n{\n    // A\u00e7\u0131klay\u0131c\u0131 isimler kullan\n    public static string RemoveWhitespace(this string str)\n    {\n        return new string(str.Where(c =&gt; !char.IsWhiteSpace(c)).ToArray());\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/extension-methods/#extension-method-ve-interfaceler","title":"Extension Method ve Interface'ler","text":"<ol> <li> <p>Interface Extension <pre><code>public interface ILogger\n{\n    void Log(string message);\n}\n\npublic static class LoggerExtensions\n{\n    public static void LogError(this ILogger logger, Exception ex)\n    {\n        logger.Log($\"Hata: {ex.Message}\");\n    }\n}\n</code></pre></p> </li> <li> <p>Generic Interface Extension <pre><code>public interface IRepository&lt;T&gt;\n{\n    T GetById(int id);\n}\n\npublic static class RepositoryExtensions\n{\n    public static IEnumerable&lt;T&gt; GetByIds&lt;T&gt;(this IRepository&lt;T&gt; repository, IEnumerable&lt;int&gt; ids)\n    {\n        return ids.Select(id =&gt; repository.GetById(id));\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/extension-methods/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Extension Method Temelleri</li> <li>Extension method nedir ve ne i\u015fe yarar?</li> <li>Extension method'lar nas\u0131l tan\u0131mlan\u0131r?</li> <li> <p>Extension method'lar\u0131n avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Extension Method Kullan\u0131m\u0131</p> </li> <li>Extension method'lar ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>Extension method'lar ve normal method'lar aras\u0131ndaki farklar nelerdir?</li> <li> <p>Extension method'lar\u0131n performans etkisi nedir?</p> </li> <li> <p>Extension Method ve OOP</p> </li> <li>Extension method'lar OOP prensiplerini nas\u0131l etkiler?</li> <li>Extension method'lar inheritance'a alternatif midir?</li> <li> <p>Extension method'lar encapsulation'\u0131 nas\u0131l etkiler?</p> </li> <li> <p>Extension Method ve Interface'ler</p> </li> <li>Interface'lere extension method eklemek ne zaman uygundur?</li> <li>Interface extension'lar\u0131n kullan\u0131m alanlar\u0131 nelerdir?</li> <li> <p>Interface extension'lar\u0131n s\u0131n\u0131rlamalar\u0131 nelerdir?</p> </li> <li> <p>Extension Method ve Generic'ler</p> </li> <li>Generic extension method'lar nas\u0131l tan\u0131mlan\u0131r?</li> <li>Generic extension method'lar\u0131n kullan\u0131m alanlar\u0131 nelerdir?</li> <li> <p>Generic extension method'larda type constraint'ler nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Extension Method ve LINQ</p> </li> <li>LINQ extension method'lar\u0131 nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>Custom LINQ extension method'lar\u0131 nas\u0131l yaz\u0131l\u0131r?</li> <li> <p>LINQ extension method'lar\u0131nda deferred execution nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Extension Method ve Testing</p> </li> <li>Extension method'lar nas\u0131l test edilir?</li> <li>Extension method testlerinde dikkat edilmesi gerekenler nelerdir?</li> <li> <p>Extension method'lar unit test'leri nas\u0131l etkiler?</p> </li> <li> <p>Extension Method ve Performans</p> </li> <li>Extension method'lar\u0131n performans etkisi nedir?</li> <li>Extension method'larda performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Extension method'lar memory kullan\u0131m\u0131n\u0131 nas\u0131l etkiler?</p> </li> <li> <p>Extension Method ve Best Practices</p> </li> <li>Extension method yazarken dikkat edilmesi gerekenler nelerdir?</li> <li>Extension method isimlendirme kurallar\u0131 nelerdir?</li> <li> <p>Extension method'larda exception handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Extension Method ve Framework Entegrasyonu</p> <ul> <li>Extension method'lar framework'lerle nas\u0131l entegre edilir?</li> <li>Extension method'lar\u0131n versioning'i nas\u0131l yap\u0131l\u0131r?</li> <li>Extension method'lar\u0131n backward compatibility'si nas\u0131l sa\u011flan\u0131r?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/extension-methods/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>String Extension <pre><code>public static class StringExtensions\n{\n    public static string Reverse(this string str)\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Collection Extension <pre><code>public static class CollectionExtensions\n{\n    public static T GetRandomItem&lt;T&gt;(this IEnumerable&lt;T&gt; source)\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> <li> <p>DateTime Extension <pre><code>public static class DateTimeExtensions\n{\n    public static bool IsBusinessDay(this DateTime date)\n    {\n        // Implementasyon (hafta sonlar\u0131 ve resmi tatiller hari\u00e7)\n    }\n}\n</code></pre></p> </li> <li> <p>LINQ Extension <pre><code>public static class LinqExtensions\n{\n    public static IEnumerable&lt;T&gt; WhereNotNull&lt;T&gt;(this IEnumerable&lt;T&gt; source)\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Validation Extension <pre><code>public static class ValidationExtensions\n{\n    public static bool IsValidTurkishIdNumber(this string idNumber)\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/extension-methods/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Extension Methods</li> <li>Extension Methods Best Practices</li> <li>LINQ Extension Methods </li> </ul>"},{"location":"junior/csharp-basics/file-stream-operations/","title":"File ve Stream \u0130\u015flemleri","text":""},{"location":"junior/csharp-basics/file-stream-operations/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>File ve Stream i\u015flemleri, dosya sisteminde veri okuma ve yazma i\u015flemlerini ger\u00e7ekle\u015ftirmek i\u00e7in kullan\u0131lan temel operasyonlard\u0131r. C#'ta System.IO namespace'i alt\u0131nda bulunan s\u0131n\u0131flar kullan\u0131larak dosya ve stream i\u015flemleri yap\u0131l\u0131r.</p>"},{"location":"junior/csharp-basics/file-stream-operations/#file-islemleri","title":"File \u0130\u015flemleri","text":"<ol> <li> <p>Dosya Olu\u015fturma ve Silme <pre><code>// Dosya olu\u015fturma\nstring path = \"test.txt\";\nFile.Create(path);\n\n// Dosya silme\nFile.Delete(path);\n\n// Dosya var m\u0131 kontrol\u00fc\nbool exists = File.Exists(path);\n</code></pre></p> </li> <li> <p>Dosya Kopyalama ve Ta\u015f\u0131ma <pre><code>string sourcePath = \"source.txt\";\nstring destPath = \"dest.txt\";\n\n// Dosya kopyalama\nFile.Copy(sourcePath, destPath);\n\n// Dosya ta\u015f\u0131ma\nFile.Move(sourcePath, destPath);\n</code></pre></p> </li> <li> <p>Dosya \u00d6zellikleri <pre><code>string path = \"test.txt\";\n\n// Olu\u015fturma tarihi\nDateTime creationTime = File.GetCreationTime(path);\n\n// Son eri\u015fim tarihi\nDateTime lastAccessTime = File.GetLastAccessTime(path);\n\n// Son de\u011fi\u015fiklik tarihi\nDateTime lastWriteTime = File.GetLastWriteTime(path);\n\n// Dosya boyutu\nlong fileSize = new FileInfo(path).Length;\n</code></pre></p> </li> <li> <p>Dosya Okuma ve Yazma <pre><code>string path = \"test.txt\";\n\n// Dosyaya yazma\nFile.WriteAllText(path, \"Merhaba D\u00fcnya\");\n\n// Dosyadan okuma\nstring content = File.ReadAllText(path);\n\n// Sat\u0131r sat\u0131r okuma\nstring[] lines = File.ReadAllLines(path);\n\n// Byte array olarak okuma\nbyte[] bytes = File.ReadAllBytes(path);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/file-stream-operations/#stream-islemleri","title":"Stream \u0130\u015flemleri","text":"<ol> <li> <p>FileStream Kullan\u0131m\u0131 <pre><code>string path = \"test.txt\";\n\n// Stream olu\u015fturma\nusing (FileStream stream = new FileStream(path, FileMode.OpenOrCreate))\n{\n    // Byte array yazma\n    byte[] data = Encoding.UTF8.GetBytes(\"Merhaba D\u00fcnya\");\n    stream.Write(data, 0, data.Length);\n\n    // Byte array okuma\n    byte[] buffer = new byte[stream.Length];\n    stream.Read(buffer, 0, buffer.Length);\n    string content = Encoding.UTF8.GetString(buffer);\n}\n</code></pre></p> </li> <li> <p>StreamReader ve StreamWriter <pre><code>string path = \"test.txt\";\n\n// StreamWriter ile yazma\nusing (StreamWriter writer = new StreamWriter(path))\n{\n    writer.WriteLine(\"Sat\u0131r 1\");\n    writer.WriteLine(\"Sat\u0131r 2\");\n}\n\n// StreamReader ile okuma\nusing (StreamReader reader = new StreamReader(path))\n{\n    string line;\n    while ((line = reader.ReadLine()) != null)\n    {\n        Console.WriteLine(line);\n    }\n}\n</code></pre></p> </li> <li> <p>MemoryStream Kullan\u0131m\u0131 <pre><code>using (MemoryStream stream = new MemoryStream())\n{\n    // Stream'e yazma\n    byte[] data = Encoding.UTF8.GetBytes(\"Merhaba D\u00fcnya\");\n    stream.Write(data, 0, data.Length);\n\n    // Stream'den okuma\n    stream.Position = 0;\n    byte[] buffer = new byte[stream.Length];\n    stream.Read(buffer, 0, buffer.Length);\n    string content = Encoding.UTF8.GetString(buffer);\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/file-stream-operations/#asenkron-dosya-islemleri","title":"Asenkron Dosya \u0130\u015flemleri","text":"<ol> <li> <p>Asenkron Okuma ve Yazma <pre><code>string path = \"test.txt\";\n\n// Asenkron yazma\nawait File.WriteAllTextAsync(path, \"Merhaba D\u00fcnya\");\n\n// Asenkron okuma\nstring content = await File.ReadAllTextAsync(path);\n</code></pre></p> </li> <li> <p>Asenkron Stream \u0130\u015flemleri <pre><code>string path = \"test.txt\";\n\nusing (FileStream stream = new FileStream(path, FileMode.OpenOrCreate))\n{\n    // Asenkron yazma\n    byte[] data = Encoding.UTF8.GetBytes(\"Merhaba D\u00fcnya\");\n    await stream.WriteAsync(data, 0, data.Length);\n\n    // Asenkron okuma\n    byte[] buffer = new byte[stream.Length];\n    await stream.ReadAsync(buffer, 0, buffer.Length);\n    string content = Encoding.UTF8.GetString(buffer);\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/file-stream-operations/#dosya-guvenligi","title":"Dosya G\u00fcvenli\u011fi","text":"<ol> <li> <p>Dosya \u0130zinleri <pre><code>string path = \"test.txt\";\n\n// Dosya izinlerini alma\nFileSecurity security = File.GetAccessControl(path);\n\n// Dosya izinlerini ayarlama\nFile.SetAccessControl(path, security);\n</code></pre></p> </li> <li> <p>Dosya \u015eifreleme <pre><code>string path = \"test.txt\";\n\n// Dosya \u015fifreleme\nFile.Encrypt(path);\n\n// Dosya \u015fifre \u00e7\u00f6zme\nFile.Decrypt(path);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/file-stream-operations/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>File \u0130\u015flemleri</li> <li>File ve FileInfo s\u0131n\u0131flar\u0131 aras\u0131ndaki farklar nelerdir?</li> <li>File.Exists() ve FileInfo.Exists aras\u0131ndaki fark nedir?</li> <li> <p>Dosya i\u015flemlerinde exception handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Stream \u0130\u015flemleri</p> </li> <li>Stream nedir ve ne i\u015fe yarar?</li> <li>FileStream, MemoryStream ve NetworkStream aras\u0131ndaki farklar nelerdir?</li> <li> <p>Stream'lerde buffer kullan\u0131m\u0131n\u0131n \u00f6nemi nedir?</p> </li> <li> <p>Asenkron \u0130\u015flemler</p> </li> <li>Asenkron dosya i\u015flemleri ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>Stream'lerde asenkron i\u015flemler nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Asenkron i\u015flemlerde exception handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Performans Optimizasyonu</p> </li> <li>B\u00fcy\u00fck dosyalar\u0131n okunmas\u0131nda performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li>Stream'lerde buffer boyutu nas\u0131l belirlenir?</li> <li> <p>Dosya i\u015flemlerinde memory kullan\u0131m\u0131 nas\u0131l optimize edilir?</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Dosya i\u015flemlerinde g\u00fcvenlik nas\u0131l sa\u011flan\u0131r?</li> <li>Dosya izinleri nas\u0131l y\u00f6netilir?</li> <li> <p>Dosya \u015fifreleme nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Dosya Formatlar\u0131</p> </li> <li>Farkl\u0131 dosya formatlar\u0131 (txt, csv, json vb.) nas\u0131l i\u015flenir?</li> <li>Binary dosyalar nas\u0131l okunur ve yaz\u0131l\u0131r?</li> <li> <p>Dosya format\u0131 d\u00f6n\u00fc\u015f\u00fcmleri nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Dosya Sistemi</p> </li> <li>Dosya sistemi i\u015flemleri nas\u0131l yap\u0131l\u0131r?</li> <li>Klas\u00f6r i\u015flemleri nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Dosya sistemi izinleri nas\u0131l kontrol edilir?</p> </li> <li> <p>Hata Y\u00f6netimi</p> </li> <li>Dosya i\u015flemlerinde kar\u015f\u0131la\u015f\u0131lan hatalar nelerdir?</li> <li>FileNotFoundException nas\u0131l y\u00f6netilir?</li> <li> <p>IOException nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Resource Y\u00f6netimi</p> </li> <li>Stream'lerde using blo\u011fu neden \u00f6nemlidir?</li> <li>Dispose pattern nedir ve nas\u0131l uygulan\u0131r?</li> <li> <p>Resource leak nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Best Practices</p> <ul> <li>Dosya i\u015flemlerinde best practices nelerdir?</li> <li>Stream kullan\u0131m\u0131nda dikkat edilmesi gerekenler nelerdir?</li> <li>Dosya i\u015flemlerinde performans ve g\u00fcvenlik nas\u0131l dengelenir?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/file-stream-operations/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Dosya Kopyalama <pre><code>public void CopyFile(string sourcePath, string destPath)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Dosya Boyutu Kontrol\u00fc <pre><code>public bool IsFileSizeValid(string path, long maxSize)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Dosya \u0130\u00e7eri\u011fi Arama <pre><code>public bool SearchInFile(string path, string searchText)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Dosya \u015eifreleme <pre><code>public void EncryptFile(string path, string password)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>B\u00fcy\u00fck Dosya Okuma <pre><code>public async Task&lt;string&gt; ReadLargeFileAsync(string path)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/file-stream-operations/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - File and Stream I/O</li> <li>File Class</li> <li>Stream Class </li> </ul>"},{"location":"junior/csharp-basics/generics/","title":"Generics","text":""},{"location":"junior/csharp-basics/generics/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Generics (Jenerikler), C#'ta tip g\u00fcvenli\u011fini sa\u011flarken kod tekrar\u0131n\u0131 \u00f6nleyen ve yeniden kullan\u0131labilirli\u011fi art\u0131ran bir \u00f6zelliktir. Jenerikler sayesinde, ayn\u0131 kodu farkl\u0131 veri tipleriyle kullanabiliriz.</p>"},{"location":"junior/csharp-basics/generics/#temel-jenerik-kullanm","title":"Temel Jenerik Kullan\u0131m\u0131","text":"<ol> <li> <p>Jenerik S\u0131n\u0131f <pre><code>public class GenericList&lt;T&gt;\n{\n    private List&lt;T&gt; items = new List&lt;T&gt;();\n\n    public void Add(T item)\n    {\n        items.Add(item);\n    }\n\n    public T Get(int index)\n    {\n        return items[index];\n    }\n}\n\n// Kullan\u0131m\u0131\nvar stringList = new GenericList&lt;string&gt;();\nstringList.Add(\"Merhaba\");\n\nvar intList = new GenericList&lt;int&gt;();\nintList.Add(42);\n</code></pre></p> </li> <li> <p>Jenerik Metod <pre><code>public static class GenericMethods\n{\n    public static T Max&lt;T&gt;(T a, T b) where T : IComparable&lt;T&gt;\n    {\n        return a.CompareTo(b) &gt; 0 ? a : b;\n    }\n}\n\n// Kullan\u0131m\u0131\nint max = GenericMethods.Max(5, 10);\nstring longer = GenericMethods.Max(\"abc\", \"abcd\");\n</code></pre></p> </li> <li> <p>Jenerik Interface <pre><code>public interface IRepository&lt;T&gt;\n{\n    T GetById(int id);\n    void Add(T entity);\n    void Update(T entity);\n    void Delete(int id);\n}\n\npublic class UserRepository : IRepository&lt;User&gt;\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/generics/#jenerik-kstlamalar-constraints","title":"Jenerik K\u0131s\u0131tlamalar (Constraints)","text":"<ol> <li> <p>where T : class <pre><code>public class ReferenceTypeContainer&lt;T&gt; where T : class\n{\n    public T Value { get; set; }\n}\n</code></pre></p> </li> <li> <p>where T : struct <pre><code>public class ValueTypeContainer&lt;T&gt; where T : struct\n{\n    public T Value { get; set; }\n}\n</code></pre></p> </li> <li> <p>where T : new() <pre><code>public class DefaultConstructorContainer&lt;T&gt; where T : new()\n{\n    public T CreateInstance()\n    {\n        return new T();\n    }\n}\n</code></pre></p> </li> <li> <p>where T : BaseClass <pre><code>public class BaseClassContainer&lt;T&gt; where T : BaseClass\n{\n    public void DoSomething(T item)\n    {\n        item.BaseMethod();\n    }\n}\n</code></pre></p> </li> <li> <p>where T : Interface <pre><code>public class InterfaceContainer&lt;T&gt; where T : IComparable\n{\n    public int Compare(T a, T b)\n    {\n        return a.CompareTo(b);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/generics/#jenerik-koleksiyonlar","title":"Jenerik Koleksiyonlar","text":"<ol> <li> <p>List <pre><code>List&lt;string&gt; names = new List&lt;string&gt;();\nnames.Add(\"Ahmet\");\nnames.Add(\"Mehmet\");\n</code></pre> <li> <p>Dictionary <pre><code>Dictionary&lt;int, string&gt; users = new Dictionary&lt;int, string&gt;();\nusers.Add(1, \"Ahmet\");\nusers.Add(2, \"Mehmet\");\n</code></pre> <li> <p>Queue <pre><code>Queue&lt;string&gt; messages = new Queue&lt;string&gt;();\nmessages.Enqueue(\"\u0130lk mesaj\");\nmessages.Enqueue(\"\u0130kinci mesaj\");\n</code></pre> <li> <p>Stack <pre><code>Stack&lt;int&gt; numbers = new Stack&lt;int&gt;();\nnumbers.Push(1);\nnumbers.Push(2);\n</code></pre>"},{"location":"junior/csharp-basics/generics/#jenerik-delegeler","title":"Jenerik Delegeler","text":"<ol> <li> <p>Func <pre><code>Func&lt;int, int&gt; square = x =&gt; x * x;\nint result = square(5); // 25\n</code></pre> <li> <p>Action <pre><code>Action&lt;string&gt; print = message =&gt; Console.WriteLine(message);\nprint(\"Merhaba D\u00fcnya\");\n</code></pre> <li> <p>Predicate <pre><code>Predicate&lt;int&gt; isEven = x =&gt; x % 2 == 0;\nbool result = isEven(4); // true\n</code></pre>"},{"location":"junior/csharp-basics/generics/#jenerik-ve-reflection","title":"Jenerik ve Reflection","text":"<pre><code>public class GenericReflection\n{\n    public static Type GetGenericType&lt;T&gt;()\n    {\n        return typeof(T);\n    }\n\n    public static object CreateGenericInstance(Type genericType, Type typeArgument)\n    {\n        Type constructedType = genericType.MakeGenericType(typeArgument);\n        return Activator.CreateInstance(constructedType);\n    }\n}\n</code></pre>"},{"location":"junior/csharp-basics/generics/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Jenerik Temelleri</li> <li>Jenerik nedir ve ne i\u015fe yarar?</li> <li>Jeneriklerin avantajlar\u0131 nelerdir?</li> <li> <p>Jenerikler ve boxing/unboxing aras\u0131ndaki ili\u015fki nedir?</p> </li> <li> <p>Jenerik K\u0131s\u0131tlamalar</p> </li> <li>Jenerik k\u0131s\u0131tlamalar nelerdir?</li> <li>Hangi durumlarda hangi k\u0131s\u0131tlamalar\u0131 kullanmal\u0131y\u0131z?</li> <li> <p>Jenerik k\u0131s\u0131tlamalar\u0131n performans etkisi nedir?</p> </li> <li> <p>Jenerik ve Tip G\u00fcvenli\u011fi</p> </li> <li>Jenerikler tip g\u00fcvenli\u011fini nas\u0131l sa\u011flar?</li> <li>Jenerikler ve runtime tip kontrol\u00fc nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Jeneriklerde tip d\u00f6n\u00fc\u015f\u00fcmleri nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Jenerik Koleksiyonlar</p> </li> <li>Jenerik koleksiyonlar nelerdir?</li> <li>Jenerik koleksiyonlar\u0131n avantajlar\u0131 nelerdir?</li> <li> <p>Hangi durumda hangi jenerik koleksiyonu kullanmal\u0131y\u0131z?</p> </li> <li> <p>Jenerik Metodlar</p> </li> <li>Jenerik metodlar nas\u0131l tan\u0131mlan\u0131r?</li> <li>Jenerik metodlar\u0131n kullan\u0131m alanlar\u0131 nelerdir?</li> <li> <p>Jenerik metodlarda tip \u00e7\u0131kar\u0131m\u0131 nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Jenerik ve Interface'ler</p> </li> <li>Jenerik interface'ler nas\u0131l tan\u0131mlan\u0131r?</li> <li>Jenerik interface'lerin kullan\u0131m alanlar\u0131 nelerdir?</li> <li> <p>Jenerik interface'lerde covariance ve contravariance nedir?</p> </li> <li> <p>Jenerik ve Delegeler</p> </li> <li>Jenerik delegeler nas\u0131l tan\u0131mlan\u0131r?</li> <li>Func, Action ve Predicate aras\u0131ndaki farklar nelerdir?</li> <li> <p>Jenerik delegelerin kullan\u0131m alanlar\u0131 nelerdir?</p> </li> <li> <p>Jenerik ve Performans</p> </li> <li>Jeneriklerin performans etkisi nedir?</li> <li>Jeneriklerde memory kullan\u0131m\u0131 nas\u0131ld\u0131r?</li> <li> <p>Jeneriklerde boxing/unboxing nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Jenerik ve Reflection</p> </li> <li>Jenerik tiplerle reflection nas\u0131l kullan\u0131l\u0131r?</li> <li>Jenerik tiplerin runtime'da olu\u015fturulmas\u0131 nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Jenerik tiplerin tip bilgisi nas\u0131l al\u0131n\u0131r?</p> </li> <li> <p>Jenerik Best Practices</p> <ul> <li>Jenerik kullan\u0131rken dikkat edilmesi gerekenler nelerdir?</li> <li>Jenerik isimlendirme kurallar\u0131 nelerdir?</li> <li>Jeneriklerde exception handling nas\u0131l yap\u0131l\u0131r?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/generics/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Jenerik Stack <pre><code>public class GenericStack&lt;T&gt;\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Jenerik S\u0131ralama <pre><code>public static class GenericSorter\n{\n    public static void Sort&lt;T&gt;(T[] array) where T : IComparable&lt;T&gt;\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Jenerik Cache <pre><code>public class GenericCache&lt;TKey, TValue&gt;\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Jenerik Repository <pre><code>public interface IGenericRepository&lt;T&gt; where T : class\n{\n    // Interface tan\u0131m\u0131\n}\n</code></pre></p> </li> <li> <p>Jenerik Validator <pre><code>public class GenericValidator&lt;T&gt;\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/generics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Generics</li> <li>Generic Constraints</li> <li>Generic Collections </li> </ul>"},{"location":"junior/csharp-basics/lambda-expressions/","title":"Lambda Expressions","text":""},{"location":"junior/csharp-basics/lambda-expressions/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Lambda Expressions (Lambda \u0130fadeleri), C#'ta anonim fonksiyonlar olu\u015fturmak i\u00e7in kullan\u0131lan k\u0131sa ve \u00f6z bir s\u00f6zdizimidir. Lambda ifadeleri, \u00f6zellikle LINQ sorgular\u0131nda ve fonksiyonel programlama yakla\u015f\u0131mlar\u0131nda yayg\u0131n olarak kullan\u0131l\u0131r.</p>"},{"location":"junior/csharp-basics/lambda-expressions/#temel-lambda-ifadeleri","title":"Temel Lambda \u0130fadeleri","text":"<ol> <li> <p>Basit Lambda \u0130fadesi <pre><code>// Tek parametreli lambda\nFunc&lt;int, int&gt; square = x =&gt; x * x;\nint result = square(5); // 25\n\n// \u00c7oklu parametreli lambda\nFunc&lt;int, int, int&gt; add = (x, y) =&gt; x + y;\nint sum = add(3, 4); // 7\n</code></pre></p> </li> <li> <p>Statement Lambda <pre><code>Action&lt;string&gt; printMessage = message =&gt;\n{\n    Console.WriteLine($\"Mesaj: {message}\");\n    Console.WriteLine($\"Uzunluk: {message.Length}\");\n};\n\nprintMessage(\"Merhaba D\u00fcnya\");\n</code></pre></p> </li> <li> <p>Expression Lambda <pre><code>Func&lt;int, bool&gt; isEven = x =&gt; x % 2 == 0;\nbool result = isEven(4); // true\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/lambda-expressions/#lambda-ve-delegeler","title":"Lambda ve Delegeler","text":"<ol> <li> <p>Func Delegate <pre><code>// Son parametre d\u00f6n\u00fc\u015f tipini belirtir\nFunc&lt;int, int, int&gt; multiply = (x, y) =&gt; x * y;\nint product = multiply(5, 3); // 15\n</code></pre></p> </li> <li> <p>Action Delegate <pre><code>// D\u00f6n\u00fc\u015f de\u011feri olmayan i\u015flemler i\u00e7in\nAction&lt;string&gt; log = message =&gt; Console.WriteLine(message);\nlog(\"Hata olu\u015ftu!\");\n</code></pre></p> </li> <li> <p>Predicate Delegate <pre><code>// Boolean d\u00f6nen i\u015flemler i\u00e7in\nPredicate&lt;int&gt; isPositive = x =&gt; x &gt; 0;\nbool result = isPositive(-5); // false\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/lambda-expressions/#lambda-ve-linq","title":"Lambda ve LINQ","text":"<ol> <li> <p>Where Kullan\u0131m\u0131 <pre><code>var numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(x =&gt; x % 2 == 0);\n</code></pre></p> </li> <li> <p>Select Kullan\u0131m\u0131 <pre><code>var names = new List&lt;string&gt; { \"Ahmet\", \"Mehmet\", \"Ay\u015fe\" };\nvar nameLengths = names.Select(name =&gt; name.Length);\n</code></pre></p> </li> <li> <p>OrderBy Kullan\u0131m\u0131 <pre><code>var products = new List&lt;Product&gt;();\nvar sortedProducts = products.OrderBy(p =&gt; p.Price);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/lambda-expressions/#lambda-ve-event-handlerlar","title":"Lambda ve Event Handler'lar","text":"<pre><code>button.Click += (sender, e) =&gt;\n{\n    MessageBox.Show(\"Butona t\u0131kland\u0131!\");\n};\n</code></pre>"},{"location":"junior/csharp-basics/lambda-expressions/#lambda-ve-asenkron-programlama","title":"Lambda ve Asenkron Programlama","text":"<pre><code>async Task ProcessData()\n{\n    await Task.Run(() =&gt;\n    {\n        // Uzun s\u00fcren i\u015flem\n        Thread.Sleep(1000);\n        Console.WriteLine(\"\u0130\u015flem tamamland\u0131\");\n    });\n}\n</code></pre>"},{"location":"junior/csharp-basics/lambda-expressions/#lambda-ve-closurelar","title":"Lambda ve Closure'lar","text":"<pre><code>int multiplier = 2;\nFunc&lt;int, int&gt; multiply = x =&gt; x * multiplier;\nint result = multiply(5); // 10\n\n// multiplier de\u011fi\u015fti\u011finde\nmultiplier = 3;\nresult = multiply(5); // 15\n</code></pre>"},{"location":"junior/csharp-basics/lambda-expressions/#lambda-best-practices","title":"Lambda Best Practices","text":"<ol> <li> <p>\u0130simlendirme <pre><code>// \u0130yi\nFunc&lt;int, int&gt; square = x =&gt; x * x;\n\n// K\u00f6t\u00fc\nFunc&lt;int, int&gt; f = x =&gt; x * x;\n</code></pre></p> </li> <li> <p>Karma\u015f\u0131kl\u0131k <pre><code>// \u0130yi\nFunc&lt;int, bool&gt; isEven = x =&gt; x % 2 == 0;\n\n// K\u00f6t\u00fc (\u00e7ok karma\u015f\u0131k)\nFunc&lt;int, bool&gt; complexCheck = x =&gt; \n{\n    var y = x * 2;\n    var z = y + 5;\n    return z % 3 == 0 &amp;&amp; x &gt; 10;\n};\n</code></pre></p> </li> <li> <p>Okunabilirlik <pre><code>// \u0130yi\nFunc&lt;string, bool&gt; isValid = name =&gt; \n    !string.IsNullOrEmpty(name) &amp;&amp; \n    name.Length &gt;= 3;\n\n// K\u00f6t\u00fc\nFunc&lt;string, bool&gt; isValid = name =&gt; !string.IsNullOrEmpty(name) &amp;&amp; name.Length &gt;= 3;\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/lambda-expressions/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Lambda Temelleri</li> <li>Lambda ifadesi nedir?</li> <li>Lambda ifadelerinin avantajlar\u0131 nelerdir?</li> <li> <p>Lambda ifadeleri ve anonim metodlar aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Lambda S\u00f6zdizimi</p> </li> <li>Lambda ifadelerinin temel s\u00f6zdizimi nas\u0131ld\u0131r?</li> <li>Statement lambda ve expression lambda aras\u0131ndaki farklar nelerdir?</li> <li> <p>Lambda ifadelerinde parametre tipleri nas\u0131l belirtilir?</p> </li> <li> <p>Lambda ve Delegeler</p> </li> <li>Lambda ifadeleri hangi delegate tipleriyle kullan\u0131labilir?</li> <li>Func, Action ve Predicate delegate'leri aras\u0131ndaki farklar nelerdir?</li> <li> <p>Lambda ifadelerinde delegate d\u00f6n\u00fc\u015f\u00fcm\u00fc nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Lambda ve LINQ</p> </li> <li>Lambda ifadeleri LINQ sorgular\u0131nda nas\u0131l kullan\u0131l\u0131r?</li> <li>LINQ metodlar\u0131nda lambda ifadelerinin kullan\u0131m \u00f6rnekleri nelerdir?</li> <li> <p>Lambda ifadeleri ve extension metodlar aras\u0131ndaki ili\u015fki nedir?</p> </li> <li> <p>Lambda ve Closure'lar</p> </li> <li>Closure nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>Lambda ifadelerinde closure kullan\u0131m\u0131n\u0131n avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</li> <li> <p>Closure'larda memory leak riski nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Lambda ve Performans</p> </li> <li>Lambda ifadelerinin performans etkisi nedir?</li> <li>Lambda ifadelerinde boxing/unboxing nas\u0131l \u00f6nlenir?</li> <li> <p>Lambda ifadelerinin derleme s\u00fcrecindeki davran\u0131\u015f\u0131 nas\u0131ld\u0131r?</p> </li> <li> <p>Lambda ve Asenkron Programlama</p> </li> <li>Lambda ifadeleri asenkron metodlarda nas\u0131l kullan\u0131l\u0131r?</li> <li>Task.Run ile lambda kullan\u0131m\u0131 nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Asenkron lambda ifadelerinde exception handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Lambda ve Event Handling</p> </li> <li>Lambda ifadeleri event handler'larda nas\u0131l kullan\u0131l\u0131r?</li> <li>Event handler'larda lambda kullanman\u0131n avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</li> <li> <p>Event handler'larda memory leak riski nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Lambda Best Practices</p> </li> <li>Lambda ifadeleri yazarken dikkat edilmesi gerekenler nelerdir?</li> <li>Lambda ifadelerinde okunabilirlik nas\u0131l sa\u011flan\u0131r?</li> <li> <p>Lambda ifadelerinde test edilebilirlik nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Lambda ve Fonksiyonel Programlama</p> <ul> <li>Lambda ifadeleri fonksiyonel programlama yakla\u015f\u0131m\u0131nda nas\u0131l kullan\u0131l\u0131r?</li> <li>Higher-order fonksiyonlarda lambda kullan\u0131m\u0131 nas\u0131l yap\u0131l\u0131r?</li> <li>Lambda ifadeleri ve immutability aras\u0131ndaki ili\u015fki nedir?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/lambda-expressions/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Lambda ile Filtreleme <pre><code>public static IEnumerable&lt;T&gt; Filter&lt;T&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; predicate)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Lambda ile D\u00f6n\u00fc\u015f\u00fcm <pre><code>public static IEnumerable&lt;TResult&gt; Transform&lt;T, TResult&gt;(\n    IEnumerable&lt;T&gt; source, \n    Func&lt;T, TResult&gt; transform)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Lambda ile Toplama <pre><code>public static T Aggregate&lt;T&gt;(\n    IEnumerable&lt;T&gt; source, \n    Func&lt;T, T, T&gt; accumulator)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Lambda ile S\u0131ralama <pre><code>public static IEnumerable&lt;T&gt; SortBy&lt;T, TKey&gt;(\n    IEnumerable&lt;T&gt; source, \n    Func&lt;T, TKey&gt; keySelector)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Lambda ile Gruplama <pre><code>public static IEnumerable&lt;IGrouping&lt;TKey, T&gt;&gt; GroupBy&lt;T, TKey&gt;(\n    IEnumerable&lt;T&gt; source, \n    Func&lt;T, TKey&gt; keySelector)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/lambda-expressions/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Lambda Expressions</li> <li>Lambda Expressions Best Practices</li> <li>LINQ and Lambda Expressions </li> </ul>"},{"location":"junior/csharp-basics/linq-basics/","title":"LINQ Temelleri","text":""},{"location":"junior/csharp-basics/linq-basics/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>LINQ (Language Integrated Query), C#'ta veri sorgulama i\u00e7in kullan\u0131lan g\u00fc\u00e7l\u00fc bir \u00f6zelliktir. LINQ sayesinde, farkl\u0131 veri kaynaklar\u0131ndan (koleksiyonlar, veritabanlar\u0131, XML vb.) veri sorgulama i\u015flemleri tutarl\u0131 bir \u015fekilde yap\u0131labilir.</p>"},{"location":"junior/csharp-basics/linq-basics/#linq-sorgu-sozdizimi","title":"LINQ Sorgu S\u00f6zdizimi","text":"<ol> <li> <p>Method Syntax <pre><code>var numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(n =&gt; n % 2 == 0)\n                        .OrderBy(n =&gt; n)\n                        .ToList();\n</code></pre></p> </li> <li> <p>Query Syntax <pre><code>var numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\nvar evenNumbers = (from n in numbers\n                  where n % 2 == 0\n                  orderby n\n                  select n).ToList();\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/linq-basics/#temel-linq-operatorleri","title":"Temel LINQ Operat\u00f6rleri","text":"<ol> <li> <p>Filtreleme <pre><code>// Where\nvar adults = people.Where(p =&gt; p.Age &gt;= 18);\n\n// OfType\nvar strings = objects.OfType&lt;string&gt;();\n</code></pre></p> </li> <li> <p>Projeksiyon <pre><code>// Select\nvar names = people.Select(p =&gt; p.Name);\n\n// SelectMany\nvar allPhones = people.SelectMany(p =&gt; p.Phones);\n</code></pre></p> </li> <li> <p>S\u0131ralama <pre><code>// OrderBy\nvar sortedByName = people.OrderBy(p =&gt; p.Name);\n\n// ThenBy\nvar sorted = people.OrderBy(p =&gt; p.Age)\n                  .ThenBy(p =&gt; p.Name);\n</code></pre></p> </li> <li> <p>Gruplama <pre><code>// GroupBy\nvar groups = people.GroupBy(p =&gt; p.City);\n\n// Her grup i\u00e7in i\u015flem\nforeach (var group in groups)\n{\n    Console.WriteLine($\"\u015eehir: {group.Key}\");\n    foreach (var person in group)\n    {\n        Console.WriteLine($\"  - {person.Name}\");\n    }\n}\n</code></pre></p> </li> <li> <p>Birle\u015ftirme <pre><code>// Join\nvar joined = from p in people\n            join c in cities on p.CityId equals c.Id\n            select new { p.Name, c.CityName };\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/linq-basics/#linq-ve-koleksiyonlar","title":"LINQ ve Koleksiyonlar","text":"<ol> <li> <p>Listeler <pre><code>List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\nvar sum = numbers.Sum();\nvar avg = numbers.Average();\nvar max = numbers.Max();\n</code></pre></p> </li> <li> <p>Diziler <pre><code>int[] numbers = { 1, 2, 3, 4, 5 };\nvar first = numbers.First();\nvar last = numbers.Last();\nvar single = numbers.Single(n =&gt; n == 3);\n</code></pre></p> </li> <li> <p>Dictionary <pre><code>Dictionary&lt;int, string&gt; dict = new Dictionary&lt;int, string&gt;();\nvar keys = dict.Keys.Where(k =&gt; k &gt; 10);\nvar values = dict.Values.Where(v =&gt; v.StartsWith(\"A\"));\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/linq-basics/#linq-ve-null-kontrolu","title":"LINQ ve Null Kontrol\u00fc","text":"<pre><code>// Null kontrol\u00fc\nvar nonNullNames = people.Where(p =&gt; p?.Name != null)\n                        .Select(p =&gt; p.Name);\n\n// Default de\u011fer atama\nvar firstOrDefault = numbers.FirstOrDefault(n =&gt; n &gt; 10, -1);\n</code></pre>"},{"location":"junior/csharp-basics/linq-basics/#linq-ve-performans","title":"LINQ ve Performans","text":"<ol> <li> <p>Deferred Execution <pre><code>// Sorgu hen\u00fcz \u00e7al\u0131\u015ft\u0131r\u0131lmad\u0131\nvar query = numbers.Where(n =&gt; n % 2 == 0);\n\n// Sorgu \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\nvar result = query.ToList();\n</code></pre></p> </li> <li> <p>Immediate Execution <pre><code>// Sorgu hemen \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\nvar count = numbers.Count(n =&gt; n % 2 == 0);\nvar sum = numbers.Sum();\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/linq-basics/#linq-best-practices","title":"LINQ Best Practices","text":"<ol> <li> <p>Performans Optimizasyonu <pre><code>// K\u00f6t\u00fc\nvar result = numbers.Where(n =&gt; n % 2 == 0)\n                   .OrderBy(n =&gt; n)\n                   .Where(n =&gt; n &gt; 10)\n                   .ToList();\n\n// \u0130yi\nvar result = numbers.Where(n =&gt; n % 2 == 0 &amp;&amp; n &gt; 10)\n                   .OrderBy(n =&gt; n)\n                   .ToList();\n</code></pre></p> </li> <li> <p>Null Kontrol\u00fc <pre><code>// K\u00f6t\u00fc\nvar names = people.Select(p =&gt; p.Name.ToUpper());\n\n// \u0130yi\nvar names = people.Where(p =&gt; p?.Name != null)\n                 .Select(p =&gt; p.Name.ToUpper());\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/linq-basics/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>LINQ Temelleri</li> <li>LINQ nedir ve ne i\u015fe yarar?</li> <li>LINQ sorgu s\u00f6zdizimleri nelerdir?</li> <li> <p>LINQ'in avantajlar\u0131 nelerdir?</p> </li> <li> <p>LINQ Operat\u00f6rleri</p> </li> <li>Temel LINQ operat\u00f6rleri nelerdir?</li> <li>Where ve Select operat\u00f6rleri nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>GroupBy ve Join operat\u00f6rleri ne i\u015fe yarar?</p> </li> <li> <p>LINQ ve Performans</p> </li> <li>Deferred Execution nedir?</li> <li>LINQ sorgular\u0131nda performans nas\u0131l optimize edilir?</li> <li> <p>LINQ sorgular\u0131nda memory kullan\u0131m\u0131 nas\u0131l kontrol edilir?</p> </li> <li> <p>LINQ ve Null Handling</p> </li> <li>LINQ sorgular\u0131nda null kontrol\u00fc nas\u0131l yap\u0131l\u0131r?</li> <li>FirstOrDefault ve SingleOrDefault aras\u0131ndaki farklar nelerdir?</li> <li> <p>Null-conditional operat\u00f6rler LINQ'de nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>LINQ ve Koleksiyonlar</p> </li> <li>LINQ hangi koleksiyon tipleriyle kullan\u0131labilir?</li> <li>IEnumerable ve IQueryable aras\u0131ndaki farklar nelerdir?</li> <li> <p>LINQ sorgular\u0131 koleksiyonlar\u0131 nas\u0131l etkiler?</p> </li> <li> <p>LINQ ve Veritaban\u0131</p> </li> <li>LINQ to SQL nedir?</li> <li>Entity Framework'te LINQ nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>LINQ sorgular\u0131 veritaban\u0131nda nas\u0131l \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r?</p> </li> <li> <p>LINQ ve Lambda</p> </li> <li>LINQ ve Lambda ifadeleri aras\u0131ndaki ili\u015fki nedir?</li> <li>Lambda ifadeleri LINQ sorgular\u0131nda nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Expression ve Func delegate'leri LINQ'de nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>LINQ ve Asenkron Programlama</p> </li> <li>Asenkron LINQ sorgular\u0131 nas\u0131l yaz\u0131l\u0131r?</li> <li>Task ve LINQ nas\u0131l birlikte kullan\u0131l\u0131r?</li> <li> <p>Asenkron LINQ sorgular\u0131nda exception handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>LINQ Best Practices</p> </li> <li>LINQ sorgular\u0131 yazarken dikkat edilmesi gerekenler nelerdir?</li> <li>LINQ sorgular\u0131nda okunabilirlik nas\u0131l sa\u011flan\u0131r?</li> <li> <p>LINQ sorgular\u0131nda test edilebilirlik nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>LINQ ve Fonksiyonel Programlama</p> <ul> <li>LINQ fonksiyonel programlama prensiplerini nas\u0131l kullan\u0131r?</li> <li>LINQ'de immutability nas\u0131l sa\u011flan\u0131r?</li> <li>LINQ ve higher-order fonksiyonlar aras\u0131ndaki ili\u015fki nedir?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/linq-basics/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>LINQ ile Filtreleme <pre><code>public static IEnumerable&lt;T&gt; Filter&lt;T&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; predicate)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>LINQ ile Gruplama <pre><code>public static IEnumerable&lt;IGrouping&lt;TKey, T&gt;&gt; GroupBy&lt;T, TKey&gt;(\n    IEnumerable&lt;T&gt; source, \n    Func&lt;T, TKey&gt; keySelector)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>LINQ ile Birle\u015ftirme <pre><code>public static IEnumerable&lt;TResult&gt; Join&lt;T, TInner, TKey, TResult&gt;(\n    IEnumerable&lt;T&gt; outer,\n    IEnumerable&lt;TInner&gt; inner,\n    Func&lt;T, TKey&gt; outerKeySelector,\n    Func&lt;TInner, TKey&gt; innerKeySelector,\n    Func&lt;T, TInner, TResult&gt; resultSelector)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>LINQ ile S\u0131ralama <pre><code>public static IOrderedEnumerable&lt;T&gt; OrderBy&lt;T, TKey&gt;(\n    IEnumerable&lt;T&gt; source,\n    Func&lt;T, TKey&gt; keySelector)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>LINQ ile Agregasyon <pre><code>public static T Aggregate&lt;T&gt;(\n    IEnumerable&lt;T&gt; source,\n    Func&lt;T, T, T&gt; func)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/linq-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - LINQ</li> <li>LINQ Query Syntax</li> <li>LINQ Standard Query Operators </li> </ul>"},{"location":"junior/csharp-basics/memory-management/","title":"Memory Management","text":""},{"location":"junior/csharp-basics/memory-management/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>C#'ta bellek y\u00f6netimi, .NET CLR (Common Language Runtime) taraf\u0131ndan otomatik olarak yap\u0131l\u0131r. Bu sistem, geli\u015ftiricilerin bellek y\u00f6netimiyle ilgili detaylarla u\u011fra\u015fmas\u0131n\u0131 engelleyerek, daha g\u00fcvenli ve verimli kod yaz\u0131lmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"junior/csharp-basics/memory-management/#stack-ve-heap","title":"Stack ve Heap","text":"<ol> <li> <p>Stack (Y\u0131\u011f\u0131n) <pre><code>// Stack'te saklanan de\u011ferler\nint number = 42;        // Value type\ndouble pi = 3.14;       // Value type\nbool isTrue = true;     // Value type\n\n// Method \u00e7a\u011fr\u0131lar\u0131\nvoid Method()\n{\n    int localVar = 10;  // Stack'te saklan\u0131r\n}\n</code></pre></p> </li> <li> <p>Heap (Y\u0131\u011f\u0131n) <pre><code>// Heap'te saklanan nesneler\nstring name = \"Ahmet\";  // Reference type\nPerson person = new Person(); // Reference type\nint[] numbers = new int[10]; // Reference type\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/memory-management/#garbage-collection-cop-toplama","title":"Garbage Collection (\u00c7\u00f6p Toplama)","text":"<ol> <li> <p>GC Temelleri <pre><code>// Nesne olu\u015fturma\nPerson person = new Person();\n\n// Referans\u0131 kald\u0131rma\nperson = null; // GC taraf\u0131ndan toplanabilir\n</code></pre></p> </li> <li> <p>GC Generations <pre><code>// Generation 0 - Yeni nesneler\nvar obj1 = new object();\n\n// Generation 1 - Hayatta kalan nesneler\nGC.Collect(0); // Generation 0 temizlenir\n\n// Generation 2 - Uzun s\u00fcreli nesneler\nGC.Collect(1); // Generation 1 temizlenir\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/memory-management/#idisposable-ve-dispose-pattern","title":"IDisposable ve Dispose Pattern","text":"<ol> <li> <p>Temel Dispose Pattern <pre><code>public class Resource : IDisposable\n{\n    private bool disposed = false;\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposed)\n        {\n            if (disposing)\n            {\n                // Y\u00f6netilen kaynaklar\u0131 serbest b\u0131rak\n            }\n            // Y\u00f6netilmeyen kaynaklar\u0131 serbest b\u0131rak\n            disposed = true;\n        }\n    }\n\n    ~Resource()\n    {\n        Dispose(false);\n    }\n}\n</code></pre></p> </li> <li> <p>using Statement <pre><code>using (var resource = new Resource())\n{\n    // Kaynak kullan\u0131m\u0131\n} // Otomatik olarak Dispose \u00e7a\u011fr\u0131l\u0131r\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/memory-management/#memory-leaks-bellek-szntlar","title":"Memory Leaks (Bellek S\u0131z\u0131nt\u0131lar\u0131)","text":"<ol> <li> <p>Event Handlers <pre><code>// Bellek s\u0131z\u0131nt\u0131s\u0131 \u00f6rne\u011fi\npublic class Publisher\n{\n    public event EventHandler SomethingHappened;\n}\n\npublic class Subscriber\n{\n    public void Subscribe(Publisher publisher)\n    {\n        publisher.SomethingHappened += OnSomethingHappened;\n    }\n\n    private void OnSomethingHappened(object sender, EventArgs e)\n    {\n        // Event handler\n    }\n}\n</code></pre></p> </li> <li> <p>Static References <pre><code>// Statik referans \u00f6rne\u011fi\npublic static class Cache\n{\n    private static List&lt;object&gt; items = new List&lt;object&gt;();\n\n    public static void Add(object item)\n    {\n        items.Add(item);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/memory-management/#memory-management-best-practices","title":"Memory Management Best Practices","text":"<ol> <li> <p>Value vs Reference Types <pre><code>// Value type kullan\u0131m\u0131 (k\u00fc\u00e7\u00fck, de\u011fi\u015fmez veriler i\u00e7in)\npublic struct Point\n{\n    public int X { get; }\n    public int Y { get; }\n}\n\n// Reference type kullan\u0131m\u0131 (karma\u015f\u0131k, de\u011fi\u015febilir veriler i\u00e7in)\npublic class Person\n{\n    public string Name { get; set; }\n    public List&lt;string&gt; Addresses { get; set; }\n}\n</code></pre></p> </li> <li> <p>String Handling <pre><code>// String birle\u015ftirme\nstring result = string.Concat(\"Hello\", \" \", \"World\");\n\n// StringBuilder kullan\u0131m\u0131\nvar builder = new StringBuilder();\nbuilder.Append(\"Hello\");\nbuilder.Append(\" \");\nbuilder.Append(\"World\");\nstring result = builder.ToString();\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/memory-management/#memory-profiling","title":"Memory Profiling","text":"<ol> <li> <p>Memory Profiler Kullan\u0131m\u0131 <pre><code>// Memory snapshot alma\nvar snapshot1 = GC.GetTotalMemory(false);\n\n// \u0130\u015flemler\nvar list = new List&lt;int&gt;();\nfor (int i = 0; i &lt; 1000000; i++)\n{\n    list.Add(i);\n}\n\nvar snapshot2 = GC.GetTotalMemory(false);\nvar memoryUsed = snapshot2 - snapshot1;\n</code></pre></p> </li> <li> <p>Weak References <pre><code>// Weak reference kullan\u0131m\u0131\nvar weakRef = new WeakReference(new object());\n\nif (weakRef.IsAlive)\n{\n    var target = weakRef.Target;\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/memory-management/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Bellek Y\u00f6netimi Temelleri</li> <li>Stack ve Heap aras\u0131ndaki farklar nelerdir?</li> <li>Value type ve Reference type'lar bellekte nas\u0131l saklan\u0131r?</li> <li> <p>Garbage Collection nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Garbage Collection</p> </li> <li>GC Generations nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>GC ne zaman tetiklenir?</li> <li> <p>GC'nin performans etkileri nelerdir?</p> </li> <li> <p>IDisposable Pattern</p> </li> <li>Dispose pattern nedir ve neden kullan\u0131l\u0131r?</li> <li>using statement nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Finalizer ne zaman kullan\u0131lmal\u0131d\u0131r?</p> </li> <li> <p>Memory Leaks</p> </li> <li>Bellek s\u0131z\u0131nt\u0131lar\u0131 nas\u0131l olu\u015fur?</li> <li>Event handler'lar nas\u0131l bellek s\u0131z\u0131nt\u0131s\u0131na neden olur?</li> <li> <p>Statik referanslar\u0131n riskleri nelerdir?</p> </li> <li> <p>Value vs Reference Types</p> </li> <li>Value type ve Reference type ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>Struct ve Class aras\u0131ndaki bellek y\u00f6netimi farklar\u0131 nelerdir?</li> <li> <p>Boxing/Unboxing'in bellek etkileri nelerdir?</p> </li> <li> <p>String Handling</p> </li> <li>String immutability nedir?</li> <li>StringBuilder ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li> <p>String interning nedir?</p> </li> <li> <p>Memory Profiling</p> </li> <li>Memory profiler nas\u0131l kullan\u0131l\u0131r?</li> <li>Weak references ne i\u015fe yarar?</li> <li> <p>Memory snapshot'lar nas\u0131l analiz edilir?</p> </li> <li> <p>Best Practices</p> </li> <li>Bellek y\u00f6netimi i\u00e7in en iyi uygulamalar nelerdir?</li> <li>B\u00fcy\u00fck nesneler nas\u0131l y\u00f6netilmelidir?</li> <li>Bellek fragmentasyonu nas\u0131l \u00f6nlenir?</li> </ol>"},{"location":"junior/csharp-basics/memory-management/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Memory Efficient Cache <pre><code>public class MemoryEfficientCache&lt;TKey, TValue&gt;\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Resource Manager <pre><code>public class ResourceManager : IDisposable\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Memory Monitor <pre><code>public class MemoryMonitor\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Weak Reference Cache <pre><code>public class WeakReferenceCache&lt;T&gt;\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Memory Optimized Collection <pre><code>public class MemoryOptimizedCollection&lt;T&gt;\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/memory-management/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Memory Management</li> <li>Microsoft Docs - IDisposable Pattern</li> <li>Microsoft Docs - Memory Profiling </li> </ul>"},{"location":"junior/csharp-basics/nullable-types/","title":"Nullable Types","text":""},{"location":"junior/csharp-basics/nullable-types/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Nullable Types (Null Olabilen Tipler), C#'ta de\u011fer tiplerinin (value types) null de\u011fer alabilmesini sa\u011flayan bir \u00f6zelliktir. Bu \u00f6zellik sayesinde, de\u011fer tipleri i\u00e7in null durumunu temsil edebilir ve bu durumu kontrol edebiliriz.</p>"},{"location":"junior/csharp-basics/nullable-types/#nullable-types-tanmlama","title":"Nullable Types Tan\u0131mlama","text":"<ol> <li> <p>Nullable S\u00f6zdizimi <pre><code>Nullable&lt;int&gt; nullableInt = null;\nNullable&lt;double&gt; nullableDouble = 3.14;\n</code></pre> <li> <p>? Operat\u00f6r\u00fc ile K\u0131sa S\u00f6zdizimi <pre><code>int? nullableInt = null;\ndouble? nullableDouble = 3.14;\n</code></pre></p> </li>"},{"location":"junior/csharp-basics/nullable-types/#nullable-types-ozellikleri","title":"Nullable Types \u00d6zellikleri","text":"<ol> <li> <p>HasValue <pre><code>int? number = 42;\nif (number.HasValue)\n{\n    Console.WriteLine($\"De\u011fer: {number.Value}\");\n}\nelse\n{\n    Console.WriteLine(\"De\u011fer null\");\n}\n</code></pre></p> </li> <li> <p>Value <pre><code>int? number = 42;\nint actualNumber = number.Value; // 42\n\nint? nullNumber = null;\n// nullNumber.Value kullan\u0131m\u0131 InvalidOperationException f\u0131rlat\u0131r\n</code></pre></p> </li> <li> <p>GetValueOrDefault <pre><code>int? number = null;\nint result = number.GetValueOrDefault(); // 0\nint resultWithDefault = number.GetValueOrDefault(42); // 42\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/nullable-types/#nullable-types-operatorleri","title":"Nullable Types Operat\u00f6rleri","text":"<ol> <li> <p>Null-Coalescing Operat\u00f6r\u00fc (??) <pre><code>int? number = null;\nint result = number ?? 42; // 42\n</code></pre></p> </li> <li> <p>Null-Conditional Operat\u00f6r\u00fc (?.) <pre><code>Person? person = null;\nstring? name = person?.Name; // null\n\n// Zincirleme kullan\u0131m\nstring? city = person?.Address?.City;\n</code></pre></p> </li> <li> <p>Null-Forgiving Operat\u00f6r\u00fc (!) <pre><code>int? number = null;\n// Derleyiciye null olmad\u0131\u011f\u0131n\u0131 garanti ediyoruz\nint result = number!.Value;\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/nullable-types/#nullable-types-donusumleri","title":"Nullable Types D\u00f6n\u00fc\u015f\u00fcmleri","text":"<ol> <li> <p>Implicit Conversion <pre><code>int regularInt = 42;\nint? nullableInt = regularInt; // Otomatik d\u00f6n\u00fc\u015f\u00fcm\n</code></pre></p> </li> <li> <p>Explicit Conversion <pre><code>int? nullableInt = 42;\nint regularInt = (int)nullableInt; // Explicit d\u00f6n\u00fc\u015f\u00fcm\n\nint? nullValue = null;\n// (int)nullValue kullan\u0131m\u0131 InvalidOperationException f\u0131rlat\u0131r\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/nullable-types/#nullable-types-ve-linq","title":"Nullable Types ve LINQ","text":"<pre><code>List&lt;int?&gt; numbers = new List&lt;int?&gt; { 1, null, 3, null, 5 };\n\n// Null olmayan de\u011ferleri filtreleme\nvar nonNullNumbers = numbers.Where(n =&gt; n.HasValue);\n\n// Null de\u011ferleri varsay\u0131lan de\u011ferle de\u011fi\u015ftirme\nvar defaultNumbers = numbers.Select(n =&gt; n ?? 0);\n</code></pre>"},{"location":"junior/csharp-basics/nullable-types/#nullable-types-ve-pattern-matching","title":"Nullable Types ve Pattern Matching","text":"<pre><code>int? number = 42;\n\n// Pattern matching ile kontrol\nif (number is int value)\n{\n    Console.WriteLine($\"De\u011fer: {value}\");\n}\n\n// Switch expression ile kullan\u0131m\nstring result = number switch\n{\n    null =&gt; \"De\u011fer null\",\n    int value =&gt; $\"De\u011fer: {value}\"\n};\n</code></pre>"},{"location":"junior/csharp-basics/nullable-types/#nullable-types-best-practices","title":"Nullable Types Best Practices","text":"<ol> <li> <p>Null Kontrol\u00fc <pre><code>// K\u00f6t\u00fc\nint? number = GetNumber();\nint result = number.Value; // Potansiyel exception\n\n// \u0130yi\nint? number = GetNumber();\nif (number.HasValue)\n{\n    int result = number.Value;\n}\n</code></pre></p> </li> <li> <p>Default De\u011fer Kullan\u0131m\u0131 <pre><code>// K\u00f6t\u00fc\nint? number = GetNumber();\nint result = number ?? 0;\n\n// \u0130yi\nint? number = GetNumber();\nint result = number.GetValueOrDefault(0);\n</code></pre></p> </li> <li> <p>Null-Conditional Operat\u00f6r\u00fc <pre><code>// K\u00f6t\u00fc\nif (person != null &amp;&amp; person.Address != null)\n{\n    string city = person.Address.City;\n}\n\n// \u0130yi\nstring? city = person?.Address?.City;\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/nullable-types/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Nullable Types Temelleri</li> <li>Nullable Types nedir ve ne i\u015fe yarar?</li> <li>Nullable ve ? operat\u00f6r\u00fc aras\u0131ndaki fark nedir? <li> <p>Hangi tipler nullable olabilir?</p> </li> <li> <p>Nullable Types \u00d6zellikleri</p> </li> <li>HasValue ve Value \u00f6zellikleri ne i\u015fe yarar?</li> <li>GetValueOrDefault metodu nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Nullable Types'\u0131n varsay\u0131lan de\u011feri nedir?</p> </li> <li> <p>Nullable Types Operat\u00f6rleri</p> </li> <li>Null-Coalescing operat\u00f6r\u00fc (??) nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>Null-Conditional operat\u00f6r\u00fc (?.) nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Null-Forgiving operat\u00f6r\u00fc (!) ne i\u015fe yarar?</p> </li> <li> <p>Nullable Types ve Tip D\u00f6n\u00fc\u015f\u00fcmleri</p> </li> <li>Nullable Types'tan normal tipe d\u00f6n\u00fc\u015f\u00fcm nas\u0131l yap\u0131l\u0131r?</li> <li>D\u00f6n\u00fc\u015f\u00fcmlerde dikkat edilmesi gerekenler nelerdir?</li> <li> <p>Implicit ve explicit d\u00f6n\u00fc\u015f\u00fcmler aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Nullable Types ve Exception Handling</p> </li> <li>Nullable Types kullan\u0131rken hangi exception'lar olu\u015fabilir?</li> <li>Bu exception'lar nas\u0131l \u00f6nlenebilir?</li> <li> <p>Nullable Types ve try-catch bloklar\u0131 nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Nullable Types ve Performans</p> </li> <li>Nullable Types'\u0131n performans etkisi nedir?</li> <li>Boxing/unboxing durumlar\u0131 nas\u0131l olu\u015fur?</li> <li> <p>Performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Nullable Types ve LINQ</p> </li> <li>LINQ sorgular\u0131nda Nullable Types nas\u0131l kullan\u0131l\u0131r?</li> <li>Null de\u011ferler LINQ sorgular\u0131nda nas\u0131l i\u015flenir?</li> <li> <p>LINQ ve Nullable Types performans etkile\u015fimi nas\u0131ld\u0131r?</p> </li> <li> <p>Nullable Types ve Pattern Matching</p> </li> <li>Pattern matching ile Nullable Types nas\u0131l kontrol edilir?</li> <li>Switch expression'larda Nullable Types nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Pattern matching performans etkisi nedir?</p> </li> <li> <p>Nullable Types Best Practices</p> </li> <li>Nullable Types kullan\u0131rken dikkat edilmesi gerekenler nelerdir?</li> <li>Kod okunabilirli\u011fi nas\u0131l sa\u011flan\u0131r?</li> <li> <p>Test edilebilirlik nas\u0131l art\u0131r\u0131l\u0131r?</p> </li> <li> <p>Nullable Types ve Modern C#</p> <ul> <li>C# 8.0 ve sonras\u0131nda Nullable Types nas\u0131l geli\u015fti?</li> <li>Nullable reference types ile ili\u015fkisi nedir?</li> <li>Modern C# \u00f6zellikleri Nullable Types'\u0131 nas\u0131l etkiler?</li> </ul> </li>"},{"location":"junior/csharp-basics/nullable-types/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Nullable Int Toplama <pre><code>public static int? AddNullableInts(int? a, int? b)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Nullable String Kontrol\u00fc <pre><code>public static bool IsNullOrEmpty(string? text)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Nullable Object D\u00f6n\u00fc\u015f\u00fcm\u00fc <pre><code>public static T? ConvertToNullable&lt;T&gt;(object value) where T : struct\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Nullable List Filtreleme <pre><code>public static IEnumerable&lt;T&gt; FilterNulls&lt;T&gt;(IEnumerable&lt;T?&gt; source)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Nullable Dictionary \u0130\u015flemleri <pre><code>public static TValue? GetValueOrDefault&lt;TKey, TValue&gt;(\n    IDictionary&lt;TKey, TValue&gt; dictionary,\n    TKey key)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/nullable-types/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Nullable Types</li> <li>Nullable Reference Types</li> <li>Nullable Types Best Practices </li> </ul>"},{"location":"junior/csharp-basics/oop/","title":"Nesne Y\u00f6nelimli Programlama (OOP)","text":""},{"location":"junior/csharp-basics/oop/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, C#'ta Nesne Y\u00f6nelimli Programlaman\u0131n temel prensiplerini ve uygulamalar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"junior/csharp-basics/oop/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/csharp-basics/oop/#1-oopin-temel-prensipleri-nelerdir","title":"1. OOP'in temel prensipleri nelerdir?","text":"<p>Cevap: OOP Prensipleri: - Kaps\u00fclleme (Encapsulation):   - Veri gizleme   - Access modifiers   - Properties kullan\u0131m\u0131</p> <ul> <li>Kal\u0131t\u0131m (Inheritance):</li> <li>Base class - Derived class</li> <li>Code reuse</li> <li> <p>Polymorphism temeli</p> </li> <li> <p>Polimorfizm (Polymorphism):</p> </li> <li>Method overriding</li> <li>Interface implementation</li> <li> <p>Virtual/override</p> </li> <li> <p>Soyutlama (Abstraction):</p> </li> <li>Abstract classes</li> <li>Interfaces</li> <li>Method signatures</li> </ul> <p>\u00d6rnek Kod: <pre><code>// Kaps\u00fclleme\npublic class Person\n{\n    private string _name;\n    public string Name\n    {\n        get { return _name; }\n        set { _name = value; }\n    }\n}\n\n// Kal\u0131t\u0131m\npublic class Employee : Person\n{\n    public decimal Salary { get; set; }\n}\n\n// Polimorfizm\npublic abstract class Animal\n{\n    public virtual void MakeSound()\n    {\n        Console.WriteLine(\"Ses \u00e7\u0131kar\u0131yor\");\n    }\n}\n\npublic class Dog : Animal\n{\n    public override void MakeSound()\n    {\n        Console.WriteLine(\"Hav hav!\");\n    }\n}\n\n// Soyutlama\npublic interface IShape\n{\n    double CalculateArea();\n    double CalculatePerimeter();\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/oop/#2-interface-ve-abstract-class-arasndaki-farklar-nelerdir","title":"2. Interface ve Abstract Class aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Interface vs Abstract Class: - Interface:   - Sadece method signatures   - \u00c7oklu kal\u0131t\u0131m   - Implementation zorunlu   - Varsay\u0131lan implementasyon (C# 8+)</p> <ul> <li>Abstract Class:</li> <li>Tam implementasyon i\u00e7erebilir</li> <li>Tekli kal\u0131t\u0131m</li> <li>Abstract methods</li> <li>Constructor olabilir</li> </ul> <p>\u00d6rnek Kod: <pre><code>// Interface\npublic interface ILogger\n{\n    void Log(string message);\n    void LogError(string message) =&gt; Log($\"ERROR: {message}\"); // Default implementation\n}\n\n// Abstract Class\npublic abstract class LoggerBase\n{\n    protected string FormatMessage(string message)\n    {\n        return $\"[{DateTime.Now}] {message}\";\n    }\n\n    public abstract void Log(string message);\n}\n\n// Implementation\npublic class FileLogger : LoggerBase, ILogger\n{\n    public override void Log(string message)\n    {\n        File.WriteAllText(\"log.txt\", FormatMessage(message));\n    }\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/oop/#3-constructor-ve-destructor-nedir","title":"3. Constructor ve Destructor nedir?","text":"<p>Cevap: Constructor/Destructor: - Constructor:   - Nesne olu\u015fturuldu\u011funda \u00e7al\u0131\u015f\u0131r   - Overloading yap\u0131labilir   - this/base kullan\u0131m\u0131   - Static constructor</p> <ul> <li>Destructor:</li> <li>Nesne yok edildi\u011finde \u00e7al\u0131\u015f\u0131r</li> <li>IDisposable pattern</li> <li>Garbage Collection</li> </ul> <p>\u00d6rnek Kod: <pre><code>public class Person\n{\n    private string _name;\n    private int _age;\n\n    // Default constructor\n    public Person()\n    {\n        _name = \"Bilinmiyor\";\n        _age = 0;\n    }\n\n    // Parameterized constructor\n    public Person(string name, int age)\n    {\n        _name = name;\n        _age = age;\n    }\n\n    // Constructor chaining\n    public Person(string name) : this(name, 0)\n    {\n    }\n\n    // Static constructor\n    static Person()\n    {\n        Console.WriteLine(\"Static constructor \u00e7al\u0131\u015ft\u0131\");\n    }\n\n    // Destructor\n    ~Person()\n    {\n        Console.WriteLine(\"Destructor \u00e7al\u0131\u015ft\u0131\");\n    }\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/oop/#4-method-overloading-ve-overriding-nedir","title":"4. Method Overloading ve Overriding nedir?","text":"<p>Cevap: Method Overloading/Overriding: - Overloading:   - Ayn\u0131 isim, farkl\u0131 parametreler   - Compile-time polymorphism   - Return type farkl\u0131 olabilir</p> <ul> <li>Overriding:</li> <li>Base class methodunu de\u011fi\u015ftirme</li> <li>Runtime polymorphism</li> <li>virtual/override kullan\u0131m\u0131</li> </ul> <p>\u00d6rnek Kod: <pre><code>public class Calculator\n{\n    // Method overloading\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n\n    public double Add(double a, double b)\n    {\n        return a + b;\n    }\n\n    public int Add(int a, int b, int c)\n    {\n        return a + b + c;\n    }\n}\n\npublic class ScientificCalculator : Calculator\n{\n    // Method overriding\n    public override int Add(int a, int b)\n    {\n        Console.WriteLine(\"Scientific calculator kullan\u0131l\u0131yor\");\n        return base.Add(a, b);\n    }\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/oop/#5-solid-prensipleri-nelerdir","title":"5. SOLID prensipleri nelerdir?","text":"<p>Cevap: SOLID Prensipleri: - Single Responsibility:   - Tek sorumluluk   - S\u0131n\u0131f de\u011fi\u015fimi tek nedene ba\u011fl\u0131</p> <ul> <li>Open/Closed:</li> <li>Geni\u015flemeye a\u00e7\u0131k</li> <li> <p>De\u011fi\u015fime kapal\u0131</p> </li> <li> <p>Liskov Substitution:</p> </li> <li> <p>Alt s\u0131n\u0131flar \u00fcst s\u0131n\u0131f\u0131n yerine ge\u00e7ebilmeli</p> </li> <li> <p>Interface Segregation:</p> </li> <li> <p>K\u00fc\u00e7\u00fck, \u00f6zel interface'ler</p> </li> <li> <p>Dependency Inversion:</p> </li> <li>Y\u00fcksek seviye mod\u00fcller d\u00fc\u015f\u00fck seviyeye ba\u011f\u0131ml\u0131 olmamal\u0131</li> </ul> <p>\u00d6rnek Kod: <pre><code>// Single Responsibility\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class UserValidator\n{\n    public bool Validate(User user)\n    {\n        // Validation logic\n    }\n}\n\n// Open/Closed\npublic abstract class Shape\n{\n    public abstract double CalculateArea();\n}\n\npublic class Circle : Shape\n{\n    public double Radius { get; set; }\n\n    public override double CalculateArea()\n    {\n        return Math.PI * Radius * Radius;\n    }\n}\n\n// Interface Segregation\npublic interface IPrinter\n{\n    void Print();\n}\n\npublic interface IScanner\n{\n    void Scan();\n}\n\npublic class MultiFunctionPrinter : IPrinter, IScanner\n{\n    public void Print() { }\n    public void Scan() { }\n}\n</code></pre></p>"},{"location":"junior/csharp-basics/oop/#best-practices","title":"Best Practices","text":"<ol> <li>S\u0131n\u0131f Tasar\u0131m\u0131</li> <li>Tek sorumluluk prensibi</li> <li>Y\u00fcksek ba\u011flant\u0131l\u0131l\u0131k</li> <li> <p>D\u00fc\u015f\u00fck ba\u011f\u0131ml\u0131l\u0131k</p> </li> <li> <p>Kal\u0131t\u0131m Kullan\u0131m\u0131</p> </li> <li>Composition over inheritance</li> <li>Interface kullan\u0131m\u0131</li> <li> <p>Abstract class dikkatli kullan\u0131m\u0131</p> </li> <li> <p>Kod Organizasyonu</p> </li> <li>Namespace kullan\u0131m\u0131</li> <li>Access modifier'lar</li> <li>Property kullan\u0131m\u0131</li> </ol>"},{"location":"junior/csharp-basics/oop/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>C# OOP Concepts</li> <li>SOLID Principles</li> <li>C# Programming Guide </li> </ul>"},{"location":"junior/csharp-basics/string-operations/","title":"String \u0130\u015flemleri","text":""},{"location":"junior/csharp-basics/string-operations/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>String i\u015flemleri, metin verilerini manip\u00fcle etmek i\u00e7in kullan\u0131lan temel operasyonlard\u0131r. C#'ta string'ler immutable (de\u011fi\u015fmez) yap\u0131dad\u0131r ve System.String s\u0131n\u0131f\u0131 taraf\u0131ndan temsil edilir.</p>"},{"location":"junior/csharp-basics/string-operations/#temel-string-islemleri","title":"Temel String \u0130\u015flemleri","text":"<ol> <li> <p>String Olu\u015fturma <pre><code>string str1 = \"Merhaba\";\nstring str2 = new string('a', 5); // \"aaaaa\"\nstring str3 = string.Empty;\n</code></pre></p> </li> <li> <p>String Birle\u015ftirme <pre><code>string str1 = \"Merhaba\";\nstring str2 = \"D\u00fcnya\";\n\n// + operat\u00f6r\u00fc\nstring result1 = str1 + \" \" + str2;\n\n// String.Concat\nstring result2 = string.Concat(str1, \" \", str2);\n\n// String.Format\nstring result3 = string.Format(\"{0} {1}\", str1, str2);\n\n// String interpolation\nstring result4 = $\"{str1} {str2}\";\n</code></pre></p> </li> <li> <p>String Kar\u015f\u0131la\u015ft\u0131rma <pre><code>string str1 = \"Merhaba\";\nstring str2 = \"merhaba\";\n\n// Case-sensitive kar\u015f\u0131la\u015ft\u0131rma\nbool isEqual1 = str1.Equals(str2);\n\n// Case-insensitive kar\u015f\u0131la\u015ft\u0131rma\nbool isEqual2 = str1.Equals(str2, StringComparison.OrdinalIgnoreCase);\n\n// CompareTo\nint result = str1.CompareTo(str2);\n</code></pre></p> </li> <li> <p>String Arama <pre><code>string str = \"Merhaba D\u00fcnya\";\n\n// Contains\nbool contains = str.Contains(\"D\u00fcnya\");\n\n// IndexOf\nint index = str.IndexOf(\"D\u00fcnya\");\n\n// LastIndexOf\nint lastIndex = str.LastIndexOf(\"a\");\n\n// StartsWith\nbool startsWith = str.StartsWith(\"Mer\");\n\n// EndsWith\nbool endsWith = str.EndsWith(\"nya\");\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#string-manipulasyonu","title":"String Manip\u00fclasyonu","text":"<ol> <li> <p>Substring <pre><code>string str = \"Merhaba D\u00fcnya\";\nstring sub1 = str.Substring(0, 7); // \"Merhaba\"\nstring sub2 = str.Substring(8); // \"D\u00fcnya\"\n</code></pre></p> </li> <li> <p>Replace <pre><code>string str = \"Merhaba D\u00fcnya\";\nstring newStr = str.Replace(\"D\u00fcnya\", \"Mars\");\n</code></pre></p> </li> <li> <p>Trim <pre><code>string str = \"  Merhaba  \";\nstring trimmed = str.Trim(); // \"Merhaba\"\nstring trimmedStart = str.TrimStart(); // \"Merhaba  \"\nstring trimmedEnd = str.TrimEnd(); // \"  Merhaba\"\n</code></pre></p> </li> <li> <p>ToUpper/ToLower <pre><code>string str = \"Merhaba\";\nstring upper = str.ToUpper(); // \"MERHABA\"\nstring lower = str.ToLower(); // \"merhaba\"\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#string-formatlama","title":"String Formatlama","text":"<ol> <li> <p>String.Format <pre><code>string name = \"Ahmet\";\nint age = 30;\nstring formatted = string.Format(\"Ad: {0}, Ya\u015f: {1}\", name, age);\n</code></pre></p> </li> <li> <p>String Interpolation <pre><code>string name = \"Ahmet\";\nint age = 30;\nstring formatted = $\"Ad: {name}, Ya\u015f: {age}\";\n</code></pre></p> </li> <li> <p>Composite Formatting <pre><code>string name = \"Ahmet\";\nint age = 30;\nstring formatted = string.Format(\"Ad: {0,-10}, Ya\u015f: {1:D3}\", name, age);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#stringbuilder","title":"StringBuilder","text":"<ol> <li> <p>Temel Kullan\u0131m <pre><code>StringBuilder sb = new StringBuilder();\nsb.Append(\"Merhaba\");\nsb.Append(\" \");\nsb.Append(\"D\u00fcnya\");\nstring result = sb.ToString();\n</code></pre></p> </li> <li> <p>Performans Optimizasyonu <pre><code>StringBuilder sb = new StringBuilder(100); // Ba\u015flang\u0131\u00e7 kapasitesi\nfor (int i = 0; i &lt; 1000; i++)\n{\n    sb.Append(i.ToString());\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#string-split-ve-join","title":"String Split ve Join","text":"<ol> <li> <p>Split <pre><code>string str = \"Ahmet,Mehmet,Ali\";\nstring[] names = str.Split(',');\n\n// Birden fazla ayra\u00e7\nstring[] parts = str.Split(new char[] { ',', ';' });\n</code></pre></p> </li> <li> <p>Join <pre><code>string[] names = { \"Ahmet\", \"Mehmet\", \"Ali\" };\nstring joined = string.Join(\", \", names);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#string-validation","title":"String Validation","text":"<ol> <li> <p>Bo\u015f Kontrol\u00fc <pre><code>string str = \"\";\nbool isEmpty = string.IsNullOrEmpty(str);\nbool isWhiteSpace = string.IsNullOrWhiteSpace(str);\n</code></pre></p> </li> <li> <p>Regex ile Validation <pre><code>string email = \"test@example.com\";\nbool isValid = Regex.IsMatch(email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\");\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#performans-konular","title":"Performans Konular\u0131","text":"<ol> <li>String Concatenation vs StringBuilder</li> <li>K\u00fc\u00e7\u00fck string'ler i\u00e7in + operat\u00f6r\u00fc kullan</li> <li> <p>B\u00fcy\u00fck veya dinamik string'ler i\u00e7in StringBuilder kullan</p> </li> <li> <p>String Interning <pre><code>string str1 = \"Merhaba\";\nstring str2 = \"Merhaba\";\nbool isInterned = string.IsInterned(str1) != null;\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#guvenlik-konular","title":"G\u00fcvenlik Konular\u0131","text":"<ol> <li> <p>SQL Injection <pre><code>// G\u00fcvensiz\nstring query = \"SELECT * FROM Users WHERE Name = '\" + name + \"'\";\n\n// G\u00fcvenli\nstring query = \"SELECT * FROM Users WHERE Name = @name\";\n</code></pre></p> </li> <li> <p>XSS Prevention <pre><code>string userInput = \"&lt;script&gt;alert('xss')&lt;/script&gt;\";\nstring safeInput = System.Web.HttpUtility.HtmlEncode(userInput);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>String Immutability</li> <li>String'ler neden immutable'd\u0131r?</li> <li>String immutability'nin avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</li> <li> <p>String de\u011fi\u015fikliklerinde performans etkisi nas\u0131l olur?</p> </li> <li> <p>String Kar\u015f\u0131la\u015ft\u0131rma</p> </li> <li>String.Equals() ve == operat\u00f6r\u00fc aras\u0131ndaki farklar nelerdir?</li> <li>StringComparison enum'\u0131 ne i\u015fe yarar ve hangi durumlarda kullan\u0131l\u0131r?</li> <li> <p>String.Compare() metodunun d\u00f6n\u00fc\u015f de\u011feri ne anlama gelir?</p> </li> <li> <p>StringBuilder</p> </li> <li>StringBuilder ne zaman kullan\u0131lmal\u0131d\u0131r?</li> <li>StringBuilder'\u0131n kapasitesi nas\u0131l belirlenir?</li> <li> <p>StringBuilder vs String concatenation performans kar\u015f\u0131la\u015ft\u0131rmas\u0131 nas\u0131ld\u0131r?</p> </li> <li> <p>String Formatlama</p> </li> <li>String.Format() ve string interpolation ($\"\") aras\u0131ndaki farklar nelerdir?</li> <li>Composite formatting nedir ve nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Custom format provider nas\u0131l olu\u015fturulur?</p> </li> <li> <p>String Manip\u00fclasyonu</p> </li> <li>Substring() metodunun kullan\u0131m\u0131nda dikkat edilmesi gerekenler nelerdir?</li> <li>Replace() metodu case-sensitive midir?</li> <li> <p>Trim() metodunun alternatifleri nelerdir?</p> </li> <li> <p>String Validation</p> </li> <li>String.IsNullOrEmpty() ve String.IsNullOrWhiteSpace() aras\u0131ndaki fark nedir?</li> <li>Regex ile string validation yaparken dikkat edilmesi gerekenler nelerdir?</li> <li> <p>String validation i\u00e7in extension method nas\u0131l yaz\u0131l\u0131r?</p> </li> <li> <p>String G\u00fcvenli\u011fi</p> </li> <li>SQL injection nas\u0131l \u00f6nlenir?</li> <li>XSS sald\u0131r\u0131lar\u0131na kar\u015f\u0131 string'ler nas\u0131l korunur?</li> <li> <p>String'lerde g\u00fcvenli karakter encoding nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>String Performans\u0131</p> </li> <li>String interning nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>String pooling nedir ve ne zaman kullan\u0131l\u0131r?</li> <li> <p>String i\u015flemlerinde memory fragmentation nas\u0131l \u00f6nlenir?</p> </li> <li> <p>String ve Unicode</p> </li> <li>String'lerde Unicode karakterler nas\u0131l i\u015flenir?</li> <li>String.Normalize() metodu ne i\u015fe yarar?</li> <li> <p>String'lerde encoding d\u00f6n\u00fc\u015f\u00fcmleri nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>String ve Koleksiyonlar</p> <ul> <li>String.Split() metodunun alternatifleri nelerdir?</li> <li>String.Join() metodunda performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li>String array'leri ile \u00e7al\u0131\u015f\u0131rken dikkat edilmesi gerekenler nelerdir?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Palindrome Kontrol\u00fc <pre><code>public bool IsPalindrome(string str)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>String Ters \u00c7evirme <pre><code>public string ReverseString(string str)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Anagram Kontrol\u00fc <pre><code>public bool AreAnagrams(string str1, string str2)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>String S\u0131k\u0131\u015ft\u0131rma <pre><code>public string CompressString(string str)\n{\n    // \u00d6rnek: \"aaabbbcc\" -&gt; \"a3b3c2\"\n}\n</code></pre></p> </li> <li> <p>String Karakter Say\u0131m\u0131 <pre><code>public Dictionary&lt;char, int&gt; CountCharacters(string str)\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/string-operations/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Strings</li> <li>String Manipulation in C#</li> <li>StringBuilder Class </li> </ul>"},{"location":"junior/csharp-basics/threading-basics/","title":"Threading Temelleri","text":""},{"location":"junior/csharp-basics/threading-basics/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Threading, bir uygulaman\u0131n ayn\u0131 anda birden fazla i\u015fi paralel olarak y\u00fcr\u00fctmesini sa\u011flayan bir programlama tekni\u011fidir. C#'ta System.Threading namespace'i alt\u0131nda bulunan s\u0131n\u0131flar kullan\u0131larak thread i\u015flemleri yap\u0131l\u0131r.</p>"},{"location":"junior/csharp-basics/threading-basics/#thread-olusturma-ve-yonetimi","title":"Thread Olu\u015fturma ve Y\u00f6netimi","text":"<ol> <li> <p>Thread Olu\u015fturma <pre><code>// Thread olu\u015fturma ve ba\u015flatma\nThread thread = new Thread(() =&gt; {\n    Console.WriteLine(\"Thread \u00e7al\u0131\u015f\u0131yor\");\n});\nthread.Start();\n\n// Thread parametreli metod\nThread thread2 = new Thread((object param) =&gt; {\n    Console.WriteLine($\"Parametre: {param}\");\n});\nthread2.Start(\"Merhaba\");\n</code></pre></p> </li> <li> <p>Thread \u00d6zellikleri <pre><code>Thread thread = new Thread(() =&gt; { });\n\n// Thread \u00f6nceli\u011fi\nthread.Priority = ThreadPriority.Highest;\n\n// Thread durumu\nbool isAlive = thread.IsAlive;\n\n// Thread ad\u0131\nthread.Name = \"WorkerThread\";\n</code></pre></p> </li> <li> <p>Thread Bekletme <pre><code>// Thread'i belirli s\u00fcre bekletme\nThread.Sleep(1000); // 1 saniye\n\n// Thread'i sonsuza kadar bekletme\nthread.Join();\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/threading-basics/#thread-senkronizasyonu","title":"Thread Senkronizasyonu","text":"<ol> <li> <p>lock Kullan\u0131m\u0131 <pre><code>private object _lock = new object();\nprivate int _counter = 0;\n\npublic void IncrementCounter()\n{\n    lock (_lock)\n    {\n        _counter++;\n    }\n}\n</code></pre></p> </li> <li> <p>Monitor Kullan\u0131m\u0131 <pre><code>private object _monitor = new object();\n\npublic void CriticalSection()\n{\n    Monitor.Enter(_monitor);\n    try\n    {\n        // Kritik kod\n    }\n    finally\n    {\n        Monitor.Exit(_monitor);\n    }\n}\n</code></pre></p> </li> <li> <p>Mutex Kullan\u0131m\u0131 <pre><code>private Mutex _mutex = new Mutex();\n\npublic void ProtectedMethod()\n{\n    _mutex.WaitOne();\n    try\n    {\n        // Korunan kod\n    }\n    finally\n    {\n        _mutex.ReleaseMutex();\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/threading-basics/#thread-pool-kullanm","title":"Thread Pool Kullan\u0131m\u0131","text":"<ol> <li> <p>ThreadPool ile \u0130\u015f Y\u00fcr\u00fctme <pre><code>ThreadPool.QueueUserWorkItem((state) =&gt; {\n    Console.WriteLine(\"ThreadPool thread'i \u00e7al\u0131\u015f\u0131yor\");\n});\n</code></pre></p> </li> <li> <p>ThreadPool \u00d6zellikleri <pre><code>// Minimum thread say\u0131s\u0131\nThreadPool.SetMinThreads(4, 4);\n\n// Maximum thread say\u0131s\u0131\nThreadPool.SetMaxThreads(16, 16);\n\n// Mevcut thread say\u0131s\u0131\nThreadPool.GetAvailableThreads(out int workerThreads, out int completionPortThreads);\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/threading-basics/#thread-guvenligi","title":"Thread G\u00fcvenli\u011fi","text":"<ol> <li> <p>Thread-Safe Koleksiyonlar <pre><code>// Concurrent koleksiyonlar\nConcurrentQueue&lt;int&gt; queue = new ConcurrentQueue&lt;int&gt;();\nConcurrentStack&lt;int&gt; stack = new ConcurrentStack&lt;int&gt;();\nConcurrentDictionary&lt;string, int&gt; dictionary = new ConcurrentDictionary&lt;string, int&gt;();\n</code></pre></p> </li> <li> <p>Volatile De\u011fi\u015fkenler <pre><code>private volatile bool _isRunning = true;\n\npublic void Stop()\n{\n    _isRunning = false;\n}\n</code></pre></p> </li> <li> <p>ThreadLocal De\u011fi\u015fkenler <pre><code>private ThreadLocal&lt;int&gt; _threadLocal = new ThreadLocal&lt;int&gt;(() =&gt; 0);\n\npublic void UseThreadLocal()\n{\n    _threadLocal.Value = 42;\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/threading-basics/#thread-iletisimi","title":"Thread \u0130leti\u015fimi","text":"<ol> <li> <p>AutoResetEvent Kullan\u0131m\u0131 <pre><code>private AutoResetEvent _event = new AutoResetEvent(false);\n\npublic void SignalThread()\n{\n    _event.Set();\n}\n\npublic void WaitForSignal()\n{\n    _event.WaitOne();\n}\n</code></pre></p> </li> <li> <p>ManualResetEvent Kullan\u0131m\u0131 <pre><code>private ManualResetEvent _event = new ManualResetEvent(false);\n\npublic void SignalAllThreads()\n{\n    _event.Set();\n}\n\npublic void ResetSignal()\n{\n    _event.Reset();\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/threading-basics/#thread-iptali","title":"Thread \u0130ptali","text":"<ol> <li>CancellationToken Kullan\u0131m\u0131 <pre><code>private CancellationTokenSource _cts = new CancellationTokenSource();\n\npublic void StartOperation()\n{\n    Task.Run(() =&gt; {\n        while (!_cts.Token.IsCancellationRequested)\n        {\n            // \u0130\u015flem\n        }\n    }, _cts.Token);\n}\n\npublic void CancelOperation()\n{\n    _cts.Cancel();\n}\n</code></pre></li> </ol>"},{"location":"junior/csharp-basics/threading-basics/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Thread Temelleri</li> <li>Thread nedir ve ne i\u015fe yarar?</li> <li>Process ve Thread aras\u0131ndaki farklar nelerdir?</li> <li> <p>Thread olu\u015fturman\u0131n maliyeti nedir?</p> </li> <li> <p>Thread Senkronizasyonu</p> </li> <li>Race condition nedir ve nas\u0131l \u00f6nlenir?</li> <li>Deadlock nedir ve nas\u0131l \u00f6nlenir?</li> <li> <p>lock, Monitor ve Mutex aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Thread Pool</p> </li> <li>ThreadPool nedir ve ne zaman kullan\u0131l\u0131r?</li> <li>ThreadPool'un avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</li> <li> <p>ThreadPool thread'leri nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Thread G\u00fcvenli\u011fi</p> </li> <li>Thread-safe kod nedir?</li> <li>Volatile anahtar kelimesi ne i\u015fe yarar?</li> <li> <p>ThreadLocal nedir ve ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Thread \u0130leti\u015fimi</p> </li> <li>Thread'ler aras\u0131 ileti\u015fim nas\u0131l sa\u011flan\u0131r?</li> <li>AutoResetEvent ve ManualResetEvent aras\u0131ndaki farklar nelerdir?</li> <li> <p>Thread'ler aras\u0131 veri payla\u015f\u0131m\u0131 nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Thread \u0130ptali</p> </li> <li>Thread iptali nas\u0131l yap\u0131l\u0131r?</li> <li>CancellationToken nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Thread iptalinde dikkat edilmesi gerekenler nelerdir?</p> </li> <li> <p>Performans</p> </li> <li>Thread say\u0131s\u0131 nas\u0131l belirlenir?</li> <li>Thread'lerde performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Thread context switching nedir?</p> </li> <li> <p>Hata Y\u00f6netimi</p> </li> <li>Thread'lerde exception handling nas\u0131l yap\u0131l\u0131r?</li> <li>Unhandled exception'lar nas\u0131l yakalan\u0131r?</li> <li> <p>Thread'lerde hata raporlama nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Resource Y\u00f6netimi</p> </li> <li>Thread'lerde resource leak nas\u0131l \u00f6nlenir?</li> <li>Thread'lerde memory kullan\u0131m\u0131 nas\u0131l y\u00f6netilir?</li> <li> <p>Thread'lerde file handle'lar\u0131 nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Best Practices</p> <ul> <li>Thread kullan\u0131m\u0131nda best practices nelerdir?</li> <li>Thread senkronizasyonunda dikkat edilmesi gerekenler nelerdir?</li> <li>Thread g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/threading-basics/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Thread-Safe Counter <pre><code>public class ThreadSafeCounter\n{\n    private int _count = 0;\n\n    public void Increment()\n    {\n        // Implementasyon\n    }\n\n    public int GetCount()\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Producer-Consumer Pattern <pre><code>public class ProducerConsumer\n{\n    private Queue&lt;int&gt; _queue = new Queue&lt;int&gt;();\n\n    public void Start()\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Thread Pool Manager <pre><code>public class ThreadPoolManager\n{\n    public void ExecuteTask(Action task)\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Thread \u0130ptal Mekanizmas\u0131 <pre><code>public class CancellableOperation\n{\n    public void Start(CancellationToken token)\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Thread Senkronizasyonu <pre><code>public class SynchronizedResource\n{\n    private object _resource;\n\n    public void AccessResource()\n    {\n        // Implementasyon\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/threading-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Threading</li> <li>Thread Class</li> <li>ThreadPool Class </li> </ul>"},{"location":"junior/csharp-basics/value-reference-types/","title":"Value ve Reference Types","text":""},{"location":"junior/csharp-basics/value-reference-types/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>C#'ta veri tipleri iki ana kategoriye ayr\u0131l\u0131r: Value Types (De\u011fer Tipleri) ve Reference Types (Referans Tipleri). Bu ayr\u0131m, verilerin bellekte nas\u0131l sakland\u0131\u011f\u0131n\u0131 ve i\u015flendi\u011fini belirler.</p>"},{"location":"junior/csharp-basics/value-reference-types/#value-types-deger-tipleri","title":"Value Types (De\u011fer Tipleri)","text":"<ol> <li> <p>Temel Value Types <pre><code>// Say\u0131sal tipler\nint number = 42;\ndouble pi = 3.14;\ndecimal price = 99.99m;\n\n// Karakter ve boolean\nchar letter = 'A';\nbool isTrue = true;\n\n// Struct'lar\nDateTime date = DateTime.Now;\nTimeSpan duration = TimeSpan.FromHours(1);\n</code></pre></p> </li> <li> <p>Struct Tan\u0131mlama <pre><code>public struct Point\n{\n    public int X { get; set; }\n    public int Y { get; set; }\n\n    public Point(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n}\n\n// Kullan\u0131m\u0131\nPoint p1 = new Point(10, 20);\nPoint p2 = p1; // De\u011fer kopyalan\u0131r\np2.X = 30; // p1 etkilenmez\n</code></pre></p> </li> <li> <p>Enum Tan\u0131mlama <pre><code>public enum DayOfWeek\n{\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday,\n    Sunday\n}\n\n// Kullan\u0131m\u0131\nDayOfWeek today = DayOfWeek.Monday;\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/value-reference-types/#reference-types-referans-tipleri","title":"Reference Types (Referans Tipleri)","text":"<ol> <li> <p>Temel Reference Types <pre><code>// String\nstring name = \"Ahmet\";\n\n// Array\nint[] numbers = new int[] { 1, 2, 3 };\n\n// Class\nPerson person = new Person { Name = \"Mehmet\" };\n</code></pre></p> </li> <li> <p>Class Tan\u0131mlama <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n}\n\n// Kullan\u0131m\u0131\nPerson p1 = new Person(\"Ahmet\", 30);\nPerson p2 = p1; // Referans kopyalan\u0131r\np2.Name = \"Mehmet\"; // p1 de etkilenir\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/value-reference-types/#value-vs-reference-types-karslastrmas","title":"Value vs Reference Types Kar\u015f\u0131la\u015ft\u0131rmas\u0131","text":"<ol> <li> <p>Bellek Y\u00f6netimi <pre><code>// Value Type - Stack'te saklan\u0131r\nint x = 10;\nint y = x; // De\u011fer kopyalan\u0131r\n\n// Reference Type - Heap'te saklan\u0131r\nPerson p1 = new Person();\nPerson p2 = p1; // Referans kopyalan\u0131r\n</code></pre></p> </li> <li> <p>Null De\u011fer <pre><code>// Value Type - Varsay\u0131lan de\u011fer\nint number = default; // 0\n\n// Reference Type - null\nPerson person = default; // null\n</code></pre></p> </li> <li> <p>Boxing/Unboxing <pre><code>// Value Type -&gt; Object (Boxing)\nint number = 42;\nobject boxed = number;\n\n// Object -&gt; Value Type (Unboxing)\nint unboxed = (int)boxed;\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/value-reference-types/#value-ve-reference-types-kullanm-ornekleri","title":"Value ve Reference Types Kullan\u0131m \u00d6rnekleri","text":"<ol> <li> <p>Method Parametreleri <pre><code>// Value Type - De\u011fer kopyalan\u0131r\nvoid ModifyValue(int x)\n{\n    x = 10; // Orijinal de\u011fer etkilenmez\n}\n\n// Reference Type - Referans kopyalan\u0131r\nvoid ModifyReference(Person p)\n{\n    p.Name = \"Yeni \u0130sim\"; // Orijinal nesne etkilenir\n}\n</code></pre></p> </li> <li> <p>Return De\u011ferleri <pre><code>// Value Type - Yeni kopya d\u00f6ner\nint GetValue()\n{\n    int x = 42;\n    return x; // Yeni kopya\n}\n\n// Reference Type - Ayn\u0131 referans d\u00f6ner\nPerson GetPerson()\n{\n    Person p = new Person();\n    return p; // Ayn\u0131 referans\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/value-reference-types/#value-ve-reference-types-best-practices","title":"Value ve Reference Types Best Practices","text":"<ol> <li> <p>Struct vs Class Se\u00e7imi <pre><code>// Struct kullan\u0131m\u0131 (k\u00fc\u00e7\u00fck, de\u011fi\u015fmez veriler i\u00e7in)\npublic struct Point\n{\n    public int X { get; }\n    public int Y { get; }\n}\n\n// Class kullan\u0131m\u0131 (karma\u015f\u0131k, de\u011fi\u015febilir veriler i\u00e7in)\npublic class Person\n{\n    public string Name { get; set; }\n    public List&lt;string&gt; Addresses { get; set; }\n}\n</code></pre></p> </li> <li> <p>Immutable Types <pre><code>// Immutable struct\npublic readonly struct ImmutablePoint\n{\n    public int X { get; }\n    public int Y { get; }\n\n    public ImmutablePoint(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/value-reference-types/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":"<ol> <li>Value Types Temelleri</li> <li>Value Types nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>Hangi veri tipleri value type'd\u0131r?</li> <li> <p>Value Types'\u0131n avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Reference Types Temelleri</p> </li> <li>Reference Types nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>Hangi veri tipleri reference type'd\u0131r?</li> <li> <p>Reference Types'\u0131n avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Bellek Y\u00f6netimi</p> </li> <li>Value ve Reference Types bellekte nas\u0131l saklan\u0131r?</li> <li>Stack ve Heap aras\u0131ndaki farklar nelerdir?</li> <li> <p>Garbage Collection nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Struct vs Class</p> </li> <li>Struct ve Class aras\u0131ndaki farklar nelerdir?</li> <li>Hangi durumlarda struct kullan\u0131lmal\u0131d\u0131r?</li> <li> <p>Struct kullan\u0131rken dikkat edilmesi gerekenler nelerdir?</p> </li> <li> <p>Boxing/Unboxing</p> </li> <li>Boxing ve Unboxing nedir?</li> <li>Boxing/Unboxing'in performans etkisi nedir?</li> <li> <p>Boxing/Unboxing nas\u0131l \u00f6nlenebilir?</p> </li> <li> <p>Method Parametreleri</p> </li> <li>Value ve Reference Types method parametrelerinde nas\u0131l davran\u0131r?</li> <li>ref ve out parametreleri ne i\u015fe yarar?</li> <li> <p>Parametre ge\u00e7i\u015flerinde dikkat edilmesi gerekenler nelerdir?</p> </li> <li> <p>Null Handling</p> </li> <li>Value ve Reference Types'ta null de\u011fer nas\u0131l i\u015flenir?</li> <li>Nullable value types nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Null reference exception nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Performans Konular\u0131</p> </li> <li>Value ve Reference Types'\u0131n performans etkileri nelerdir?</li> <li>Struct kullan\u0131m\u0131nda performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Garbage Collection performans\u0131 nas\u0131l optimize edilir?</p> </li> <li> <p>Thread Safety</p> </li> <li>Value ve Reference Types thread safety a\u00e7\u0131s\u0131ndan nas\u0131l davran\u0131r?</li> <li>Immutable types ne i\u015fe yarar?</li> <li> <p>Thread-safe kod yazarken dikkat edilmesi gerekenler nelerdir?</p> </li> <li> <p>Modern C# \u00d6zellikleri</p> <ul> <li>C# 7.0 ve sonras\u0131nda value types nas\u0131l geli\u015fti?</li> <li>ref struct ve readonly struct nedir?</li> <li>Modern C# \u00f6zellikleri value ve reference types'\u0131 nas\u0131l etkiler?</li> </ul> </li> </ol>"},{"location":"junior/csharp-basics/value-reference-types/#ornek-kod-sorular","title":"\u00d6rnek Kod Sorular\u0131","text":"<ol> <li> <p>Value Type Swap <pre><code>public static void Swap&lt;T&gt;(ref T a, ref T b) where T : struct\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Reference Type Clone <pre><code>public static T DeepClone&lt;T&gt;(T source) where T : class\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Immutable Builder <pre><code>public class ImmutablePersonBuilder\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Value Type Validator <pre><code>public static bool ValidateValueType&lt;T&gt;(T value) where T : struct\n{\n    // Implementasyon\n}\n</code></pre></p> </li> <li> <p>Reference Type Cache <pre><code>public class ReferenceTypeCache&lt;T&gt; where T : class\n{\n    // Implementasyon\n}\n</code></pre></p> </li> </ol>"},{"location":"junior/csharp-basics/value-reference-types/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Value Types</li> <li>Microsoft Docs - Reference Types</li> <li>Struct vs Class </li> </ul>"},{"location":"junior/database-operations/","title":"Veritaban\u0131 \u0130\u015flemleri","text":""},{"location":"junior/database-operations/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bu b\u00f6l\u00fcmde, .NET uygulamalar\u0131nda veritaban\u0131 i\u015flemlerinin nas\u0131l ger\u00e7ekle\u015ftirilece\u011fini, Entity Framework Core kullan\u0131m\u0131n\u0131 ve veritaban\u0131 y\u00f6netiminin temel prensiplerini inceleyece\u011fiz.</p>"},{"location":"junior/database-operations/#icindekiler","title":"\u0130\u00e7indekiler","text":"<ol> <li>Entity Framework Core</li> <li>LINQ</li> <li>Migrations</li> <li>Transactions</li> <li>Performance</li> </ol>"},{"location":"junior/database-operations/#ogrenme-hedefleri","title":"\u00d6\u011frenme Hedefleri","text":"<p>Bu b\u00f6l\u00fcm\u00fc tamamlad\u0131\u011f\u0131n\u0131zda: - Entity Framework Core'un temel kavramlar\u0131n\u0131 anlayacaks\u0131n\u0131z - LINQ sorgular\u0131 yazabileceksiniz - Repository Pattern'i uygulayabileceksiniz - Unit of Work pattern'ini kullanabileceksiniz - Veritaban\u0131 migration'lar\u0131n\u0131 y\u00f6netebileceksiniz</p>"},{"location":"junior/database-operations/#on-gereksinimler","title":"\u00d6n Gereksinimler","text":"<p>Bu b\u00f6l\u00fcm\u00fc takip etmek i\u00e7in: - C# programlama dili bilgisi - Temel SQL bilgisi - .NET Core temel kavramlar\u0131 - Visual Studio veya VS Code kurulumu - .NET SDK kurulumu</p>"},{"location":"junior/database-operations/#best-practices","title":"Best Practices","text":"<ol> <li>Veritaban\u0131 Tasar\u0131m\u0131</li> <li>Normalizasyon kurallar\u0131</li> <li>\u0130ndeksleme stratejileri</li> <li>\u0130li\u015fki tipleri</li> <li> <p>Performans optimizasyonu</p> </li> <li> <p>Kod Organizasyonu</p> </li> <li>Repository pattern</li> <li>Unit of work</li> <li>Dependency injection</li> <li> <p>SOLID prensipleri</p> </li> <li> <p>Performans</p> </li> <li>Query optimizasyonu</li> <li>Connection pooling</li> <li>Caching stratejileri</li> <li>Batch i\u015flemler</li> </ol>"},{"location":"junior/database-operations/#ornek-proje-yaps","title":"\u00d6rnek Proje Yap\u0131s\u0131","text":"<pre><code>DatabaseOperations/\n\u251c\u2500\u2500 Data/\n\u2502   \u251c\u2500\u2500 Context/\n\u2502   \u2502   \u2514\u2500\u2500 ApplicationDbContext.cs\n\u2502   \u251c\u2500\u2500 Entities/\n\u2502   \u2502   \u251c\u2500\u2500 Product.cs\n\u2502   \u2502   \u2514\u2500\u2500 Category.cs\n\u2502   \u2514\u2500\u2500 Repositories/\n\u2502       \u251c\u2500\u2500 IRepository.cs\n\u2502       \u2514\u2500\u2500 Repository.cs\n\u251c\u2500\u2500 Services/\n\u2502   \u251c\u2500\u2500 IProductService.cs\n\u2502   \u2514\u2500\u2500 ProductService.cs\n\u2514\u2500\u2500 Migrations/\n    \u2514\u2500\u2500 InitialCreate.cs\n</code></pre>"},{"location":"junior/database-operations/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":"<ol> <li>Entity Framework Core nedir ve neden kullan\u0131l\u0131r?</li> <li>ORM (Object-Relational Mapping) arac\u0131</li> <li>Veritaban\u0131 i\u015flemlerini kolayla\u015ft\u0131r\u0131r</li> <li>LINQ deste\u011fi</li> <li> <p>Cross-platform \u00e7al\u0131\u015fabilme</p> </li> <li> <p>Repository Pattern neden \u00f6nemlidir?</p> </li> <li>Veritaban\u0131 eri\u015fimini soyutlar</li> <li>Test edilebilirli\u011fi art\u0131r\u0131r</li> <li>Kod tekrar\u0131n\u0131 \u00f6nler</li> <li> <p>Bak\u0131m\u0131 kolayla\u015ft\u0131r\u0131r</p> </li> <li> <p>LINQ nedir ve nas\u0131l kullan\u0131l\u0131r?</p> </li> <li>Language Integrated Query</li> <li>Veri sorgulama ve manip\u00fclasyonu</li> <li>Lambda expressions</li> <li>Extension methods</li> </ol>"},{"location":"junior/database-operations/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Entity Framework Core Dok\u00fcmantasyonu</li> <li>LINQ Dok\u00fcmantasyonu</li> <li>Repository Pattern </li> </ul>"},{"location":"junior/database-operations/entity-framework-core/","title":"Entity Framework Core","text":""},{"location":"junior/database-operations/entity-framework-core/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Entity Framework Core (EF Core), .NET uygulamalar\u0131nda veritaban\u0131 i\u015flemlerini ger\u00e7ekle\u015ftirmek i\u00e7in kullan\u0131lan bir Object-Relational Mapping (ORM) arac\u0131d\u0131r. Veritaban\u0131 i\u015flemlerini nesne y\u00f6nelimli bir yakla\u015f\u0131mla ger\u00e7ekle\u015ftirmeyi sa\u011flar.</p>"},{"location":"junior/database-operations/entity-framework-core/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/database-operations/entity-framework-core/#1-entity-framework-core-nedir-ve-neden-kullanlr","title":"1. Entity Framework Core nedir ve neden kullan\u0131l\u0131r?","text":"<p>Cevap: Entity Framework Core, veritaban\u0131 i\u015flemlerini nesne y\u00f6nelimli bir yakla\u015f\u0131mla ger\u00e7ekle\u015ftirmeyi sa\u011flayan bir ORM arac\u0131d\u0131r. Kullan\u0131m nedenleri: - Veritaban\u0131 i\u015flemlerini kolayla\u015ft\u0131r\u0131r - LINQ deste\u011fi sunar - Cross-platform \u00e7al\u0131\u015fabilir - Code First yakla\u015f\u0131m\u0131n\u0131 destekler</p> <p>\u00d6rnek Kod: <pre><code>public class ApplicationDbContext : DbContext\n{\n    public ApplicationDbContext(DbContextOptions&lt;ApplicationDbContext&gt; options)\n        : base(options)\n    {\n    }\n\n    public DbSet&lt;Product&gt; Products { get; set; }\n    public DbSet&lt;Category&gt; Categories { get; set; }\n}\n\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public int CategoryId { get; set; }\n    public Category Category { get; set; }\n}\n</code></pre></p>"},{"location":"junior/database-operations/entity-framework-core/#2-dbcontext-ve-dbset-nedir","title":"2. DbContext ve DbSet nedir?","text":"<p>Cevap: DbContext: - Veritaban\u0131 ba\u011flant\u0131s\u0131n\u0131 y\u00f6netir - Entity'lerin ya\u015fam d\u00f6ng\u00fcs\u00fcn\u00fc kontrol eder - Change tracking sa\u011flar - Transaction y\u00f6netimi yapar</p> <p>DbSet: - Entity koleksiyonlar\u0131n\u0131 temsil eder - CRUD operasyonlar\u0131n\u0131 sa\u011flar - LINQ sorgular\u0131na olanak tan\u0131r</p> <p>\u00d6rnek Kod: <pre><code>public class ProductService\n{\n    private readonly ApplicationDbContext _context;\n\n    public ProductService(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task&lt;List&lt;Product&gt;&gt; GetAllProducts()\n    {\n        return await _context.Products\n            .Include(p =&gt; p.Category)\n            .ToListAsync();\n    }\n\n    public async Task AddProduct(Product product)\n    {\n        _context.Products.Add(product);\n        await _context.SaveChangesAsync();\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/entity-framework-core/#3-lazy-loading-ve-eager-loading-arasndaki-farklar-nelerdir","title":"3. Lazy Loading ve Eager Loading aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Lazy Loading: - \u0130li\u015fkili veriler ihtiya\u00e7 duyuldu\u011funda y\u00fcklenir - Performans a\u00e7\u0131s\u0131ndan daha maliyetli - N+1 problemi olu\u015fturabilir - Proxies gerektirir</p> <p>Eager Loading: - \u0130li\u015fkili veriler ana sorguyla birlikte y\u00fcklenir - Daha performansl\u0131 - Include metodu ile kullan\u0131l\u0131r - Tek sorgu ile veri \u00e7eker</p> <p>\u00d6rnek Kod: <pre><code>// Lazy Loading\npublic class Product\n{\n    public virtual Category Category { get; set; }\n}\n\n// Eager Loading\nvar products = await _context.Products\n    .Include(p =&gt; p.Category)\n    .ToListAsync();\n</code></pre></p>"},{"location":"junior/database-operations/entity-framework-core/#4-change-tracking-nedir-ve-nasl-calsr","title":"4. Change Tracking nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Change Tracking: - Entity'lerdeki de\u011fi\u015fiklikleri takip eder - SaveChanges \u00e7a\u011fr\u0131ld\u0131\u011f\u0131nda de\u011fi\u015fiklikleri veritaban\u0131na yans\u0131t\u0131r - EntityState ile durumlar\u0131 y\u00f6netir - Performans optimizasyonu sa\u011flar</p> <p>\u00d6rnek Kod: <pre><code>public async Task UpdateProduct(Product product)\n{\n    var existingProduct = await _context.Products.FindAsync(product.Id);\n\n    if (existingProduct != null)\n    {\n        // Change tracking otomatik olarak de\u011fi\u015fiklikleri takip eder\n        existingProduct.Name = product.Name;\n        existingProduct.Price = product.Price;\n\n        await _context.SaveChangesAsync();\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/entity-framework-core/#5-entity-framework-coreda-performans-optimizasyonu-nasl-yaplr","title":"5. Entity Framework Core'da performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Performans optimizasyonu i\u00e7in: - Eager Loading kullan\u0131n - Select ile sadece ihtiya\u00e7 duyulan alanlar\u0131 \u00e7ekin - AsNoTracking kullan\u0131n - Batch i\u015flemleri i\u00e7in AddRange kullan\u0131n</p> <p>\u00d6rnek Kod: <pre><code>// Sadece ihtiya\u00e7 duyulan alanlar\u0131 \u00e7ekme\nvar products = await _context.Products\n    .Select(p =&gt; new { p.Id, p.Name })\n    .ToListAsync();\n\n// Change tracking'i devre d\u0131\u015f\u0131 b\u0131rakma\nvar products = await _context.Products\n    .AsNoTracking()\n    .ToListAsync();\n\n// Batch insert\nawait _context.Products.AddRangeAsync(products);\nawait _context.SaveChangesAsync();\n</code></pre></p>"},{"location":"junior/database-operations/entity-framework-core/#best-practices","title":"Best Practices","text":"<ol> <li>DbContext Y\u00f6netimi</li> <li>Scoped lifetime kullan\u0131n</li> <li>Connection pooling'i etkinle\u015ftirin</li> <li>Dispose pattern'i uygulay\u0131n</li> <li> <p>DbContext'i thread-safe kullan\u0131n</p> </li> <li> <p>Sorgu Optimizasyonu</p> </li> <li>N+1 probleminden ka\u00e7\u0131n\u0131n</li> <li>Gereksiz Include'lardan ka\u00e7\u0131n\u0131n</li> <li>Index'leri do\u011fru kullan\u0131n</li> <li> <p>Raw SQL sorgular\u0131n\u0131 dikkatli kullan\u0131n</p> </li> <li> <p>Migration Y\u00f6netimi</p> </li> <li>Migration'lar\u0131 version control'de tutun</li> <li>Seed data'y\u0131 d\u00fczenli g\u00fcncelleyin</li> <li>Rollback stratejisi belirleyin</li> <li>Production migration'lar\u0131n\u0131 test edin</li> </ol>"},{"location":"junior/database-operations/entity-framework-core/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Entity Framework Core Dok\u00fcmantasyonu</li> <li>Entity Framework Core Performance</li> <li>Entity Framework Core Best Practices </li> </ul>"},{"location":"junior/database-operations/linq/","title":"LINQ (Language Integrated Query)","text":""},{"location":"junior/database-operations/linq/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>LINQ, .NET platformunda veri sorgulama i\u015flemlerini ger\u00e7ekle\u015ftirmek i\u00e7in kullan\u0131lan bir teknolojidir. Farkl\u0131 veri kaynaklar\u0131ndan (koleksiyonlar, veritabanlar\u0131, XML vb.) veri sorgulamay\u0131 sa\u011flar.</p>"},{"location":"junior/database-operations/linq/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/database-operations/linq/#1-linq-nedir-ve-neden-kullanlr","title":"1. LINQ nedir ve neden kullan\u0131l\u0131r?","text":"<p>Cevap: LINQ, veri sorgulama i\u015flemlerini C# dilinin bir par\u00e7as\u0131 haline getiren bir teknolojidir. Kullan\u0131m nedenleri: - Tip g\u00fcvenli sorgulama - Okunabilir ve anla\u015f\u0131l\u0131r kod - Farkl\u0131 veri kaynaklar\u0131 i\u00e7in tutarl\u0131 sorgulama - Derleme zaman\u0131 hata kontrol\u00fc</p> <p>\u00d6rnek Kod: <pre><code>// Koleksiyon \u00fczerinde LINQ sorgusu\nvar numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(n =&gt; n % 2 == 0);\n\n// Veritaban\u0131 \u00fczerinde LINQ sorgusu\nvar products = await _context.Products\n    .Where(p =&gt; p.Price &gt; 100)\n    .OrderBy(p =&gt; p.Name)\n    .ToListAsync();\n</code></pre></p>"},{"location":"junior/database-operations/linq/#2-linq-metodlar-nelerdir-ve-nasl-kullanlr","title":"2. LINQ metodlar\u0131 nelerdir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Temel LINQ metodlar\u0131: - Where: Filtreleme - Select: Projeksiyon - OrderBy: S\u0131ralama - GroupBy: Gruplama - Join: Birle\u015ftirme</p> <p>\u00d6rnek Kod: <pre><code>// Where ve Select\nvar expensiveProducts = products\n    .Where(p =&gt; p.Price &gt; 1000)\n    .Select(p =&gt; new { p.Name, p.Price });\n\n// OrderBy\nvar sortedProducts = products\n    .OrderBy(p =&gt; p.Price)\n    .ThenBy(p =&gt; p.Name);\n\n// GroupBy\nvar productsByCategory = products\n    .GroupBy(p =&gt; p.Category.Name)\n    .Select(g =&gt; new { Category = g.Key, Count = g.Count() });\n\n// Join\nvar productDetails = products\n    .Join(categories,\n        p =&gt; p.CategoryId,\n        c =&gt; c.Id,\n        (p, c) =&gt; new { Product = p.Name, Category = c.Name });\n</code></pre></p>"},{"location":"junior/database-operations/linq/#3-deferred-execution-ertelenmis-calstrma-nedir","title":"3. Deferred Execution (Ertelenmi\u015f \u00c7al\u0131\u015ft\u0131rma) nedir?","text":"<p>Cevap: Deferred Execution: - Sorgu tan\u0131mland\u0131\u011f\u0131nda \u00e7al\u0131\u015ft\u0131r\u0131lmaz - Sonu\u00e7lar ihtiya\u00e7 duyuldu\u011funda \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r - Performans optimizasyonu sa\u011flar - ToList, ToArray gibi metodlar ile hemen \u00e7al\u0131\u015ft\u0131r\u0131labilir</p> <p>\u00d6rnek Kod: <pre><code>// Sorgu tan\u0131mlan\u0131r ama \u00e7al\u0131\u015ft\u0131r\u0131lmaz\nvar query = products.Where(p =&gt; p.Price &gt; 100);\n\n// Sorgu \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r\nvar result = query.ToList();\n\n// Her \u00e7a\u011fr\u0131da yeniden \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r\nforeach (var product in query)\n{\n    Console.WriteLine(product.Name);\n}\n</code></pre></p>"},{"location":"junior/database-operations/linq/#4-linq-to-sql-ve-linq-to-entities-arasndaki-farklar-nelerdir","title":"4. LINQ to SQL ve LINQ to Entities aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: LINQ to SQL: - Sadece SQL Server ile \u00e7al\u0131\u015f\u0131r - Daha basit mapping - Entity Framework'ten \u00f6nceki teknoloji - S\u0131n\u0131rl\u0131 \u00f6zellikler</p> <p>LINQ to Entities: - Farkl\u0131 veritabanlar\u0131 ile \u00e7al\u0131\u015f\u0131r - Daha geli\u015fmi\u015f mapping - Entity Framework Core ile kullan\u0131l\u0131r - Daha fazla \u00f6zellik ve esneklik</p> <p>\u00d6rnek Kod: <pre><code>// LINQ to Entities\nvar products = await _context.Products\n    .Where(p =&gt; p.Price &gt; 100)\n    .Include(p =&gt; p.Category)\n    .ToListAsync();\n\n// Stored Procedure \u00e7a\u011fr\u0131s\u0131\nvar result = await _context.Products\n    .FromSqlRaw(\"EXEC GetExpensiveProducts @minPrice\", \n        new SqlParameter(\"@minPrice\", 100))\n    .ToListAsync();\n</code></pre></p>"},{"location":"junior/database-operations/linq/#5-linq-sorgularnda-performans-optimizasyonu-nasl-yaplr","title":"5. LINQ sorgular\u0131nda performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Performans optimizasyonu i\u00e7in: - Gereksiz sorgulardan ka\u00e7\u0131n\u0131n - Select ile sadece ihtiya\u00e7 duyulan alanlar\u0131 \u00e7ekin - Index'leri do\u011fru kullan\u0131n - Asenkron metodlar\u0131 tercih edin</p> <p>\u00d6rnek Kod: <pre><code>// Performansl\u0131 sorgu\nvar products = await _context.Products\n    .Where(p =&gt; p.Price &gt; 100)\n    .Select(p =&gt; new { p.Id, p.Name, p.Price })\n    .ToListAsync();\n\n// Index kullan\u0131m\u0131\nvar products = await _context.Products\n    .Where(p =&gt; p.CategoryId == categoryId &amp;&amp; p.Price &gt; minPrice)\n    .ToListAsync();\n</code></pre></p>"},{"location":"junior/database-operations/linq/#best-practices","title":"Best Practices","text":"<ol> <li>Sorgu Optimizasyonu</li> <li>Gereksiz Include'lardan ka\u00e7\u0131n\u0131n</li> <li>Select ile projeksiyon yap\u0131n</li> <li>N+1 probleminden ka\u00e7\u0131n\u0131n</li> <li> <p>Raw SQL sorgular\u0131n\u0131 dikkatli kullan\u0131n</p> </li> <li> <p>Kod Organizasyonu</p> </li> <li>Sorgular\u0131 repository pattern ile organize edin</li> <li>Extension metodlar\u0131 kullan\u0131n</li> <li>Sorgular\u0131 tekrar kullan\u0131labilir hale getirin</li> <li> <p>Asenkron metodlar\u0131 tercih edin</p> </li> <li> <p>Hata Y\u00f6netimi</p> </li> <li>Try-catch bloklar\u0131n\u0131 kullan\u0131n</li> <li>Loglama yap\u0131n</li> <li>Validation kontrollerini ekleyin</li> <li>Timeout de\u011ferlerini ayarlay\u0131n</li> </ol>"},{"location":"junior/database-operations/linq/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>LINQ Dok\u00fcmantasyonu</li> <li>Entity Framework Core ve LINQ</li> <li>LINQ Best Practices </li> </ul>"},{"location":"junior/database-operations/migrations/","title":"Migrations","text":""},{"location":"junior/database-operations/migrations/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Migrations, Entity Framework Core'da veritaban\u0131 \u015femas\u0131n\u0131 y\u00f6netmek i\u00e7in kullan\u0131lan bir sistemdir. Veritaban\u0131 de\u011fi\u015fikliklerini kod tabanl\u0131 bir yakla\u015f\u0131mla y\u00f6netmeyi ve versiyonlamay\u0131 sa\u011flar.</p>"},{"location":"junior/database-operations/migrations/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/database-operations/migrations/#1-migration-nedir-ve-neden-kullanlr","title":"1. Migration nedir ve neden kullan\u0131l\u0131r?","text":"<p>Cevap: Migration, veritaban\u0131 \u015femas\u0131ndaki de\u011fi\u015fiklikleri kod tabanl\u0131 olarak y\u00f6netmeyi sa\u011flayan bir sistemdir. Kullan\u0131m nedenleri: - Veritaban\u0131 de\u011fi\u015fikliklerinin versiyonlanmas\u0131 - Tak\u0131m \u00e7al\u0131\u015fmas\u0131nda de\u011fi\u015fikliklerin senkronizasyonu - Geri alma (rollback) imkan\u0131 - Otomatik \u015fema g\u00fcncelleme</p> <p>\u00d6rnek Kod: <pre><code>// Migration olu\u015fturma\ndotnet ef migrations add InitialCreate\n\n// Migration uygulama\ndotnet ef database update\n\n// Migration geri alma\ndotnet ef database update PreviousMigration\n</code></pre></p>"},{"location":"junior/database-operations/migrations/#2-migration-nasl-olusturulur-ve-uygulanr","title":"2. Migration nas\u0131l olu\u015fturulur ve uygulan\u0131r?","text":"<p>Cevap: Migration olu\u015fturma ve uygulama ad\u0131mlar\u0131: 1. Entity s\u0131n\u0131flar\u0131nda de\u011fi\u015fiklik yapma 2. Migration olu\u015fturma 3. Migration'\u0131 inceleme 4. Veritaban\u0131na uygulama</p> <p>\u00d6rnek Kod: <pre><code>// Entity s\u0131n\u0131f\u0131\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n\n// Migration olu\u015fturma komutu\ndotnet ef migrations add AddProductTable\n\n// Migration dosyas\u0131\npublic partial class AddProductTable : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.CreateTable(\n            name: \"Products\",\n            columns: table =&gt; new\n            {\n                Id = table.Column&lt;int&gt;(nullable: false)\n                    .Annotation(\"SqlServer:Identity\", \"1, 1\"),\n                Name = table.Column&lt;string&gt;(nullable: false),\n                Price = table.Column&lt;decimal&gt;(nullable: false)\n            },\n            constraints: table =&gt;\n            {\n                table.PrimaryKey(\"PK_Products\", x =&gt; x.Id);\n            });\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropTable(name: \"Products\");\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/migrations/#3-migration-stratejileri-nelerdir","title":"3. Migration stratejileri nelerdir?","text":"<p>Cevap: Temel Migration stratejileri: - Code First: Entity s\u0131n\u0131flar\u0131ndan veritaban\u0131 olu\u015fturma - Database First: Veritaban\u0131ndan entity s\u0131n\u0131flar\u0131 olu\u015fturma - Hybrid: Her iki yakla\u015f\u0131m\u0131n kombinasyonu</p> <p>\u00d6rnek Kod: <pre><code>// Code First yakla\u015f\u0131m\u0131\npublic class ApplicationDbContext : DbContext\n{\n    public DbSet&lt;Product&gt; Products { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity&lt;Product&gt;()\n            .HasKey(p =&gt; p.Id);\n\n        modelBuilder.Entity&lt;Product&gt;()\n            .Property(p =&gt; p.Name)\n            .IsRequired()\n            .HasMaxLength(100);\n    }\n}\n\n// Database First yakla\u015f\u0131m\u0131\ndotnet ef dbcontext scaffold \"Server=.;Database=MyDb;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -o Models\n</code></pre></p>"},{"location":"junior/database-operations/migrations/#4-migrationlar-nasl-yonetilir","title":"4. Migration'lar nas\u0131l y\u00f6netilir?","text":"<p>Cevap: Migration y\u00f6netimi i\u00e7in: - Migration'lar\u0131 version control'de tutun - Migration'lar\u0131 isimlendirin - Migration'lar\u0131 test edin - Rollback stratejisi belirleyin</p> <p>\u00d6rnek Kod: <pre><code>// Migration listesi g\u00f6r\u00fcnt\u00fcleme\ndotnet ef migrations list\n\n// Migration silme\ndotnet ef migrations remove\n\n// Belirli bir migration'a geri d\u00f6nme\ndotnet ef database update 20240101000000_InitialCreate\n\n// T\u00fcm migration'lar\u0131 geri alma\ndotnet ef database update 0\n</code></pre></p>"},{"location":"junior/database-operations/migrations/#5-migrationlar-production-ortamnda-nasl-yonetirsiniz","title":"5. Migration'lar\u0131 production ortam\u0131nda nas\u0131l y\u00f6netirsiniz?","text":"<p>Cevap: Production ortam\u0131nda migration y\u00f6netimi i\u00e7in: - Migration'lar\u0131 script olarak olu\u015fturun - Script'leri inceleyin - Yedekleme yap\u0131n - Rollback plan\u0131 haz\u0131rlay\u0131n</p> <p>\u00d6rnek Kod: <pre><code>// Migration script olu\u015fturma\ndotnet ef migrations script -o migration.sql\n\n// Belirli migration'lar aras\u0131 script olu\u015fturma\ndotnet ef migrations script FromMigration ToMigration -o migration.sql\n\n// Idempotent script olu\u015fturma\ndotnet ef migrations script --idempotent -o migration.sql\n</code></pre></p>"},{"location":"junior/database-operations/migrations/#best-practices","title":"Best Practices","text":"<ol> <li>Migration Y\u00f6netimi</li> <li>Migration'lar\u0131 d\u00fczenli olu\u015fturun</li> <li>Migration'lar\u0131 isimlendirin</li> <li>Migration'lar\u0131 test edin</li> <li> <p>Rollback stratejisi belirleyin</p> </li> <li> <p>Veritaban\u0131 De\u011fi\u015fiklikleri</p> </li> <li>B\u00fcy\u00fck de\u011fi\u015fiklikleri par\u00e7alay\u0131n</li> <li>Veri kayb\u0131na dikkat edin</li> <li>Index'leri optimize edin</li> <li> <p>Performans etkisini de\u011ferlendirin</p> </li> <li> <p>Tak\u0131m \u00c7al\u0131\u015fmas\u0131</p> </li> <li>Migration'lar\u0131 senkronize edin</li> <li>\u00c7ak\u0131\u015fmalar\u0131 y\u00f6netin</li> <li>Code review yap\u0131n</li> <li>Deployment stratejisi belirleyin</li> </ol>"},{"location":"junior/database-operations/migrations/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Entity Framework Core Migrations</li> <li>Managing Migrations</li> <li>Applying Migrations </li> </ul>"},{"location":"junior/database-operations/performance/","title":"Performance","text":""},{"location":"junior/database-operations/performance/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Veritaban\u0131 performans\u0131, uygulaman\u0131n genel performans\u0131n\u0131 do\u011frudan etkileyen kritik bir fakt\u00f6rd\u00fcr. Entity Framework Core ve veritaban\u0131 i\u015flemlerinde performans optimizasyonu, uygulaman\u0131n \u00f6l\u00e7eklenebilirli\u011fi ve kullan\u0131c\u0131 deneyimi a\u00e7\u0131s\u0131ndan \u00f6nemlidir.</p>"},{"location":"junior/database-operations/performance/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/database-operations/performance/#1-veritaban-performansn-etkileyen-faktorler-nelerdir","title":"1. Veritaban\u0131 performans\u0131n\u0131 etkileyen fakt\u00f6rler nelerdir?","text":"<p>Cevap: Veritaban\u0131 performans\u0131n\u0131 etkileyen temel fakt\u00f6rler: - Sorgu optimizasyonu - Index kullan\u0131m\u0131 - Connection pooling - Batch i\u015flemleri - Caching stratejileri</p> <p>\u00d6rnek Kod: <pre><code>// Performansl\u0131 sorgu \u00f6rne\u011fi\npublic async Task&lt;List&lt;Product&gt;&gt; GetProductsAsync()\n{\n    return await _context.Products\n        .AsNoTracking() // Change tracking'i devre d\u0131\u015f\u0131 b\u0131rak\n        .Where(p =&gt; p.IsActive)\n        .Select(p =&gt; new Product\n        {\n            Id = p.Id,\n            Name = p.Name,\n            Price = p.Price\n        })\n        .ToListAsync();\n}\n\n// Connection pooling \u00f6rne\u011fi\nservices.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"),\n        sqlOptions =&gt;\n        {\n            sqlOptions.EnableRetryOnFailure(\n                maxRetryCount: 5,\n                maxRetryDelay: TimeSpan.FromSeconds(30),\n                errorNumbersToAdd: null);\n        }));\n</code></pre></p>"},{"location":"junior/database-operations/performance/#2-n1-problemi-nedir-ve-nasl-cozulur","title":"2. N+1 problemi nedir ve nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?","text":"<p>Cevap: N+1 problemi: - Ana sorgu sonras\u0131 her kay\u0131t i\u00e7in ek sorgu yap\u0131lmas\u0131 - Performans sorunlar\u0131na yol a\u00e7ar - Eager Loading veya Projection ile \u00e7\u00f6z\u00fcl\u00fcr</p> <p>\u00d6rnek Kod: <pre><code>// N+1 problemi\nvar orders = await _context.Orders.ToListAsync();\nforeach (var order in orders)\n{\n    // Her order i\u00e7in ayr\u0131 sorgu\n    var customer = await _context.Customers.FindAsync(order.CustomerId);\n}\n\n// Eager Loading \u00e7\u00f6z\u00fcm\u00fc\nvar orders = await _context.Orders\n    .Include(o =&gt; o.Customer)\n    .ToListAsync();\n\n// Projection \u00e7\u00f6z\u00fcm\u00fc\nvar orders = await _context.Orders\n    .Select(o =&gt; new OrderDto\n    {\n        Id = o.Id,\n        CustomerName = o.Customer.Name,\n        OrderDate = o.OrderDate\n    })\n    .ToListAsync();\n</code></pre></p>"},{"location":"junior/database-operations/performance/#3-indexler-nasl-kullanlmaldr","title":"3. Index'ler nas\u0131l kullan\u0131lmal\u0131d\u0131r?","text":"<p>Cevap: Index kullan\u0131m\u0131 i\u00e7in: - S\u0131k sorgulanan alanlara index ekleyin - Composite index'leri do\u011fru s\u0131ralay\u0131n - Gereksiz index'lerden ka\u00e7\u0131n\u0131n - Index bak\u0131m\u0131n\u0131 d\u00fczenli yap\u0131n</p> <p>\u00d6rnek Kod: <pre><code>// Index tan\u0131mlama\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Product&gt;()\n        .HasIndex(p =&gt; p.Name)\n        .IsUnique();\n\n    modelBuilder.Entity&lt;Order&gt;()\n        .HasIndex(o =&gt; new { o.CustomerId, o.OrderDate })\n        .IsClustered(false);\n}\n\n// Index kullan\u0131m\u0131\nvar products = await _context.Products\n    .Where(p =&gt; p.Name.StartsWith(\"A\"))\n    .ToListAsync();\n</code></pre></p>"},{"location":"junior/database-operations/performance/#4-batch-islemleri-nasl-optimize-edilir","title":"4. Batch i\u015flemleri nas\u0131l optimize edilir?","text":"<p>Cevap: Batch i\u015flem optimizasyonu i\u00e7in: - AddRange/UpdateRange kullan\u0131n - SaveChanges \u00e7a\u011fr\u0131lar\u0131n\u0131 azalt\u0131n - Bulk insert/update kullan\u0131n - Transaction kullan\u0131n</p> <p>\u00d6rnek Kod: <pre><code>// Batch insert\npublic async Task AddProductsAsync(List&lt;Product&gt; products)\n{\n    await _context.Products.AddRangeAsync(products);\n    await _context.SaveChangesAsync();\n}\n\n// Bulk insert\npublic async Task BulkInsertProductsAsync(List&lt;Product&gt; products)\n{\n    using (var transaction = await _context.Database.BeginTransactionAsync())\n    {\n        try\n        {\n            await _context.BulkInsertAsync(products);\n            await transaction.CommitAsync();\n        }\n        catch (Exception)\n        {\n            await transaction.RollbackAsync();\n            throw;\n        }\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/performance/#5-caching-stratejileri-nelerdir","title":"5. Caching stratejileri nelerdir?","text":"<p>Cevap: Caching stratejileri: - Memory Cache - Distributed Cache - Query Cache - Second Level Cache</p> <p>\u00d6rnek Kod: <pre><code>// Memory Cache\npublic class ProductService\n{\n    private readonly IMemoryCache _cache;\n    private readonly ApplicationDbContext _context;\n\n    public async Task&lt;List&lt;Product&gt;&gt; GetProductsAsync()\n    {\n        return await _cache.GetOrCreateAsync(\"products\", async entry =&gt;\n        {\n            entry.SlidingExpiration = TimeSpan.FromMinutes(30);\n            return await _context.Products.ToListAsync();\n        });\n    }\n}\n\n// Distributed Cache\npublic class ProductService\n{\n    private readonly IDistributedCache _cache;\n    private readonly ApplicationDbContext _context;\n\n    public async Task&lt;List&lt;Product&gt;&gt; GetProductsAsync()\n    {\n        var cachedProducts = await _cache.GetStringAsync(\"products\");\n        if (cachedProducts != null)\n        {\n            return JsonSerializer.Deserialize&lt;List&lt;Product&gt;&gt;(cachedProducts);\n        }\n\n        var products = await _context.Products.ToListAsync();\n        await _cache.SetStringAsync(\"products\", \n            JsonSerializer.Serialize(products),\n            new DistributedCacheEntryOptions\n            {\n                SlidingExpiration = TimeSpan.FromMinutes(30)\n            });\n\n        return products;\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/performance/#best-practices","title":"Best Practices","text":"<ol> <li>Sorgu Optimizasyonu</li> <li>Gereksiz Include'lardan ka\u00e7\u0131n\u0131n</li> <li>Select ile projeksiyon yap\u0131n</li> <li>AsNoTracking kullan\u0131n</li> <li> <p>Raw SQL sorgular\u0131n\u0131 dikkatli kullan\u0131n</p> </li> <li> <p>Index Y\u00f6netimi</p> </li> <li>S\u0131k sorgulanan alanlara index ekleyin</li> <li>Composite index'leri do\u011fru s\u0131ralay\u0131n</li> <li>Index bak\u0131m\u0131n\u0131 d\u00fczenli yap\u0131n</li> <li> <p>Index fragmentasyonunu kontrol edin</p> </li> <li> <p>Caching Stratejisi</p> </li> <li>Uygun cache stratejisi se\u00e7in</li> <li>Cache invalidation stratejisi belirleyin</li> <li>Cache boyutunu y\u00f6netin</li> <li>Cache hit/miss oranlar\u0131n\u0131 izleyin</li> </ol>"},{"location":"junior/database-operations/performance/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Entity Framework Core Performance</li> <li>Query Performance</li> <li>Caching in .NET </li> </ul>"},{"location":"junior/database-operations/transactions/","title":"Transactions","text":""},{"location":"junior/database-operations/transactions/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Transactions (\u0130\u015flemler), veritaban\u0131 i\u015flemlerinin atomik, tutarl\u0131, izole ve kal\u0131c\u0131 (ACID) olmas\u0131n\u0131 sa\u011flayan bir mekanizmad\u0131r. Entity Framework Core'da transaction y\u00f6netimi, veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc korumak i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"junior/database-operations/transactions/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/database-operations/transactions/#1-transaction-nedir-ve-neden-kullanlr","title":"1. Transaction nedir ve neden kullan\u0131l\u0131r?","text":"<p>Cevap: Transaction, bir grup veritaban\u0131 i\u015fleminin tek bir birim olarak \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flayan bir mekanizmad\u0131r. Kullan\u0131m nedenleri: - Veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc korumak - ACID \u00f6zelliklerini sa\u011flamak - Hata durumunda geri alma imkan\u0131 - E\u015fzamanl\u0131 i\u015flemleri y\u00f6netmek</p> <p>\u00d6rnek Kod: <pre><code>using (var transaction = await _context.Database.BeginTransactionAsync())\n{\n    try\n    {\n        // \u0130\u015flem 1\n        await _context.Products.AddAsync(product1);\n        await _context.SaveChangesAsync();\n\n        // \u0130\u015flem 2\n        await _context.Orders.AddAsync(order1);\n        await _context.SaveChangesAsync();\n\n        // \u0130\u015flem ba\u015far\u0131l\u0131, commit\n        await transaction.CommitAsync();\n    }\n    catch (Exception)\n    {\n        // Hata durumunda geri alma\n        await transaction.RollbackAsync();\n        throw;\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/transactions/#2-acid-ozellikleri-nelerdir","title":"2. ACID \u00f6zellikleri nelerdir?","text":"<p>Cevap: ACID \u00f6zellikleri: - Atomicity (Atomiklik): \u0130\u015flemlerin ya tamam\u0131 ya da hi\u00e7biri - Consistency (Tutarl\u0131l\u0131k): Veritaban\u0131 kurallar\u0131na uygunluk - Isolation (\u0130zolasyon): \u0130\u015flemlerin birbirinden ba\u011f\u0131ms\u0131z \u00e7al\u0131\u015fmas\u0131 - Durability (Kal\u0131c\u0131l\u0131k): \u0130\u015flem sonu\u00e7lar\u0131n\u0131n kal\u0131c\u0131 olmas\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Isolation level \u00f6rne\u011fi\nusing (var transaction = await _context.Database.BeginTransactionAsync(\n    System.Data.IsolationLevel.Serializable))\n{\n    try\n    {\n        var product = await _context.Products\n            .FirstOrDefaultAsync(p =&gt; p.Id == productId);\n\n        if (product != null)\n        {\n            product.Stock -= quantity;\n            await _context.SaveChangesAsync();\n        }\n\n        await transaction.CommitAsync();\n    }\n    catch (Exception)\n    {\n        await transaction.RollbackAsync();\n        throw;\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/transactions/#3-transaction-isolation-levellar-nelerdir","title":"3. Transaction isolation level'lar\u0131 nelerdir?","text":"<p>Cevap: Transaction isolation level'lar\u0131: - Read Uncommitted: En d\u00fc\u015f\u00fck izolasyon - Read Committed: Varsay\u0131lan seviye - Repeatable Read: Tekrarlanabilir okuma - Serializable: En y\u00fcksek izolasyon</p> <p>\u00d6rnek Kod: <pre><code>// Farkl\u0131 isolation level'lar\u0131\nusing (var transaction = await _context.Database.BeginTransactionAsync(\n    System.Data.IsolationLevel.ReadCommitted))\n{\n    // \u0130\u015flemler\n}\n\nusing (var transaction = await _context.Database.BeginTransactionAsync(\n    System.Data.IsolationLevel.Serializable))\n{\n    // Kritik i\u015flemler\n}\n</code></pre></p>"},{"location":"junior/database-operations/transactions/#4-transaction-scope-nedir-ve-nasl-kullanlr","title":"4. Transaction scope nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: TransactionScope: - Da\u011f\u0131t\u0131k i\u015flemleri y\u00f6netir - Otomatik transaction y\u00f6netimi sa\u011flar - Nested transaction'lar\u0131 destekler - Timeout y\u00f6netimi sunar</p> <p>\u00d6rnek Kod: <pre><code>using (var scope = new TransactionScope(\n    TransactionScopeOption.Required,\n    new TransactionOptions\n    {\n        IsolationLevel = IsolationLevel.ReadCommitted,\n        Timeout = TimeSpan.FromSeconds(30)\n    },\n    TransactionScopeAsyncFlowOption.Enabled))\n{\n    try\n    {\n        // \u0130\u015flem 1\n        await _context.Products.AddAsync(product1);\n        await _context.SaveChangesAsync();\n\n        // \u0130\u015flem 2\n        await _context.Orders.AddAsync(order1);\n        await _context.SaveChangesAsync();\n\n        scope.Complete();\n    }\n    catch (Exception)\n    {\n        // Otomatik rollback\n        throw;\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/transactions/#5-transactionlar-nasl-optimize-edersiniz","title":"5. Transaction'lar\u0131 nas\u0131l optimize edersiniz?","text":"<p>Cevap: Transaction optimizasyonu i\u00e7in: - Uygun isolation level se\u00e7in - Transaction s\u00fcresini k\u0131salt\u0131n - Deadlock'lardan ka\u00e7\u0131n\u0131n - Batch i\u015flemleri kullan\u0131n</p> <p>\u00d6rnek Kod: <pre><code>// Batch i\u015flem \u00f6rne\u011fi\nusing (var transaction = await _context.Database.BeginTransactionAsync())\n{\n    try\n    {\n        // Toplu ekleme\n        await _context.Products.AddRangeAsync(products);\n        await _context.SaveChangesAsync();\n\n        // Toplu g\u00fcncelleme\n        foreach (var product in products)\n        {\n            product.Price *= 1.1m;\n        }\n        await _context.SaveChangesAsync();\n\n        await transaction.CommitAsync();\n    }\n    catch (Exception)\n    {\n        await transaction.RollbackAsync();\n        throw;\n    }\n}\n</code></pre></p>"},{"location":"junior/database-operations/transactions/#best-practices","title":"Best Practices","text":"<ol> <li>Transaction Y\u00f6netimi</li> <li>Transaction s\u00fcresini k\u0131salt\u0131n</li> <li>Uygun isolation level se\u00e7in</li> <li>Hata y\u00f6netimini unutmay\u0131n</li> <li> <p>Timeout de\u011ferlerini ayarlay\u0131n</p> </li> <li> <p>Performans Optimizasyonu</p> </li> <li>Batch i\u015flemleri kullan\u0131n</li> <li>Deadlock'lardan ka\u00e7\u0131n\u0131n</li> <li>Index'leri optimize edin</li> <li> <p>Connection pooling kullan\u0131n</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Yetkilendirme kontrolleri yap\u0131n</li> <li>Input validasyonu yap\u0131n</li> <li>Loglama yap\u0131n</li> <li>Audit trail tutun</li> </ol>"},{"location":"junior/database-operations/transactions/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Entity Framework Core Transactions</li> <li>Transaction Isolation Levels</li> <li>TransactionScope </li> </ul>"},{"location":"junior/development-tools/","title":"Development Tools","text":""},{"location":"junior/development-tools/#giris","title":"Giri\u015f","text":"<p>Geli\u015ftirme ara\u00e7lar\u0131, .NET backend geli\u015ftiricilerinin verimlili\u011fini art\u0131ran ve kod kalitesini y\u00fckselten \u00f6nemli bile\u015fenlerdir. Bu ara\u00e7lar\u0131 etkin kullanmak, profesyonel geli\u015ftirme s\u00fcre\u00e7lerinde kritik \u00f6neme sahiptir.</p>"},{"location":"junior/development-tools/#development-tools-temel-konular","title":"Development Tools Temel Konular\u0131","text":""},{"location":"junior/development-tools/#1-visual-studio","title":"1. Visual Studio","text":"<ul> <li>IDE \u00f6zellikleri ve k\u0131sayollar</li> <li>Debugging ve profiling</li> <li>Extensions ve plugins</li> <li>Project templates</li> </ul>"},{"location":"junior/development-tools/#2-git-basics","title":"2. Git Basics","text":"<ul> <li>Version control temelleri</li> <li>Branching ve merging</li> <li>Remote repository y\u00f6netimi</li> <li>Collaboration workflows</li> </ul>"},{"location":"junior/development-tools/#3-debugging","title":"3. Debugging","text":"<ul> <li>Breakpoint kullan\u0131m\u0131</li> <li>Watch windows</li> <li>Call stack analizi</li> <li>Exception handling</li> </ul>"},{"location":"junior/development-tools/#4-unit-testing-basics","title":"4. Unit Testing Basics","text":"<ul> <li>Test framework'leri</li> <li>Test yazma prensipleri</li> <li>Test execution</li> <li>Test coverage</li> </ul>"},{"location":"junior/development-tools/#development-toolslarn-onemi","title":"Development Tools'lar\u0131n \u00d6nemi","text":"<ol> <li>Verimlilik</li> <li>Kod yazma h\u0131z\u0131n\u0131 art\u0131r\u0131r</li> <li>Otomatik tamamlama</li> <li>Refactoring ara\u00e7lar\u0131</li> <li> <p>Code snippets</p> </li> <li> <p>Kod Kalitesi</p> </li> <li>Syntax highlighting</li> <li>Error detection</li> <li>Code analysis</li> <li> <p>Best practices suggestions</p> </li> <li> <p>Debugging</p> </li> <li>Hata tespiti</li> <li>Performance analysis</li> <li>Memory profiling</li> <li> <p>Logging</p> </li> <li> <p>Collaboration</p> </li> <li>Version control</li> <li>Code review</li> <li>Team development</li> <li>Continuous integration</li> </ol>"},{"location":"junior/development-tools/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/development-tools/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Visual Studio'da en \u00e7ok kulland\u0131\u011f\u0131n\u0131z \u00f6zellikler nelerdir?</li> <li> <p>Cevap: IntelliSense, debugging, refactoring tools, NuGet package manager, solution explorer.</p> </li> <li> <p>Git'te branch nedir ve ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Branch, kodun farkl\u0131 versiyonlar\u0131n\u0131 y\u00f6netmek i\u00e7in kullan\u0131lan yap\u0131. Feature development, bug fixing i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Debugging s\u0131ras\u0131nda breakpoint nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Kod sat\u0131r\u0131na t\u0131klayarak breakpoint eklenir, program o noktada durur ve de\u011fi\u015fkenler incelenebilir.</p> </li> <li> <p>Unit test nedir ve neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Kod par\u00e7alar\u0131n\u0131n ba\u011f\u0131ms\u0131z test edilmesi. Kod kalitesi, hata tespiti ve refactoring g\u00fcvenli\u011fi i\u00e7in \u00f6nemlidir.</p> </li> <li> <p>IDE'de IntelliSense nedir?</p> </li> <li>Cevap: Kod yazarken otomatik tamamlama, method signature'lar\u0131 ve documentation g\u00f6steren \u00f6zellik.</li> </ol>"},{"location":"junior/development-tools/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Git'te merge conflict nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?</li> <li> <p>Cevap: Conflict'li dosyalar\u0131 manuel olarak d\u00fczenleme, merge tool kullanma veya conflict resolution stratejileri uygulama.</p> </li> <li> <p>Visual Studio'da performance profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Performance Profiler tool'u kullanarak CPU, memory ve I/O analizi yap\u0131l\u0131r.</p> </li> <li> <p>Debugging s\u0131ras\u0131nda watch window nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: De\u011fi\u015fkenleri izlemek i\u00e7in watch window'a ekleme, expression evaluation ve value tracking.</p> </li> <li> <p>Git'te rebase ve merge aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Merge yeni commit olu\u015fturur, rebase commit history'yi yeniden yazar ve linear history sa\u011flar.</p> </li> <li> <p>Unit test'te mocking nedir?</p> </li> <li>Cevap: Ba\u011f\u0131ml\u0131l\u0131klar\u0131 sim\u00fcle etmek i\u00e7in kullan\u0131lan teknik. Test isolation ve deterministik behavior sa\u011flar.</li> </ol>"},{"location":"junior/development-tools/#best-practices","title":"Best Practices","text":"<ol> <li>IDE Kullan\u0131m\u0131</li> <li>K\u0131sayollar\u0131 \u00f6\u011frenin</li> <li>Extensions'lar\u0131 ke\u015ffedin</li> <li>Customization yap\u0131n</li> <li> <p>Regular updates yap\u0131n</p> </li> <li> <p>Version Control</p> </li> <li>Meaningful commit messages yaz\u0131n</li> <li>Regular commits yap\u0131n</li> <li>Branch naming convention kullan\u0131n</li> <li> <p>Code review yap\u0131n</p> </li> <li> <p>Debugging</p> </li> <li>Systematic approach kullan\u0131n</li> <li>Logging ekleyin</li> <li>Performance issues'lar\u0131 izleyin</li> <li> <p>Error handling'i test edin</p> </li> <li> <p>Testing</p> </li> <li>Test-first approach benimseyin</li> <li>Meaningful test names kullan\u0131n</li> <li>Test isolation sa\u011flay\u0131n</li> <li>Regular test execution yap\u0131n</li> </ol>"},{"location":"junior/development-tools/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Visual Studio Documentation</li> <li>Git Documentation</li> <li>.NET Testing</li> <li>Visual Studio Code</li> <li>JetBrains Rider </li> </ul>"},{"location":"junior/development-tools/debugging/","title":"Debugging","text":""},{"location":"junior/development-tools/debugging/#giris","title":"Giri\u015f","text":"<p>Debugging, yaz\u0131l\u0131m geli\u015ftirmede hatalar\u0131 tespit etme ve d\u00fczeltme s\u00fcrecidir. Etkili debugging becerileri, .NET geli\u015ftiricileri i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, debugging tekniklerini, ara\u00e7lar\u0131n\u0131 ve en iyi uygulamalar\u0131n\u0131 kapsar.</p>"},{"location":"junior/development-tools/debugging/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"junior/development-tools/debugging/#1-debugging-nedir","title":"1. Debugging Nedir?","text":"<p>Debugging, uygulamalardaki hatalar\u0131 (bug) tespit etme, analiz etme ve d\u00fczeltme s\u00fcrecidir.</p> <p>Debugging T\u00fcrleri: - Runtime debugging - Static code analysis - Unit test debugging - Remote debugging - Performance debugging</p>"},{"location":"junior/development-tools/debugging/#2-common-bug-types","title":"2. Common Bug Types","text":"<pre><code>// 1. Null Reference Exception\npublic void NullReferenceExample()\n{\n    string text = null;\n    int length = text.Length; // NullReferenceException\n}\n\n// 2. Index Out of Range\npublic void IndexExample()\n{\n    int[] numbers = {1, 2, 3};\n    int value = numbers[5]; // IndexOutOfRangeException\n}\n\n// 3. Logic Error\npublic void LogicError()\n{\n    for (int i = 0; i &lt;= 10; i++) // Should be i &lt; 10\n    {\n        Console.WriteLine(i);\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#visual-studio-debugging-araclar","title":"Visual Studio Debugging Ara\u00e7lar\u0131","text":""},{"location":"junior/development-tools/debugging/#1-breakpoints","title":"1. Breakpoints","text":"<pre><code>public class BreakpointExample\n{\n    public void Calculate()\n    {\n        int a = 10;\n        int b = 20;\n        int sum = a + b; // F9: Breakpoint koy\n\n        Console.WriteLine($\"Sum: {sum}\");\n    }\n}\n</code></pre> <p>Breakpoint T\u00fcrleri: - Standard Breakpoint: F9 - Conditional Breakpoint: Sa\u011f t\u0131k \u2192 Conditions - Tracepoint: Sa\u011f t\u0131k \u2192 Actions - Function Breakpoint: Debug \u2192 New Breakpoint</p>"},{"location":"junior/development-tools/debugging/#2-debug-windows","title":"2. Debug Windows","text":"<pre><code>public void DebugWindowsExample()\n{\n    var list = new List&lt;int&gt; {1, 2, 3, 4, 5};\n    var evenNumbers = new List&lt;int&gt;();\n\n    foreach (var number in list) // Debug s\u0131ras\u0131nda\n    {\n        if (number % 2 == 0)     // Watch: number, list.Count\n        {\n            evenNumbers.Add(number); // Locals window'da de\u011fi\u015fkenleri g\u00f6r\n        }\n    }\n\n    Console.WriteLine($\"Even count: {evenNumbers.Count}\"); // Immediate: evenNumbers.Count\n}\n</code></pre> <p>Debug Windows: - Locals: Mevcut scope'daki de\u011fi\u015fkenler - Watch: Belirli de\u011fi\u015fkenleri izleme - Call Stack: Method \u00e7a\u011fr\u0131 zinciri - Immediate: Debug s\u0131ras\u0131nda kod \u00e7al\u0131\u015ft\u0131rma - Output: Debug \u00e7\u0131kt\u0131lar\u0131</p>"},{"location":"junior/development-tools/debugging/#3-debug-navigation","title":"3. Debug Navigation","text":"<pre><code>public class NavigationExample\n{\n    public void MainMethod()\n    {\n        int result = CalculateSum(10, 20); // F10: Step Over\n        ProcessResult(result);             // F11: Step Into\n    }\n\n    private int CalculateSum(int a, int b)\n    {\n        return a + b; // Shift+F11: Step Out\n    }\n\n    private void ProcessResult(int result)\n    {\n        Console.WriteLine($\"Result: {result}\");\n    }\n}\n</code></pre> <p>Navigation Komutlar\u0131: - F5: Continue - F10: Step Over - F11: Step Into - Shift+F11: Step Out - Ctrl+F10: Run to Cursor</p>"},{"location":"junior/development-tools/debugging/#debugging-teknikleri","title":"Debugging Teknikleri","text":""},{"location":"junior/development-tools/debugging/#1-console-debugging","title":"1. Console Debugging","text":"<pre><code>public class ConsoleDebugging\n{\n    public void ProcessData(List&lt;string&gt; data)\n    {\n        Console.WriteLine($\"Processing {data.Count} items\"); // Debug bilgisi\n\n        for (int i = 0; i &lt; data.Count; i++)\n        {\n            Console.WriteLine($\"Processing item {i}: {data[i]}\"); // \u0130terasyon bilgisi\n\n            try\n            {\n                var processed = ProcessItem(data[i]);\n                Console.WriteLine($\"Processed: {processed}\"); // Sonu\u00e7 bilgisi\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error processing item {i}: {ex.Message}\"); // Hata bilgisi\n            }\n        }\n\n        Console.WriteLine(\"Processing completed\"); // Tamamlanma bilgisi\n    }\n\n    private string ProcessItem(string item)\n    {\n        return item.ToUpper();\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#2-logging-ile-debugging","title":"2. Logging ile Debugging","text":"<pre><code>using Microsoft.Extensions.Logging;\n\npublic class LoggingDebugging\n{\n    private readonly ILogger&lt;LoggingDebugging&gt; _logger;\n\n    public LoggingDebugging(ILogger&lt;LoggingDebugging&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task&lt;List&lt;User&gt;&gt; GetUsersAsync()\n    {\n        _logger.LogInformation(\"Starting GetUsersAsync method\");\n\n        try\n        {\n            var users = await _userRepository.GetAllAsync();\n            _logger.LogInformation(\"Retrieved {UserCount} users\", users.Count);\n\n            var filteredUsers = users.Where(u =&gt; u.IsActive).ToList();\n            _logger.LogDebug(\"Filtered to {ActiveUserCount} active users\", filteredUsers.Count);\n\n            return filteredUsers;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error occurred while getting users\");\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#3-debug-attributes","title":"3. Debug Attributes","text":"<pre><code>using System.Diagnostics;\n\npublic class DebugAttributeExample\n{\n    [Conditional(\"DEBUG\")]\n    public void DebugMethod()\n    {\n        Console.WriteLine(\"This only runs in Debug mode\");\n    }\n\n    [DebuggerStepThrough]\n    public string SimpleProperty =&gt; \"This method will be skipped during debugging\";\n\n    [DebuggerDisplay(\"User: {Name}, Age: {Age}\")]\n    public class User\n    {\n        public string Name { get; set; }\n        public int Age { get; set; }\n    }\n\n    [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n    private string _internalField;\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#exception-handling-ve-debugging","title":"Exception Handling ve Debugging","text":""},{"location":"junior/development-tools/debugging/#1-try-catch-debugging","title":"1. Try-Catch Debugging","text":"<pre><code>public class ExceptionDebugging\n{\n    public void ProcessFile(string fileName)\n    {\n        try\n        {\n            var content = File.ReadAllText(fileName);\n            var lines = content.Split('\\n');\n\n            foreach (var line in lines)\n            {\n                ProcessLine(line); // Hata burada olabilir\n            }\n        }\n        catch (FileNotFoundException ex)\n        {\n            Console.WriteLine($\"File not found: {ex.FileName}\");\n            // Breakpoint koy ve ex.StackTrace'i incele\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            Console.WriteLine($\"Access denied: {ex.Message}\");\n            // Permission sorununu debug et\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Unexpected error: {ex.Message}\");\n            Console.WriteLine($\"Stack trace: {ex.StackTrace}\");\n            // Genel hata debugging\n        }\n    }\n\n    private void ProcessLine(string line)\n    {\n        if (string.IsNullOrEmpty(line))\n            return;\n\n        // Line processing logic\n        var parts = line.Split(',');\n\n        if (parts.Length &lt; 3)\n            throw new InvalidOperationException($\"Invalid line format: {line}\");\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#2-exception-settings","title":"2. Exception Settings","text":"<pre><code>// Debug \u2192 Windows \u2192 Exception Settings\n// Common Language Runtime Exceptions\n// - System.NullReferenceException \u2713 (Break when thrown)\n// - System.ArgumentException \u2713\n// - System.InvalidOperationException \u2713\n</code></pre>"},{"location":"junior/development-tools/debugging/#performance-debugging","title":"Performance Debugging","text":""},{"location":"junior/development-tools/debugging/#1-diagnostic-tools","title":"1. Diagnostic Tools","text":"<pre><code>using System.Diagnostics;\n\npublic class PerformanceDebugging\n{\n    public void MeasurePerformance()\n    {\n        var stopwatch = Stopwatch.StartNew();\n\n        // CPU-intensive operation\n        var result = CalculateComplexOperation();\n\n        stopwatch.Stop();\n        Console.WriteLine($\"Operation took: {stopwatch.ElapsedMilliseconds}ms\");\n\n        // Memory usage\n        var memoryBefore = GC.GetTotalMemory(false);\n        CreateLargeObject();\n        var memoryAfter = GC.GetTotalMemory(false);\n\n        Console.WriteLine($\"Memory used: {memoryAfter - memoryBefore} bytes\");\n    }\n\n    private int CalculateComplexOperation()\n    {\n        // Simulate complex calculation\n        int result = 0;\n        for (int i = 0; i &lt; 1000000; i++)\n        {\n            result += i * 2;\n        }\n        return result;\n    }\n\n    private void CreateLargeObject()\n    {\n        var largeArray = new int[100000];\n        // Use array...\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#2-perfview-ve-dottrace","title":"2. PerfView ve dotTrace","text":"<pre><code>// Performance profiling i\u00e7in external tools\n// - PerfView (Microsoft)\n// - dotTrace (JetBrains)\n// - Application Insights\n// - MiniProfiler\n</code></pre>"},{"location":"junior/development-tools/debugging/#remote-debugging","title":"Remote Debugging","text":""},{"location":"junior/development-tools/debugging/#1-remote-debugging-setup","title":"1. Remote Debugging Setup","text":"<pre><code>&lt;!-- appsettings.json --&gt;\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Debug\",\n      \"Microsoft\": \"Warning\"\n    }\n  }\n}\n</code></pre> <pre><code>// Program.cs\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        #if DEBUG\n        // Wait for debugger attachment\n        if (args.Contains(\"--wait-for-debugger\"))\n        {\n            while (!Debugger.IsAttached)\n            {\n                Thread.Sleep(100);\n            }\n        }\n        #endif\n\n        CreateHostBuilder(args).Build().Run();\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#debugging-best-practices","title":"Debugging Best Practices","text":""},{"location":"junior/development-tools/debugging/#1-systematic-approach","title":"1. Systematic Approach","text":"<pre><code>public class DebuggingBestPractices\n{\n    // 1. Reproduce the bug consistently\n    public void ReproduceBug()\n    {\n        // Create minimal test case\n        // Document steps to reproduce\n        // Use consistent test data\n    }\n\n    // 2. Isolate the problem\n    public void IsolateProblem()\n    {\n        // Use binary search approach\n        // Comment out code sections\n        // Add debug output at key points\n    }\n\n    // 3. Use appropriate debugging tools\n    public void UseRightTools()\n    {\n        // Breakpoints for logic errors\n        // Logging for production issues\n        // Profiling for performance issues\n        // Static analysis for code quality\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#2-defensive-programming","title":"2. Defensive Programming","text":"<pre><code>public class DefensiveProgramming\n{\n    public void ProcessUser(User user)\n    {\n        // Input validation\n        if (user == null)\n            throw new ArgumentNullException(nameof(user));\n\n        if (string.IsNullOrEmpty(user.Name))\n            throw new ArgumentException(\"User name cannot be empty\", nameof(user));\n\n        // Guard clauses\n        Debug.Assert(user.Age &gt;= 0, \"User age should be non-negative\");\n\n        // Logging\n        Console.WriteLine($\"Processing user: {user.Name}\");\n\n        try\n        {\n            // Main logic\n            ProcessUserInternal(user);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error processing user {user.Name}: {ex.Message}\");\n            throw; // Re-throw for caller to handle\n        }\n    }\n\n    private void ProcessUserInternal(User user)\n    {\n        // Implementation...\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/debugging/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/development-tools/debugging/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Debugging nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Hatalar\u0131 tespit etme ve d\u00fczeltme s\u00fcreci, kod kalitesi i\u00e7in kritik.</p> </li> <li> <p>Breakpoint nedir ve nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Kodun durmas\u0131n\u0131 sa\u011flayan nokta, F9 ile eklenir/kald\u0131r\u0131l\u0131r.</p> </li> <li> <p>Step Into, Step Over ve Step Out aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Step Into method'a girer, Step Over atlar, Step Out \u00e7\u0131kar.</p> </li> <li> <p>Watch window ne i\u015fe yarar?</p> </li> <li> <p>Cevap: Belirli de\u011fi\u015fkenlerin de\u011ferlerini debug s\u0131ras\u0131nda izleme.</p> </li> <li> <p>Exception handling debugging'de nas\u0131l kullan\u0131l\u0131r?</p> </li> <li>Cevap: Try-catch bloklar\u0131 ile hatalar\u0131 yakalama ve analiz etme.</li> </ol>"},{"location":"junior/development-tools/debugging/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Conditional breakpoint nas\u0131l kurulur?</li> <li> <p>Cevap: Breakpoint'e sa\u011f t\u0131k \u2192 Conditions \u2192 ko\u015ful ekleme.</p> </li> <li> <p>Remote debugging nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Remote debugger tool ile uzak makinedeki uygulamaya ba\u011flanma.</p> </li> <li> <p>Performance debugging ara\u00e7lar\u0131 nelerdir?</p> </li> <li> <p>Cevap: Diagnostic Tools, PerfView, dotTrace, memory profilers.</p> </li> <li> <p>Debug vs Release build farklar\u0131 nelerdir?</p> </li> <li>Cevap: Debug optimizasyon yok, Release optimize edilmi\u015f.</li> </ol>"},{"location":"junior/development-tools/debugging/#best-practices","title":"Best Practices","text":""},{"location":"junior/development-tools/debugging/#1-systematic-debugging","title":"1. Systematic Debugging","text":"<ul> <li>Problemi reproduce edin</li> <li>Minimal test case olu\u015fturun</li> <li>Binary search approach kullan\u0131n</li> <li>De\u011fi\u015fiklikleri document edin</li> </ul>"},{"location":"junior/development-tools/debugging/#2-tool-usage","title":"2. Tool Usage","text":"<ul> <li>Do\u011fru debugging tool'u se\u00e7in</li> <li>Breakpoint'leri strategic yerlere koyun</li> <li>Watch expressions etkili kullan\u0131n</li> <li>Logging ile production debugging</li> </ul>"},{"location":"junior/development-tools/debugging/#3-prevention","title":"3. Prevention","text":"<ul> <li>Defensive programming yap\u0131n</li> <li>Unit test yaz\u0131n</li> <li>Code review yap\u0131n</li> <li>Static analysis kullan\u0131n</li> </ul>"},{"location":"junior/development-tools/debugging/#4-documentation","title":"4. Documentation","text":"<ul> <li>Bug report'lar\u0131 detayl\u0131 yaz\u0131n</li> <li>\u00c7\u00f6z\u00fcm s\u00fcrecini document edin</li> <li>Knowledge sharing yap\u0131n</li> <li>Pattern'leri payla\u015f\u0131n</li> </ul>"},{"location":"junior/development-tools/debugging/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Visual Studio Debugging</li> <li>.NET Debugging Guide</li> <li>Debugging Best Practices</li> <li>Exception Handling</li> <li>Performance Debugging</li> </ul>"},{"location":"junior/development-tools/git-basics/","title":"Git Basics","text":""},{"location":"junior/development-tools/git-basics/#giris","title":"Giri\u015f","text":"<p>Git, da\u011f\u0131t\u0131k versiyon kontrol sistemidir ve modern yaz\u0131l\u0131m geli\u015ftirmede vazge\u00e7ilmez bir ara\u00e7t\u0131r. Bu dosya, Git'in temel kavramlar\u0131n\u0131, komutlar\u0131n\u0131 ve en iyi uygulamalar\u0131n\u0131 kapsar.</p>"},{"location":"junior/development-tools/git-basics/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"junior/development-tools/git-basics/#1-git-nedir","title":"1. Git Nedir?","text":"<p>Git, dosyalardaki de\u011fi\u015fiklikleri takip eden, i\u015fbirli\u011fi yap\u0131lmas\u0131n\u0131 sa\u011flayan da\u011f\u0131t\u0131k versiyon kontrol sistemidir.</p> <p>Avantajlar\u0131: - Offline \u00e7al\u0131\u015fma - Branching ve merging - De\u011fi\u015fiklik ge\u00e7mi\u015fi - \u0130\u015fbirli\u011fi imkan\u0131 - Backup ve recovery</p>"},{"location":"junior/development-tools/git-basics/#2-git-terminolojisi","title":"2. Git Terminolojisi","text":"<pre><code>Repository (Repo)    : Proje klas\u00f6r\u00fc\nWorking Directory    : \u00c7al\u0131\u015fma alan\u0131\nStaging Area        : Commit \u00f6ncesi haz\u0131rl\u0131k alan\u0131\nCommit              : De\u011fi\u015fiklikleri kaydetme\nBranch              : Paralel geli\u015ftirme dal\u0131\nMerge               : Dallar\u0131 birle\u015ftirme\n</code></pre>"},{"location":"junior/development-tools/git-basics/#3-git-workflow","title":"3. Git Workflow","text":"<pre><code>Working Directory \u2192 Staging Area \u2192 Repository\n     (add)              (commit)\n</code></pre>"},{"location":"junior/development-tools/git-basics/#temel-git-komutlar","title":"Temel Git Komutlar\u0131","text":""},{"location":"junior/development-tools/git-basics/#1-repository-islemleri","title":"1. Repository \u0130\u015flemleri","text":"<pre><code># Repository olu\u015fturma\ngit init\n\n# Uzak repository'yi klonlama\ngit clone https://github.com/user/repo.git\n\n# Uzak repository ekleme\ngit remote add origin https://github.com/user/repo.git\n\n# Uzak repository'leri g\u00f6r\u00fcnt\u00fcleme\ngit remote -v\n</code></pre>"},{"location":"junior/development-tools/git-basics/#2-temel-islemler","title":"2. Temel \u0130\u015flemler","text":"<pre><code># Dosya durumunu kontrol etme\ngit status\n\n# Dosyalar\u0131 staging area'ya ekleme\ngit add filename.txt\ngit add .                # T\u00fcm dosyalar\ngit add *.cs            # Belirli uzant\u0131daki dosyalar\n\n# Commit olu\u015fturma\ngit commit -m \"Commit message\"\ngit commit -am \"Add and commit message\"  # Add + commit\n\n# De\u011fi\u015fiklik ge\u00e7mi\u015fi\ngit log\ngit log --oneline       # K\u0131sa format\ngit log --graph         # Grafik format\n</code></pre>"},{"location":"junior/development-tools/git-basics/#3-branch-islemleri","title":"3. Branch \u0130\u015flemleri","text":"<pre><code># Branch'leri listeleme\ngit branch\ngit branch -a           # Remote branch'ler dahil\n\n# Yeni branch olu\u015fturma\ngit branch feature-login\ngit checkout -b feature-login  # Olu\u015ftur ve ge\u00e7\n\n# Branch de\u011fi\u015ftirme\ngit checkout feature-login\ngit switch feature-login       # Yeni syntax\n\n# Branch silme\ngit branch -d feature-login    # Safe delete\ngit branch -D feature-login    # Force delete\n</code></pre>"},{"location":"junior/development-tools/git-basics/#4-merge-ve-rebase","title":"4. Merge ve Rebase","text":"<pre><code># Branch'i merge etme\ngit checkout main\ngit merge feature-login\n\n# Rebase i\u015flemi\ngit checkout feature-login\ngit rebase main\n\n# Merge conflict \u00e7\u00f6zme\ngit status              # Conflict'li dosyalar\u0131 g\u00f6rme\n# Dosyalar\u0131 d\u00fczenle\ngit add conflicted-file.txt\ngit commit\n</code></pre>"},{"location":"junior/development-tools/git-basics/#uzak-repository-islemleri","title":"Uzak Repository \u0130\u015flemleri","text":""},{"location":"junior/development-tools/git-basics/#1-push-ve-pull","title":"1. Push ve Pull","text":"<pre><code># Uzak repository'ye g\u00f6nderme\ngit push origin main\ngit push -u origin feature-login  # Upstream set\n\n# Uzak repository'den \u00e7ekme\ngit pull origin main\ngit pull                # Default branch\n\n# Fetch i\u015flemi\ngit fetch origin        # Download but don't merge\ngit merge origin/main   # Manual merge\n</code></pre>"},{"location":"junior/development-tools/git-basics/#2-remote-branch-islemleri","title":"2. Remote Branch \u0130\u015flemleri","text":"<pre><code># Remote branch'leri g\u00f6rme\ngit branch -r\n\n# Remote branch'i local'e getirme\ngit checkout -b feature-remote origin/feature-remote\n\n# Remote branch'i silme\ngit push origin --delete feature-remote\n</code></pre>"},{"location":"junior/development-tools/git-basics/#gitignore-dosyas","title":".gitignore Dosyas\u0131","text":""},{"location":"junior/development-tools/git-basics/#1-gitignore-ornekleri","title":"1. .gitignore \u00d6rnekleri","text":"<pre><code># .NET Core\nbin/\nobj/\n*.user\n*.suo\n.vs/\n.vscode/\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\nx64/\nx86/\n\n# NuGet packages\n*.nupkg\npackages/\n\n# User-specific files\n*.userprefs\n*.DotSettings\n\n# OS generated files\n.DS_Store\nThumbs.db\n\n# Logs\n*.log\nlogs/\n\n# Database\n*.db\n*.sqlite\n</code></pre>"},{"location":"junior/development-tools/git-basics/#2-gitignore-komutlar","title":"2. .gitignore Komutlar\u0131","text":"<pre><code># .gitignore dosyas\u0131 olu\u015fturma\ntouch .gitignore\n\n# Zaten track edilen dosyay\u0131 ignore etme\ngit rm --cached filename.txt\ngit commit -m \"Remove tracked file\"\n\n# Global .gitignore\ngit config --global core.excludesfile ~/.gitignore_global\n</code></pre>"},{"location":"junior/development-tools/git-basics/#git-configuration","title":"Git Configuration","text":""},{"location":"junior/development-tools/git-basics/#1-user-configuration","title":"1. User Configuration","text":"<pre><code># Global user ayarlar\u0131\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n# Repository-specific ayarlar\ngit config user.name \"Work Name\"\ngit config user.email \"work.email@company.com\"\n\n# Configuration g\u00f6r\u00fcnt\u00fcleme\ngit config --list\ngit config user.name\n</code></pre>"},{"location":"junior/development-tools/git-basics/#2-diger-ayarlar","title":"2. Di\u011fer Ayarlar","text":"<pre><code># Default editor\ngit config --global core.editor \"code --wait\"\n\n# Line ending ayarlar\u0131\ngit config --global core.autocrlf true    # Windows\ngit config --global core.autocrlf input   # Mac/Linux\n\n# Default branch name\ngit config --global init.defaultBranch main\n\n# Alias olu\u015fturma\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\n</code></pre>"},{"location":"junior/development-tools/git-basics/#pratik-ornekler","title":"Pratik \u00d6rnekler","text":""},{"location":"junior/development-tools/git-basics/#1-yeni-proje-baslatma","title":"1. Yeni Proje Ba\u015flatma","text":"<pre><code># Local repository olu\u015fturma\nmkdir MyProject\ncd MyProject\ngit init\n\n# \u0130lk commit\necho \"# My Project\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit\"\n\n# Remote repository ekleme\ngit remote add origin https://github.com/username/MyProject.git\ngit push -u origin main\n</code></pre>"},{"location":"junior/development-tools/git-basics/#2-feature-branch-workflow","title":"2. Feature Branch Workflow","text":"<pre><code># Ana daldan yeni branch olu\u015fturma\ngit checkout main\ngit pull origin main\ngit checkout -b feature/user-authentication\n\n# De\u011fi\u015fiklik yapma ve commit\n# ... kod yazma ...\ngit add .\ngit commit -m \"Add user authentication feature\"\n\n# Remote'a push etme\ngit push -u origin feature/user-authentication\n\n# Pull request olu\u015fturma (GitHub/GitLab'da)\n# Merge sonras\u0131 cleanup\ngit checkout main\ngit pull origin main\ngit branch -d feature/user-authentication\n</code></pre>"},{"location":"junior/development-tools/git-basics/#3-hotfix-workflow","title":"3. Hotfix Workflow","text":"<pre><code># Acil d\u00fczeltme i\u00e7in branch\ngit checkout main\ngit checkout -b hotfix/critical-bug\n\n# D\u00fczeltme yapma\n# ... bug fix ...\ngit add .\ngit commit -m \"Fix critical bug in payment process\"\n\n# Main'e merge\ngit checkout main\ngit merge hotfix/critical-bug\ngit push origin main\n\n# Cleanup\ngit branch -d hotfix/critical-bug\n</code></pre>"},{"location":"junior/development-tools/git-basics/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/development-tools/git-basics/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Git nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Da\u011f\u0131t\u0131k versiyon kontrol sistemi, kod de\u011fi\u015fikliklerini takip eder.</p> </li> <li> <p>Working Directory, Staging Area ve Repository aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Working Directory \u00e7al\u0131\u015fma alan\u0131, Staging Area commit \u00f6ncesi haz\u0131rl\u0131k, Repository kal\u0131c\u0131 depolama.</p> </li> <li> <p>git add ve git commit aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: git add staging area'ya ekler, git commit repository'ye kaydeder.</p> </li> <li> <p>Branch nedir ve neden kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Paralel geli\u015ftirme dal\u0131, feature geli\u015ftirme ve izolasyon i\u00e7in.</p> </li> <li> <p>Merge ile rebase aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: Merge dallar\u0131 birle\u015ftirir, rebase commit history'yi yeniden d\u00fczenler.</li> </ol>"},{"location":"junior/development-tools/git-basics/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Merge conflict nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?</li> <li> <p>Cevap: Conflict'li dosyalar d\u00fczenlenir, git add ile eklenir, commit yap\u0131l\u0131r.</p> </li> <li> <p>git pull ile git fetch aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: git pull fetch + merge yapar, git fetch sadece download eder.</p> </li> <li> <p>Detached HEAD state nedir?</p> </li> <li> <p>Cevap: Belirli bir commit'te olup branch'te olmama durumu.</p> </li> <li> <p>git reset ile git revert aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: reset history'yi de\u011fi\u015ftirir, revert yeni commit ile geri al\u0131r.</li> </ol>"},{"location":"junior/development-tools/git-basics/#best-practices","title":"Best Practices","text":""},{"location":"junior/development-tools/git-basics/#1-commit-messages","title":"1. Commit Messages","text":"<ul> <li>A\u00e7\u0131k ve anlaml\u0131 mesajlar yaz\u0131n</li> <li>\u0130mperatif mood kullan\u0131n (\"Add\" not \"Added\")</li> <li>50 karakter limit ba\u015fl\u0131k i\u00e7in</li> <li>Detay gerekirse bo\u015f sat\u0131r sonras\u0131 a\u00e7\u0131klama</li> </ul>"},{"location":"junior/development-tools/git-basics/#2-branching-strategy","title":"2. Branching Strategy","text":"<ul> <li>Feature branch'ler kullan\u0131n</li> <li>Meaningful branch isimleri (feature/login, bugfix/payment)</li> <li>Regular merge/rebase yap\u0131n</li> <li>Dead branch'leri temizleyin</li> </ul>"},{"location":"junior/development-tools/git-basics/#3-repository-hygiene","title":"3. Repository Hygiene","text":"<ul> <li>.gitignore dosyas\u0131n\u0131 d\u00fczg\u00fcn kullan\u0131n</li> <li>Sensitive data commit etmeyin</li> <li>Binary dosyalar\u0131 minimize edin</li> <li>Regular cleanup yap\u0131n</li> </ul>"},{"location":"junior/development-tools/git-basics/#4-collaboration","title":"4. Collaboration","text":"<ul> <li>Pull request'ler kullan\u0131n</li> <li>Code review yap\u0131n</li> <li>Conflict'leri h\u0131zl\u0131 \u00e7\u00f6z\u00fcn</li> <li>Documentation g\u00fcncel tutun</li> </ul>"},{"location":"junior/development-tools/git-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Git Official Documentation</li> <li>Pro Git Book</li> <li>GitHub Git Handbook</li> <li>Atlassian Git Tutorials</li> <li>Git Cheat Sheet</li> </ul>"},{"location":"junior/development-tools/unit-testing-basics/","title":"Unit Testing Basics","text":""},{"location":"junior/development-tools/unit-testing-basics/#giris","title":"Giri\u015f","text":"<p>Unit Testing, yaz\u0131l\u0131m geli\u015ftirmede kod kalitesini art\u0131rmak ve hatalar\u0131 erken tespit etmek i\u00e7in kullan\u0131lan temel testing yakla\u015f\u0131m\u0131d\u0131r. Bu dosya, .NET'te unit testing'in temellerini, framework'leri ve en iyi uygulamalar\u0131n\u0131 kapsar.</p>"},{"location":"junior/development-tools/unit-testing-basics/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"junior/development-tools/unit-testing-basics/#1-unit-test-nedir","title":"1. Unit Test Nedir?","text":"<p>Unit test, bir software unit'inin (method, class) izole bir \u015fekilde test edilmesidir.</p> <p>\u00d6zellikleri: - Fast (H\u0131zl\u0131) - Independent (Ba\u011f\u0131ms\u0131z) - Repeatable (Tekrarlanabilir) - Self-validating (Kendi kendini do\u011frulayan) - Timely (Zaman\u0131nda yaz\u0131lan)</p>"},{"location":"junior/development-tools/unit-testing-basics/#2-test-anatomisi","title":"2. Test Anatomisi","text":"<pre><code>[Test]\npublic void CalculateSum_WithValidNumbers_ReturnsCorrectSum()\n{\n    // Arrange (Haz\u0131rl\u0131k)\n    var calculator = new Calculator();\n    int a = 5;\n    int b = 3;\n    int expected = 8;\n\n    // Act (Eylem)\n    int actual = calculator.Add(a, b);\n\n    // Assert (Do\u011frulama)\n    Assert.AreEqual(expected, actual);\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#3-test-frameworkleri","title":"3. Test Framework'leri","text":"<ul> <li>xUnit: Modern, .NET Core i\u00e7in \u00f6nerilen</li> <li>NUnit: Pop\u00fcler, feature-rich</li> <li>MSTest: Microsoft'un framework'\u00fc</li> </ul>"},{"location":"junior/development-tools/unit-testing-basics/#xunit-ile-unit-testing","title":"xUnit ile Unit Testing","text":""},{"location":"junior/development-tools/unit-testing-basics/#1-temel-xunit-kurulumu","title":"1. Temel xUnit Kurulumu","text":"<pre><code>&lt;!-- Test project .csproj --&gt;\n&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n  &lt;PropertyGroup&gt;\n    &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;\n    &lt;IsPackable&gt;false&lt;/IsPackable&gt;\n  &lt;/PropertyGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.0.0\" /&gt;\n    &lt;PackageReference Include=\"xunit\" Version=\"2.4.1\" /&gt;\n    &lt;PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\" /&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;ProjectReference Include=\"..\\MyApp\\MyApp.csproj\" /&gt;\n  &lt;/ItemGroup&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#2-basit-test-ornekleri","title":"2. Basit Test \u00d6rnekleri","text":"<pre><code>using Xunit;\n\npublic class CalculatorTests\n{\n    [Fact]\n    public void Add_WithPositiveNumbers_ReturnsSum()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Add(2, 3);\n\n        // Assert\n        Assert.Equal(5, result);\n    }\n\n    [Theory]\n    [InlineData(1, 2, 3)]\n    [InlineData(-1, 1, 0)]\n    [InlineData(0, 0, 0)]\n    public void Add_WithVariousInputs_ReturnsCorrectSum(int a, int b, int expected)\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Add(a, b);\n\n        // Assert\n        Assert.Equal(expected, result);\n    }\n}\n\npublic class Calculator\n{\n    public int Add(int a, int b) =&gt; a + b;\n\n    public int Subtract(int a, int b) =&gt; a - b;\n\n    public int Multiply(int a, int b) =&gt; a * b;\n\n    public double Divide(int a, int b)\n    {\n        if (b == 0)\n            throw new DivideByZeroException(\"Cannot divide by zero\");\n        return (double)a / b;\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#3-exception-testing","title":"3. Exception Testing","text":"<pre><code>public class CalculatorExceptionTests\n{\n    [Fact]\n    public void Divide_ByZero_ThrowsDivideByZeroException()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act &amp; Assert\n        Assert.Throws&lt;DivideByZeroException&gt;(() =&gt; calculator.Divide(10, 0));\n    }\n\n    [Fact]\n    public void Divide_ByZero_ThrowsExceptionWithCorrectMessage()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act &amp; Assert\n        var exception = Assert.Throws&lt;DivideByZeroException&gt;(() =&gt; calculator.Divide(10, 0));\n        Assert.Equal(\"Cannot divide by zero\", exception.Message);\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#test-organization","title":"Test Organization","text":""},{"location":"junior/development-tools/unit-testing-basics/#1-test-class-organization","title":"1. Test Class Organization","text":"<pre><code>// Class under test: UserService\npublic class UserServiceTests\n{\n    private readonly UserService _userService;\n    private readonly List&lt;User&gt; _testUsers;\n\n    public UserServiceTests()\n    {\n        // Test setup\n        _userService = new UserService();\n        _testUsers = new List&lt;User&gt;\n        {\n            new User { Id = 1, Name = \"John\", Age = 25 },\n            new User { Id = 2, Name = \"Jane\", Age = 30 }\n        };\n    }\n\n    public class GetUserById\n    {\n        [Fact]\n        public void ValidId_ReturnsUser()\n        {\n            // Test implementation\n        }\n\n        [Fact]\n        public void InvalidId_ReturnsNull()\n        {\n            // Test implementation\n        }\n    }\n\n    public class CreateUser\n    {\n        [Fact]\n        public void ValidUser_ReturnsCreatedUser()\n        {\n            // Test implementation\n        }\n\n        [Fact]\n        public void NullUser_ThrowsArgumentNullException()\n        {\n            // Test implementation\n        }\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#2-test-data-management","title":"2. Test Data Management","text":"<pre><code>public class TestDataBuilder\n{\n    public static User CreateValidUser(string name = \"Test User\", int age = 25)\n    {\n        return new User\n        {\n            Id = Random.Shared.Next(1, 1000),\n            Name = name,\n            Age = age,\n            Email = $\"{name.Replace(\" \", \"\").ToLower()}@test.com\",\n            CreatedDate = DateTime.Now\n        };\n    }\n\n    public static List&lt;User&gt; CreateUserList(int count = 3)\n    {\n        var users = new List&lt;User&gt;();\n        for (int i = 0; i &lt; count; i++)\n        {\n            users.Add(CreateValidUser($\"User {i + 1}\", 20 + i));\n        }\n        return users;\n    }\n}\n\npublic class UserServiceTestsWithBuilder\n{\n    [Fact]\n    public void CreateUser_ValidUser_ReturnsUserWithId()\n    {\n        // Arrange\n        var service = new UserService();\n        var user = TestDataBuilder.CreateValidUser(\"John Doe\", 30);\n\n        // Act\n        var result = service.CreateUser(user);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.True(result.Id &gt; 0);\n        Assert.Equal(\"John Doe\", result.Name);\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#mocking-ile-testing","title":"Mocking ile Testing","text":""},{"location":"junior/development-tools/unit-testing-basics/#1-moq-framework","title":"1. Moq Framework","text":"<pre><code>&lt;PackageReference Include=\"Moq\" Version=\"4.18.0\" /&gt;\n</code></pre> <pre><code>using Moq;\n\npublic interface IUserRepository\n{\n    User GetById(int id);\n    void Save(User user);\n    List&lt;User&gt; GetAll();\n}\n\npublic class UserService\n{\n    private readonly IUserRepository _repository;\n\n    public UserService(IUserRepository repository)\n    {\n        _repository = repository;\n    }\n\n    public User GetUser(int id)\n    {\n        if (id &lt;= 0)\n            throw new ArgumentException(\"Id must be positive\", nameof(id));\n\n        return _repository.GetById(id);\n    }\n\n    public void CreateUser(User user)\n    {\n        if (user == null)\n            throw new ArgumentNullException(nameof(user));\n\n        if (string.IsNullOrEmpty(user.Name))\n            throw new ArgumentException(\"Name is required\", nameof(user));\n\n        _repository.Save(user);\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#2-mock-kullanm","title":"2. Mock Kullan\u0131m\u0131","text":"<pre><code>public class UserServiceWithMockTests\n{\n    private readonly Mock&lt;IUserRepository&gt; _mockRepository;\n    private readonly UserService _userService;\n\n    public UserServiceWithMockTests()\n    {\n        _mockRepository = new Mock&lt;IUserRepository&gt;();\n        _userService = new UserService(_mockRepository.Object);\n    }\n\n    [Fact]\n    public void GetUser_ValidId_ReturnsUser()\n    {\n        // Arrange\n        var expectedUser = new User { Id = 1, Name = \"John\" };\n        _mockRepository.Setup(r =&gt; r.GetById(1)).Returns(expectedUser);\n\n        // Act\n        var result = _userService.GetUser(1);\n\n        // Assert\n        Assert.Equal(expectedUser, result);\n        _mockRepository.Verify(r =&gt; r.GetById(1), Times.Once);\n    }\n\n    [Fact]\n    public void CreateUser_ValidUser_CallsRepositorySave()\n    {\n        // Arrange\n        var user = new User { Name = \"John\" };\n\n        // Act\n        _userService.CreateUser(user);\n\n        // Assert\n        _mockRepository.Verify(r =&gt; r.Save(user), Times.Once);\n    }\n\n    [Theory]\n    [InlineData(0)]\n    [InlineData(-1)]\n    public void GetUser_InvalidId_ThrowsArgumentException(int invalidId)\n    {\n        // Act &amp; Assert\n        Assert.Throws&lt;ArgumentException&gt;(() =&gt; _userService.GetUser(invalidId));\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#test-patterns","title":"Test Patterns","text":""},{"location":"junior/development-tools/unit-testing-basics/#1-test-fixtures","title":"1. Test Fixtures","text":"<pre><code>public class DatabaseTestFixture : IDisposable\n{\n    public string ConnectionString { get; }\n\n    public DatabaseTestFixture()\n    {\n        // Setup test database\n        ConnectionString = \"Data Source=:memory:\";\n        InitializeDatabase();\n    }\n\n    private void InitializeDatabase()\n    {\n        // Create tables, seed data\n    }\n\n    public void Dispose()\n    {\n        // Cleanup test database\n    }\n}\n\npublic class UserRepositoryTests : IClassFixture&lt;DatabaseTestFixture&gt;\n{\n    private readonly DatabaseTestFixture _fixture;\n\n    public UserRepositoryTests(DatabaseTestFixture fixture)\n    {\n        _fixture = fixture;\n    }\n\n    [Fact]\n    public void GetById_ExistingUser_ReturnsUser()\n    {\n        // Use _fixture.ConnectionString for test\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#2-parameterized-tests","title":"2. Parameterized Tests","text":"<pre><code>public class StringUtilsTests\n{\n    [Theory]\n    [InlineData(\"hello\", \"Hello\")]\n    [InlineData(\"WORLD\", \"World\")]\n    [InlineData(\"\", \"\")]\n    [InlineData(\"a\", \"A\")]\n    public void Capitalize_VariousInputs_ReturnsCapitalizedString(string input, string expected)\n    {\n        // Arrange\n        var utils = new StringUtils();\n\n        // Act\n        var result = utils.Capitalize(input);\n\n        // Assert\n        Assert.Equal(expected, result);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetTestData))]\n    public void IsValidEmail_VariousInputs_ReturnsExpectedResult(string email, bool expected)\n    {\n        // Arrange\n        var utils = new StringUtils();\n\n        // Act\n        var result = utils.IsValidEmail(email);\n\n        // Assert\n        Assert.Equal(expected, result);\n    }\n\n    public static IEnumerable&lt;object[]&gt; GetTestData()\n    {\n        yield return new object[] { \"test@example.com\", true };\n        yield return new object[] { \"invalid-email\", false };\n        yield return new object[] { \"\", false };\n        yield return new object[] { \"user@domain.co.uk\", true };\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#test-best-practices","title":"Test Best Practices","text":""},{"location":"junior/development-tools/unit-testing-basics/#1-naming-conventions","title":"1. Naming Conventions","text":"<pre><code>public class NamingConventionExamples\n{\n    // Pattern: MethodName_StateUnderTest_ExpectedBehavior\n\n    [Fact]\n    public void Add_TwoPositiveNumbers_ReturnsSum() { }\n\n    [Fact]\n    public void GetUser_NonExistentId_ReturnsNull() { }\n\n    [Fact]\n    public void ProcessPayment_InsufficientFunds_ThrowsInsufficientFundsException() { }\n\n    [Fact]\n    public void ValidateEmail_EmptyString_ReturnsFalse() { }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#2-test-independence","title":"2. Test Independence","text":"<pre><code>public class TestIndependenceExample\n{\n    // \u274c Bad: Tests depend on each other\n    private static int _counter = 0;\n\n    [Fact]\n    public void Test1_IncrementCounter_CounterIsOne()\n    {\n        _counter++; // Modifies shared state\n        Assert.Equal(1, _counter);\n    }\n\n    [Fact]\n    public void Test2_IncrementCounter_CounterIsTwo() // This will fail if Test1 doesn't run first\n    {\n        _counter++;\n        Assert.Equal(2, _counter);\n    }\n\n    // \u2705 Good: Each test is independent\n    [Fact]\n    public void Add_TwoNumbers_ReturnsSum()\n    {\n        var calculator = new Calculator(); // Fresh instance\n        var result = calculator.Add(2, 3);\n        Assert.Equal(5, result);\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/unit-testing-basics/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/development-tools/unit-testing-basics/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Unit test nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Kod birimlerinin izole testleri, erken hata tespiti ve kod kalitesi i\u00e7in kritik.</p> </li> <li> <p>Arrange, Act, Assert pattern'i nedir?</p> </li> <li> <p>Cevap: Test organize etme pattern'i: haz\u0131rl\u0131k, eylem, do\u011frulama.</p> </li> <li> <p>xUnit'te [Fact] ve [Theory] aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: [Fact] parametresiz test, [Theory] parametreli test.</p> </li> <li> <p>Mock nedir ve neden kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Dependency'leri taklit etme, izole test i\u00e7in.</p> </li> <li> <p>Test-driven development (TDD) nedir?</p> </li> <li>Cevap: \u00d6nce test yazma, sonra kod yazma yakla\u015f\u0131m\u0131.</li> </ol>"},{"location":"junior/development-tools/unit-testing-basics/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Exception testing nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: Assert.Throws kullanarak expected exception'lar\u0131 test etme.</p> </li> <li> <p>Parameterized test nas\u0131l yaz\u0131l\u0131r?</p> </li> <li> <p>Cevap: [Theory] ve [InlineData] veya [MemberData] kullanarak.</p> </li> <li> <p>Test fixture nedir ve ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Test setup/teardown i\u00e7in, IClassFixture ile.</p> </li> <li> <p>Code coverage nedir?</p> </li> <li>Cevap: Test'lerin ne kadar kod kapsad\u0131\u011f\u0131n\u0131n \u00f6l\u00e7\u00fcm\u00fc.</li> </ol>"},{"location":"junior/development-tools/unit-testing-basics/#best-practices","title":"Best Practices","text":""},{"location":"junior/development-tools/unit-testing-basics/#1-test-writing","title":"1. Test Writing","text":"<ul> <li>Clear test names kullan\u0131n</li> <li>AAA pattern uygulay\u0131n</li> <li>Test'leri independent tutun</li> <li>Bir test bir assertion</li> </ul>"},{"location":"junior/development-tools/unit-testing-basics/#2-test-organization","title":"2. Test Organization","text":"<ul> <li>Test'leri logical olarak grupland\u0131r\u0131n</li> <li>Meaningful test data kullan\u0131n</li> <li>Test helper method'lar\u0131 olu\u015fturun</li> <li>Test documentation yaz\u0131n</li> </ul>"},{"location":"junior/development-tools/unit-testing-basics/#3-mock-usage","title":"3. Mock Usage","text":"<ul> <li>Only dependencies'i mock edin</li> <li>Verify interactions gerekti\u011finde</li> <li>Setup realistic return values</li> <li>Don't over-mock</li> </ul>"},{"location":"junior/development-tools/unit-testing-basics/#4-maintenance","title":"4. Maintenance","text":"<ul> <li>Test'leri d\u00fczenli g\u00fcncelleyin</li> <li>Flaky test'leri d\u00fczeltin</li> <li>Code coverage takip edin</li> <li>Performance test'leri optimize edin</li> </ul>"},{"location":"junior/development-tools/unit-testing-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>xUnit Documentation</li> <li>Moq Documentation</li> <li>.NET Testing Guide</li> <li>Unit Testing Best Practices</li> <li>Test-Driven Development</li> </ul>"},{"location":"junior/development-tools/visual-studio/","title":"Visual Studio","text":""},{"location":"junior/development-tools/visual-studio/#giris","title":"Giri\u015f","text":"<p>Visual Studio, Microsoft taraf\u0131ndan geli\u015ftirilen kapsaml\u0131 bir entegre geli\u015ftirme ortam\u0131d\u0131r (IDE). .NET geli\u015ftiricileri i\u00e7in en yayg\u0131n kullan\u0131lan geli\u015ftirme arac\u0131d\u0131r. Bu dosya, Visual Studio'nun temel \u00f6zelliklerini, k\u0131sayollar\u0131n\u0131 ve en iyi uygulamalar\u0131n\u0131 kapsar.</p>"},{"location":"junior/development-tools/visual-studio/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"junior/development-tools/visual-studio/#1-visual-studio-nedir","title":"1. Visual Studio Nedir?","text":"<p>Visual Studio, yaz\u0131l\u0131m geli\u015ftirme s\u00fcrecinin her a\u015famas\u0131n\u0131 destekleyen kapsaml\u0131 bir IDE'dir.</p> <p>\u00d6zellikler: - IntelliSense kod tamamlama - Geli\u015fmi\u015f debugging - Git entegrasyonu - Paket y\u00f6netimi (NuGet) - Proje \u015fablonlar\u0131</p>"},{"location":"junior/development-tools/visual-studio/#2-solution-ve-project-yaps","title":"2. Solution ve Project Yap\u0131s\u0131","text":"<pre><code>Solution (.sln)\n\u251c\u2500\u2500 Project1 (.csproj)\n\u2502   \u251c\u2500\u2500 Controllers/\n\u2502   \u251c\u2500\u2500 Models/\n\u2502   \u2514\u2500\u2500 Views/\n\u2514\u2500\u2500 Project2 (.csproj)\n    \u251c\u2500\u2500 Services/\n    \u2514\u2500\u2500 Repositories/\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#3-onemli-menuler-ve-pencereler","title":"3. \u00d6nemli Men\u00fcler ve Pencereler","text":"<ul> <li>Solution Explorer: Proje dosyalar\u0131n\u0131 g\u00f6r\u00fcnt\u00fcleme</li> <li>Error List: Hatalar\u0131 ve uyar\u0131lar\u0131 g\u00f6r\u00fcnt\u00fcleme</li> <li>Output Window: Build ve debug \u00e7\u0131kt\u0131lar\u0131</li> <li>Package Manager Console: NuGet komutlar\u0131</li> <li>Server Explorer: Veritaban\u0131 ba\u011flant\u0131lar\u0131</li> </ul>"},{"location":"junior/development-tools/visual-studio/#temel-islemler","title":"Temel \u0130\u015flemler","text":""},{"location":"junior/development-tools/visual-studio/#1-proje-olusturma","title":"1. Proje Olu\u015fturma","text":"<pre><code>// File -&gt; New -&gt; Project\n// Template se\u00e7imi:\n// - Console Application\n// - ASP.NET Core Web Application\n// - Class Library\n// - Unit Test Project\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#2-nuget-paket-yonetimi","title":"2. NuGet Paket Y\u00f6netimi","text":"<pre><code>&lt;!-- Package Manager Console --&gt;\nInstall-Package EntityFramework\nUpdate-Package EntityFramework\nUninstall-Package EntityFramework\n\n&lt;!-- .csproj dosyas\u0131nda --&gt;\n&lt;PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"6.0.0\" /&gt;\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#3-debug-islemleri","title":"3. Debug \u0130\u015flemleri","text":"<pre><code>public class DebugExample\n{\n    public void CalculateSum()\n    {\n        int a = 10;\n        int b = 20;\n        int sum = a + b; // Breakpoint koyun\n\n        Console.WriteLine($\"Sum: {sum}\");\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#yararl-ksayollar","title":"Yararl\u0131 K\u0131sayollar","text":""},{"location":"junior/development-tools/visual-studio/#1-kod-duzenleme","title":"1. Kod D\u00fczenleme","text":"<pre><code>Ctrl + K, Ctrl + D    : Kodu bi\u00e7imlendirme\nCtrl + K, Ctrl + C    : Yorum sat\u0131r\u0131 yapma\nCtrl + K, Ctrl + U    : Yorum sat\u0131r\u0131n\u0131 kald\u0131rma\nCtrl + Space          : IntelliSense tetikleme\nCtrl + .              : Quick Actions ve Refactoring\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#2-navigasyon","title":"2. Navigasyon","text":"<pre><code>Ctrl + T              : Go to All (dosya, s\u0131n\u0131f, method arama)\nF12                   : Go to Definition\nCtrl + F12            : Go to Implementation\nCtrl + -              : Navigate Backward\nCtrl + Shift + -      : Navigate Forward\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#3-debug-ksayollar","title":"3. Debug K\u0131sayollar\u0131","text":"<pre><code>F5                    : Start Debugging\nCtrl + F5             : Start Without Debugging\nF9                    : Toggle Breakpoint\nF10                   : Step Over\nF11                   : Step Into\nShift + F11           : Step Out\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#4-build-ve-run","title":"4. Build ve Run","text":"<pre><code>Ctrl + Shift + B      : Build Solution\nF6                    : Build Project\nCtrl + F5             : Run Without Debugging\nF5                    : Run With Debugging\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#intellisense-ve-code-completion","title":"IntelliSense ve Code Completion","text":""},{"location":"junior/development-tools/visual-studio/#1-intellisense-ozellikleri","title":"1. IntelliSense \u00d6zellikleri","text":"<pre><code>public class IntelliSenseExample\n{\n    public void Example()\n    {\n        var list = new List&lt;string&gt;();\n        list. // IntelliSense burada devreye girer\n\n        // Parametre ipu\u00e7lar\u0131\n        string.Format() // Method imzas\u0131n\u0131 g\u00f6sterir\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#2-code-snippets","title":"2. Code Snippets","text":"<pre><code>// \"prop\" yaz\u0131p Tab tu\u015funa bas\u0131n\npublic int MyProperty { get; set; }\n\n// \"ctor\" yaz\u0131p Tab tu\u015funa bas\u0131n\npublic MyClass()\n{\n\n}\n\n// \"for\" yaz\u0131p Tab tu\u015funa bas\u0131n\nfor (int i = 0; i &lt; length; i++)\n{\n\n}\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#code-analysis-ve-refactoring","title":"Code Analysis ve Refactoring","text":""},{"location":"junior/development-tools/visual-studio/#1-code-analysis","title":"1. Code Analysis","text":"<pre><code>public class CodeAnalysisExample\n{\n    // Unused variable warning\n    public void UnusedVariable()\n    {\n        int unusedVariable = 10; // CS0219 warning\n    }\n\n    // Null reference warning\n    public void NullReference(string text)\n    {\n        var length = text.Length; // Possible null reference\n    }\n}\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#2-refactoring-islemleri","title":"2. Refactoring \u0130\u015flemleri","text":"<pre><code>// Extract Method\npublic void LongMethod()\n{\n    // Kodu se\u00e7in ve Ctrl + R, Ctrl + M\n    int a = 10;\n    int b = 20;\n    int sum = a + b;\n    Console.WriteLine($\"Sum: {sum}\");\n}\n\n// Rename\npublic void OldMethodName() // F2 ile yeniden adland\u0131r\u0131n\n{\n\n}\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#extensions-ve-customization","title":"Extensions ve Customization","text":""},{"location":"junior/development-tools/visual-studio/#1-onerilen-extensions","title":"1. \u00d6nerilen Extensions","text":"<ul> <li>ReSharper: Geli\u015fmi\u015f kod analizi</li> <li>CodeMaid: Kod temizleme</li> <li>Git Extensions: Git i\u015flemleri</li> <li>Postman: API testi</li> <li>SQLite Toolbox: SQLite veritaban\u0131 y\u00f6netimi</li> </ul>"},{"location":"junior/development-tools/visual-studio/#2-theme-ve-gorunum","title":"2. Theme ve G\u00f6r\u00fcn\u00fcm","text":"<pre><code>Tools -&gt; Options -&gt; Environment -&gt; General\n- Color theme: Dark, Light, Blue\n- Font and Colors ayarlar\u0131\n- Editor ayarlar\u0131\n</code></pre>"},{"location":"junior/development-tools/visual-studio/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/development-tools/visual-studio/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Visual Studio nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Microsoft'un IDE'si, .NET geli\u015ftirme i\u00e7in kapsaml\u0131 ara\u00e7lar sa\u011flar.</p> </li> <li> <p>Solution ve Project aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Solution birden fazla project'i gruplar, Project tek bir uygulama veya k\u00fct\u00fcphanedir.</p> </li> <li> <p>IntelliSense nedir?</p> </li> <li> <p>Cevap: Kod yazarken otomatik tamamlama ve \u00f6neri sistemi.</p> </li> <li> <p>Breakpoint nedir ve nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Debug s\u0131ras\u0131nda kodun durmas\u0131n\u0131 sa\u011flayan nokta, F9 ile eklenir.</p> </li> <li> <p>NuGet nedir?</p> </li> <li>Cevap: .NET i\u00e7in paket y\u00f6netim sistemi, k\u00fct\u00fcphaneleri y\u00f6netir.</li> </ol>"},{"location":"junior/development-tools/visual-studio/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Debug ile Release build aras\u0131ndaki fark nedir?</li> <li> <p>Cevap: Debug geli\u015ftirme i\u00e7in optimize edilmi\u015f, Release \u00fcretim i\u00e7in optimize edilmi\u015f.</p> </li> <li> <p>Code-first approach nedir?</p> </li> <li> <p>Cevap: Veritaban\u0131n\u0131 kod \u00fczerinden model s\u0131n\u0131flar\u0131 ile olu\u015fturma yakla\u015f\u0131m\u0131.</p> </li> <li> <p>Refactoring nedir ve \u00f6rnekleri?</p> </li> <li>Cevap: Kodu yeniden yap\u0131land\u0131rma, Extract Method, Rename, Move Class gibi.</li> </ol>"},{"location":"junior/development-tools/visual-studio/#best-practices","title":"Best Practices","text":""},{"location":"junior/development-tools/visual-studio/#1-proje-organizasyonu","title":"1. Proje Organizasyonu","text":"<ul> <li>Solution'da mant\u0131kl\u0131 proje gruplar\u0131 olu\u015fturun</li> <li>Naming conventions kullan\u0131n</li> <li>Folder structure'\u0131 d\u00fczenli tutun</li> </ul>"},{"location":"junior/development-tools/visual-studio/#2-kod-yazma","title":"2. Kod Yazma","text":"<ul> <li>IntelliSense'i etkin kullan\u0131n</li> <li>Code snippets kullan\u0131n</li> <li>Regular refactoring yap\u0131n</li> </ul>"},{"location":"junior/development-tools/visual-studio/#3-debug-islemleri_1","title":"3. Debug \u0130\u015flemleri","text":"<ul> <li>Meaningful breakpoint'ler koyun</li> <li>Watch window'u kullan\u0131n</li> <li>Exception handling implement edin</li> </ul>"},{"location":"junior/development-tools/visual-studio/#4-performance","title":"4. Performance","text":"<ul> <li>Large solution'larda lightweight load kullan\u0131n</li> <li>Unnecessary extensions'lar\u0131 kald\u0131r\u0131n</li> <li>Regular cleanup yap\u0131n</li> </ul>"},{"location":"junior/development-tools/visual-studio/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Visual Studio Documentation</li> <li>Visual Studio Keyboard Shortcuts</li> <li>Visual Studio Tips and Tricks</li> <li>Visual Studio Extensions</li> <li>IntelliSense Guide</li> </ul>"},{"location":"junior/interview-examples/interview-1/","title":"M\u00fclakat \u00d6rne\u011fi 1 - Temel .NET ve C# Kavramlar\u0131","text":""},{"location":"junior/interview-examples/interview-1/#1-net-framework-ve-net-core-arasndaki-temel-farklar-nelerdir","title":"1. .NET Framework ve .NET Core aras\u0131ndaki temel farklar nelerdir?","text":"<p>Cevap: .NET Framework Windows'a \u00f6zg\u00fcd\u00fcr, .NET Core \u00e7apraz platform deste\u011fi sunar. .NET Core daha mod\u00fcler, daha h\u0131zl\u0131 ve a\u00e7\u0131k kaynakl\u0131d\u0131r. Ayr\u0131ca, .NET Core container deste\u011fi ve mikroservis mimarisi i\u00e7in daha uygundur.</p>"},{"location":"junior/interview-examples/interview-1/#2-managed-ve-unmanaged-code-arasndaki-fark-nedir","title":"2. Managed ve Unmanaged code aras\u0131ndaki fark nedir?","text":"<p>Cevap: Managed code CLR taraf\u0131ndan y\u00f6netilir ve otomatik bellek y\u00f6netimi, tip g\u00fcvenli\u011fi gibi \u00f6zellikler sunar. Unmanaged code ise do\u011frudan i\u015fletim sistemi \u00fczerinde \u00e7al\u0131\u015f\u0131r ve bellek y\u00f6netimi manuel olarak yap\u0131lmal\u0131d\u0131r.</p>"},{"location":"junior/interview-examples/interview-1/#3-value-type-ve-reference-type-arasndaki-farklar-nelerdir","title":"3. Value Type ve Reference Type aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Value type'lar stack'te saklan\u0131r ve de\u011fer kopyalan\u0131r, reference type'lar heap'te saklan\u0131r ve referans kopyalan\u0131r.</p>"},{"location":"junior/interview-examples/interview-1/#4-string-immutability-nedir-neden-onemlidir","title":"4. String immutability nedir? Neden \u00f6nemlidir?","text":"<p>Cevap: String'ler de\u011fi\u015fmezdir (immutable), bu sayede thread-safe ve g\u00fcvenli string i\u015flemleri yap\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-1/#5-garbage-collection-nasl-calsr","title":"5. Garbage Collection nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: GC, kullan\u0131lmayan nesneleri otomatik olarak temizler ve bellek y\u00f6netimini sa\u011flar. 0, 1 ve 2 olmak \u00fczere \u00fc\u00e7 nesil kullan\u0131r ve her nesil farkl\u0131 s\u0131kl\u0131kta temizlenir.</p>"},{"location":"junior/interview-examples/interview-1/#6-string-ve-stringbuilder-arasndaki-farklar-nelerdir","title":"6. String ve StringBuilder aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: String immutable (de\u011fi\u015fmez) bir tiptir ve her de\u011fi\u015fiklik yeni bir string nesnesi olu\u015fturur. StringBuilder mutable (de\u011fi\u015febilir) bir tiptir ve string birle\u015ftirme i\u015flemlerinde daha performansl\u0131d\u0131r.</p>"},{"location":"junior/interview-examples/interview-1/#7-exception-handling-nasl-yaplr","title":"7. Exception Handling nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: try-catch-finally bloklar\u0131 kullan\u0131larak hata y\u00f6netimi yap\u0131l\u0131r. try blo\u011funda hata olu\u015fabilecek kod, catch blo\u011funda hata yakalama ve i\u015fleme, finally blo\u011funda ise her durumda \u00e7al\u0131\u015fmas\u0131 gereken kod yaz\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-1/#8-interface-ve-abstract-class-arasndaki-farklar-nelerdir","title":"8. Interface ve Abstract Class aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Interface sadece metod imzalar\u0131n\u0131 tan\u0131mlar ve \u00e7oklu kal\u0131t\u0131m destekler. Abstract Class hem metod imzalar\u0131n\u0131 hem de implementasyonlar\u0131 i\u00e7erebilir ve tekli kal\u0131t\u0131m destekler.</p>"},{"location":"junior/interview-examples/interview-1/#9-solid-prensipleri-nelerdir","title":"9. SOLID prensipleri nelerdir?","text":"<p>Cevap: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation ve Dependency Inversion prensiplerinden olu\u015fur. Bu prensipler, yaz\u0131l\u0131m\u0131n daha s\u00fcrd\u00fcr\u00fclebilir ve esnek olmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-1/#10-dependency-injection-nedir","title":"10. Dependency Injection nedir?","text":"<p>Cevap: Ba\u011f\u0131ml\u0131l\u0131klar\u0131n d\u0131\u015far\u0131dan enjekte edilmesi prensibidir. Bu sayede kod daha test edilebilir, esnek ve bak\u0131m\u0131 kolay hale gelir.</p>"},{"location":"junior/interview-examples/interview-1/#11-asyncawait-nedir","title":"11. Async/Await nedir?","text":"<p>Cevap: Asenkron programlama i\u00e7in kullan\u0131lan bir yap\u0131d\u0131r. Uzun s\u00fcren i\u015flemlerin thread'leri bloke etmeden yap\u0131lmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-1/#12-linq-nedir-ne-ise-yarar","title":"12. LINQ nedir? Ne i\u015fe yarar?","text":"<p>Cevap: Language Integrated Query, veri sorgulama ve manip\u00fclasyonu i\u00e7in kullan\u0131lan bir \u00f6zelliktir. SQL benzeri sorgu yaz\u0131m\u0131na olanak sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-1/#13-entity-framework-nedir","title":"13. Entity Framework nedir?","text":"<p>Cevap: ORM (Object-Relational Mapping) arac\u0131d\u0131r. Veritaban\u0131 i\u015flemlerini nesne y\u00f6nelimli bir \u015fekilde yapmay\u0131 sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-1/#14-rest-api-nedir","title":"14. REST API nedir?","text":"<p>Cevap: Representational State Transfer, web servisleri i\u00e7in bir mimari stildir. HTTP metodlar\u0131n\u0131 kullanarak kaynaklara eri\u015fim sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-1/#15-jwt-nedir","title":"15. JWT nedir?","text":"<p>Cevap: JSON Web Token, g\u00fcvenli bilgi al\u0131\u015fveri\u015fi i\u00e7in kullan\u0131lan bir token format\u0131d\u0131r. Authentication ve Authorization i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-1/#16-unit-test-nedir","title":"16. Unit Test nedir?","text":"<p>Cevap: Yaz\u0131l\u0131m\u0131n en k\u00fc\u00e7\u00fck birimlerinin (metod, s\u0131n\u0131f) test edilmesidir. Genellikle xUnit, NUnit gibi framework'ler kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-1/#17-boxing-ve-unboxing-nedir","title":"17. Boxing ve Unboxing nedir?","text":"<p>Cevap: Boxing value type'\u0131 reference type'a, unboxing ise reference type'\u0131 value type'a d\u00f6n\u00fc\u015ft\u00fcr\u00fcr.</p>"},{"location":"junior/interview-examples/interview-1/#18-nullable-types-nedir-nasl-kullanlr","title":"18. Nullable Types nedir? Nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Value type'lara null de\u011fer atanabilmesini sa\u011flar, ? operat\u00f6r\u00fc ile tan\u0131mlan\u0131r.</p>"},{"location":"junior/interview-examples/interview-1/#19-var-dynamic-ve-object-arasndaki-farklar-nelerdir","title":"19. var, dynamic ve object aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: var derleme zaman\u0131nda tip \u00e7\u0131kar\u0131m\u0131 yapar, dynamic \u00e7al\u0131\u015fma zaman\u0131nda tip kontrol\u00fc yapar, object ise t\u00fcm tiplerin temel s\u0131n\u0131f\u0131d\u0131r.</p>"},{"location":"junior/interview-examples/interview-1/#20-extension-methods-nedir-nasl-kullanlr","title":"20. Extension Methods nedir? Nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Mevcut tiplere yeni metodlar eklemek i\u00e7in kullan\u0131lan bir \u00f6zelliktir. static bir s\u0131n\u0131f i\u00e7inde static bir metod olarak tan\u0131mlan\u0131r ve this keyword'\u00fc ile kullan\u0131l\u0131r. </p>"},{"location":"junior/interview-examples/interview-2/","title":"M\u00fclakat \u00d6rne\u011fi 2 - ASP.NET Core ve Web Geli\u015ftirme","text":""},{"location":"junior/interview-examples/interview-2/#1-aspnet-coreda-middleware-nedir-nasl-calsr","title":"1. ASP.NET Core'da Middleware nedir? Nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Middleware, HTTP isteklerini i\u015fleyen ve yan\u0131tlayan bir pipeline bile\u015fenidir. Her middleware bir sonraki middleware'i \u00e7a\u011f\u0131rabilir veya pipeline'\u0131 sonland\u0131rabilir. Use, Map ve Run metodlar\u0131 ile kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-2/#2-dependency-injection-container-nedir-nasl-kullanlr","title":"2. Dependency Injection Container nedir? Nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Ba\u011f\u0131ml\u0131l\u0131klar\u0131n ya\u015fam d\u00f6ng\u00fcs\u00fcn\u00fc y\u00f6neten ve servisleri kaydeden bir mekanizmad\u0131r. IServiceCollection \u00fczerinden servisler kaydedilir ve IServiceProvider \u00fczerinden \u00e7\u00f6z\u00fcmlenir. Singleton, Scoped ve Transient olmak \u00fczere \u00fc\u00e7 ya\u015fam d\u00f6ng\u00fcs\u00fc vard\u0131r.</p>"},{"location":"junior/interview-examples/interview-2/#3-aspnet-coreda-authentication-ve-authorization-arasndaki-fark-nedir","title":"3. ASP.NET Core'da Authentication ve Authorization aras\u0131ndaki fark nedir?","text":"<p>Cevap: Authentication kullan\u0131c\u0131n\u0131n kimli\u011fini do\u011frulama, Authorization ise kullan\u0131c\u0131n\u0131n yetkilerini kontrol etme i\u015flemidir. Authentication kim oldu\u011funu, Authorization ne yapabilece\u011fini belirler.</p>"},{"location":"junior/interview-examples/interview-2/#4-jwt-json-web-token-nasl-calsr","title":"4. JWT (JSON Web Token) nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: JWT, kullan\u0131c\u0131 bilgilerini i\u00e7eren, imzalanm\u0131\u015f bir token'd\u0131r. Header, Payload ve Signature olmak \u00fczere \u00fc\u00e7 b\u00f6l\u00fcmden olu\u015fur. Header token tipini ve kullan\u0131lan algoritmay\u0131, Payload veriyi, Signature ise token'\u0131n do\u011frulu\u011funu kontrol etmek i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-2/#5-aspnet-coreda-cors-nedir-nasl-yaplandrlr","title":"5. ASP.NET Core'da CORS nedir? Nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?","text":"<p>Cevap: Cross-Origin Resource Sharing, farkl\u0131 domainler aras\u0131 kaynak payla\u015f\u0131m\u0131n\u0131 y\u00f6neten bir g\u00fcvenlik mekanizmas\u0131d\u0131r. Startup.cs'de ConfigureServices metodunda yap\u0131land\u0131r\u0131l\u0131r. WithOrigins, WithMethods, WithHeaders gibi metodlarla detayl\u0131 yap\u0131land\u0131rma yap\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-2/#6-aspnet-coreda-routing-nasl-calsr","title":"6. ASP.NET Core'da Routing nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Gelen HTTP isteklerini ilgili controller action'lar\u0131na y\u00f6nlendiren bir mekanizmad\u0131r. Attribute routing ve conventional routing olmak \u00fczere iki t\u00fcr\u00fc vard\u0131r. Route attribute'u ile \u00f6zel route'lar tan\u0131mlanabilir.</p>"},{"location":"junior/interview-examples/interview-2/#7-model-binding-nedir-nasl-calsr","title":"7. Model Binding nedir? Nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: HTTP isteklerindeki verileri C# nesnelerine d\u00f6n\u00fc\u015ft\u00fcren bir mekanizmad\u0131r. Form verileri, query string, route data gibi kaynaklardan veri ba\u011flama yapabilir. [FromBody], [FromQuery], [FromRoute] gibi attribute'lar ile kaynak belirtilebilir.</p>"},{"location":"junior/interview-examples/interview-2/#8-aspnet-coreda-session-ve-cookie-arasndaki-farklar-nelerdir","title":"8. ASP.NET Core'da Session ve Cookie aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Session sunucu taraf\u0131nda, Cookie ise istemci taraf\u0131nda veri saklar. Session daha g\u00fcvenli ama daha fazla kaynak kullan\u0131r. Cookie daha az kaynak kullan\u0131r ama g\u00fcvenlik a\u00e7\u0131s\u0131ndan daha risklidir.</p>"},{"location":"junior/interview-examples/interview-2/#9-aspnet-coreda-logging-nasl-yaplr","title":"9. ASP.NET Core'da Logging nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: ILogger interface'i \u00fczerinden farkl\u0131 log seviyelerinde (Information, Warning, Error vb.) loglama yap\u0131labilir. Serilog, NLog gibi \u00fc\u00e7\u00fcnc\u00fc parti k\u00fct\u00fcphaneler de kullan\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-2/#10-aspnet-coreda-configuration-nasl-yonetilir","title":"10. ASP.NET Core'da Configuration nas\u0131l y\u00f6netilir?","text":"<p>Cevap: appsettings.json, environment variables, command line arguments gibi farkl\u0131 kaynaklardan yap\u0131land\u0131rma yap\u0131labilir. IConfiguration interface'i \u00fczerinden eri\u015filebilir.</p>"},{"location":"junior/interview-examples/interview-2/#11-aspnet-coreda-response-caching-nedir","title":"11. ASP.NET Core'da Response Caching nedir?","text":"<p>Cevap: HTTP yan\u0131tlar\u0131n\u0131 \u00f6nbelle\u011fe alarak performans\u0131 art\u0131ran bir mekanizmad\u0131r. ResponseCache attribute'u ile kullan\u0131l\u0131r. Duration, Location, VaryByHeader gibi \u00f6zellikler ile yap\u0131land\u0131r\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-2/#12-aspnet-coreda-health-checks-nedir","title":"12. ASP.NET Core'da Health Checks nedir?","text":"<p>Cevap: Uygulaman\u0131n sa\u011fl\u0131k durumunu kontrol eden ve raporlayan bir mekanizmad\u0131r. UseHealthChecks middleware'i ile kullan\u0131l\u0131r. Veritaban\u0131, d\u0131\u015f servisler gibi ba\u011f\u0131ml\u0131l\u0131klar\u0131n durumunu kontrol edebilir.</p>"},{"location":"junior/interview-examples/interview-2/#13-aspnet-coreda-background-services-nedir","title":"13. ASP.NET Core'da Background Services nedir?","text":"<p>Cevap: Arka planda \u00e7al\u0131\u015fan uzun s\u00fcreli g\u00f6revleri y\u00f6netmek i\u00e7in kullan\u0131lan servislerdir. IHostedService interface'ini implemente eder. HostedService s\u0131n\u0131f\u0131ndan kal\u0131t\u0131m alarak kullan\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-2/#14-aspnet-coreda-signalr-nedir","title":"14. ASP.NET Core'da SignalR nedir?","text":"<p>Cevap: Ger\u00e7ek zamanl\u0131 iki y\u00f6nl\u00fc ileti\u015fim sa\u011flayan bir k\u00fct\u00fcphanedir. WebSocket, Server-Sent Events gibi teknolojileri kullan\u0131r. Hub s\u0131n\u0131f\u0131 \u00fczerinden istemci-sunucu ileti\u015fimi sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-2/#15-aspnet-coreda-grpc-nedir","title":"15. ASP.NET Core'da gRPC nedir?","text":"<p>Cevap: Y\u00fcksek performansl\u0131 RPC (Remote Procedure Call) framework'\u00fcd\u00fcr. Protocol Buffers kullanarak veri serile\u015ftirme yapar. HTTP/2 \u00fczerinde \u00e7al\u0131\u015f\u0131r ve binary format kullan\u0131r.</p>"},{"location":"junior/interview-examples/interview-2/#16-aspnet-coreda-rate-limiting-nedir","title":"16. ASP.NET Core'da Rate Limiting nedir?","text":"<p>Cevap: API isteklerini s\u0131n\u0131rland\u0131ran bir g\u00fcvenlik mekanizmas\u0131d\u0131r. Belirli bir zaman aral\u0131\u011f\u0131nda maksimum istek say\u0131s\u0131n\u0131 kontrol eder. AspNetCoreRateLimit gibi k\u00fct\u00fcphaneler kullan\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-2/#17-aspnet-coreda-output-caching-nedir","title":"17. ASP.NET Core'da Output Caching nedir?","text":"<p>Cevap: Action metodlar\u0131n\u0131n \u00e7\u0131kt\u0131lar\u0131n\u0131 \u00f6nbelle\u011fe alan bir mekanizmad\u0131r. ResponseCache attribute'u ile kullan\u0131l\u0131r. VaryByQueryKeys \u00f6zelli\u011fi ile farkl\u0131 parametreler i\u00e7in farkl\u0131 \u00f6nbellekler olu\u015fturulabilir.</p>"},{"location":"junior/interview-examples/interview-2/#18-aspnet-coreda-request-validation-nedir","title":"18. ASP.NET Core'da Request Validation nedir?","text":"<p>Cevap: Gelen isteklerin do\u011frulu\u011funu kontrol eden bir mekanizmad\u0131r. ModelState.IsValid ile kontrol edilir. Data Annotations ile validasyon kurallar\u0131 tan\u0131mlanabilir.</p>"},{"location":"junior/interview-examples/interview-2/#19-aspnet-coreda-tag-helpers-nedir","title":"19. ASP.NET Core'da Tag Helpers nedir?","text":"<p>Cevap: Razor view'larda HTML elementlerini C# koduna d\u00f6n\u00fc\u015ft\u00fcren yard\u0131mc\u0131 s\u0131n\u0131flard\u0131r. @addTagHelper direktifi ile kullan\u0131l\u0131r. Form, Input, Label gibi haz\u0131r tag helper'lar vard\u0131r.</p>"},{"location":"junior/interview-examples/interview-2/#20-aspnet-coreda-view-components-nedir","title":"20. ASP.NET Core'da View Components nedir?","text":"<p>Cevap: Yeniden kullan\u0131labilir UI bile\u015fenleri olu\u015fturmak i\u00e7in kullan\u0131lan bir yap\u0131d\u0131r. Partial view'lara benzer ama daha g\u00fc\u00e7l\u00fcd\u00fcr. ViewComponent s\u0131n\u0131f\u0131ndan kal\u0131t\u0131m alarak kullan\u0131l\u0131r. </p>"},{"location":"junior/interview-examples/interview-3/","title":"M\u00fclakat \u00d6rne\u011fi 3 - Veritaban\u0131 ve Entity Framework Core","text":""},{"location":"junior/interview-examples/interview-3/#1-entity-framework-core-nedir-avantajlar-nelerdir","title":"1. Entity Framework Core nedir? Avantajlar\u0131 nelerdir?","text":"<p>Cevap: Entity Framework Core, ORM (Object-Relational Mapping) arac\u0131d\u0131r. Veritaban\u0131 i\u015flemlerini nesne y\u00f6nelimli bir \u015fekilde yapmay\u0131 sa\u011flar. Kod tekrar\u0131n\u0131 azalt\u0131r, geli\u015ftirme s\u00fcrecini h\u0131zland\u0131r\u0131r ve veritaban\u0131 ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131 sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-3/#2-code-first-ve-database-first-yaklasmlar-arasndaki-farklar-nelerdir","title":"2. Code First ve Database First yakla\u015f\u0131mlar\u0131 aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Code First'te \u00f6nce C# s\u0131n\u0131flar\u0131 olu\u015fturulur, Database First'te ise \u00f6nce veritaban\u0131 \u015femas\u0131 olu\u015fturulur. Code First daha esnek ve bak\u0131m\u0131 kolayd\u0131r, Database First ise mevcut veritaban\u0131yla \u00e7al\u0131\u015fmak i\u00e7in uygundur.</p>"},{"location":"junior/interview-examples/interview-3/#3-entity-framework-coreda-migration-nedir-nasl-kullanlr","title":"3. Entity Framework Core'da Migration nedir? Nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Migration, veritaban\u0131 \u015femas\u0131ndaki de\u011fi\u015fiklikleri y\u00f6netmek i\u00e7in kullan\u0131lan bir mekanizmad\u0131r. Add-Migration ve Update-Database komutlar\u0131 ile kullan\u0131l\u0131r. Her migration bir snapshot olu\u015fturur ve bu sayede veritaban\u0131 versiyonlar\u0131 y\u00f6netilebilir.</p>"},{"location":"junior/interview-examples/interview-3/#4-lazy-loading-ve-eager-loading-arasndaki-farklar-nelerdir","title":"4. Lazy Loading ve Eager Loading aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Lazy Loading ili\u015fkili verileri ihtiya\u00e7 duyuldu\u011funda y\u00fckler, Eager Loading ise t\u00fcm ili\u015fkili verileri tek seferde y\u00fckler. Lazy Loading daha az bellek kullan\u0131r ama N+1 problemi olu\u015fturabilir, Eager Loading ise daha fazla bellek kullan\u0131r ama performansl\u0131d\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#5-entity-framework-coreda-change-tracking-nedir","title":"5. Entity Framework Core'da Change Tracking nedir?","text":"<p>Cevap: Change Tracking, entity'lerdeki de\u011fi\u015fiklikleri takip eden bir mekanizmad\u0131r. SaveChanges() \u00e7a\u011fr\u0131ld\u0131\u011f\u0131nda bu de\u011fi\u015fiklikler veritaban\u0131na yans\u0131t\u0131l\u0131r. AsNoTracking() ile devre d\u0131\u015f\u0131 b\u0131rak\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-3/#6-entity-framework-coreda-raw-sql-sorgular-nasl-calstrlr","title":"6. Entity Framework Core'da Raw SQL sorgular\u0131 nas\u0131l \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r?","text":"<p>Cevap: FromSqlRaw ve ExecuteSqlRaw metodlar\u0131 kullan\u0131larak raw SQL sorgular\u0131 \u00e7al\u0131\u015ft\u0131r\u0131labilir. Parametreler kullan\u0131larak SQL injection sald\u0131r\u0131lar\u0131na kar\u015f\u0131 koruma sa\u011flanabilir.</p>"},{"location":"junior/interview-examples/interview-3/#7-entity-framework-coreda-stored-procedure-nasl-kullanlr","title":"7. Entity Framework Core'da Stored Procedure nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: FromSqlRaw metodu ile stored procedure'lar \u00e7a\u011fr\u0131labilir. Parametreler DbParameter s\u0131n\u0131f\u0131 kullan\u0131larak g\u00fcvenli bir \u015fekilde ge\u00e7ilebilir.</p>"},{"location":"junior/interview-examples/interview-3/#8-entity-framework-coreda-transaction-nedir-nasl-kullanlr","title":"8. Entity Framework Core'da Transaction nedir? Nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Transaction, birden fazla veritaban\u0131 i\u015flemini atomik hale getiren bir mekanizmad\u0131r. BeginTransaction() metodu ile kullan\u0131l\u0131r. Commit() ile i\u015flemler onaylan\u0131r, Rollback() ile geri al\u0131n\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#9-entity-framework-coreda-concurrency-nedir-nasl-yonetilir","title":"9. Entity Framework Core'da Concurrency nedir? Nas\u0131l y\u00f6netilir?","text":"<p>Cevap: Concurrency, ayn\u0131 veri \u00fczerinde e\u015fzamanl\u0131 de\u011fi\u015fikliklerin y\u00f6netilmesidir. Concurrency token'lar ile y\u00f6netilir. RowVersion veya Timestamp kullan\u0131larak implemente edilebilir.</p>"},{"location":"junior/interview-examples/interview-3/#10-entity-framework-coreda-index-nedir-nasl-olusturulur","title":"10. Entity Framework Core'da Index nedir? Nas\u0131l olu\u015fturulur?","text":"<p>Cevap: Index, veritaban\u0131 sorgular\u0131n\u0131n performans\u0131n\u0131 art\u0131rmak i\u00e7in kullan\u0131lan yap\u0131lard\u0131r. HasIndex() metodu ile olu\u015fturulur. Unique, clustered gibi \u00f6zellikler tan\u0131mlanabilir.</p>"},{"location":"junior/interview-examples/interview-3/#11-entity-framework-coreda-seed-data-nedir-nasl-kullanlr","title":"11. Entity Framework Core'da Seed Data nedir? Nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Seed Data, veritaban\u0131 olu\u015fturuldu\u011funda otomatik olarak eklenen ba\u015flang\u0131\u00e7 verileridir. OnModelCreating metodunda tan\u0131mlan\u0131r. HasData() metodu ile kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#12-entity-framework-coreda-dbcontext-nedir-nasl-kullanlr","title":"12. Entity Framework Core'da DbContext nedir? Nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: DbContext, veritaban\u0131 ba\u011flant\u0131s\u0131n\u0131 ve entity'leri y\u00f6neten bir s\u0131n\u0131ft\u0131r. DbSet'ler \u00fczerinden entity'lere eri\u015fim sa\u011flar. OnConfiguring ve OnModelCreating metodlar\u0131 ile yap\u0131land\u0131r\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#13-entity-framework-coreda-asnotracking-nedir-ne-zaman-kullanlr","title":"13. Entity Framework Core'da AsNoTracking nedir? Ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: AsNoTracking, change tracking'i devre d\u0131\u015f\u0131 b\u0131rakan bir metoddur. Sadece okuma i\u015flemleri yap\u0131lacaksa kullan\u0131l\u0131r. Performans art\u0131\u015f\u0131 sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-3/#14-entity-framework-coreda-include-nedir-nasl-kullanlr","title":"14. Entity Framework Core'da Include nedir? Nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Include, ili\u015fkili verileri y\u00fcklemek i\u00e7in kullan\u0131lan bir metoddur. Eager loading i\u00e7in kullan\u0131l\u0131r. ThenInclude ile i\u00e7 i\u00e7e ili\u015fkiler de y\u00fcklenebilir.</p>"},{"location":"junior/interview-examples/interview-3/#15-entity-framework-coreda-global-query-filters-nedir","title":"15. Entity Framework Core'da Global Query Filters nedir?","text":"<p>Cevap: Global Query Filters, t\u00fcm sorgulara otomatik olarak uygulanan filtrelerdir. OnModelCreating metodunda tan\u0131mlan\u0131r. Soft delete gibi senaryolarda kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#16-entity-framework-coreda-soft-delete-nedir-nasl-uygulanr","title":"16. Entity Framework Core'da Soft Delete nedir? Nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Soft Delete, verileri fiziksel olarak silmek yerine bir flag ile i\u015faretleme y\u00f6ntemidir. Global query filter ile uygulan\u0131r. IsDeleted gibi bir property kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#17-entity-framework-coreda-value-conversions-nedir","title":"17. Entity Framework Core'da Value Conversions nedir?","text":"<p>Cevap: Value Conversions, entity property'lerinin veritaban\u0131ndaki kar\u015f\u0131l\u0131klar\u0131n\u0131 d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in kullan\u0131lan bir mekanizmad\u0131r. HasConversion() metodu ile kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#18-entity-framework-coreda-owned-entity-types-nedir","title":"18. Entity Framework Core'da Owned Entity Types nedir?","text":"<p>Cevap: Owned Entity Types, ba\u015fka bir entity'nin par\u00e7as\u0131 olan ve kendi ba\u015f\u0131na bir tablo olu\u015fturmayan entity'lerdir. OwnsOne veya OwnsMany metodlar\u0131 ile tan\u0131mlan\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#19-entity-framework-coreda-shadow-properties-nedir","title":"19. Entity Framework Core'da Shadow Properties nedir?","text":"<p>Cevap: Shadow Properties, entity s\u0131n\u0131f\u0131nda tan\u0131mlanmayan ama veritaban\u0131nda bulunan property'lerdir. Property() metodu ile tan\u0131mlan\u0131r. Audit trail gibi senaryolarda kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-3/#20-entity-framework-coreda-database-provider-nedir-hangi-providerlar-mevcuttur","title":"20. Entity Framework Core'da Database Provider nedir? Hangi provider'lar mevcuttur?","text":"<p>Cevap: Database Provider, farkl\u0131 veritaban\u0131 sistemleriyle \u00e7al\u0131\u015fmak i\u00e7in kullan\u0131lan adapt\u00f6rlerdir. SQL Server, PostgreSQL, MySQL, SQLite gibi provider'lar mevcuttur. UseSqlServer(), UseNpgsql() gibi metodlarla kullan\u0131l\u0131r. </p>"},{"location":"junior/interview-examples/interview-4/","title":"M\u00fclakat \u00d6rne\u011fi 4 - G\u00fcvenlik ve API Geli\u015ftirme","text":""},{"location":"junior/interview-examples/interview-4/#1-rest-api-nedir-temel-prensipleri-nelerdir","title":"1. REST API nedir? Temel prensipleri nelerdir?","text":"<p>Cevap: REST (Representational State Transfer), web servisleri i\u00e7in bir mimari stildir. Temel prensipleri: \u0130stemci-Sunucu ayr\u0131m\u0131, Durumsuzluk (Stateless), \u00d6nbelle\u011fe al\u0131nabilirlik, Katmanl\u0131 sistem, Tekd\u00fcze aray\u00fcz ve \u0130ste\u011fe ba\u011fl\u0131 kod.</p>"},{"location":"junior/interview-examples/interview-4/#2-jwt-json-web-token-nedir-nasl-calsr","title":"2. JWT (JSON Web Token) nedir? Nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: JWT, g\u00fcvenli bilgi al\u0131\u015fveri\u015fi i\u00e7in kullan\u0131lan bir token format\u0131d\u0131r. Header, Payload ve Signature olmak \u00fczere \u00fc\u00e7 b\u00f6l\u00fcmden olu\u015fur. Header token tipini ve kullan\u0131lan algoritmay\u0131, Payload veriyi, Signature ise token'\u0131n do\u011frulu\u011funu kontrol etmek i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-4/#3-authentication-ve-authorization-arasndaki-fark-nedir","title":"3. Authentication ve Authorization aras\u0131ndaki fark nedir?","text":"<p>Cevap: Authentication (Kimlik Do\u011frulama), kullan\u0131c\u0131n\u0131n kim oldu\u011funu do\u011frulama i\u015flemidir. Authorization (Yetkilendirme) ise, kullan\u0131c\u0131n\u0131n hangi kaynaklara eri\u015febilece\u011fini belirleme i\u015flemidir.</p>"},{"location":"junior/interview-examples/interview-4/#4-api-guvenligi-icin-hangi-onlemler-alnmaldr","title":"4. API g\u00fcvenli\u011fi i\u00e7in hangi \u00f6nlemler al\u0131nmal\u0131d\u0131r?","text":"<p>Cevap: HTTPS kullan\u0131m\u0131, JWT token kullan\u0131m\u0131, Rate limiting, Input validation, CORS yap\u0131land\u0131rmas\u0131, SQL injection korumas\u0131, XSS korumas\u0131, CSRF korumas\u0131, g\u00fcvenli \u015fifre politikalar\u0131 ve d\u00fczenli g\u00fcvenlik g\u00fcncellemeleri.</p>"},{"location":"junior/interview-examples/interview-4/#5-rate-limiting-nedir-neden-onemlidir","title":"5. Rate Limiting nedir? Neden \u00f6nemlidir?","text":"<p>Cevap: Rate Limiting, API'ye yap\u0131lan isteklerin say\u0131s\u0131n\u0131 s\u0131n\u0131rland\u0131ran bir g\u00fcvenlik mekanizmas\u0131d\u0131r. DDoS sald\u0131r\u0131lar\u0131n\u0131 \u00f6nlemek, sunucu kaynaklar\u0131n\u0131 korumak ve adil kullan\u0131m\u0131 sa\u011flamak i\u00e7in \u00f6nemlidir.</p>"},{"location":"junior/interview-examples/interview-4/#6-api-versiyonlama-nedir-nasl-yaplr","title":"6. API versiyonlama nedir? Nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: API versiyonlama, API'de yap\u0131lan de\u011fi\u015fiklikleri y\u00f6netmek i\u00e7in kullan\u0131lan bir y\u00f6ntemdir. URL'de versiyon belirtme, header'da versiyon belirtme veya media type'da versiyon belirtme gibi y\u00f6ntemlerle yap\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-4/#7-api-dokumantasyonu-neden-onemlidir-hangi-araclar-kullanlabilir","title":"7. API dok\u00fcmantasyonu neden \u00f6nemlidir? Hangi ara\u00e7lar kullan\u0131labilir?","text":"<p>Cevap: API dok\u00fcmantasyonu, API'nin nas\u0131l kullan\u0131laca\u011f\u0131n\u0131 a\u00e7\u0131klayan bir rehberdir. Swagger/OpenAPI, Postman, Apiary gibi ara\u00e7lar kullan\u0131labilir. \u0130yi bir dok\u00fcmantasyon, geli\u015ftiricilerin API'yi daha h\u0131zl\u0131 anlamas\u0131n\u0131 ve kullanmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-4/#8-api-testi-icin-hangi-yontemler-kullanlabilir","title":"8. API testi i\u00e7in hangi y\u00f6ntemler kullan\u0131labilir?","text":"<p>Cevap: Unit testler, Integration testler, Postman testleri, Swagger testleri, API test otomasyon ara\u00e7lar\u0131 (RestSharp, HttpClient vb.) ve API monitoring ara\u00e7lar\u0131 kullan\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-4/#9-apide-hata-yonetimi-nasl-yaplmaldr","title":"9. API'de hata y\u00f6netimi nas\u0131l yap\u0131lmal\u0131d\u0131r?","text":"<p>Cevap: Standart HTTP durum kodlar\u0131 kullan\u0131lmal\u0131, anlaml\u0131 hata mesajlar\u0131 d\u00f6n\u00fclmeli, hata detaylar\u0131 loglanmal\u0131 ve hata yan\u0131tlar\u0131 tutarl\u0131 bir formatta olmal\u0131d\u0131r. Try-catch bloklar\u0131 ile hatalar yakalanmal\u0131 ve uygun \u015fekilde i\u015flenmelidir.</p>"},{"location":"junior/interview-examples/interview-4/#10-apide-performans-optimizasyonu-icin-neler-yaplabilir","title":"10. API'de performans optimizasyonu i\u00e7in neler yap\u0131labilir?","text":"<p>Cevap: Caching kullan\u0131m\u0131, pagination, lazy loading, compression, CDN kullan\u0131m\u0131, veritaban\u0131 optimizasyonu, asenkron i\u015flemler ve microservice mimarisi gibi y\u00f6ntemler kullan\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-4/#11-apide-input-validation-neden-onemlidir","title":"11. API'de input validation neden \u00f6nemlidir?","text":"<p>Cevap: Input validation, gelen verilerin do\u011frulu\u011funu ve g\u00fcvenli\u011fini kontrol eder. SQL injection, XSS gibi g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 \u00f6nler ve veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-4/#12-apide-caching-nasl-yaplr","title":"12. API'de caching nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Response caching, distributed caching, memory caching gibi y\u00f6ntemler kullan\u0131labilir. Cache-Control header'lar\u0131 ile \u00f6nbelle\u011fe alma stratejileri belirlenebilir.</p>"},{"location":"junior/interview-examples/interview-4/#13-apide-logging-nasl-yaplmaldr","title":"13. API'de logging nas\u0131l yap\u0131lmal\u0131d\u0131r?","text":"<p>Cevap: Structured logging kullan\u0131lmal\u0131, log seviyeleri (Information, Warning, Error) do\u011fru kullan\u0131lmal\u0131, hassas bilgiler loglanmamal\u0131 ve log rotasyonu yap\u0131lmal\u0131d\u0131r.</p>"},{"location":"junior/interview-examples/interview-4/#14-apide-monitoring-nasl-yaplr","title":"14. API'de monitoring nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Application Insights, New Relic, Prometheus gibi monitoring ara\u00e7lar\u0131 kullan\u0131labilir. Response time, error rate, request rate gibi metrikler takip edilmelidir.</p>"},{"location":"junior/interview-examples/interview-4/#15-apide-versioning-stratejileri-nelerdir","title":"15. API'de versioning stratejileri nelerdir?","text":"<p>Cevap: URL versioning (/api/v1/resource), Header versioning (Accept: application/vnd.company.api.v1+json), Media type versioning ve Query parameter versioning gibi stratejiler kullan\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-4/#16-apide-pagination-nasl-yaplr","title":"16. API'de pagination nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Offset-based pagination (skip/take) veya cursor-based pagination kullan\u0131labilir. Sayfa numaras\u0131, sayfa boyutu ve toplam kay\u0131t say\u0131s\u0131 gibi bilgiler yan\u0131tta d\u00f6n\u00fclmelidir.</p>"},{"location":"junior/interview-examples/interview-4/#17-apide-filtering-sorting-ve-searching-nasl-yaplr","title":"17. API'de filtering, sorting ve searching nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Query string parametreleri kullan\u0131larak (filter, sort, search) yap\u0131labilir. \u00d6rne\u011fin: /api/products?filter=category=electronics&amp;sort=price&amp;search=phone</p>"},{"location":"junior/interview-examples/interview-4/#18-apide-authentication-icin-hangi-yontemler-kullanlabilir","title":"18. API'de authentication i\u00e7in hangi y\u00f6ntemler kullan\u0131labilir?","text":"<p>Cevap: JWT, OAuth 2.0, API Key, Basic Auth, OIDC gibi y\u00f6ntemler kullan\u0131labilir. Her y\u00f6ntemin kendine \u00f6zg\u00fc avantaj ve dezavantajlar\u0131 vard\u0131r.</p>"},{"location":"junior/interview-examples/interview-4/#19-apide-rate-limiting-nasl-yaplr","title":"19. API'de rate limiting nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Token bucket, Leaky bucket, Fixed window counter gibi algoritmalar kullan\u0131labilir. X-RateLimit-Limit, X-RateLimit-Remaining gibi header'lar ile limit bilgileri d\u00f6n\u00fclmelidir.</p>"},{"location":"junior/interview-examples/interview-4/#20-apide-security-headers-nelerdir-neden-onemlidir","title":"20. API'de security headers nelerdir? Neden \u00f6nemlidir?","text":"<p>Cevap: Content-Security-Policy, X-Frame-Options, X-Content-Type-Options, X-XSS-Protection, Strict-Transport-Security gibi header'lar kullan\u0131lmal\u0131d\u0131r. Bu header'lar, \u00e7e\u015fitli g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 \u00f6nlemek i\u00e7in \u00f6nemlidir. </p>"},{"location":"junior/interview-examples/interview-5/","title":"M\u00fclakat \u00d6rne\u011fi 5 - Algoritma ve Veri Yap\u0131lar\u0131","text":""},{"location":"junior/interview-examples/interview-5/#1-big-o-notasyonu-nedir-neden-onemlidir","title":"1. Big O notasyonu nedir? Neden \u00f6nemlidir?","text":"<p>Cevap: Big O notasyonu, bir algoritman\u0131n zaman ve bellek karma\u015f\u0131kl\u0131\u011f\u0131n\u0131 ifade etmek i\u00e7in kullan\u0131lan matematiksel bir g\u00f6sterimdir. Algoritman\u0131n performans\u0131n\u0131 ve \u00f6l\u00e7eklenebilirli\u011fini de\u011ferlendirmek i\u00e7in \u00f6nemlidir.</p>"},{"location":"junior/interview-examples/interview-5/#2-array-ve-list-arasndaki-farklar-nelerdir","title":"2. Array ve List aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Array sabit boyutludur ve bellek \u00fczerinde ard\u0131\u015f\u0131k olarak saklan\u0131r. List ise dinamik boyutludur ve gerekti\u011finde geni\u015fleyebilir. List, array'e g\u00f6re daha esnek ama biraz daha yava\u015ft\u0131r.</p>"},{"location":"junior/interview-examples/interview-5/#3-stack-ve-queue-veri-yaplar-arasndaki-farklar-nelerdir","title":"3. Stack ve Queue veri yap\u0131lar\u0131 aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Stack LIFO (Last In First Out), Queue ise FIFO (First In First Out) prensibine g\u00f6re \u00e7al\u0131\u015f\u0131r. Stack'te son eklenen eleman ilk \u00e7\u0131kar, Queue'da ise ilk eklenen eleman ilk \u00e7\u0131kar.</p>"},{"location":"junior/interview-examples/interview-5/#4-binary-search-tree-nedir-avantajlar-nelerdir","title":"4. Binary Search Tree nedir? Avantajlar\u0131 nelerdir?","text":"<p>Cevap: Binary Search Tree, her d\u00fc\u011f\u00fcm\u00fcn en fazla iki \u00e7ocu\u011fu olan ve sol alt a\u011fa\u00e7taki de\u011ferlerin k\u00f6k d\u00fc\u011f\u00fcmden k\u00fc\u00e7\u00fck, sa\u011f alt a\u011fa\u00e7taki de\u011ferlerin b\u00fcy\u00fck oldu\u011fu bir a\u011fa\u00e7 yap\u0131s\u0131d\u0131r. Arama, ekleme ve silme i\u015flemleri O(log n) karma\u015f\u0131kl\u0131\u011f\u0131nda yap\u0131labilir.</p>"},{"location":"junior/interview-examples/interview-5/#5-hash-table-nedir-nasl-calsr","title":"5. Hash Table nedir? Nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Hash Table, anahtar-de\u011fer \u00e7iftlerini saklamak i\u00e7in kullan\u0131lan bir veri yap\u0131s\u0131d\u0131r. Hash fonksiyonu kullanarak anahtarlar\u0131 indekslere d\u00f6n\u00fc\u015ft\u00fcr\u00fcr ve \u00e7ak\u0131\u015fmalar\u0131 (collision) \u00e7\u00f6zmek i\u00e7in \u00e7e\u015fitli y\u00f6ntemler kullan\u0131r.</p>"},{"location":"junior/interview-examples/interview-5/#6-bubble-sort-quick-sort-ve-merge-sort-arasndaki-farklar-nelerdir","title":"6. Bubble Sort, Quick Sort ve Merge Sort aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Bubble Sort O(n\u00b2) karma\u015f\u0131kl\u0131\u011f\u0131nda basit ama yava\u015f bir algoritmad\u0131r. Quick Sort ortalama O(n log n) karma\u015f\u0131kl\u0131\u011f\u0131nda ve yerinde s\u0131ralama yapar. Merge Sort O(n log n) karma\u015f\u0131kl\u0131\u011f\u0131nda ama ek bellek kullan\u0131r.</p>"},{"location":"junior/interview-examples/interview-5/#7-recursion-nedir-ne-zaman-kullanlmaldr","title":"7. Recursion nedir? Ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<p>Cevap: Recursion, bir fonksiyonun kendisini \u00e7a\u011f\u0131rmas\u0131d\u0131r. Tree traversal, factorial hesaplama gibi do\u011fal olarak recursive olan problemlerde kullan\u0131lmal\u0131d\u0131r. Stack overflow riskine dikkat edilmelidir.</p>"},{"location":"junior/interview-examples/interview-5/#8-graph-veri-yaps-nedir-nasl-temsil-edilir","title":"8. Graph veri yap\u0131s\u0131 nedir? Nas\u0131l temsil edilir?","text":"<p>Cevap: Graph, d\u00fc\u011f\u00fcmler ve bu d\u00fc\u011f\u00fcmleri birbirine ba\u011flayan kenarlardan olu\u015fan bir veri yap\u0131s\u0131d\u0131r. Adjacency matrix veya adjacency list kullan\u0131larak temsil edilebilir.</p>"},{"location":"junior/interview-examples/interview-5/#9-breadth-first-search-bfs-ve-depth-first-search-dfs-arasndaki-farklar-nelerdir","title":"9. Breadth First Search (BFS) ve Depth First Search (DFS) aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: BFS seviye seviye, DFS ise dal dal arama yapar. BFS Queue, DFS ise Stack kullan\u0131r. BFS en k\u0131sa yolu bulmak i\u00e7in, DFS ise topolojik s\u0131ralama gibi i\u015flemler i\u00e7in uygundur.</p>"},{"location":"junior/interview-examples/interview-5/#10-dynamic-programming-nedir-ne-zaman-kullanlr","title":"10. Dynamic Programming nedir? Ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Dynamic Programming, karma\u015f\u0131k problemleri alt problemlere b\u00f6lerek \u00e7\u00f6zen bir yakla\u015f\u0131md\u0131r. Alt problemlerin \u00e7\u00f6z\u00fcmlerini saklayarak tekrar hesaplamay\u0131 \u00f6nler. Fibonacci, Knapsack gibi problemlerde kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-5/#11-linked-list-nedir-avantajlar-ve-dezavantajlar-nelerdir","title":"11. Linked List nedir? Avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?","text":"<p>Cevap: Linked List, d\u00fc\u011f\u00fcmlerden olu\u015fan ve her d\u00fc\u011f\u00fcm\u00fcn bir sonraki d\u00fc\u011f\u00fcm\u00fc i\u015faret etti\u011fi bir veri yap\u0131s\u0131d\u0131r. Ekleme ve silme i\u015flemleri O(1) karma\u015f\u0131kl\u0131\u011f\u0131nda yap\u0131labilir ama rastgele eri\u015fim O(n) karma\u015f\u0131kl\u0131\u011f\u0131ndad\u0131r.</p>"},{"location":"junior/interview-examples/interview-5/#12-heap-veri-yaps-nedir-ne-icin-kullanlr","title":"12. Heap veri yap\u0131s\u0131 nedir? Ne i\u00e7in kullan\u0131l\u0131r?","text":"<p>Cevap: Heap, \u00f6ncelik kuyru\u011fu (priority queue) implementasyonu i\u00e7in kullan\u0131lan bir a\u011fa\u00e7 yap\u0131s\u0131d\u0131r. Min heap ve max heap olmak \u00fczere iki t\u00fcr\u00fc vard\u0131r. En y\u00fcksek veya en d\u00fc\u015f\u00fck \u00f6ncelikli elemana h\u0131zl\u0131 eri\u015fim sa\u011flar.</p>"},{"location":"junior/interview-examples/interview-5/#13-time-complexity-ve-space-complexity-arasndaki-fark-nedir","title":"13. Time Complexity ve Space Complexity aras\u0131ndaki fark nedir?","text":"<p>Cevap: Time Complexity, bir algoritman\u0131n \u00e7al\u0131\u015fma s\u00fcresinin giri\u015f boyutuna g\u00f6re nas\u0131l de\u011fi\u015fti\u011fini, Space Complexity ise algoritman\u0131n ne kadar bellek kulland\u0131\u011f\u0131n\u0131 ifade eder.</p>"},{"location":"junior/interview-examples/interview-5/#14-greedy-algorithm-nedir-ne-zaman-kullanlr","title":"14. Greedy Algorithm nedir? Ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Greedy Algorithm, her ad\u0131mda en iyi g\u00f6r\u00fcnen se\u00e7imi yapan bir yakla\u015f\u0131md\u0131r. Her zaman optimal \u00e7\u00f6z\u00fcm vermeyebilir ama h\u0131zl\u0131d\u0131r. Minimum Spanning Tree, Huffman Coding gibi problemlerde kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-5/#15-binary-search-nedir-nasl-calsr","title":"15. Binary Search nedir? Nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Binary Search, s\u0131ral\u0131 bir dizide arama yapan O(log n) karma\u015f\u0131kl\u0131\u011f\u0131nda bir algoritmad\u0131r. Diziyi ortadan ikiye b\u00f6lerek arama yapar ve her ad\u0131mda arama alan\u0131n\u0131 yar\u0131ya indirir.</p>"},{"location":"junior/interview-examples/interview-5/#16-trie-veri-yaps-nedir-ne-icin-kullanlr","title":"16. Trie veri yap\u0131s\u0131 nedir? Ne i\u00e7in kullan\u0131l\u0131r?","text":"<p>Cevap: Trie, string'leri saklamak i\u00e7in kullan\u0131lan bir a\u011fa\u00e7 yap\u0131s\u0131d\u0131r. Her d\u00fc\u011f\u00fcm bir karakteri temsil eder. Otomatik tamamlama, s\u00f6zl\u00fck uygulamalar\u0131 gibi alanlarda kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-5/#17-red-black-tree-nedir-ne-icin-kullanlr","title":"17. Red-Black Tree nedir? Ne i\u00e7in kullan\u0131l\u0131r?","text":"<p>Cevap: Red-Black Tree, kendini dengeleyen bir binary search tree'd\u00fcr. Her i\u015flem sonras\u0131 a\u011fac\u0131 dengede tutar. Java'n\u0131n TreeMap, C++'\u0131n map gibi veri yap\u0131lar\u0131nda kullan\u0131l\u0131r.</p>"},{"location":"junior/interview-examples/interview-5/#18-dijkstras-algorithm-nedir-nasl-calsr","title":"18. Dijkstra's Algorithm nedir? Nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Dijkstra's Algorithm, bir graph'ta iki d\u00fc\u011f\u00fcm aras\u0131ndaki en k\u0131sa yolu bulan bir algoritmad\u0131r. Greedy yakla\u015f\u0131m\u0131 kullan\u0131r ve negatif a\u011f\u0131rl\u0131kl\u0131 kenarlarla \u00e7al\u0131\u015fmaz.</p>"},{"location":"junior/interview-examples/interview-5/#19-kruskals-ve-prims-algorithm-arasndaki-farklar-nelerdir","title":"19. Kruskal's ve Prim's Algorithm aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Her iki algoritma da minimum spanning tree bulmak i\u00e7in kullan\u0131l\u0131r. Kruskal's kenarlar\u0131 s\u0131ralayarak \u00e7al\u0131\u015f\u0131r, Prim's ise d\u00fc\u011f\u00fcmleri ekleyerek \u00e7al\u0131\u015f\u0131r. Kruskal's sparse graph'larda, Prim's dense graph'larda daha verimlidir.</p>"},{"location":"junior/interview-examples/interview-5/#20-memoization-nedir-ne-zaman-kullanlr","title":"20. Memoization nedir? Ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Memoization, fonksiyon \u00e7a\u011fr\u0131lar\u0131n\u0131n sonu\u00e7lar\u0131n\u0131 saklayarak tekrar hesaplamay\u0131 \u00f6nleyen bir optimizasyon tekni\u011fidir. Recursive fonksiyonlarda ve dynamic programming'de s\u0131k\u00e7a kullan\u0131l\u0131r. </p>"},{"location":"junior/security-basics/","title":"G\u00fcvenlik Temelleri","text":""},{"location":"junior/security-basics/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>G\u00fcvenlik temelleri, yaz\u0131l\u0131m geli\u015ftirme s\u00fcrecinde uygulanmas\u0131 gereken temel g\u00fcvenlik prensiplerini ve uygulamalar\u0131n\u0131 kapsar. Bu b\u00f6l\u00fcm, g\u00fcvenli yaz\u0131l\u0131m geli\u015ftirme i\u00e7in gerekli olan temel kavramlar\u0131 ve uygulamalar\u0131 i\u00e7erir.</p>"},{"location":"junior/security-basics/#icindekiler","title":"\u0130\u00e7indekiler","text":"<ol> <li>Authentication</li> <li>Kimlik do\u011frulama y\u00f6ntemleri</li> <li>JWT ve OAuth</li> <li>Token y\u00f6netimi</li> <li> <p>G\u00fcvenli oturum y\u00f6netimi</p> </li> <li> <p>Authorization</p> </li> <li>Yetkilendirme mekanizmalar\u0131</li> <li>Role-based access control</li> <li>Policy-based authorization</li> <li> <p>Claims-based authorization</p> </li> <li> <p>HTTPS</p> </li> <li>SSL/TLS protokolleri</li> <li>Sertifika y\u00f6netimi</li> <li>G\u00fcvenli ileti\u015fim</li> <li> <p>HTTPS yap\u0131land\u0131rmas\u0131</p> </li> <li> <p>CORS</p> </li> <li>Cross-Origin Resource Sharing</li> <li>CORS politikalar\u0131</li> <li>G\u00fcvenli kaynak payla\u015f\u0131m\u0131</li> <li> <p>CORS yap\u0131land\u0131rmas\u0131</p> </li> <li> <p>Input Validation</p> </li> <li>Veri do\u011frulama teknikleri</li> <li>XSS korumas\u0131</li> <li>SQL injection korumas\u0131</li> <li> <p>G\u00fcvenli input handling</p> </li> <li> <p>Veri G\u00fcvenli\u011fi</p> </li> <li>Veri \u015fifreleme</li> <li>Hassas veri y\u00f6netimi</li> <li>Veri maskeleme</li> <li> <p>G\u00fcvenli veri depolama</p> </li> <li> <p>G\u00fcvenli Kod Yaz\u0131m\u0131</p> </li> <li>Output encoding</li> <li>Error handling</li> <li> <p>Secure coding practices</p> </li> <li> <p>G\u00fcvenlik Testleri</p> </li> <li>Penetrasyon testleri</li> <li>G\u00fcvenlik a\u00e7\u0131\u011f\u0131 taramas\u0131</li> <li>Code review</li> <li>Security testing tools</li> </ol>"},{"location":"junior/security-basics/#ogrenme-hedefleri","title":"\u00d6\u011frenme Hedefleri","text":"<p>Bu b\u00f6l\u00fcm\u00fc tamamlad\u0131ktan sonra: - Temel g\u00fcvenlik kavramlar\u0131n\u0131 anlayabileceksiniz - Authentication ve authorization mekanizmalar\u0131n\u0131 uygulayabileceksiniz - Veri g\u00fcvenli\u011fi prensiplerini \u00f6\u011freneceksiniz - G\u00fcvenli kod yaz\u0131m\u0131 tekniklerini kullanabileceksiniz - G\u00fcvenlik testlerini ger\u00e7ekle\u015ftirebileceksiniz</p>"},{"location":"junior/security-basics/#on-kosullar","title":"\u00d6n Ko\u015fullar","text":"<p>Bu b\u00f6l\u00fcm\u00fc takip etmek i\u00e7in: - Temel programlama bilgisi - Web uygulama geli\u015ftirme deneyimi - HTTP protokol\u00fc hakk\u0131nda bilgi - Veritaban\u0131 temelleri</p>"},{"location":"junior/security-basics/#best-practices","title":"Best Practices","text":"<ol> <li>G\u00fcvenlik Prensipleri</li> <li>Defense in depth</li> <li>Least privilege</li> <li>Fail securely</li> <li> <p>Keep it simple</p> </li> <li> <p>Kod G\u00fcvenli\u011fi</p> </li> <li>Output encoding</li> <li>Error handling</li> <li> <p>Secure defaults</p> </li> <li> <p>Veri G\u00fcvenli\u011fi</p> </li> <li>Encryption at rest</li> <li>Encryption in transit</li> <li>Secure key management</li> <li>Data classification</li> </ol>"},{"location":"junior/security-basics/#ornek-proje-yaps","title":"\u00d6rnek Proje Yap\u0131s\u0131","text":"<pre><code>SecurityBasics/\n\u251c\u2500\u2500 Authentication/\n\u2502   \u251c\u2500\u2500 JwtAuthentication\n\u2502   \u251c\u2500\u2500 OAuthAuthentication\n\u2502   \u2514\u2500\u2500 RoleBasedAccess\n\u251c\u2500\u2500 DataSecurity/\n\u2502   \u251c\u2500\u2500 Encryption\n\u2502   \u251c\u2500\u2500 DataMasking\n\u2502   \u2514\u2500\u2500 SecureStorage\n\u251c\u2500\u2500 SecureCoding/\n\u2502   \u251c\u2500\u2500 InputValidation\n\u2502   \u251c\u2500\u2500 OutputEncoding\n\u2502   \u2514\u2500\u2500 ErrorHandling\n\u2514\u2500\u2500 SecurityTesting/\n    \u251c\u2500\u2500 PenetrationTesting\n    \u251c\u2500\u2500 VulnerabilityScanning\n    \u2514\u2500\u2500 CodeReview\n</code></pre>"},{"location":"junior/security-basics/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":"<ol> <li>Authentication ve Authorization aras\u0131ndaki fark nedir?</li> <li>JWT token'lar\u0131 nas\u0131l g\u00fcvenli bir \u015fekilde saklan\u0131r?</li> <li>Veri \u015fifreleme i\u00e7in hangi algoritmalar kullan\u0131lmal\u0131d\u0131r?</li> <li>G\u00fcvenli kod yaz\u0131m\u0131 i\u00e7in temel prensipler nelerdir?</li> <li>G\u00fcvenlik testleri nas\u0131l planlanmal\u0131d\u0131r?</li> </ol>"},{"location":"junior/security-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OWASP Top 10</li> <li>Microsoft Security Documentation</li> <li>NIST Security Guidelines </li> </ul>"},{"location":"junior/security-basics/authentication/","title":"Authentication","text":""},{"location":"junior/security-basics/authentication/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Authentication (Kimlik Do\u011frulama), bir kullan\u0131c\u0131n\u0131n veya sistemin kimli\u011finin do\u011frulanmas\u0131 s\u00fcrecidir. Bu s\u00fcre\u00e7, kullan\u0131c\u0131n\u0131n iddia etti\u011fi kimli\u011fin do\u011fru olup olmad\u0131\u011f\u0131n\u0131 kontrol eder.</p>"},{"location":"junior/security-basics/authentication/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/security-basics/authentication/#1-temel-kimlik-dogrulama-yontemleri-nelerdir","title":"1. Temel kimlik do\u011frulama y\u00f6ntemleri nelerdir?","text":"<p>Cevap: Temel kimlik do\u011frulama y\u00f6ntemleri: - Kullan\u0131c\u0131 ad\u0131/\u015fifre - Token tabanl\u0131 (JWT) - OAuth/OpenID Connect - Biyometrik - \u00c7ok fakt\u00f6rl\u00fc kimlik do\u011frulama (MFA)</p> <p>\u00d6rnek Kod: <pre><code>// Kullan\u0131c\u0131 ad\u0131/\u015fifre do\u011frulama\npublic class AccountController : ControllerBase\n{\n    [HttpPost(\"login\")]\n    public async Task&lt;IActionResult&gt; Login(LoginModel model)\n    {\n        var user = await _userManager.FindByNameAsync(model.Username);\n        if (user != null &amp;&amp; await _userManager.CheckPasswordAsync(user, model.Password))\n        {\n            var token = await GenerateJwtToken(user);\n            return Ok(new { token });\n        }\n        return Unauthorized();\n    }\n}\n\n// JWT token olu\u015fturma\nprivate async Task&lt;string&gt; GenerateJwtToken(ApplicationUser user)\n{\n    var claims = new List&lt;Claim&gt;\n    {\n        new Claim(ClaimTypes.NameIdentifier, user.Id),\n        new Claim(ClaimTypes.Name, user.UserName)\n    };\n\n    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\"Jwt:Key\"]));\n    var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n    var token = new JwtSecurityToken(\n        issuer: _configuration[\"Jwt:Issuer\"],\n        audience: _configuration[\"Jwt:Audience\"],\n        claims: claims,\n        expires: DateTime.Now.AddHours(1),\n        signingCredentials: creds\n    );\n\n    return new JwtSecurityTokenHandler().WriteToken(token);\n}\n</code></pre></p>"},{"location":"junior/security-basics/authentication/#2-jwt-json-web-token-nedir-ve-nasl-calsr","title":"2. JWT (JSON Web Token) nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: JWT, g\u00fcvenli bilgi al\u0131\u015fveri\u015fi i\u00e7in kullan\u0131lan bir token format\u0131d\u0131r. \u00dc\u00e7 b\u00f6l\u00fcmden olu\u015fur: - Header: Token tipi ve kullan\u0131lan algoritma - Payload: Kullan\u0131c\u0131 bilgileri ve claims - Signature: Token'\u0131n do\u011frulu\u011funu kontrol etmek i\u00e7in</p> <p>\u00d6rnek Kod: <pre><code>// JWT yap\u0131land\u0131rmas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n        .AddJwtBearer(options =&gt;\n        {\n            options.TokenValidationParameters = new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateLifetime = true,\n                ValidateIssuerSigningKey = true,\n                ValidIssuer = Configuration[\"Jwt:Issuer\"],\n                ValidAudience = Configuration[\"Jwt:Audience\"],\n                IssuerSigningKey = new SymmetricSecurityKey(\n                    Encoding.UTF8.GetBytes(Configuration[\"Jwt:Key\"]))\n            };\n        });\n}\n\n// JWT kullan\u0131m\u0131\n[Authorize]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class SecureController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult GetSecureData()\n    {\n        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n        return Ok($\"Secure data for user {userId}\");\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authentication/#3-oauth-20-ve-openid-connect-nedir","title":"3. OAuth 2.0 ve OpenID Connect nedir?","text":"<p>Cevap: OAuth 2.0, yetkilendirme protokol\u00fcd\u00fcr. OpenID Connect ise OAuth 2.0 \u00fczerine in\u015fa edilmi\u015f bir kimlik do\u011frulama katman\u0131d\u0131r.</p> <p>\u00d6rnek Kod: <pre><code>// OAuth yap\u0131land\u0131rmas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication()\n        .AddGoogle(options =&gt;\n        {\n            options.ClientId = Configuration[\"Authentication:Google:ClientId\"];\n            options.ClientSecret = Configuration[\"Authentication:Google:ClientSecret\"];\n        })\n        .AddMicrosoftAccount(options =&gt;\n        {\n            options.ClientId = Configuration[\"Authentication:Microsoft:ClientId\"];\n            options.ClientSecret = Configuration[\"Authentication:Microsoft:ClientSecret\"];\n        });\n}\n\n// OAuth kullan\u0131m\u0131\n[Authorize]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class OAuthController : ControllerBase\n{\n    [HttpGet(\"userinfo\")]\n    public async Task&lt;IActionResult&gt; GetUserInfo()\n    {\n        var email = User.FindFirst(ClaimTypes.Email)?.Value;\n        var name = User.FindFirst(ClaimTypes.Name)?.Value;\n        return Ok(new { email, name });\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authentication/#4-cok-faktorlu-kimlik-dogrulama-mfa-nasl-uygulanr","title":"4. \u00c7ok fakt\u00f6rl\u00fc kimlik do\u011frulama (MFA) nas\u0131l uygulan\u0131r?","text":"<p>Cevap: MFA, birden fazla do\u011frulama y\u00f6nteminin kullan\u0131lmas\u0131d\u0131r. \u00d6rne\u011fin: - SMS/Email kodlar\u0131 - Authenticator uygulamalar\u0131 - Biyometrik do\u011frulama</p> <p>\u00d6rnek Kod: <pre><code>// MFA yap\u0131land\u0131rmas\u0131\npublic class MfaController : ControllerBase\n{\n    [HttpPost(\"enable-mfa\")]\n    public async Task&lt;IActionResult&gt; EnableMfa()\n    {\n        var user = await _userManager.GetUserAsync(User);\n        var authenticatorKey = await _userManager.GetAuthenticatorKeyAsync(user);\n        if (string.IsNullOrEmpty(authenticatorKey))\n        {\n            await _userManager.ResetAuthenticatorKeyAsync(user);\n            authenticatorKey = await _userManager.GetAuthenticatorKeyAsync(user);\n        }\n\n        return Ok(new { authenticatorKey });\n    }\n\n    [HttpPost(\"verify-mfa\")]\n    public async Task&lt;IActionResult&gt; VerifyMfa(string code)\n    {\n        var user = await _userManager.GetUserAsync(User);\n        var isValid = await _userManager.VerifyTwoFactorTokenAsync(\n            user, _userManager.Options.Tokens.AuthenticatorTokenProvider, code);\n\n        if (isValid)\n        {\n            await _userManager.SetTwoFactorEnabledAsync(user, true);\n            return Ok();\n        }\n\n        return BadRequest(\"Invalid verification code\");\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authentication/#5-guvenli-oturum-yonetimi-nasl-saglanr","title":"5. G\u00fcvenli oturum y\u00f6netimi nas\u0131l sa\u011flan\u0131r?","text":"<p>Cevap: G\u00fcvenli oturum y\u00f6netimi i\u00e7in: - G\u00fcvenli token saklama - Token yenileme - Oturum zaman a\u015f\u0131m\u0131 - G\u00fcvenli \u00e7\u0131k\u0131\u015f</p> <p>\u00d6rnek Kod: <pre><code>// Oturum y\u00f6netimi\npublic class SessionController : ControllerBase\n{\n    [HttpPost(\"refresh-token\")]\n    public async Task&lt;IActionResult&gt; RefreshToken(string refreshToken)\n    {\n        var principal = GetPrincipalFromExpiredToken(refreshToken);\n        var username = principal.Identity.Name;\n        var user = await _userManager.FindByNameAsync(username);\n\n        if (user == null || user.RefreshToken != refreshToken)\n            return BadRequest(\"Invalid refresh token\");\n\n        var newJwtToken = await GenerateJwtToken(user);\n        var newRefreshToken = GenerateRefreshToken();\n\n        user.RefreshToken = newRefreshToken;\n        await _userManager.UpdateAsync(user);\n\n        return Ok(new\n        {\n            token = newJwtToken,\n            refreshToken = newRefreshToken\n        });\n    }\n\n    [HttpPost(\"revoke-token\")]\n    public async Task&lt;IActionResult&gt; RevokeToken(string refreshToken)\n    {\n        var user = await _userManager.Users\n            .SingleOrDefaultAsync(u =&gt; u.RefreshToken == refreshToken);\n\n        if (user == null) return BadRequest();\n\n        user.RefreshToken = null;\n        await _userManager.UpdateAsync(user);\n\n        return NoContent();\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authentication/#best-practices","title":"Best Practices","text":"<ol> <li>Token G\u00fcvenli\u011fi</li> <li>G\u00fcvenli token saklama</li> <li>K\u0131sa token \u00f6mr\u00fc</li> <li>Token yenileme mekanizmas\u0131</li> <li> <p>G\u00fcvenli token iletimi</p> </li> <li> <p>Kimlik Do\u011frulama</p> </li> <li>G\u00fc\u00e7l\u00fc \u015fifre politikalar\u0131</li> <li>Brute force korumas\u0131</li> <li>Hesap kilitleme</li> <li> <p>\u015eifre s\u0131f\u0131rlama</p> </li> <li> <p>Oturum Y\u00f6netimi</p> </li> <li>G\u00fcvenli oturum ba\u015flatma</li> <li>Oturum izleme</li> <li>Zaman a\u015f\u0131m\u0131 kontrol\u00fc</li> <li>G\u00fcvenli oturum sonland\u0131rma</li> </ol>"},{"location":"junior/security-basics/authentication/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Authentication</li> <li>JWT Best Practices</li> <li>OAuth 2.0 Documentation </li> </ul>"},{"location":"junior/security-basics/authorization/","title":"Authorization","text":""},{"location":"junior/security-basics/authorization/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Authorization (Yetkilendirme), kimli\u011fi do\u011frulanm\u0131\u015f bir kullan\u0131c\u0131n\u0131n veya sistemin belirli kaynaklara eri\u015fim izninin kontrol edilmesi s\u00fcrecidir. Bu s\u00fcre\u00e7, kullan\u0131c\u0131n\u0131n hangi i\u015flemleri yapabilece\u011fini belirler.</p>"},{"location":"junior/security-basics/authorization/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/security-basics/authorization/#1-role-based-authorization-nedir-ve-nasl-uygulanr","title":"1. Role-based Authorization nedir ve nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Role-based Authorization, kullan\u0131c\u0131lar\u0131n rollerine g\u00f6re yetkilendirme yap\u0131lmas\u0131d\u0131r. ASP.NET Core'da <code>[Authorize(Roles = \"RoleName\")]</code> attribute'u ile uygulan\u0131r.</p> <p>\u00d6rnek Kod: <pre><code>// Role tan\u0131mlama\npublic class ApplicationUser : IdentityUser\n{\n    public string FullName { get; set; }\n}\n\n// Role-based authorization\n[Authorize(Roles = \"Admin\")]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AdminController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult GetAdminData()\n    {\n        return Ok(\"Admin data\");\n    }\n}\n\n// \u00c7oklu role kontrol\u00fc\n[Authorize(Roles = \"Admin,Manager\")]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ManagementController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult GetManagementData()\n    {\n        return Ok(\"Management data\");\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authorization/#2-policy-based-authorization-nedir-ve-nasl-uygulanr","title":"2. Policy-based Authorization nedir ve nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Policy-based Authorization, daha esnek ve karma\u015f\u0131k yetkilendirme kurallar\u0131 tan\u0131mlamaya olanak sa\u011flar. Policy'ler gereksinimlere g\u00f6re \u00f6zelle\u015ftirilebilir.</p> <p>\u00d6rnek Kod: <pre><code>// Policy tan\u0131mlama\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthorization(options =&gt;\n    {\n        options.AddPolicy(\"RequireAdminRole\", policy =&gt;\n            policy.RequireRole(\"Admin\"));\n\n        options.AddPolicy(\"MinimumAge\", policy =&gt;\n            policy.RequireAssertion(context =&gt;\n                context.User.HasClaim(c =&gt;\n                    (c.Type == \"Age\" &amp;&amp; int.Parse(c.Value) &gt;= 18))));\n\n        options.AddPolicy(\"CanEditProduct\", policy =&gt;\n            policy.RequireAssertion(context =&gt;\n                context.User.IsInRole(\"Admin\") ||\n                (context.User.IsInRole(\"Editor\") &amp;&amp; \n                 context.User.HasClaim(\"Permission\", \"Edit\"))));\n    });\n}\n\n// Policy kullan\u0131m\u0131\n[Authorize(Policy = \"MinimumAge\")]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AdultController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult GetAdultContent()\n    {\n        return Ok(\"Adult content\");\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authorization/#3-claims-based-authorization-nedir-ve-nasl-uygulanr","title":"3. Claims-based Authorization nedir ve nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Claims-based Authorization, kullan\u0131c\u0131n\u0131n sahip oldu\u011fu claims'lere g\u00f6re yetkilendirme yap\u0131lmas\u0131d\u0131r. Claims, kullan\u0131c\u0131 hakk\u0131nda bilgi i\u00e7eren name-value \u00e7iftleridir.</p> <p>\u00d6rnek Kod: <pre><code>// Claims tan\u0131mlama\npublic class ClaimsController : ControllerBase\n{\n    [HttpPost(\"add-claim\")]\n    public async Task&lt;IActionResult&gt; AddClaim(string userId, string claimType, string claimValue)\n    {\n        var user = await _userManager.FindByIdAsync(userId);\n        if (user == null) return NotFound();\n\n        var claim = new Claim(claimType, claimValue);\n        var result = await _userManager.AddClaimAsync(user, claim);\n\n        if (result.Succeeded)\n            return Ok();\n        return BadRequest(result.Errors);\n    }\n}\n\n// Claims-based authorization\n[Authorize]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ClaimsBasedController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult GetData()\n    {\n        var hasPermission = User.HasClaim(\"Permission\", \"Read\");\n        if (!hasPermission)\n            return Forbid();\n\n        return Ok(\"Protected data\");\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authorization/#4-resource-based-authorization-nedir-ve-nasl-uygulanr","title":"4. Resource-based Authorization nedir ve nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Resource-based Authorization, belirli bir kayna\u011fa eri\u015fim yetkisinin kontrol edilmesidir. Bu yakla\u015f\u0131mda, kullan\u0131c\u0131n\u0131n kayna\u011fa eri\u015fim hakk\u0131 olup olmad\u0131\u011f\u0131 kontrol edilir.</p> <p>\u00d6rnek Kod: <pre><code>// Resource authorization handler\npublic class DocumentAuthorizationHandler : AuthorizationHandler&lt;DocumentRequirement, Document&gt;\n{\n    protected override Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        DocumentRequirement requirement,\n        Document resource)\n    {\n        if (context.User.IsInRole(\"Admin\"))\n        {\n            context.Succeed(requirement);\n            return Task.CompletedTask;\n        }\n\n        if (context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value == resource.OwnerId)\n        {\n            context.Succeed(requirement);\n        }\n\n        return Task.CompletedTask;\n    }\n}\n\n// Resource authorization kullan\u0131m\u0131\n[Authorize]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class DocumentsController : ControllerBase\n{\n    private readonly IAuthorizationService _authorizationService;\n\n    [HttpGet(\"{id}\")]\n    public async Task&lt;IActionResult&gt; GetDocument(int id)\n    {\n        var document = await _documentRepository.GetByIdAsync(id);\n        if (document == null) return NotFound();\n\n        var authResult = await _authorizationService.AuthorizeAsync(\n            User, document, \"DocumentAccess\");\n\n        if (!authResult.Succeeded)\n            return Forbid();\n\n        return Ok(document);\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authorization/#5-custom-authorization-nasl-uygulanr","title":"5. Custom Authorization nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Custom Authorization, \u00f6zel yetkilendirme gereksinimleri i\u00e7in kullan\u0131l\u0131r. Bu yakla\u015f\u0131mda, <code>IAuthorizationRequirement</code> ve <code>AuthorizationHandler</code> s\u0131n\u0131flar\u0131 kullan\u0131l\u0131r.</p> <p>\u00d6rnek Kod: <pre><code>// Custom requirement\npublic class MinimumAgeRequirement : IAuthorizationRequirement\n{\n    public int MinimumAge { get; }\n\n    public MinimumAgeRequirement(int minimumAge)\n    {\n        MinimumAge = minimumAge;\n    }\n}\n\n// Custom handler\npublic class MinimumAgeHandler : AuthorizationHandler&lt;MinimumAgeRequirement&gt;\n{\n    protected override Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        MinimumAgeRequirement requirement)\n    {\n        var dateOfBirthClaim = context.User.FindFirst(c =&gt; c.Type == \"DateOfBirth\");\n        if (dateOfBirthClaim == null) return Task.CompletedTask;\n\n        var dateOfBirth = Convert.ToDateTime(dateOfBirthClaim.Value);\n        var age = DateTime.Today.Year - dateOfBirth.Year;\n        if (dateOfBirth.Date &gt; DateTime.Today.AddYears(-age)) age--;\n\n        if (age &gt;= requirement.MinimumAge)\n        {\n            context.Succeed(requirement);\n        }\n\n        return Task.CompletedTask;\n    }\n}\n\n// Custom authorization kullan\u0131m\u0131\n[Authorize]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class CustomAuthController : ControllerBase\n{\n    [MinimumAgeAuthorize(18)]\n    [HttpGet]\n    public IActionResult GetAdultContent()\n    {\n        return Ok(\"Adult content\");\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/authorization/#best-practices","title":"Best Practices","text":"<ol> <li>Yetkilendirme Stratejisi</li> <li>En az ayr\u0131cal\u0131k prensibi</li> <li>Role-based ve policy-based kombinasyonu</li> <li>Claims tabanl\u0131 yetkilendirme</li> <li> <p>Resource-based kontrol</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Yetki kontrol\u00fc her seviyede</li> <li>Default-deny yakla\u015f\u0131m\u0131</li> <li>Yetki de\u011fi\u015fikliklerinin loglanmas\u0131</li> <li> <p>D\u00fczenli yetki g\u00f6zden ge\u00e7irme</p> </li> <li> <p>Performans</p> </li> <li>Yetki kontrollerinin \u00f6nbelle\u011fe al\u0131nmas\u0131</li> <li>Gereksiz yetki kontrollerinden ka\u00e7\u0131nma</li> <li>Verimli yetki sorgular\u0131</li> <li>\u00d6l\u00e7eklenebilir yetkilendirme</li> </ol>"},{"location":"junior/security-basics/authorization/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Authorization</li> <li>Role-based Authorization</li> <li>Policy-based Authorization </li> </ul>"},{"location":"junior/security-basics/cors/","title":"CORS","text":""},{"location":"junior/security-basics/cors/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>CORS (Cross-Origin Resource Sharing), farkl\u0131 kaynaklardan (origin) gelen isteklerin g\u00fcvenli bir \u015fekilde y\u00f6netilmesini sa\u011flayan bir mekanizmad\u0131r. Web taray\u0131c\u0131lar\u0131, g\u00fcvenlik nedeniyle varsay\u0131lan olarak farkl\u0131 kaynaklardan gelen istekleri engeller. CORS, bu k\u0131s\u0131tlamalar\u0131 y\u00f6netmek i\u00e7in kullan\u0131lan bir protokold\u00fcr.</p>"},{"location":"junior/security-basics/cors/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/security-basics/cors/#1-cors-nedir-ve-neden-onemlidir","title":"1. CORS nedir ve neden \u00f6nemlidir?","text":"<p>Cevap: CORS, web uygulamalar\u0131n\u0131n farkl\u0131 kaynaklardan gelen istekleri g\u00fcvenli bir \u015fekilde y\u00f6netmesini sa\u011flar. \u00d6nemi: - G\u00fcvenlik: Same-Origin Policy'yi y\u00f6netir - Esneklik: Farkl\u0131 domainler aras\u0131 ileti\u015fimi sa\u011flar - Kontrol: Hangi kaynaklardan istek kabul edilece\u011fini belirler</p> <p>\u00d6rnek Kod: <pre><code>// CORS yap\u0131land\u0131rmas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options =&gt;\n    {\n        options.AddPolicy(\"AllowSpecificOrigin\",\n            builder =&gt; builder.WithOrigins(\"https://example.com\")\n                            .AllowAnyMethod()\n                            .AllowAnyHeader());\n    });\n}\n\n// CORS middleware kullan\u0131m\u0131\npublic void Configure(IApplicationBuilder app)\n{\n    app.UseCors(\"AllowSpecificOrigin\");\n}\n</code></pre></p>"},{"location":"junior/security-basics/cors/#2-cors-politikalar-nasl-yaplandrlr","title":"2. CORS politikalar\u0131 nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?","text":"<p>Cevap: CORS politikalar\u0131 i\u00e7in: - Origin belirleme - HTTP metodlar\u0131 - Header'lar - Credentials - Preflight istekleri</p> <p>\u00d6rnek Kod: <pre><code>// Detayl\u0131 CORS politikas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options =&gt;\n    {\n        options.AddPolicy(\"CustomPolicy\", builder =&gt;\n        {\n            builder.WithOrigins(\"https://api.example.com\")\n                   .WithMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                   .WithHeaders(\"Authorization\", \"Content-Type\")\n                   .AllowCredentials()\n                   .SetPreflightMaxAge(TimeSpan.FromMinutes(10));\n        });\n    });\n}\n\n// Farkl\u0131 ortamlar i\u00e7in CORS\npublic void ConfigureServices(IServiceCollection services, IWebHostEnvironment env)\n{\n    services.AddCors(options =&gt;\n    {\n        if (env.IsDevelopment())\n        {\n            options.AddPolicy(\"DevelopmentPolicy\",\n                builder =&gt; builder.AllowAnyOrigin()\n                                .AllowAnyMethod()\n                                .AllowAnyHeader());\n        }\n        else\n        {\n            options.AddPolicy(\"ProductionPolicy\",\n                builder =&gt; builder.WithOrigins(\"https://production.com\")\n                                .WithMethods(\"GET\", \"POST\")\n                                .WithHeaders(\"Authorization\"));\n        }\n    });\n}\n</code></pre></p>"},{"location":"junior/security-basics/cors/#3-preflight-istekleri-nedir-ve-nasl-yonetilir","title":"3. Preflight istekleri nedir ve nas\u0131l y\u00f6netilir?","text":"<p>Cevap: Preflight istekleri, karma\u015f\u0131k CORS isteklerinden \u00f6nce g\u00f6nderilen OPTIONS istekleridir. Y\u00f6netimi i\u00e7in: - OPTIONS isteklerini i\u015fleme - CORS header'lar\u0131n\u0131 ayarlama - Cache kontrol\u00fc - Timeout y\u00f6netimi</p> <p>\u00d6rnek Kod: <pre><code>// Preflight istek y\u00f6netimi\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options =&gt;\n    {\n        options.AddPolicy(\"PreflightPolicy\", builder =&gt;\n        {\n            builder.WithOrigins(\"https://api.example.com\")\n                   .WithMethods(\"GET\", \"POST\", \"OPTIONS\")\n                   .WithHeaders(\"Authorization\", \"Content-Type\")\n                   .SetPreflightMaxAge(TimeSpan.FromMinutes(10));\n        });\n    });\n}\n\n// Preflight middleware\npublic class PreflightMiddleware\n{\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.Method == \"OPTIONS\")\n        {\n            context.Response.Headers.Add(\"Access-Control-Allow-Origin\", \"https://api.example.com\");\n            context.Response.Headers.Add(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n            context.Response.Headers.Add(\"Access-Control-Allow-Headers\", \"Authorization, Content-Type\");\n            context.Response.Headers.Add(\"Access-Control-Max-Age\", \"600\");\n            context.Response.StatusCode = 204;\n            return;\n        }\n        await _next(context);\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/cors/#4-cors-guvenlik-riskleri-nelerdir-ve-nasl-onlenir","title":"4. CORS g\u00fcvenlik riskleri nelerdir ve nas\u0131l \u00f6nlenir?","text":"<p>Cevap: CORS g\u00fcvenlik riskleri: - A\u00e7\u0131k origin politikalar\u0131 - Hassas veri s\u0131z\u0131nt\u0131s\u0131 - CSRF sald\u0131r\u0131lar\u0131 - Header enjeksiyonu</p> <p>\u00d6rnek Kod: <pre><code>// G\u00fcvenli CORS yap\u0131land\u0131rmas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options =&gt;\n    {\n        options.AddPolicy(\"SecurePolicy\", builder =&gt;\n        {\n            builder.WithOrigins(\"https://trusted-domain.com\")\n                   .WithMethods(\"GET\", \"POST\")\n                   .WithHeaders(\"Content-Type\")\n                   .DisallowCredentials()\n                   .SetPreflightMaxAge(TimeSpan.FromMinutes(5));\n        });\n    });\n}\n\n// CORS g\u00fcvenlik kontrol\u00fc\npublic class CorsSecurityMiddleware\n{\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var origin = context.Request.Headers[\"Origin\"].ToString();\n        if (!IsTrustedOrigin(origin))\n        {\n            context.Response.StatusCode = 403;\n            return;\n        }\n\n        context.Response.Headers.Add(\"Access-Control-Allow-Origin\", origin);\n        context.Response.Headers.Add(\"Access-Control-Allow-Methods\", \"GET, POST\");\n        context.Response.Headers.Add(\"Access-Control-Allow-Headers\", \"Content-Type\");\n        await _next(context);\n    }\n\n    private bool IsTrustedOrigin(string origin)\n    {\n        var trustedOrigins = new[] { \"https://trusted-domain.com\" };\n        return trustedOrigins.Contains(origin);\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/cors/#5-cors-performans-optimizasyonu-nasl-yaplr","title":"5. CORS performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: CORS performans optimizasyonu i\u00e7in: - Preflight \u00f6nbellekleme - Header optimizasyonu - Origin kontrol\u00fc - Middleware s\u0131ralamas\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Performans odakl\u0131 CORS yap\u0131land\u0131rmas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options =&gt;\n    {\n        options.AddPolicy(\"PerformancePolicy\", builder =&gt;\n        {\n            builder.WithOrigins(\"https://api.example.com\")\n                   .WithMethods(\"GET\", \"POST\")\n                   .WithHeaders(\"Content-Type\")\n                   .SetPreflightMaxAge(TimeSpan.FromHours(1))\n                   .SetIsOriginAllowedToAllowWildcardSubdomains();\n        });\n    });\n}\n\n// \u00d6nbellek y\u00f6netimi\npublic class CorsCacheMiddleware\n{\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.Method == \"OPTIONS\")\n        {\n            context.Response.Headers.Add(\"Cache-Control\", \"public, max-age=3600\");\n        }\n        await _next(context);\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/cors/#best-practices","title":"Best Practices","text":"<ol> <li>G\u00fcvenlik</li> <li>Spesifik origin'leri belirtin</li> <li>Gereksiz header'lar\u0131 k\u0131s\u0131tlay\u0131n</li> <li>Credentials kullan\u0131m\u0131n\u0131 s\u0131n\u0131rlay\u0131n</li> <li> <p>Preflight \u00f6nbellekleme s\u00fcresini optimize edin</p> </li> <li> <p>Performans</p> </li> <li>Preflight isteklerini \u00f6nbelle\u011fe al\u0131n</li> <li>Gereksiz header'lar\u0131 kald\u0131r\u0131n</li> <li>Origin kontrol\u00fcn\u00fc optimize edin</li> <li> <p>Middleware s\u0131ralamas\u0131n\u0131 do\u011fru yap\u0131n</p> </li> <li> <p>Yap\u0131land\u0131rma</p> </li> <li>Ortama g\u00f6re farkl\u0131 politikalar kullan\u0131n</li> <li>Header'lar\u0131 minimumda tutun</li> <li>Timeout de\u011ferlerini optimize edin</li> <li>Hata y\u00f6netimini etkinle\u015ftirin</li> </ol>"},{"location":"junior/security-basics/cors/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core CORS</li> <li>MDN CORS</li> <li>CORS Best Practices </li> </ul>"},{"location":"junior/security-basics/https/","title":"HTTPS","text":""},{"location":"junior/security-basics/https/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>HTTPS (Hypertext Transfer Protocol Secure), HTTP protokol\u00fcn\u00fcn g\u00fcvenli versiyonudur. SSL/TLS protokolleri kullan\u0131larak veri iletiminin \u015fifrelenmesini sa\u011flar. Bu sayede verilerin g\u00fcvenli bir \u015fekilde iletilmesi ve gizlili\u011finin korunmas\u0131 sa\u011flan\u0131r.</p>"},{"location":"junior/security-basics/https/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/security-basics/https/#1-ssltls-nedir-ve-nasl-calsr","title":"1. SSL/TLS nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: SSL (Secure Sockets Layer) ve TLS (Transport Layer Security), internet \u00fczerinden g\u00fcvenli veri ileti\u015fimi sa\u011flayan kriptografik protokollerdir. \u00c7al\u0131\u015fma prensibi: 1. Handshake (El s\u0131k\u0131\u015fma) 2. Anahtar de\u011fi\u015fimi 3. Veri \u015fifreleme 4. Veri iletimi</p> <p>\u00d6rnek Kod: <pre><code>// SSL/TLS yap\u0131land\u0131rmas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddHttpsRedirection(options =&gt;\n    {\n        options.RedirectStatusCode = StatusCodes.Status308PermanentRedirect;\n        options.HttpsPort = 443;\n    });\n\n    services.AddHsts(options =&gt;\n    {\n        options.Preload = true;\n        options.IncludeSubDomains = true;\n        options.MaxAge = TimeSpan.FromDays(365);\n    });\n}\n\n// HTTPS zorunlulu\u011fu\n[RequireHttps]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class SecureController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult GetSecureData()\n    {\n        return Ok(\"Secure data\");\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/https/#2-sertifika-yonetimi-nasl-yaplr","title":"2. Sertifika y\u00f6netimi nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Sertifika y\u00f6netimi i\u00e7in: - Sertifika olu\u015fturma - Sertifika do\u011frulama - Sertifika yenileme - Sertifika depolama</p> <p>\u00d6rnek Kod: <pre><code>// Sertifika yap\u0131land\u0131rmas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCertificateForwarding(options =&gt;\n    {\n        options.CertificateHeader = \"X-ARR-ClientCert\";\n        options.HeaderConverter = (headerValue) =&gt;\n        {\n            X509Certificate2 certificate = null;\n            if (!string.IsNullOrWhiteSpace(headerValue))\n            {\n                byte[] bytes = Convert.FromBase64String(headerValue);\n                certificate = new X509Certificate2(bytes);\n            }\n            return certificate;\n        };\n    });\n}\n\n// Sertifika do\u011frulama\npublic class CertificateValidationService\n{\n    public bool ValidateCertificate(X509Certificate2 certificate)\n    {\n        // Sertifika ge\u00e7erlilik s\u00fcresi kontrol\u00fc\n        if (DateTime.Now &gt; certificate.NotAfter)\n            return false;\n\n        // Sertifika zinciri do\u011frulama\n        var chain = new X509Chain();\n        chain.ChainPolicy.RevocationMode = X509RevocationMode.Online;\n        chain.ChainPolicy.RevocationFlag = X509RevocationFlag.ExcludeRoot;\n        chain.ChainPolicy.VerificationFlags = X509VerificationFlags.NoFlag;\n        chain.ChainPolicy.VerificationTime = DateTime.Now;\n        chain.ChainPolicy.UrlRetrievalTimeout = new TimeSpan(0, 0, 30);\n\n        return chain.Build(certificate);\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/https/#3-https-yonlendirmesi-nasl-yaplr","title":"3. HTTPS y\u00f6nlendirmesi nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: HTTPS y\u00f6nlendirmesi i\u00e7in: - HTTP'den HTTPS'e y\u00f6nlendirme - HSTS (HTTP Strict Transport Security) - Port y\u00f6nlendirme - \u00d6zel domain y\u00f6nlendirme</p> <p>\u00d6rnek Kod: <pre><code>// HTTPS y\u00f6nlendirme yap\u0131land\u0131rmas\u0131\npublic void Configure(IApplicationBuilder app)\n{\n    app.UseHttpsRedirection();\n    app.UseHsts();\n\n    // \u00d6zel y\u00f6nlendirme kurallar\u0131\n    app.UseRewriter(new RewriteOptions()\n        .AddRedirectToHttps(StatusCodes.Status301MovedPermanently, 443)\n        .AddRedirect(\"^old-path/(.*)\", \"new-path/$1\", StatusCodes.Status301MovedPermanently));\n}\n\n// HSTS yap\u0131land\u0131rmas\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddHsts(options =&gt;\n    {\n        options.Preload = true;\n        options.IncludeSubDomains = true;\n        options.MaxAge = TimeSpan.FromDays(365);\n        options.ExcludedHosts.Add(\"example.com\");\n    });\n}\n</code></pre></p>"},{"location":"junior/security-basics/https/#4-ssltls-guvenlik-ayarlar-nasl-yaplandrlr","title":"4. SSL/TLS g\u00fcvenlik ayarlar\u0131 nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?","text":"<p>Cevap: SSL/TLS g\u00fcvenlik ayarlar\u0131 i\u00e7in: - \u015eifreleme algoritmalar\u0131 - Protokol versiyonlar\u0131 - Anahtar uzunluklar\u0131 - G\u00fcvenlik politikalar\u0131</p> <p>\u00d6rnek Kod: <pre><code>// SSL/TLS g\u00fcvenlik ayarlar\u0131\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddHttpsRedirection(options =&gt;\n    {\n        options.RedirectStatusCode = StatusCodes.Status308PermanentRedirect;\n        options.HttpsPort = 443;\n    });\n\n    services.Configure&lt;KestrelServerOptions&gt;(options =&gt;\n    {\n        options.ConfigureHttpsDefaults(httpsOptions =&gt;\n        {\n            httpsOptions.SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13;\n            httpsOptions.ClientCertificateMode = ClientCertificateMode.RequireCertificate;\n            httpsOptions.CheckCertificateRevocation = true;\n        });\n    });\n}\n\n// \u00d6zel SSL/TLS politikas\u0131\npublic class SslPolicy\n{\n    public static bool ValidateServerCertificate(\n        object sender,\n        X509Certificate certificate,\n        X509Chain chain,\n        SslPolicyErrors sslPolicyErrors)\n    {\n        if (sslPolicyErrors == SslPolicyErrors.None)\n            return true;\n\n        // \u00d6zel do\u011frulama kurallar\u0131\n        if (sslPolicyErrors == SslPolicyErrors.RemoteCertificateChainErrors)\n        {\n            // Zincir do\u011frulama\n            return chain.ChainStatus\n                .All(status =&gt; status.Status == X509ChainStatusFlags.NoError);\n        }\n\n        return false;\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/https/#5-https-performans-optimizasyonu-nasl-yaplr","title":"5. HTTPS performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: HTTPS performans optimizasyonu i\u00e7in: - Session resumption - OCSP stapling - HTTP/2 kullan\u0131m\u0131 - \u00d6nbellek y\u00f6netimi</p> <p>\u00d6rnek Kod: <pre><code>// HTTPS performans optimizasyonu\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.Configure&lt;KestrelServerOptions&gt;(options =&gt;\n    {\n        options.ConfigureHttpsDefaults(httpsOptions =&gt;\n        {\n            // Session resumption\n            httpsOptions.SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13;\n            httpsOptions.AllowResume = true;\n\n            // OCSP stapling\n            httpsOptions.UseOcspStapling = true;\n\n            // HTTP/2\n            options.Listen(IPAddress.Any, 443, listenOptions =&gt;\n            {\n                listenOptions.UseHttps(httpsOptions =&gt;\n                {\n                    httpsOptions.HttpProtocols = HttpProtocols.Http2;\n                });\n            });\n        });\n    });\n}\n\n// \u00d6nbellek y\u00f6netimi\npublic class HttpsCacheMiddleware\n{\n    public async Task InvokeAsync(HttpContext context)\n    {\n        context.Response.Headers[HeaderNames.CacheControl] = \"public, max-age=31536000\";\n        await _next(context);\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/https/#best-practices","title":"Best Practices","text":"<ol> <li>G\u00fcvenlik</li> <li>En g\u00fcncel SSL/TLS versiyonlar\u0131n\u0131 kullan\u0131n</li> <li>G\u00fc\u00e7l\u00fc \u015fifreleme algoritmalar\u0131 se\u00e7in</li> <li>Sertifikalar\u0131 d\u00fczenli olarak yenileyin</li> <li> <p>HSTS kullan\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Session resumption kullan\u0131n</li> <li>OCSP stapling etkinle\u015ftirin</li> <li>HTTP/2 kullan\u0131n</li> <li> <p>\u00d6nbellek y\u00f6netimini optimize edin</p> </li> <li> <p>Yap\u0131land\u0131rma</p> </li> <li>G\u00fcvenli varsay\u0131lan ayarlar kullan\u0131n</li> <li>D\u00fczenli g\u00fcvenlik taramalar\u0131 yap\u0131n</li> <li>Sertifika y\u00f6netimini otomatikle\u015ftirin</li> <li>Hata loglamay\u0131 etkinle\u015ftirin</li> </ol>"},{"location":"junior/security-basics/https/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core HTTPS</li> <li>SSL/TLS Best Practices</li> <li>Let's Encrypt Documentation </li> </ul>"},{"location":"junior/security-basics/input-validation/","title":"Input Validation","text":""},{"location":"junior/security-basics/input-validation/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Input Validation (Girdi Do\u011frulama), uygulamaya gelen t\u00fcm verilerin g\u00fcvenli ve beklenen formatta oldu\u011fundan emin olmak i\u00e7in yap\u0131lan kontrollerdir. Bu i\u015flem, g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 \u00f6nlemek ve veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc korumak i\u00e7in kritik \u00f6neme sahiptir.</p>"},{"location":"junior/security-basics/input-validation/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"junior/security-basics/input-validation/#1-input-validation-neden-onemlidir","title":"1. Input Validation neden \u00f6nemlidir?","text":"<p>Cevap: Input Validation'\u0131n \u00f6nemi: - G\u00fcvenlik: SQL Injection, XSS gibi sald\u0131r\u0131lar\u0131 \u00f6nler - Veri B\u00fct\u00fcnl\u00fc\u011f\u00fc: Beklenen veri format\u0131n\u0131 sa\u011flar - Kullan\u0131c\u0131 Deneyimi: Hatal\u0131 giri\u015fleri erken tespit eder - Sistem Performans\u0131: Ge\u00e7ersiz verilerin i\u015flenmesini engeller</p> <p>\u00d6rnek Kod: <pre><code>// Model do\u011frulama\npublic class UserModel\n{\n    [Required(ErrorMessage = \"Kullan\u0131c\u0131 ad\u0131 zorunludur\")]\n    [StringLength(50, MinimumLength = 3, ErrorMessage = \"Kullan\u0131c\u0131 ad\u0131 3-50 karakter aras\u0131nda olmal\u0131d\u0131r\")]\n    [RegularExpression(@\"^[a-zA-Z0-9_]+$\", ErrorMessage = \"Kullan\u0131c\u0131 ad\u0131 sadece harf, rakam ve alt \u00e7izgi i\u00e7erebilir\")]\n    public string Username { get; set; }\n\n    [Required(ErrorMessage = \"E-posta zorunludur\")]\n    [EmailAddress(ErrorMessage = \"Ge\u00e7erli bir e-posta adresi giriniz\")]\n    public string Email { get; set; }\n}\n\n// Controller'da do\u011frulama\n[HttpPost]\npublic IActionResult CreateUser(UserModel model)\n{\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n    // \u0130\u015flem devam eder...\n}\n</code></pre></p>"},{"location":"junior/security-basics/input-validation/#2-input-validation-yontemleri-nelerdir","title":"2. Input Validation y\u00f6ntemleri nelerdir?","text":"<p>Cevap: Input Validation y\u00f6ntemleri: - Client-side validation - Server-side validation - Model validation - Custom validation - Sanitization</p> <p>\u00d6rnek Kod: <pre><code>// Custom validation attribute\npublic class AgeValidationAttribute : ValidationAttribute\n{\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        if (value is int age)\n        {\n            if (age &lt; 18)\n            {\n                return new ValidationResult(\"Ya\u015f 18'den k\u00fc\u00e7\u00fck olamaz\");\n            }\n            if (age &gt; 120)\n            {\n                return new ValidationResult(\"Ge\u00e7erli bir ya\u015f giriniz\");\n            }\n        }\n        return ValidationResult.Success;\n    }\n}\n\n// Sanitization \u00f6rne\u011fi\npublic class InputSanitizer\n{\n    public string SanitizeInput(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n            return input;\n\n        // HTML encoding\n        input = WebUtility.HtmlEncode(input);\n\n        // SQL injection korumas\u0131\n        input = input.Replace(\"'\", \"''\");\n\n        // XSS korumas\u0131\n        input = Regex.Replace(input, \"&lt;script.*?&gt;.*?&lt;/script&gt;\", \"\", RegexOptions.IgnoreCase);\n\n        return input;\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/input-validation/#3-sql-injection-nasl-onlenir","title":"3. SQL Injection nas\u0131l \u00f6nlenir?","text":"<p>Cevap: SQL Injection \u00f6nleme y\u00f6ntemleri: - Parametreli sorgular - Stored procedures - ORM kullan\u0131m\u0131 - Input sanitization - Minimum yetki prensibi</p> <p>\u00d6rnek Kod: <pre><code>// G\u00fcvenli olmayan kod\npublic IActionResult GetUser(string username)\n{\n    var query = $\"SELECT * FROM Users WHERE Username = '{username}'\";\n    // SQL Injection riski!\n}\n\n// G\u00fcvenli kod (Entity Framework)\npublic IActionResult GetUser(string username)\n{\n    var user = _context.Users\n        .Where(u =&gt; u.Username == username)\n        .FirstOrDefault();\n    return Ok(user);\n}\n\n// G\u00fcvenli kod (Dapper)\npublic IActionResult GetUser(string username)\n{\n    var query = \"SELECT * FROM Users WHERE Username = @Username\";\n    var parameters = new { Username = username };\n    var user = _connection.QueryFirstOrDefault&lt;User&gt;(query, parameters);\n    return Ok(user);\n}\n</code></pre></p>"},{"location":"junior/security-basics/input-validation/#4-xss-cross-site-scripting-nasl-onlenir","title":"4. XSS (Cross-Site Scripting) nas\u0131l \u00f6nlenir?","text":"<p>Cevap: XSS \u00f6nleme y\u00f6ntemleri: - Output encoding - Content Security Policy - Input validation - Sanitization - HttpOnly cookies</p> <p>\u00d6rnek Kod: <pre><code>// XSS korumas\u0131\npublic class XssProtectionMiddleware\n{\n    public async Task InvokeAsync(HttpContext context)\n    {\n        context.Response.Headers.Add(\"X-XSS-Protection\", \"1; mode=block\");\n        context.Response.Headers.Add(\"Content-Security-Policy\", \n            \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval';\");\n\n        await _next(context);\n    }\n}\n\n// Output encoding\npublic class HtmlEncoder\n{\n    public string EncodeOutput(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n            return input;\n\n        return WebUtility.HtmlEncode(input);\n    }\n}\n\n// View'da encoding\n@Html.Raw(Model.Content) // G\u00fcvenli de\u011fil\n@Html.Encode(Model.Content) // G\u00fcvenli\n</code></pre></p>"},{"location":"junior/security-basics/input-validation/#5-file-upload-guvenligi-nasl-saglanr","title":"5. File Upload g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?","text":"<p>Cevap: File Upload g\u00fcvenli\u011fi i\u00e7in: - Dosya tipi kontrol\u00fc - Dosya boyutu s\u0131n\u0131rlamas\u0131 - G\u00fcvenli dosya isimlendirme - Vir\u00fcs taramas\u0131 - G\u00fcvenli depolama</p> <p>\u00d6rnek Kod: <pre><code>// G\u00fcvenli dosya y\u00fckleme\npublic class FileUploadService\n{\n    private readonly string[] _allowedExtensions = { \".jpg\", \".png\", \".pdf\" };\n    private readonly long _maxFileSize = 5 * 1024 * 1024; // 5MB\n\n    public async Task&lt;string&gt; UploadFile(IFormFile file)\n    {\n        // Dosya tipi kontrol\u00fc\n        var extension = Path.GetExtension(file.FileName).ToLowerInvariant();\n        if (!_allowedExtensions.Contains(extension))\n        {\n            throw new InvalidOperationException(\"Ge\u00e7ersiz dosya tipi\");\n        }\n\n        // Dosya boyutu kontrol\u00fc\n        if (file.Length &gt; _maxFileSize)\n        {\n            throw new InvalidOperationException(\"Dosya boyutu \u00e7ok b\u00fcy\u00fck\");\n        }\n\n        // G\u00fcvenli dosya ismi olu\u015fturma\n        var fileName = $\"{Guid.NewGuid()}{extension}\";\n        var filePath = Path.Combine(\"uploads\", fileName);\n\n        // Dosyay\u0131 g\u00fcvenli \u015fekilde kaydetme\n        using (var stream = new FileStream(filePath, FileMode.Create))\n        {\n            await file.CopyToAsync(stream);\n        }\n\n        return fileName;\n    }\n}\n</code></pre></p>"},{"location":"junior/security-basics/input-validation/#best-practices","title":"Best Practices","text":"<ol> <li>G\u00fcvenlik</li> <li>T\u00fcm girdileri do\u011frulay\u0131n</li> <li>Whitelist yakla\u015f\u0131m\u0131 kullan\u0131n</li> <li>Minimum yetki prensibini uygulay\u0131n</li> <li> <p>Hata mesajlar\u0131n\u0131 g\u00fcvenli hale getirin</p> </li> <li> <p>Performans</p> </li> <li>Do\u011frulamay\u0131 erken yap\u0131n</li> <li>Gereksiz kontrollerden ka\u00e7\u0131n\u0131n</li> <li>\u00d6nbellek kullan\u0131n</li> <li> <p>Batch i\u015flemleri optimize edin</p> </li> <li> <p>Kullan\u0131labilirlik</p> </li> <li>Anlaml\u0131 hata mesajlar\u0131 verin</li> <li>Client-side validation kullan\u0131n</li> <li>Kullan\u0131c\u0131 dostu geri bildirimler sa\u011flay\u0131n</li> <li>Form tasar\u0131m\u0131n\u0131 iyile\u015ftirin</li> </ol>"},{"location":"junior/security-basics/input-validation/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OWASP Input Validation</li> <li>ASP.NET Core Validation</li> <li>XSS Prevention </li> </ul>"},{"location":"junior/web-development/","title":"Web Development Basics","text":""},{"location":"junior/web-development/#giris","title":"Giri\u015f","text":"<p>Web geli\u015ftirme temelleri, .NET backend geli\u015ftiricileri i\u00e7in \u00f6nemli bir konudur. Backend API'ler geli\u015ftirirken, frontend teknolojileri ve web standartlar\u0131 hakk\u0131nda temel bilgiye sahip olmak gerekir.</p>"},{"location":"junior/web-development/#web-development-temel-konular","title":"Web Development Temel Konular\u0131","text":""},{"location":"junior/web-development/#1-html-css-basics","title":"1. HTML &amp; CSS Basics","text":"<ul> <li>HTML yap\u0131s\u0131 ve semantik</li> <li>CSS styling ve layout</li> <li>Responsive design temelleri</li> <li>CSS framework'leri</li> </ul>"},{"location":"junior/web-development/#2-javascript-basics","title":"2. JavaScript Basics","text":"<ul> <li>JavaScript syntax ve temel kavramlar</li> <li>DOM manipulation</li> <li>Event handling</li> <li>AJAX ve fetch API</li> </ul>"},{"location":"junior/web-development/#3-http-fundamentals","title":"3. HTTP Fundamentals","text":"<ul> <li>HTTP protokol\u00fc</li> <li>Request/Response yap\u0131s\u0131</li> <li>HTTP methods</li> <li>Status codes</li> <li>Headers</li> </ul>"},{"location":"junior/web-development/#4-web-security-basics","title":"4. Web Security Basics","text":"<ul> <li>XSS (Cross-Site Scripting)</li> <li>CSRF (Cross-Site Request Forgery)</li> <li>SQL Injection</li> <li>Input validation</li> <li>HTTPS</li> </ul>"},{"location":"junior/web-development/#web-developmentn-backend-gelistiriciler-icin-onemi","title":"Web Development'\u0131n Backend Geli\u015ftiriciler \u0130\u00e7in \u00d6nemi","text":"<ol> <li>API Tasar\u0131m\u0131</li> <li>RESTful API prensipleri</li> <li>HTTP status codes</li> <li> <p>Request/Response formatlar\u0131</p> </li> <li> <p>Frontend Entegrasyonu</p> </li> <li>CORS yap\u0131land\u0131rmas\u0131</li> <li>Authentication/Authorization</li> <li> <p>Data serialization</p> </li> <li> <p>Web G\u00fcvenli\u011fi</p> </li> <li>Security headers</li> <li>Input validation</li> <li> <p>Output encoding</p> </li> <li> <p>Performance</p> </li> <li>Caching stratejileri</li> <li>Compression</li> <li>Minification</li> </ol>"},{"location":"junior/web-development/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/web-development/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>HTML ve CSS'in backend geli\u015ftiriciler i\u00e7in \u00f6nemi nedir?</li> <li> <p>Cevap: Backend API'ler frontend ile entegre olur, bu y\u00fczden HTML/CSS bilgisi API tasar\u0131m\u0131nda ve dok\u00fcmantasyonda \u00f6nemlidir.</p> </li> <li> <p>JavaScript'in backend geli\u015ftiriciler i\u00e7in \u00f6nemi nedir?</p> </li> <li> <p>Cevap: Modern web uygulamalar\u0131nda JavaScript backend ile s\u0131k etkile\u015fim kurar, API kullan\u0131m\u0131 ve hata y\u00f6netimi i\u00e7in \u00f6nemlidir.</p> </li> <li> <p>HTTP protokol\u00fcn\u00fcn temel bile\u015fenleri nelerdir?</p> </li> <li> <p>Cevap: Request line, headers, body ve response line, status code, headers, body.</p> </li> <li> <p>Web g\u00fcvenli\u011fi i\u00e7in hangi temel \u00f6nlemler al\u0131nmal\u0131d\u0131r?</p> </li> <li> <p>Cevap: Input validation, output encoding, HTTPS kullan\u0131m\u0131, security headers.</p> </li> <li> <p>Responsive design nedir ve neden \u00f6nemlidir?</p> </li> <li>Cevap: Farkl\u0131 cihazlarda uyumlu g\u00f6r\u00fcn\u00fcm sa\u011flayan tasar\u0131m yakla\u015f\u0131m\u0131, kullan\u0131c\u0131 deneyimi i\u00e7in kritiktir.</li> </ol>"},{"location":"junior/web-development/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>CORS nedir ve nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</li> <li> <p>Cevap: Cross-Origin Resource Sharing, farkl\u0131 domain'lerden gelen isteklere izin vermek i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>HTTP status codes'lar\u0131n kategorileri nelerdir?</p> </li> <li> <p>Cevap: 1xx (Informational), 2xx (Success), 3xx (Redirection), 4xx (Client Error), 5xx (Server Error).</p> </li> <li> <p>XSS sald\u0131r\u0131s\u0131 nedir ve nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Cross-Site Scripting, kullan\u0131c\u0131 input'lar\u0131n\u0131 validate ederek ve output'lar\u0131 encode ederek \u00f6nlenir.</p> </li> <li> <p>AJAX nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Asynchronous JavaScript and XML, sayfa yenilenmeden veri al\u0131\u015fveri\u015fi yapmay\u0131 sa\u011flar.</p> </li> <li> <p>Web API'lerde authentication nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap: JWT tokens, API keys, OAuth, session-based authentication gibi y\u00f6ntemlerle.</li> </ol>"},{"location":"junior/web-development/#best-practices","title":"Best Practices","text":"<ol> <li>API Tasar\u0131m\u0131</li> <li>RESTful prensipleri uygulay\u0131n</li> <li>Tutarl\u0131 naming convention kullan\u0131n</li> <li> <p>Proper HTTP status codes kullan\u0131n</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation yap\u0131n</li> <li>Output encoding uygulay\u0131n</li> <li>HTTPS kullan\u0131n</li> <li> <p>Security headers ekleyin</p> </li> <li> <p>Performance</p> </li> <li>Caching stratejileri uygulay\u0131n</li> <li>Compression kullan\u0131n</li> <li> <p>CDN kullanmay\u0131 de\u011ferlendirin</p> </li> <li> <p>Dok\u00fcmantasyon</p> </li> <li>API dok\u00fcmantasyonu haz\u0131rlay\u0131n</li> <li>\u00d6rnek request/response'lar ekleyin</li> <li>Error handling a\u00e7\u0131klay\u0131n</li> </ol>"},{"location":"junior/web-development/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>MDN Web Docs</li> <li>W3Schools</li> <li>HTTP Status Codes</li> <li>Web Security Guidelines</li> <li>REST API Design </li> </ul>"},{"location":"junior/web-development/html-css-basics/","title":"HTML &amp; CSS Basics","text":""},{"location":"junior/web-development/html-css-basics/#giris","title":"Giri\u015f","text":"<p>HTML (HyperText Markup Language) ve CSS (Cascading Style Sheets), web geli\u015ftirmenin temel yap\u0131 ta\u015flar\u0131d\u0131r. Backend geli\u015ftiriciler olarak, bu teknolojileri anlamak API tasar\u0131m\u0131 ve frontend entegrasyonu i\u00e7in kritiktir.</p>"},{"location":"junior/web-development/html-css-basics/#html-temelleri","title":"HTML Temelleri","text":""},{"location":"junior/web-development/html-css-basics/#html-yaps","title":"HTML Yap\u0131s\u0131","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"tr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Sayfa Ba\u015fl\u0131\u011f\u0131&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;Ana Ba\u015fl\u0131k&lt;/h1&gt;\n        &lt;nav&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"#home\"&gt;Ana Sayfa&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"#about\"&gt;Hakk\u0131nda&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;main&gt;\n        &lt;section&gt;\n            &lt;h2&gt;B\u00f6l\u00fcm Ba\u015fl\u0131\u011f\u0131&lt;/h2&gt;\n            &lt;p&gt;Paragraf metni&lt;/p&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy; 2024 T\u00fcm haklar\u0131 sakl\u0131d\u0131r&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#semantik-html-elementleri","title":"Semantik HTML Elementleri","text":"<ul> <li><code>&lt;header&gt;</code>: Sayfa ba\u015fl\u0131\u011f\u0131 ve navigasyon</li> <li><code>&lt;nav&gt;</code>: Navigasyon men\u00fcs\u00fc</li> <li><code>&lt;main&gt;</code>: Ana i\u00e7erik</li> <li><code>&lt;section&gt;</code>: \u0130\u00e7erik b\u00f6l\u00fcm\u00fc</li> <li><code>&lt;article&gt;</code>: Ba\u011f\u0131ms\u0131z i\u00e7erik</li> <li><code>&lt;aside&gt;</code>: Yan i\u00e7erik</li> <li><code>&lt;footer&gt;</code>: Sayfa alt bilgisi</li> </ul>"},{"location":"junior/web-development/html-css-basics/#form-elementleri","title":"Form Elementleri","text":"<pre><code>&lt;form action=\"/api/users\" method=\"POST\"&gt;\n    &lt;div&gt;\n        &lt;label for=\"username\"&gt;Kullan\u0131c\u0131 Ad\u0131:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"username\" name=\"username\" required&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n        &lt;label for=\"email\"&gt;E-posta:&lt;/label&gt;\n        &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n        &lt;label for=\"password\"&gt;\u015eifre:&lt;/label&gt;\n        &lt;input type=\"password\" id=\"password\" name=\"password\" required&gt;\n    &lt;/div&gt;\n\n    &lt;button type=\"submit\"&gt;Kaydet&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#css-temelleri","title":"CSS Temelleri","text":""},{"location":"junior/web-development/html-css-basics/#css-secicileri","title":"CSS Se\u00e7icileri","text":"<pre><code>/* Element se\u00e7ici */\nh1 {\n    color: blue;\n    font-size: 24px;\n}\n\n/* Class se\u00e7ici */\n.button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n}\n\n/* ID se\u00e7ici */\n#header {\n    background-color: #f8f9fa;\n    padding: 20px;\n}\n\n/* Descendant se\u00e7ici */\nnav ul li {\n    display: inline;\n    margin-right: 15px;\n}\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#css-box-model","title":"CSS Box Model","text":"<pre><code>.box {\n    width: 200px;\n    height: 100px;\n    padding: 20px;\n    border: 2px solid #333;\n    margin: 10px;\n    box-sizing: border-box;\n}\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#flexbox-layout","title":"Flexbox Layout","text":"<pre><code>.container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n.item {\n    flex: 1;\n    margin: 10px;\n}\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#grid-layout","title":"Grid Layout","text":"<pre><code>.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 20px;\n}\n\n.grid-item {\n    background-color: #f0f0f0;\n    padding: 20px;\n    text-align: center;\n}\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#responsive-design","title":"Responsive Design","text":""},{"location":"junior/web-development/html-css-basics/#media-queries","title":"Media Queries","text":"<pre><code>/* Mobil cihazlar */\n@media (max-width: 768px) {\n    .container {\n        flex-direction: column;\n    }\n\n    .grid-container {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Tablet cihazlar */\n@media (min-width: 769px) and (max-width: 1024px) {\n    .grid-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#viewport-meta-tag","title":"Viewport Meta Tag","text":"<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#css-frameworkleri","title":"CSS Framework'leri","text":""},{"location":"junior/web-development/html-css-basics/#bootstrap","title":"Bootstrap","text":"<pre><code>&lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;div class=\"card\"&gt;\n                &lt;div class=\"card-body\"&gt;\n                    &lt;h5 class=\"card-title\"&gt;Kart Ba\u015fl\u0131\u011f\u0131&lt;/h5&gt;\n                    &lt;p class=\"card-text\"&gt;Kart i\u00e7eri\u011fi&lt;/p&gt;\n                    &lt;button class=\"btn btn-primary\"&gt;Buton&lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"junior/web-development/html-css-basics/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/web-development/html-css-basics/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>HTML'de semantic elementler neden \u00f6nemlidir?</li> <li> <p>Cevap: SEO, accessibility ve kod okunabilirli\u011fi i\u00e7in \u00f6nemlidir. Arama motorlar\u0131 ve screen reader'lar sayfa yap\u0131s\u0131n\u0131 daha iyi anlar.</p> </li> <li> <p>CSS'de specificity nedir?</p> </li> <li> <p>Cevap: CSS kurallar\u0131n\u0131n hangi s\u0131rayla uygulanaca\u011f\u0131n\u0131 belirleyen kural. ID &gt; Class &gt; Element s\u0131ras\u0131nda \u00f6ncelik vard\u0131r.</p> </li> <li> <p>Responsive design nedir?</p> </li> <li> <p>Cevap: Farkl\u0131 ekran boyutlar\u0131nda uyumlu g\u00f6r\u00fcn\u00fcm sa\u011flayan tasar\u0131m yakla\u015f\u0131m\u0131. Media queries ve flexible layout kullan\u0131r.</p> </li> <li> <p>CSS Box Model nedir?</p> </li> <li> <p>Cevap: Content, padding, border ve margin'den olu\u015fan element yap\u0131s\u0131. <code>box-sizing: border-box</code> ile padding ve border dahil edilir.</p> </li> <li> <p>Flexbox ve Grid aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: Flexbox tek boyutlu (row veya column), Grid iki boyutlu layout i\u00e7in kullan\u0131l\u0131r. Flexbox daha esnek, Grid daha yap\u0131land\u0131r\u0131lm\u0131\u015f.</li> </ol>"},{"location":"junior/web-development/html-css-basics/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>CSS'de z-index nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: Elementlerin katman s\u0131ras\u0131n\u0131 belirler. Y\u00fcksek de\u011fer \u00f6nde g\u00f6r\u00fcn\u00fcr. Stacking context'e ba\u011fl\u0131d\u0131r.</p> </li> <li> <p>CSS'de inheritance nedir?</p> </li> <li> <p>Cevap: Child elementlerin parent elementlerden CSS \u00f6zelliklerini almas\u0131. Font, color gibi \u00f6zellikler inherit edilir.</p> </li> <li> <p>CSS'de pseudo-class ve pseudo-element nedir?</p> </li> <li> <p>Cevap: Pseudo-class (:hover, :focus) durumlar\u0131, pseudo-element (::before, ::after) i\u00e7erik eklemeyi sa\u011flar.</p> </li> <li> <p>CSS'de vendor prefix nedir?</p> </li> <li> <p>Cevap: Taray\u0131c\u0131 uyumlulu\u011fu i\u00e7in CSS \u00f6zelliklerinin \u00f6n\u00fcne eklenen prefix'ler (-webkit-, -moz- gibi).</p> </li> <li> <p>CSS'de BEM metodolojisi nedir?</p> </li> <li>Cevap: Block__Element--Modifier yap\u0131s\u0131. CSS class'lar\u0131n\u0131 organize etmek i\u00e7in kullan\u0131lan naming convention.</li> </ol>"},{"location":"junior/web-development/html-css-basics/#best-practices","title":"Best Practices","text":"<ol> <li>HTML</li> <li>Semantic elementler kullan\u0131n</li> <li>Alt text ekleyin</li> <li>Form validation yap\u0131n</li> <li> <p>Accessibility standartlar\u0131na uyun</p> </li> <li> <p>CSS</p> </li> <li>CSS reset kullan\u0131n</li> <li>Mobile-first yakla\u015f\u0131m benimseyin</li> <li>CSS variables kullan\u0131n</li> <li> <p>Performance i\u00e7in kritik CSS'i inline yap\u0131n</p> </li> <li> <p>Responsive Design</p> </li> <li>Breakpoint'leri mant\u0131kl\u0131 se\u00e7in</li> <li>Touch-friendly tasar\u0131m yap\u0131n</li> <li>Performance'\u0131 optimize edin</li> <li>Testing yap\u0131n</li> </ol>"},{"location":"junior/web-development/html-css-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>MDN HTML</li> <li>MDN CSS</li> <li>CSS Grid</li> <li>Flexbox</li> <li>Bootstrap Documentation </li> </ul>"},{"location":"junior/web-development/http-fundamentals/","title":"HTTP Fundamentals","text":""},{"location":"junior/web-development/http-fundamentals/#giris","title":"Giri\u015f","text":"<p>HTTP (HyperText Transfer Protocol), web \u00fczerinde veri al\u0131\u015fveri\u015fi yapmak i\u00e7in kullan\u0131lan temel protokold\u00fcr. Backend geli\u015ftiriciler olarak HTTP'i anlamak, API tasar\u0131m\u0131 ve web g\u00fcvenli\u011fi i\u00e7in kritiktir.</p>"},{"location":"junior/web-development/http-fundamentals/#http-protokolu","title":"HTTP Protokol\u00fc","text":""},{"location":"junior/web-development/http-fundamentals/#http-nedir","title":"HTTP Nedir?","text":"<p>HTTP, client (taray\u0131c\u0131) ve server aras\u0131nda veri al\u0131\u015fveri\u015fi yapmay\u0131 sa\u011flayan application layer protokol\u00fcd\u00fcr. Stateless bir protokold\u00fcr, yani her request ba\u011f\u0131ms\u0131zd\u0131r.</p>"},{"location":"junior/web-development/http-fundamentals/#http-versiyonlar","title":"HTTP Versiyonlar\u0131","text":"<ul> <li>HTTP/1.0: Basit request-response modeli</li> <li>HTTP/1.1: Persistent connections, chunked transfer</li> <li>HTTP/2: Multiplexing, server push, header compression</li> <li>HTTP/3: QUIC protokol\u00fc \u00fczerine kurulu, UDP tabanl\u0131</li> </ul>"},{"location":"junior/web-development/http-fundamentals/#http-requestresponse-yaps","title":"HTTP Request/Response Yap\u0131s\u0131","text":""},{"location":"junior/web-development/http-fundamentals/#http-request","title":"HTTP Request","text":"<pre><code>GET /api/users HTTP/1.1\nHost: api.example.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\nAccept: application/json\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\nContent-Type: application/json\n\n{\n  \"name\": \"Ahmet\",\n  \"email\": \"ahmet@example.com\"\n}\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#http-response","title":"HTTP Response","text":"<pre><code>HTTP/1.1 200 OK\nDate: Mon, 23 May 2024 22:38:34 GMT\nContent-Type: application/json\nContent-Length: 135\nServer: nginx/1.18.0\nCache-Control: no-cache\n\n{\n  \"id\": 123,\n  \"name\": \"Ahmet\",\n  \"email\": \"ahmet@example.com\",\n  \"createdAt\": \"2024-05-23T22:38:34Z\"\n}\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#http-methods","title":"HTTP Methods","text":""},{"location":"junior/web-development/http-fundamentals/#get","title":"GET","text":"<pre><code>GET /api/users HTTP/1.1\nHost: api.example.com\nAccept: application/json\n</code></pre> <p>\u00d6zellikler: - Veri okuma i\u00e7in kullan\u0131l\u0131r - Idempotent (birden fazla \u00e7a\u011fr\u0131 ayn\u0131 sonucu verir) - Cacheable - Request body genellikle kullan\u0131lmaz</p>"},{"location":"junior/web-development/http-fundamentals/#post","title":"POST","text":"<pre><code>POST /api/users HTTP/1.1\nHost: api.example.com\nContent-Type: application/json\n\n{\n  \"name\": \"Ahmet\",\n  \"email\": \"ahmet@example.com\"\n}\n</code></pre> <p>\u00d6zellikler: - Yeni kaynak olu\u015fturma - Non-idempotent - Request body gerekli - Cacheable de\u011fil</p>"},{"location":"junior/web-development/http-fundamentals/#put","title":"PUT","text":"<pre><code>PUT /api/users/123 HTTP/1.1\nHost: api.example.com\nContent-Type: application/json\n\n{\n  \"name\": \"Ahmet Y\u0131lmaz\",\n  \"email\": \"ahmet@example.com\"\n}\n</code></pre> <p>\u00d6zellikler: - Kaynak g\u00fcncelleme (tam g\u00fcncelleme) - Idempotent - Request body gerekli</p>"},{"location":"junior/web-development/http-fundamentals/#patch","title":"PATCH","text":"<pre><code>PATCH /api/users/123 HTTP/1.1\nHost: api.example.com\nContent-Type: application/json\n\n{\n  \"name\": \"Ahmet Y\u0131lmaz\"\n}\n</code></pre> <p>\u00d6zellikler: - K\u0131smi kaynak g\u00fcncelleme - Idempotent - Request body gerekli</p>"},{"location":"junior/web-development/http-fundamentals/#delete","title":"DELETE","text":"<pre><code>DELETE /api/users/123 HTTP/1.1\nHost: api.example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n</code></pre> <p>\u00d6zellikler: - Kaynak silme - Idempotent - Request body genellikle kullan\u0131lmaz</p>"},{"location":"junior/web-development/http-fundamentals/#http-status-codes","title":"HTTP Status Codes","text":""},{"location":"junior/web-development/http-fundamentals/#1xx-informational","title":"1xx - Informational","text":"<ul> <li>100 Continue: Request devam edebilir</li> <li>101 Switching Protocols: Protokol de\u011fi\u015fimi</li> </ul>"},{"location":"junior/web-development/http-fundamentals/#2xx-success","title":"2xx - Success","text":"<ul> <li>200 OK: Ba\u015far\u0131l\u0131</li> <li>201 Created: Kaynak olu\u015fturuldu</li> <li>204 No Content: Ba\u015far\u0131l\u0131 ama i\u00e7erik yok</li> </ul>"},{"location":"junior/web-development/http-fundamentals/#3xx-redirection","title":"3xx - Redirection","text":"<ul> <li>301 Moved Permanently: Kal\u0131c\u0131 y\u00f6nlendirme</li> <li>302 Found: Ge\u00e7ici y\u00f6nlendirme</li> <li>304 Not Modified: De\u011fi\u015fmemi\u015f (cache)</li> </ul>"},{"location":"junior/web-development/http-fundamentals/#4xx-client-error","title":"4xx - Client Error","text":"<ul> <li>400 Bad Request: Hatal\u0131 istek</li> <li>401 Unauthorized: Kimlik do\u011frulama gerekli</li> <li>403 Forbidden: Eri\u015fim yasak</li> <li>404 Not Found: Bulunamad\u0131</li> <li>422 Unprocessable Entity: \u0130\u015flenemeyen i\u00e7erik</li> </ul>"},{"location":"junior/web-development/http-fundamentals/#5xx-server-error","title":"5xx - Server Error","text":"<ul> <li>500 Internal Server Error: Sunucu hatas\u0131</li> <li>502 Bad Gateway: Gateway hatas\u0131</li> <li>503 Service Unavailable: Servis kullan\u0131lam\u0131yor</li> </ul>"},{"location":"junior/web-development/http-fundamentals/#http-headers","title":"HTTP Headers","text":""},{"location":"junior/web-development/http-fundamentals/#request-headers","title":"Request Headers","text":"<pre><code>Accept: application/json, text/html\nAccept-Language: tr-TR, tr;q=0.9, en;q=0.8\nAccept-Encoding: gzip, deflate, br\nAuthorization: Bearer &lt;token&gt;\nContent-Type: application/json\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#response-headers","title":"Response Headers","text":"<pre><code>Content-Type: application/json\nContent-Length: 135\nCache-Control: no-cache, no-store, must-revalidate\nETag: \"33a64df551\"\nLast-Modified: Mon, 23 May 2024 22:38:34 GMT\nSet-Cookie: sessionId=abc123; HttpOnly; Secure\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#common-headers","title":"Common Headers","text":"<ul> <li>Content-Type: Veri tipi (MIME type)</li> <li>Authorization: Kimlik do\u011frulama bilgisi</li> <li>Cache-Control: Cache davran\u0131\u015f\u0131</li> <li>ETag: Entity tag (cache validation)</li> <li>Location: Y\u00f6nlendirme URL'i</li> </ul>"},{"location":"junior/web-development/http-fundamentals/#http-request-lifecycle","title":"HTTP Request Lifecycle","text":""},{"location":"junior/web-development/http-fundamentals/#1-dns-resolution","title":"1. DNS Resolution","text":"<pre><code>Client -&gt; DNS Server: example.com IP'si nedir?\nDNS Server -&gt; Client: 93.184.216.34\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#2-tcp-connection","title":"2. TCP Connection","text":"<pre><code>Client -&gt; Server: SYN\nServer -&gt; Client: SYN-ACK\nClient -&gt; Server: ACK\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#3-http-request","title":"3. HTTP Request","text":"<pre><code>Client -&gt; Server: GET /api/users HTTP/1.1\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#4-server-processing","title":"4. Server Processing","text":"<pre><code>Server: Request'i i\u015fle, database'den veri al\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#5-http-response","title":"5. HTTP Response","text":"<pre><code>Server -&gt; Client: HTTP/1.1 200 OK + JSON data\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#6-connection-close-http10-veya-keep-alive-http11","title":"6. Connection Close (HTTP/1.0) veya Keep-Alive (HTTP/1.1)","text":""},{"location":"junior/web-development/http-fundamentals/#http-security","title":"HTTP Security","text":""},{"location":"junior/web-development/http-fundamentals/#https-http-over-ssltls","title":"HTTPS (HTTP over SSL/TLS)","text":"<pre><code>HTTPS://api.example.com/api/users\n</code></pre> <p>Avantajlar: - Encryption (\u015fifreleme) - Authentication (kimlik do\u011frulama) - Integrity (b\u00fct\u00fcnl\u00fck)</p>"},{"location":"junior/web-development/http-fundamentals/#security-headers","title":"Security Headers","text":"<pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\nContent-Security-Policy: default-src 'self'\n</code></pre>"},{"location":"junior/web-development/http-fundamentals/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/web-development/http-fundamentals/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>HTTP nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: Web \u00fczerinde veri al\u0131\u015fveri\u015fi yapmak i\u00e7in kullan\u0131lan application layer protokol\u00fc. Client-server modeli ile \u00e7al\u0131\u015f\u0131r.</p> </li> <li> <p>HTTP stateless protokol nedir?</p> </li> <li> <p>Cevap: Her request ba\u011f\u0131ms\u0131zd\u0131r, \u00f6nceki request'ler hat\u0131rlanmaz. Session y\u00f6netimi i\u00e7in ek mekanizmalar gerekir.</p> </li> <li> <p>GET ve POST aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: GET veri okuma, POST veri olu\u015fturma i\u00e7in kullan\u0131l\u0131r. GET idempotent, POST de\u011fildir.</p> </li> <li> <p>HTTP status codes kategorileri nelerdir?</p> </li> <li> <p>Cevap: 1xx (Informational), 2xx (Success), 3xx (Redirection), 4xx (Client Error), 5xx (Server Error).</p> </li> <li> <p>HTTPS nedir ve neden \u00f6nemlidir?</p> </li> <li>Cevap: HTTP over SSL/TLS, encryption, authentication ve integrity sa\u011flar. G\u00fcvenli veri ileti\u015fimi i\u00e7in kritiktir.</li> </ol>"},{"location":"junior/web-development/http-fundamentals/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>HTTP/1.1 vs HTTP/2 farklar\u0131 nelerdir?</li> <li> <p>Cevap: HTTP/2 multiplexing, server push, header compression gibi \u00f6zellikler sunar. Performance art\u0131\u015f\u0131 sa\u011flar.</p> </li> <li> <p>HTTP caching nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Cache-Control headers, ETag, Last-Modified ile cache validation yap\u0131l\u0131r. Conditional requests ile bandwidth tasarrufu.</p> </li> <li> <p>CORS nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Cross-Origin Resource Sharing, farkl\u0131 domain'lerden gelen isteklere izin vermek i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>HTTP authentication y\u00f6ntemleri nelerdir?</p> </li> <li> <p>Cevap: Basic Auth, Digest Auth, Bearer Token, API Key, OAuth 2.0 gibi y\u00f6ntemler.</p> </li> <li> <p>HTTP request smuggling nedir?</p> </li> <li>Cevap: HTTP headers'da yanl\u0131\u015f yap\u0131land\u0131rma ile sald\u0131rgan\u0131n request'leri manip\u00fcle etmesi.</li> </ol>"},{"location":"junior/web-development/http-fundamentals/#best-practices","title":"Best Practices","text":"<ol> <li>API Tasar\u0131m\u0131</li> <li>RESTful prensipleri uygulay\u0131n</li> <li>Proper HTTP methods kullan\u0131n</li> <li>Consistent status codes kullan\u0131n</li> <li> <p>Meaningful error messages verin</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>HTTPS kullan\u0131n</li> <li>Security headers ekleyin</li> <li>Input validation yap\u0131n</li> <li> <p>Rate limiting uygulay\u0131n</p> </li> <li> <p>Performance</p> </li> <li>Caching stratejileri uygulay\u0131n</li> <li>Compression kullan\u0131n</li> <li>CDN kullanmay\u0131 de\u011ferlendirin</li> <li> <p>HTTP/2 kullan\u0131n</p> </li> <li> <p>Monitoring</p> </li> <li>Status codes'lar\u0131 takip edin</li> <li>Response time'lar\u0131 \u00f6l\u00e7\u00fcn</li> <li>Error rate'leri izleyin</li> <li>Logging yap\u0131n</li> </ol>"},{"location":"junior/web-development/http-fundamentals/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>HTTP Status Codes</li> <li>MDN HTTP</li> <li>HTTP/2 Specification</li> <li>OWASP Security Headers</li> <li>HTTP Security Best Practices </li> </ul>"},{"location":"junior/web-development/javascript-basics/","title":"JavaScript Basics","text":""},{"location":"junior/web-development/javascript-basics/#giris","title":"Giri\u015f","text":"<p>JavaScript, web geli\u015ftirmenin temel programlama dilidir. Backend geli\u015ftiriciler olarak JavaScript'i anlamak, API entegrasyonu ve frontend-backend ileti\u015fimi i\u00e7in kritiktir.</p>"},{"location":"junior/web-development/javascript-basics/#javascript-temel-kavramlar","title":"JavaScript Temel Kavramlar","text":""},{"location":"junior/web-development/javascript-basics/#degiskenler-ve-veri-tipleri","title":"De\u011fi\u015fkenler ve Veri Tipleri","text":"<pre><code>// ES6+ let ve const kullan\u0131m\u0131\nlet userName = \"Ahmet\";\nconst userId = 12345;\nvar oldWay = \"eski y\u00f6ntem\"; // ES5\n\n// Veri tipleri\nlet string = \"Metin\";\nlet number = 42;\nlet boolean = true;\nlet array = [1, 2, 3, 4, 5];\nlet object = { name: \"Ahmet\", age: 25 };\nlet nullValue = null;\nlet undefinedValue = undefined;\n\n// Template literals\nlet message = `Merhaba ${userName}, ID'niz: ${userId}`;\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#fonksiyonlar","title":"Fonksiyonlar","text":"<pre><code>// Function declaration\nfunction greet(name) {\n    return `Merhaba ${name}!`;\n}\n\n// Function expression\nconst greetUser = function(name) {\n    return `Merhaba ${name}!`;\n};\n\n// Arrow function (ES6+)\nconst greetArrow = (name) =&gt; `Merhaba ${name}!`;\n\n// Default parameters\nconst greetWithDefault = (name = \"Misafir\") =&gt; `Merhaba ${name}!`;\n\n// Rest parameters\nconst sum = (...numbers) =&gt; numbers.reduce((total, num) =&gt; total + num, 0);\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#array-methods","title":"Array Methods","text":"<pre><code>const users = [\n    { id: 1, name: \"Ahmet\", age: 25 },\n    { id: 2, name: \"Mehmet\", age: 30 },\n    { id: 3, name: \"Ay\u015fe\", age: 28 }\n];\n\n// map - d\u00f6n\u00fc\u015ft\u00fcrme\nconst userNames = users.map(user =&gt; user.name);\n\n// filter - filtreleme\nconst youngUsers = users.filter(user =&gt; user.age &lt; 30);\n\n// find - bulma\nconst user = users.find(user =&gt; user.id === 2);\n\n// reduce - toplama\nconst totalAge = users.reduce((sum, user) =&gt; sum + user.age, 0);\n\n// forEach - d\u00f6ng\u00fc\nusers.forEach(user =&gt; console.log(`${user.name} - ${user.age}`));\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#object-destructuring-ve-spread","title":"Object Destructuring ve Spread","text":"<pre><code>const user = {\n    id: 1,\n    name: \"Ahmet\",\n    email: \"ahmet@example.com\",\n    address: {\n        city: \"\u0130stanbul\",\n        country: \"T\u00fcrkiye\"\n    }\n};\n\n// Destructuring\nconst { name, email, address: { city } } = user;\n\n// Spread operator\nconst userCopy = { ...user };\nconst userWithRole = { ...user, role: \"admin\" };\n\n// Object shorthand\nconst name2 = \"Mehmet\";\nconst age2 = 30;\nconst person = { name2, age2 }; // { name2: \"Mehmet\", age2: 30 }\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#dom-manipulation","title":"DOM Manipulation","text":""},{"location":"junior/web-development/javascript-basics/#element-secimi","title":"Element Se\u00e7imi","text":"<pre><code>// ID ile se\u00e7im\nconst header = document.getElementById('header');\n\n// Class ile se\u00e7im\nconst buttons = document.getElementsByClassName('btn');\n\n// Tag ile se\u00e7im\nconst paragraphs = document.getElementsByTagName('p');\n\n// Modern se\u00e7iciler\nconst element = document.querySelector('.class-name');\nconst elements = document.querySelectorAll('.class-name');\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#element-olusturma-ve-degistirme","title":"Element Olu\u015fturma ve De\u011fi\u015ftirme","text":"<pre><code>// Yeni element olu\u015fturma\nconst newDiv = document.createElement('div');\nnewDiv.className = 'new-element';\nnewDiv.textContent = 'Yeni i\u00e7erik';\n\n// Element ekleme\ndocument.body.appendChild(newDiv);\n\n// Element de\u011fi\u015ftirme\nconst title = document.querySelector('h1');\ntitle.textContent = 'Yeni Ba\u015fl\u0131k';\ntitle.style.color = 'blue';\n\n// Attribute ekleme/\u00e7\u0131karma\nconst link = document.querySelector('a');\nlink.setAttribute('target', '_blank');\nlink.removeAttribute('rel');\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#event-handling","title":"Event Handling","text":"<pre><code>// Click event\nconst button = document.querySelector('#submit-btn');\nbutton.addEventListener('click', function(event) {\n    event.preventDefault();\n    console.log('Buton t\u0131kland\u0131!');\n});\n\n// Form submit event\nconst form = document.querySelector('#user-form');\nform.addEventListener('submit', function(event) {\n    event.preventDefault();\n\n    const formData = new FormData(form);\n    const userData = Object.fromEntries(formData);\n\n    console.log('Form verisi:', userData);\n});\n\n// Input change event\nconst input = document.querySelector('#username');\ninput.addEventListener('input', function(event) {\n    console.log('Input de\u011feri:', event.target.value);\n});\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#ajax-ve-fetch-api","title":"AJAX ve Fetch API","text":""},{"location":"junior/web-development/javascript-basics/#fetch-api-modern","title":"Fetch API (Modern)","text":"<pre><code>// GET request\nfetch('/api/users')\n    .then(response =&gt; {\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return response.json();\n    })\n    .then(data =&gt; {\n        console.log('Kullan\u0131c\u0131lar:', data);\n    })\n    .catch(error =&gt; {\n        console.error('Hata:', error);\n    });\n\n// POST request\nconst createUser = async (userData) =&gt; {\n    try {\n        const response = await fetch('/api/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userData)\n        });\n\n        if (!response.ok) {\n            throw new Error('Kullan\u0131c\u0131 olu\u015fturulamad\u0131');\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error('Hata:', error);\n        throw error;\n    }\n};\n\n// Kullan\u0131m\ncreateUser({ name: 'Ahmet', email: 'ahmet@example.com' })\n    .then(user =&gt; console.log('Olu\u015fturulan kullan\u0131c\u0131:', user))\n    .catch(error =&gt; console.error('Hata:', error));\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#xmlhttprequest-legacy","title":"XMLHttpRequest (Legacy)","text":"<pre><code>const xhr = new XMLHttpRequest();\nxhr.open('GET', '/api/users', true);\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n            const users = JSON.parse(xhr.responseText);\n            console.log('Kullan\u0131c\u0131lar:', users);\n        } else {\n            console.error('Hata:', xhr.status);\n        }\n    }\n};\n\nxhr.send();\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#error-handling","title":"Error Handling","text":""},{"location":"junior/web-development/javascript-basics/#try-catch","title":"Try-Catch","text":"<pre><code>try {\n    const result = riskyOperation();\n    console.log('Sonu\u00e7:', result);\n} catch (error) {\n    console.error('Hata olu\u015ftu:', error.message);\n    // Hata loglama veya kullan\u0131c\u0131ya g\u00f6sterme\n} finally {\n    // Her durumda \u00e7al\u0131\u015facak kod\n    console.log('\u0130\u015flem tamamland\u0131');\n}\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#promise-error-handling","title":"Promise Error Handling","text":"<pre><code>fetch('/api/users')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        // Ba\u015far\u0131l\u0131 i\u015flem\n        console.log(data);\n    })\n    .catch(error =&gt; {\n        // Hata yakalama\n        console.error('Fetch hatas\u0131:', error);\n    });\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#asyncawait-error-handling","title":"Async/Await Error Handling","text":"<pre><code>const fetchUsers = async () =&gt; {\n    try {\n        const response = await fetch('/api/users');\n        const users = await response.json();\n        return users;\n    } catch (error) {\n        console.error('Kullan\u0131c\u0131lar al\u0131namad\u0131:', error);\n        throw error;\n    }\n};\n</code></pre>"},{"location":"junior/web-development/javascript-basics/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/web-development/javascript-basics/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>JavaScript'te var, let ve const aras\u0131ndaki fark nedir?</li> <li> <p>Cevap: <code>var</code> function-scoped, <code>let</code> ve <code>const</code> block-scoped. <code>let</code> de\u011fi\u015ftirilebilir, <code>const</code> de\u011fi\u015ftirilemez.</p> </li> <li> <p>JavaScript'te hoisting nedir?</p> </li> <li> <p>Cevap: Function ve variable declaration'lar\u0131n scope'lar\u0131n\u0131n en \u00fcst\u00fcne ta\u015f\u0131nmas\u0131. <code>var</code> hoisted edilir, <code>let</code> ve <code>const</code> edilmez.</p> </li> <li> <p>Closure nedir?</p> </li> <li> <p>Cevap: Bir fonksiyonun kendi scope'u d\u0131\u015f\u0131ndaki de\u011fi\u015fkenlere eri\u015febilmesi. Lexical scoping ile olu\u015fur.</p> </li> <li> <p>Event bubbling ve capturing nedir?</p> </li> <li> <p>Cevap: Event'lerin DOM tree'de yukar\u0131 (bubbling) veya a\u015fa\u011f\u0131 (capturing) yay\u0131lmas\u0131. <code>addEventListener</code>'da \u00fc\u00e7\u00fcnc\u00fc parametre ile kontrol edilir.</p> </li> <li> <p>Promise nedir?</p> </li> <li>Cevap: Asenkron i\u015flemleri y\u00f6netmek i\u00e7in kullan\u0131lan yap\u0131. Pending, fulfilled ve rejected durumlar\u0131 vard\u0131r.</li> </ol>"},{"location":"junior/web-development/javascript-basics/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>JavaScript'te this keyword'\u00fc nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: Function'\u0131n nas\u0131l \u00e7a\u011fr\u0131ld\u0131\u011f\u0131na ba\u011fl\u0131 olarak de\u011fi\u015fir. Global scope, object method, constructor, arrow function'da farkl\u0131 davran\u0131r.</p> </li> <li> <p>Event loop nedir?</p> </li> <li> <p>Cevap: JavaScript'in asenkron i\u015flemleri y\u00f6netme mekanizmas\u0131. Call stack, web APIs, callback queue ve event loop'dan olu\u015fur.</p> </li> <li> <p>Prototype inheritance nedir?</p> </li> <li> <p>Cevap: JavaScript'te object'ler aras\u0131nda inheritance sa\u011flayan mekanizma. <code>Object.create()</code> ve constructor function'larla kullan\u0131l\u0131r.</p> </li> <li> <p>Debouncing ve throttling nedir?</p> </li> <li> <p>Cevap: Event handler'lar\u0131 optimize etme teknikleri. Debouncing son \u00e7a\u011fr\u0131y\u0131 bekler, throttling belirli aral\u0131klarla \u00e7a\u011fr\u0131 yapar.</p> </li> <li> <p>Local storage ve session storage aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: Local storage kal\u0131c\u0131, session storage taray\u0131c\u0131 kapan\u0131nca silinir. Her ikisi de 5-10MB kapasiteye sahiptir.</li> </ol>"},{"location":"junior/web-development/javascript-basics/#best-practices","title":"Best Practices","text":"<ol> <li>Kod Organizasyonu</li> <li>ES6+ syntax kullan\u0131n</li> <li>Arrow function'lar\u0131 tercih edin</li> <li>Template literals kullan\u0131n</li> <li> <p>Destructuring ve spread kullan\u0131n</p> </li> <li> <p>Error Handling</p> </li> <li>Try-catch bloklar\u0131 kullan\u0131n</li> <li>Promise rejection'lar\u0131 yakalay\u0131n</li> <li>User-friendly error mesajlar\u0131 g\u00f6sterin</li> <li> <p>Error logging yap\u0131n</p> </li> <li> <p>Performance</p> </li> <li>Event delegation kullan\u0131n</li> <li>Debouncing/throttling uygulay\u0131n</li> <li>DOM manipulation'\u0131 minimize edin</li> <li> <p>Memory leak'leri \u00f6nleyin</p> </li> <li> <p>Security</p> </li> <li>Input validation yap\u0131n</li> <li>XSS sald\u0131r\u0131lar\u0131na kar\u015f\u0131 koruyun</li> <li>CSRF token'lar\u0131 kullan\u0131n</li> <li>HTTPS kullan\u0131n</li> </ol>"},{"location":"junior/web-development/javascript-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>MDN JavaScript</li> <li>JavaScript.info</li> <li>ES6 Features</li> <li>You Don't Know JS</li> <li>JavaScript Best Practices </li> </ul>"},{"location":"junior/web-development/web-security-basics/","title":"Web Security Basics","text":""},{"location":"junior/web-development/web-security-basics/#giris","title":"Giri\u015f","text":"<p>Web g\u00fcvenli\u011fi, modern web uygulamalar\u0131n\u0131n en kritik konular\u0131ndan biridir. Backend geli\u015ftiriciler olarak g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 anlamak ve \u00f6nlemek, uygulaman\u0131z\u0131 korumak i\u00e7in gereklidir.</p>"},{"location":"junior/web-development/web-security-basics/#temel-guvenlik-tehditleri","title":"Temel G\u00fcvenlik Tehditleri","text":""},{"location":"junior/web-development/web-security-basics/#1-xss-cross-site-scripting","title":"1. XSS (Cross-Site Scripting)","text":"<p>XSS, sald\u0131rgan\u0131n web sayfas\u0131na zararl\u0131 JavaScript kodu enjekte etmesiyle olu\u015fan g\u00fcvenlik a\u00e7\u0131\u011f\u0131d\u0131r.</p>"},{"location":"junior/web-development/web-security-basics/#xss-turleri","title":"XSS T\u00fcrleri","text":"<ul> <li>Stored XSS: Zararl\u0131 kod veritaban\u0131nda saklan\u0131r</li> <li>Reflected XSS: Zararl\u0131 kod URL'de yans\u0131t\u0131l\u0131r</li> <li>DOM-based XSS: Client-side JavaScript'te olu\u015fur</li> </ul>"},{"location":"junior/web-development/web-security-basics/#xss-ornegi","title":"XSS \u00d6rne\u011fi","text":"<pre><code>&lt;!-- G\u00fcvensiz kod --&gt;\n&lt;div id=\"user-input\"&gt;\n    &lt;script&gt;alert('XSS Attack!')&lt;/script&gt;\n&lt;/div&gt;\n\n&lt;!-- G\u00fcvenli kod --&gt;\n&lt;div id=\"user-input\"&gt;\n    &lt;!-- HTML encoding yap\u0131lm\u0131\u015f --&gt;\n    &amp;lt;script&amp;gt;alert('XSS Attack!')&amp;lt;/script&amp;gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#xss-onleme","title":"XSS \u00d6nleme","text":"<pre><code>// ASP.NET Core'da HTML encoding\n@Html.Encode(userInput)\n\n// JavaScript'te\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#2-csrf-cross-site-request-forgery","title":"2. CSRF (Cross-Site Request Forgery)","text":"<p>CSRF, sald\u0131rgan\u0131n kullan\u0131c\u0131n\u0131n kimlik bilgileriyle istenmeyen i\u015flemler yapmas\u0131n\u0131 sa\u011flayan sald\u0131r\u0131d\u0131r.</p>"},{"location":"junior/web-development/web-security-basics/#csrf-ornegi","title":"CSRF \u00d6rne\u011fi","text":"<pre><code>&lt;!-- Sald\u0131rgan\u0131n sayfas\u0131 --&gt;\n&lt;img src=\"http://bank.com/transfer?amount=1000&amp;to=attacker\" style=\"display:none\"&gt;\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#csrf-onleme","title":"CSRF \u00d6nleme","text":"<pre><code>// ASP.NET Core'da AntiForgeryToken\n&lt;form asp-action=\"Transfer\" method=\"post\"&gt;\n    @Html.AntiForgeryToken()\n    &lt;input type=\"number\" name=\"amount\" /&gt;\n    &lt;input type=\"text\" name=\"to\" /&gt;\n    &lt;button type=\"submit\"&gt;Transfer&lt;/button&gt;\n&lt;/form&gt;\n\n// Controller'da validation\n[ValidateAntiForgeryToken]\npublic IActionResult Transfer(TransferModel model)\n{\n    // Transfer i\u015flemi\n}\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#3-sql-injection","title":"3. SQL Injection","text":"<p>SQL Injection, sald\u0131rgan\u0131n veritaban\u0131 sorgular\u0131n\u0131 manip\u00fcle etmesini sa\u011flayan sald\u0131r\u0131d\u0131r.</p>"},{"location":"junior/web-development/web-security-basics/#sql-injection-ornegi","title":"SQL Injection \u00d6rne\u011fi","text":"<pre><code>-- G\u00fcvensiz sorgu\nSELECT * FROM Users WHERE Username = 'admin' OR '1'='1' --' AND Password = 'password'\n\n-- G\u00fcvenli sorgu (parametre kullan\u0131m\u0131)\nSELECT * FROM Users WHERE Username = @Username AND Password = @Password\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#sql-injection-onleme","title":"SQL Injection \u00d6nleme","text":"<pre><code>// Entity Framework kullan\u0131m\u0131 (g\u00fcvenli)\nvar user = await _context.Users\n    .FirstOrDefaultAsync(u =&gt; u.Username == username &amp;&amp; u.Password == password);\n\n// Raw SQL kullan\u0131m\u0131nda parametre\nvar sql = \"SELECT * FROM Users WHERE Username = @Username AND Password = @Password\";\nvar user = await _context.Users\n    .FromSqlRaw(sql, new SqlParameter(\"@Username\", username), new SqlParameter(\"@Password\", password))\n    .FirstOrDefaultAsync();\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#4-input-validation","title":"4. Input Validation","text":"<p>Kullan\u0131c\u0131 girdilerinin do\u011frulanmas\u0131 g\u00fcvenlik i\u00e7in kritiktir.</p>"},{"location":"junior/web-development/web-security-basics/#input-validation-ornekleri","title":"Input Validation \u00d6rnekleri","text":"<pre><code>// Model validation\npublic class UserModel\n{\n    [Required]\n    [StringLength(50, MinimumLength = 3)]\n    [RegularExpression(@\"^[a-zA-Z0-9_]+$\", ErrorMessage = \"Sadece harf, rakam ve alt \u00e7izgi kullan\u0131labilir\")]\n    public string Username { get; set; }\n\n    [Required]\n    [EmailAddress]\n    public string Email { get; set; }\n\n    [Required]\n    [StringLength(100, MinimumLength = 8)]\n    [RegularExpression(@\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\d@$!%*?&amp;]\", \n        ErrorMessage = \"\u015eifre en az bir b\u00fcy\u00fck harf, k\u00fc\u00e7\u00fck harf, rakam ve \u00f6zel karakter i\u00e7ermelidir\")]\n    public string Password { get; set; }\n}\n\n// Controller'da validation\n[HttpPost]\npublic async Task&lt;IActionResult&gt; CreateUser(UserModel model)\n{\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n\n    // G\u00fcvenli i\u015flem\n}\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#https-ve-ssltls","title":"HTTPS ve SSL/TLS","text":""},{"location":"junior/web-development/web-security-basics/#https-nedir","title":"HTTPS Nedir?","text":"<p>HTTPS, HTTP protokol\u00fcn\u00fcn SSL/TLS \u015fifrelemesi ile g\u00fcvenli hale getirilmi\u015f versiyonudur.</p>"},{"location":"junior/web-development/web-security-basics/#ssltls-avantajlar","title":"SSL/TLS Avantajlar\u0131","text":"<ul> <li>Encryption: Veri \u015fifreleme</li> <li>Authentication: Sunucu kimlik do\u011frulama</li> <li>Integrity: Veri b\u00fct\u00fcnl\u00fc\u011f\u00fc</li> </ul>"},{"location":"junior/web-development/web-security-basics/#https-yaplandrmas","title":"HTTPS Yap\u0131land\u0131rmas\u0131","text":"<pre><code>// Program.cs veya Startup.cs\nvar builder = WebApplication.CreateBuilder(args);\n\n// HTTPS y\u00f6nlendirme\nbuilder.Services.AddHttpsRedirection(options =&gt;\n{\n    options.RedirectStatusCode = StatusCodes.Status307TemporaryRedirect;\n    options.HttpsPort = 443;\n});\n\nvar app = builder.Build();\n\n// HTTPS middleware\napp.UseHttpsRedirection();\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#security-headers","title":"Security Headers","text":""},{"location":"junior/web-development/web-security-basics/#guvenlik-baslklar","title":"G\u00fcvenlik Ba\u015fl\u0131klar\u0131","text":"<pre><code>// Program.cs'de middleware ekleme\napp.Use(async (context, next) =&gt;\n{\n    // Security headers\n    context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\");\n    context.Response.Headers.Add(\"X-Frame-Options\", \"DENY\");\n    context.Response.Headers.Add(\"X-XSS-Protection\", \"1; mode=block\");\n    context.Response.Headers.Add(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n    context.Response.Headers.Add(\"Content-Security-Policy\", \"default-src 'self'\");\n\n    await next();\n});\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#security-headers-acklamalar","title":"Security Headers A\u00e7\u0131klamalar\u0131","text":"<ul> <li>X-Content-Type-Options: MIME type sniffing'i \u00f6nler</li> <li>X-Frame-Options: Clickjacking sald\u0131r\u0131lar\u0131n\u0131 \u00f6nler</li> <li>X-XSS-Protection: XSS korumas\u0131 (eski taray\u0131c\u0131lar i\u00e7in)</li> <li>Content-Security-Policy: Kaynak y\u00fckleme politikas\u0131</li> </ul>"},{"location":"junior/web-development/web-security-basics/#authentication-ve-authorization","title":"Authentication ve Authorization","text":""},{"location":"junior/web-development/web-security-basics/#authentication","title":"Authentication","text":"<pre><code>// JWT Token olu\u015fturma\npublic class JwtService\n{\n    private readonly IConfiguration _configuration;\n\n    public JwtService(IConfiguration configuration)\n    {\n        _configuration = configuration;\n    }\n\n    public string GenerateToken(User user)\n    {\n        var claims = new[]\n        {\n            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n            new Claim(ClaimTypes.Name, user.Username),\n            new Claim(ClaimTypes.Email, user.Email),\n            new Claim(ClaimTypes.Role, user.Role)\n        };\n\n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\"Jwt:Key\"]));\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        var token = new JwtSecurityToken(\n            issuer: _configuration[\"Jwt:Issuer\"],\n            audience: _configuration[\"Jwt:Audience\"],\n            claims: claims,\n            expires: DateTime.Now.AddHours(1),\n            signingCredentials: creds\n        );\n\n        return new JwtSecurityTokenHandler().WriteToken(token);\n    }\n}\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#authorization","title":"Authorization","text":"<pre><code>// Role-based authorization\n[Authorize(Roles = \"Admin\")]\npublic IActionResult AdminPanel()\n{\n    return View();\n}\n\n// Policy-based authorization\n[Authorize(Policy = \"MinimumAge\")]\npublic IActionResult AgeRestrictedContent()\n{\n    return View();\n}\n\n// Custom policy\nbuilder.Services.AddAuthorization(options =&gt;\n{\n    options.AddPolicy(\"MinimumAge\", policy =&gt;\n        policy.RequireAssertion(context =&gt;\n            context.User.HasClaim(c =&gt; c.Type == \"Age\" &amp;&amp; \n                int.TryParse(c.Value, out int age) &amp;&amp; age &gt;= 18)));\n});\n</code></pre>"},{"location":"junior/web-development/web-security-basics/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"junior/web-development/web-security-basics/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>XSS nedir ve nas\u0131l \u00f6nlenir?</li> <li> <p>Cevap: Cross-Site Scripting, zararl\u0131 JavaScript kodu enjekte etme. HTML encoding, input validation ve CSP ile \u00f6nlenir.</p> </li> <li> <p>CSRF nedir ve nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Cross-Site Request Forgery, kullan\u0131c\u0131n\u0131n kimlik bilgileriyle istenmeyen i\u015flemler. AntiForgeryToken ile \u00f6nlenir.</p> </li> <li> <p>SQL Injection nedir ve nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Veritaban\u0131 sorgular\u0131n\u0131 manip\u00fcle etme. Parametre kullan\u0131m\u0131 ve ORM kullanarak \u00f6nlenir.</p> </li> <li> <p>HTTPS neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Veri \u015fifreleme, kimlik do\u011frulama ve b\u00fct\u00fcnl\u00fck sa\u011flar. Man-in-the-middle sald\u0131r\u0131lar\u0131n\u0131 \u00f6nler.</p> </li> <li> <p>Input validation neden \u00f6nemlidir?</p> </li> <li>Cevap: Zararl\u0131 veri giri\u015fini \u00f6nler, g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 kapat\u0131r ve veri kalitesini art\u0131r\u0131r.</li> </ol>"},{"location":"junior/web-development/web-security-basics/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Content Security Policy nedir?</li> <li> <p>Cevap: Hangi kaynaklar\u0131n y\u00fcklenebilece\u011fini belirleyen g\u00fcvenlik politikas\u0131. XSS ve injection sald\u0131r\u0131lar\u0131n\u0131 \u00f6nler.</p> </li> <li> <p>JWT token'lar\u0131n g\u00fcvenlik riskleri nelerdir?</p> </li> <li> <p>Cevap: Token \u00e7al\u0131nmas\u0131, XSS ile token eri\u015fimi, token expiration. Secure storage ve HTTPS kullan\u0131m\u0131 gerekli.</p> </li> <li> <p>Rate limiting nedir ve nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: API \u00e7a\u011fr\u0131 say\u0131s\u0131n\u0131 s\u0131n\u0131rlama. Brute force sald\u0131r\u0131lar\u0131 \u00f6nler. Middleware ile uygulan\u0131r.</p> </li> <li> <p>Session hijacking nedir?</p> </li> <li> <p>Cevap: Kullan\u0131c\u0131n\u0131n session bilgilerinin \u00e7al\u0131nmas\u0131. HTTPS, secure cookies ve session timeout ile \u00f6nlenir.</p> </li> <li> <p>OWASP Top 10 nedir?</p> </li> <li>Cevap: Web uygulamalar\u0131ndaki en kritik 10 g\u00fcvenlik a\u00e7\u0131\u011f\u0131. Injection, XSS, broken authentication gibi.</li> </ol>"},{"location":"junior/web-development/web-security-basics/#best-practices","title":"Best Practices","text":"<ol> <li>Input Validation</li> <li>T\u00fcm kullan\u0131c\u0131 girdilerini validate edin</li> <li>Whitelist yakla\u015f\u0131m\u0131 kullan\u0131n</li> <li> <p>Server-side validation yap\u0131n</p> </li> <li> <p>Output Encoding</p> </li> <li>HTML, JavaScript ve CSS encoding yap\u0131n</li> <li>Context-aware encoding kullan\u0131n</li> <li> <p>Framework'\u00fcn built-in encoding'ini kullan\u0131n</p> </li> <li> <p>Authentication</p> </li> <li>G\u00fc\u00e7l\u00fc \u015fifre politikalar\u0131 uygulay\u0131n</li> <li>Multi-factor authentication kullan\u0131n</li> <li> <p>Session timeout ayarlay\u0131n</p> </li> <li> <p>Authorization</p> </li> <li>Principle of least privilege uygulay\u0131n</li> <li>Role-based access control kullan\u0131n</li> <li> <p>Resource-level authorization yap\u0131n</p> </li> <li> <p>Monitoring ve Logging</p> </li> <li>G\u00fcvenlik olaylar\u0131n\u0131 loglay\u0131n</li> <li>Anormal aktiviteleri izleyin</li> <li>Regular security audits yap\u0131n</li> </ol>"},{"location":"junior/web-development/web-security-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OWASP Top 10</li> <li>OWASP Cheat Sheet Series</li> <li>Microsoft Security Documentation</li> <li>Security Headers</li> <li>Mozilla Security Guidelines </li> </ul>"},{"location":"mid-level/advanced-csharp/","title":"\u0130leri C# Konular\u0131","text":""},{"location":"mid-level/advanced-csharp/#giris","title":"Giri\u015f","text":"<p>\u0130leri C# konular\u0131, mid-level geli\u015ftiriciler i\u00e7in .NET ekosisteminde daha derin ve karma\u015f\u0131k programlama tekniklerini kapsar. Bu b\u00f6l\u00fcm, async/await, LINQ advanced, reflection, attributes, expression trees gibi konular\u0131 detayland\u0131r\u0131r ve production-ready uygulamalar geli\u015ftirmek i\u00e7in gerekli olan advanced C# \u00f6zelliklerini a\u00e7\u0131klar.</p>"},{"location":"mid-level/advanced-csharp/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/advanced-csharp/#1-asyncawait","title":"1. Async/Await","text":"<p>Modern .NET uygulamalar\u0131nda asenkron programlama teknikleri, async/await pattern'inin detaylar\u0131, Task Parallel Library (TPL) kullan\u0131m\u0131 ve asenkron operasyonlar\u0131n best practice'leri.</p> <p>\u00d6\u011frenilecekler: - Async/await pattern'inin derinlemesine anla\u015f\u0131lmas\u0131 - Task composition ve continuation - Exception handling in async methods - Performance optimization techniques - Deadlock prevention</p>"},{"location":"mid-level/advanced-csharp/#2-linq-advanced","title":"2. LINQ Advanced","text":"<p>LINQ'in advanced \u00f6zellikleri, custom extension methods, performance optimization, ve complex query scenarios.</p> <p>\u00d6\u011frenilecekler: - Custom LINQ operators - Expression trees ile LINQ - Performance optimization strategies - Complex query scenarios - LINQ to Objects vs LINQ to Entities</p>"},{"location":"mid-level/advanced-csharp/#3-reflection","title":"3. Reflection","text":"<p>Runtime'da type information'a eri\u015fim, dynamic code generation, ve metadata manipulation.</p> <p>\u00d6\u011frenilecekler: - Type discovery ve inspection - Dynamic method invocation - Attribute reflection - Performance considerations - Security implications</p>"},{"location":"mid-level/advanced-csharp/#4-attributes","title":"4. Attributes","text":"<p>Custom attributes olu\u015fturma, attribute usage, ve reflection ile attribute processing.</p> <p>\u00d6\u011frenilecekler: - Custom attribute design - Attribute targets ve usage - Attribute validation - Custom attribute processors - Best practices</p>"},{"location":"mid-level/advanced-csharp/#5-expression-trees","title":"5. Expression Trees","text":"<p>Compile-time expression analysis, dynamic query building, ve expression manipulation.</p> <p>\u00d6\u011frenilecekler: - Expression tree structure - Dynamic expression building - Expression compilation - Performance implications - Real-world use cases</p>"},{"location":"mid-level/advanced-csharp/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/advanced-csharp/#1-performance-optimization","title":"1. Performance Optimization","text":"<ul> <li>Async/await ile responsive applications</li> <li>LINQ optimization ile database performance</li> <li>Reflection best practices ile memory efficiency</li> </ul>"},{"location":"mid-level/advanced-csharp/#2-code-quality","title":"2. Code Quality","text":"<ul> <li>Clean, maintainable code patterns</li> <li>Advanced error handling techniques</li> <li>Robust application architecture</li> </ul>"},{"location":"mid-level/advanced-csharp/#3-career-growth","title":"3. Career Growth","text":"<ul> <li>Mid-level'den senior'a ge\u00e7i\u015f i\u00e7in gerekli</li> <li>Complex problem solving skills</li> <li>Advanced .NET development expertise</li> </ul>"},{"location":"mid-level/advanced-csharp/#4-production-readiness","title":"4. Production Readiness","text":"<ul> <li>Enterprise-level applications</li> <li>Scalable architecture patterns</li> <li>Performance-critical systems</li> </ul>"},{"location":"mid-level/advanced-csharp/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/advanced-csharp/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Async/await nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: Asenkron programlama pattern'i, non-blocking operations, Task-based programming.</p> </li> <li> <p>LINQ'in advanced \u00f6zellikleri nelerdir?</p> </li> <li> <p>Cevap: Custom operators, expression trees, performance optimization, complex queries.</p> </li> <li> <p>Reflection ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Runtime type inspection, dynamic programming, plugin systems, serialization.</p> </li> <li> <p>Custom attributes nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: Attribute class inheritance, AttributeUsage, custom validation logic.</p> </li> <li> <p>Expression trees nedir?</p> </li> <li>Cevap: Compile-time expression representation, dynamic query building, LINQ providers.</li> </ol>"},{"location":"mid-level/advanced-csharp/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Async method'larda exception handling nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: Try-catch blocks, Task.Exception, AggregateException handling.</p> </li> <li> <p>LINQ query'lerde N+1 problem nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?</p> </li> <li> <p>Cevap: Include statements, eager loading, projection optimization.</p> </li> <li> <p>Reflection performance impact'i nas\u0131l minimize edilir?</p> </li> <li> <p>Cevap: Caching, compiled expressions, direct method calls.</p> </li> <li> <p>Custom attribute validation nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: IValidatableObject, custom validation attributes, validation context.</p> </li> <li> <p>Expression trees ile dynamic query nas\u0131l olu\u015fturulur?</p> </li> <li>Cevap: Expression building, parameter substitution, compilation.</li> </ol>"},{"location":"mid-level/advanced-csharp/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/advanced-csharp/#1-asyncawait_1","title":"1. Async/Await","text":"<ul> <li>ConfigureAwait(false) kullan\u0131n</li> <li>Exception handling implement edin</li> <li>Cancellation token support ekleyin</li> <li>Performance monitoring yap\u0131n</li> </ul>"},{"location":"mid-level/advanced-csharp/#2-linq-advanced_1","title":"2. LINQ Advanced","text":"<ul> <li>Custom operators tasarlay\u0131n</li> <li>Performance profiling yap\u0131n</li> <li>Memory usage optimize edin</li> <li>Complex queries break down edin</li> </ul>"},{"location":"mid-level/advanced-csharp/#3-reflection_1","title":"3. Reflection","text":"<ul> <li>Caching implement edin</li> <li>Security considerations al\u0131n</li> <li>Performance impact measure edin</li> <li>Alternative approaches de\u011ferlendirin</li> </ul>"},{"location":"mid-level/advanced-csharp/#4-attributes_1","title":"4. Attributes","text":"<ul> <li>Clear naming conventions kullan\u0131n</li> <li>Validation logic implement edin</li> <li>Documentation ekleyin</li> <li>Performance impact minimize edin</li> </ul>"},{"location":"mid-level/advanced-csharp/#5-expression-trees_1","title":"5. Expression Trees","text":"<ul> <li>Compilation caching yap\u0131n</li> <li>Parameter validation ekleyin</li> <li>Error handling implement edin</li> <li>Performance testing yap\u0131n</li> </ul>"},{"location":"mid-level/advanced-csharp/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>C# Documentation</li> <li>Async Programming</li> <li>LINQ Documentation</li> <li>Reflection in .NET</li> <li>Expression Trees</li> <li>C# Best Practices </li> </ul>"},{"location":"mid-level/advanced-csharp/async-await/","title":"Async/Await","text":""},{"location":"mid-level/advanced-csharp/async-await/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Async/Await, C#'ta asenkron programlama i\u00e7in kullan\u0131lan temel yap\u0131d\u0131r. Bu yap\u0131, uzun s\u00fcren i\u015flemleri bloklamadan y\u00f6netmeyi ve uygulama performans\u0131n\u0131 art\u0131rmay\u0131 sa\u011flar.</p>"},{"location":"mid-level/advanced-csharp/async-await/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/advanced-csharp/async-await/#1-asyncawait-nedir-ve-nasl-calsr","title":"1. Async/Await nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Async/Await, asenkron operasyonlar\u0131 y\u00f6netmek i\u00e7in kullan\u0131lan bir C# \u00f6zelli\u011fidir. \u00c7al\u0131\u015fma prensibi: 1. <code>async</code> keyword'\u00fc ile metod i\u015faretlenir 2. <code>await</code> ile asenkron operasyon beklenir 3. State machine olu\u015fturulur 4. Callback mekanizmas\u0131 kullan\u0131l\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// Basit async metod\npublic async Task&lt;string&gt; GetDataAsync()\n{\n    // Sim\u00fcle edilmi\u015f uzun s\u00fcren i\u015flem\n    await Task.Delay(1000);\n    return \"Veri al\u0131nd\u0131\";\n}\n\n// Async metod kullan\u0131m\u0131\npublic async Task ProcessDataAsync()\n{\n    try\n    {\n        string data = await GetDataAsync();\n        Console.WriteLine(data);\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"Hata: {ex.Message}\");\n    }\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/async-await/#2-task-ve-valuetask-arasndaki-farklar-nelerdir","title":"2. Task ve ValueTask aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Task ve ValueTask farklar\u0131: - Memory allocation - Performance - Kullan\u0131m senaryolar\u0131 - Boxing/Unboxing</p> <p>\u00d6rnek Kod: <pre><code>// Task kullan\u0131m\u0131\npublic async Task&lt;int&gt; GetNumberAsync()\n{\n    await Task.Delay(100);\n    return 42;\n}\n\n// ValueTask kullan\u0131m\u0131\npublic async ValueTask&lt;int&gt; GetNumberValueTaskAsync()\n{\n    if (_cache.TryGetValue(\"number\", out int value))\n    {\n        return value;\n    }\n\n    value = await GetNumberFromServiceAsync();\n    _cache[\"number\"] = value;\n    return value;\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/async-await/#3-async-metodlarda-hata-yonetimi-nasl-yaplr","title":"3. Async metodlarda hata y\u00f6netimi nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Async metodlarda hata y\u00f6netimi i\u00e7in: - try-catch bloklar\u0131 - Task.Exception - AggregateException - CancellationToken</p> <p>\u00d6rnek Kod: <pre><code>// Hata y\u00f6netimi \u00f6rne\u011fi\npublic async Task ProcessWithErrorHandlingAsync()\n{\n    try\n    {\n        await ProcessDataAsync();\n    }\n    catch (HttpRequestException ex)\n    {\n        Console.WriteLine($\"HTTP Hatas\u0131: {ex.Message}\");\n    }\n    catch (TimeoutException ex)\n    {\n        Console.WriteLine($\"Zaman A\u015f\u0131m\u0131: {ex.Message}\");\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"Genel Hata: {ex.Message}\");\n    }\n}\n\n// CancellationToken kullan\u0131m\u0131\npublic async Task ProcessWithCancellationAsync(CancellationToken cancellationToken)\n{\n    try\n    {\n        await Task.Delay(1000, cancellationToken);\n        // \u0130\u015flem devam eder\n    }\n    catch (OperationCanceledException)\n    {\n        Console.WriteLine(\"\u0130\u015flem iptal edildi\");\n    }\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/async-await/#4-async-void-ne-zaman-kullanlmaldr","title":"4. Async void ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<p>Cevap: Async void kullan\u0131m\u0131: - Event handler'larda - Dikkat edilmesi gereken noktalar - Exception handling - Best practices</p> <p>\u00d6rnek Kod: <pre><code>// Event handler \u00f6rne\u011fi\nprivate async void Button_Click(object sender, EventArgs e)\n{\n    try\n    {\n        await ProcessDataAsync();\n    }\n    catch (Exception ex)\n    {\n        // Hata loglama\n        Logger.LogError(ex);\n    }\n}\n\n// Async void kullan\u0131m\u0131ndan ka\u00e7\u0131nma\npublic async Task ProcessDataAsync()\n{\n    // Task d\u00f6nd\u00fcren async metod\n    await Task.Delay(1000);\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/async-await/#5-async-metodlarda-deadlock-nasl-onlenir","title":"5. Async metodlarda deadlock nas\u0131l \u00f6nlenir?","text":"<p>Cevap: Deadlock \u00f6nleme y\u00f6ntemleri: - ConfigureAwait(false) - Task.Run kullan\u0131m\u0131 - SynchronizationContext - Best practices</p> <p>\u00d6rnek Kod: <pre><code>// Deadlock \u00f6nleme\npublic async Task&lt;string&gt; GetDataWithoutDeadlockAsync()\n{\n    // ConfigureAwait(false) kullan\u0131m\u0131\n    var result = await GetDataFromServiceAsync().ConfigureAwait(false);\n    return result;\n}\n\n// Task.Run kullan\u0131m\u0131\npublic async Task ProcessInBackgroundAsync()\n{\n    await Task.Run(async () =&gt;\n    {\n        // Uzun s\u00fcren i\u015flem\n        await Task.Delay(1000);\n    });\n}\n\n// SynchronizationContext \u00f6rne\u011fi\npublic async Task ProcessWithContextAsync()\n{\n    var context = SynchronizationContext.Current;\n    await Task.Run(() =&gt;\n    {\n        // Arka plan i\u015flemi\n    });\n    context?.Post(_ =&gt;\n    {\n        // UI g\u00fcncelleme\n    }, null);\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/async-await/#best-practices","title":"Best Practices","text":"<ol> <li>Performans</li> <li>ConfigureAwait(false) kullan\u0131n</li> <li>Gereksiz async/await kullan\u0131m\u0131ndan ka\u00e7\u0131n\u0131n</li> <li>ValueTask kullan\u0131m\u0131n\u0131 de\u011ferlendirin</li> <li> <p>Task.Run'\u0131 dikkatli kullan\u0131n</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Exception handling yap\u0131n</li> <li>CancellationToken kullan\u0131n</li> <li>Timeout mekanizmas\u0131 ekleyin</li> <li> <p>Resource cleanup yap\u0131n</p> </li> <li> <p>Kod Kalitesi</p> </li> <li>Async suffix kullan\u0131n</li> <li>Task d\u00f6nd\u00fcren metodlar\u0131 tercih edin</li> <li>Async void kullan\u0131m\u0131ndan ka\u00e7\u0131n\u0131n</li> <li>Documentation ekleyin</li> </ol>"},{"location":"mid-level/advanced-csharp/async-await/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Async Programming</li> <li>Async/Await Best Practices</li> <li>Task vs ValueTask</li> <li>Async/Await Pitfalls </li> </ul>"},{"location":"mid-level/advanced-csharp/attributes/","title":"Attributes","text":""},{"location":"mid-level/advanced-csharp/attributes/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Attributes (\u00d6znitelikler), C#'ta kod elemanlar\u0131na (s\u0131n\u0131flar, metodlar, \u00f6zellikler vb.) metadata eklemek i\u00e7in kullan\u0131lan yap\u0131lard\u0131r. Bu metadata'lar, \u00e7al\u0131\u015fma zaman\u0131nda reflection ile okunabilir ve kodun davran\u0131\u015f\u0131n\u0131 etkileyebilir.</p>"},{"location":"mid-level/advanced-csharp/attributes/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/advanced-csharp/attributes/#1-attributes-nedir-ve-ne-icin-kullanlr","title":"1. Attributes nedir ve ne i\u00e7in kullan\u0131l\u0131r?","text":"<p>Cevap: Attributes kullan\u0131m senaryolar\u0131: - Metadata ekleme - Kod davran\u0131\u015f\u0131n\u0131 de\u011fi\u015ftirme - Validation kurallar\u0131 - Serialization kontrol\u00fc - Dependency injection</p> <p>\u00d6rnek Kod: <pre><code>// Temel attribute kullan\u0131m\u0131\n[Serializable]\npublic class Student\n{\n    [Required(ErrorMessage = \"\u0130sim alan\u0131 zorunludur\")]\n    [StringLength(50, MinimumLength = 3)]\n    public string Name { get; set; }\n\n    [Range(18, 100, ErrorMessage = \"Ya\u015f 18-100 aras\u0131nda olmal\u0131d\u0131r\")]\n    public int Age { get; set; }\n\n    [Obsolete(\"Bu metod yerine yeni metod kullan\u0131lmal\u0131d\u0131r\", false)]\n    public void OldMethod() { }\n}\n\n// Custom attribute \u00f6rne\u011fi\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)]\npublic class DisplayNameAttribute : Attribute\n{\n    public string Name { get; }\n    public DisplayNameAttribute(string name) =&gt; Name = name;\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/attributes/#2-custom-attributes-nasl-olusturulur","title":"2. Custom Attributes nas\u0131l olu\u015fturulur?","text":"<p>Cevap: Custom attribute olu\u015fturma ad\u0131mlar\u0131: - Attribute s\u0131n\u0131f\u0131 tan\u0131mlama - AttributeUsage belirtme - Constructor tan\u0131mlama - \u00d6zellikler ekleme</p> <p>\u00d6rnek Kod: <pre><code>// Custom attribute \u00f6rnekleri\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]\npublic class AuthorAttribute : Attribute\n{\n    public string Name { get; }\n    public string Version { get; set; }\n\n    public AuthorAttribute(string name)\n    {\n        Name = name;\n        Version = \"1.0\";\n    }\n}\n\n[AttributeUsage(AttributeTargets.Property)]\npublic class ValidationAttribute : Attribute\n{\n    public string ErrorMessage { get; set; }\n    public bool IsRequired { get; set; }\n\n    public ValidationAttribute(bool isRequired)\n    {\n        IsRequired = isRequired;\n    }\n}\n\n// Kullan\u0131m \u00f6rnekleri\n[Author(\"John Doe\", Version = \"2.0\")]\npublic class Document\n{\n    [Validation(true, ErrorMessage = \"Bu alan zorunludur\")]\n    public string Title { get; set; }\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/attributes/#3-attributes-nasl-okunur-ve-kullanlr","title":"3. Attributes nas\u0131l okunur ve kullan\u0131l\u0131r?","text":"<p>Cevap: Attribute okuma y\u00f6ntemleri: - Reflection kullan\u0131m\u0131 - GetCustomAttributes - Attribute discovery - Metadata processing</p> <p>\u00d6rnek Kod: <pre><code>// Attribute okuma \u00f6rnekleri\npublic class AttributeReader\n{\n    public void ReadAttributes(Type type)\n    {\n        // Class attribute'lar\u0131\n        var classAttributes = type.GetCustomAttributes(typeof(AuthorAttribute), false);\n        foreach (AuthorAttribute attr in classAttributes)\n        {\n            Console.WriteLine($\"Yazar: {attr.Name}, Versiyon: {attr.Version}\");\n        }\n\n        // Method attribute'lar\u0131\n        foreach (var method in type.GetMethods())\n        {\n            var methodAttributes = method.GetCustomAttributes(typeof(AuthorAttribute), false);\n            foreach (AuthorAttribute attr in methodAttributes)\n            {\n                Console.WriteLine($\"Metod: {method.Name}, Yazar: {attr.Name}\");\n            }\n        }\n\n        // Property attribute'lar\u0131\n        foreach (var prop in type.GetProperties())\n        {\n            var propAttributes = prop.GetCustomAttributes(typeof(ValidationAttribute), false);\n            foreach (ValidationAttribute attr in propAttributes)\n            {\n                Console.WriteLine($\"\u00d6zellik: {prop.Name}, Zorunlu: {attr.IsRequired}\");\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/attributes/#4-attributes-ile-validation-nasl-yaplr","title":"4. Attributes ile validation nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Validation attribute'lar\u0131: - Data annotations - Custom validation - Error messages - Validation context</p> <p>\u00d6rnek Kod: <pre><code>// Validation attribute'lar\u0131\npublic class ValidationAttributes\n{\n    [Required(ErrorMessage = \"Email adresi zorunludur\")]\n    [EmailAddress(ErrorMessage = \"Ge\u00e7erli bir email adresi giriniz\")]\n    public string Email { get; set; }\n\n    [StringLength(100, MinimumLength = 6, ErrorMessage = \"\u015eifre 6-100 karakter aras\u0131nda olmal\u0131d\u0131r\")]\n    [RegularExpression(@\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{6,}$\", \n        ErrorMessage = \"\u015eifre en az bir b\u00fcy\u00fck harf, bir k\u00fc\u00e7\u00fck harf ve bir rakam i\u00e7ermelidir\")]\n    public string Password { get; set; }\n\n    [Range(0, 120, ErrorMessage = \"Ya\u015f 0-120 aras\u0131nda olmal\u0131d\u0131r\")]\n    public int Age { get; set; }\n}\n\n// Validation i\u015flemi\npublic class Validator\n{\n    public bool Validate(object obj)\n    {\n        var validationContext = new ValidationContext(obj);\n        var validationResults = new List&lt;ValidationResult&gt;();\n\n        bool isValid = Validator.TryValidateObject(\n            obj, \n            validationContext, \n            validationResults, \n            true);\n\n        if (!isValid)\n        {\n            foreach (var result in validationResults)\n            {\n                Console.WriteLine(result.ErrorMessage);\n            }\n        }\n\n        return isValid;\n    }\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/attributes/#5-attributes-performans-optimizasyonu-nasl-yaplr","title":"5. Attributes performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Performans optimizasyonu i\u00e7in: - Attribute caching - Reflection optimizasyonu - Lazy loading - Metadata management</p> <p>\u00d6rnek Kod: <pre><code>// Attribute optimizasyonu\npublic class AttributeCache\n{\n    private readonly Dictionary&lt;Type, List&lt;Attribute&gt;&gt; _attributeCache = new();\n    private readonly Dictionary&lt;string, List&lt;Attribute&gt;&gt; _propertyCache = new();\n\n    public List&lt;Attribute&gt; GetCachedAttributes(Type type)\n    {\n        if (!_attributeCache.TryGetValue(type, out var attributes))\n        {\n            attributes = type.GetCustomAttributes().ToList();\n            _attributeCache[type] = attributes;\n        }\n        return attributes;\n    }\n\n    public List&lt;Attribute&gt; GetCachedPropertyAttributes(Type type, string propertyName)\n    {\n        string key = $\"{type.FullName}.{propertyName}\";\n        if (!_propertyCache.TryGetValue(key, out var attributes))\n        {\n            var property = type.GetProperty(propertyName);\n            attributes = property?.GetCustomAttributes().ToList() ?? new List&lt;Attribute&gt;();\n            _propertyCache[key] = attributes;\n        }\n        return attributes;\n    }\n}\n\n// Lazy loading \u00f6rne\u011fi\npublic class LazyAttributeLoader\n{\n    private readonly Lazy&lt;List&lt;Attribute&gt;&gt; _attributes;\n\n    public LazyAttributeLoader(Type type)\n    {\n        _attributes = new Lazy&lt;List&lt;Attribute&gt;&gt;(() =&gt; \n            type.GetCustomAttributes().ToList());\n    }\n\n    public List&lt;Attribute&gt; GetAttributes() =&gt; _attributes.Value;\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/attributes/#best-practices","title":"Best Practices","text":"<ol> <li>Kullan\u0131m</li> <li>Uygun attribute'lar\u0131 se\u00e7in</li> <li>Attribute'lar\u0131 do\u011fru yerde kullan\u0131n</li> <li>Documentation ekleyin</li> <li> <p>Error handling yap\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Attribute caching kullan\u0131n</li> <li>Reflection optimizasyonu yap\u0131n</li> <li>Lazy loading uygulay\u0131n</li> <li> <p>Memory management yap\u0131n</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod okunabilirli\u011fini koruyun</li> <li>Test coverage sa\u011flay\u0131n</li> <li>Version control yap\u0131n</li> <li>Documentation g\u00fcncelleyin</li> </ol>"},{"location":"mid-level/advanced-csharp/attributes/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Attributes</li> <li>Custom Attributes</li> <li>Data Annotations</li> <li>Attribute Usage </li> </ul>"},{"location":"mid-level/advanced-csharp/expression-trees/","title":"Expression Trees","text":""},{"location":"mid-level/advanced-csharp/expression-trees/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Expression Trees (\u0130fade A\u011fa\u00e7lar\u0131), C#'ta kodun yap\u0131s\u0131n\u0131 temsil eden ve \u00e7al\u0131\u015fma zaman\u0131nda analiz edilebilen, de\u011fi\u015ftirilebilen ve \u00e7al\u0131\u015ft\u0131r\u0131labilen veri yap\u0131lar\u0131d\u0131r. LINQ sorgular\u0131, dinamik sorgular ve kod \u00fcretimi gibi senaryolarda kullan\u0131l\u0131r.</p>"},{"location":"mid-level/advanced-csharp/expression-trees/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/advanced-csharp/expression-trees/#1-expression-trees-nedir-ve-ne-icin-kullanlr","title":"1. Expression Trees nedir ve ne i\u00e7in kullan\u0131l\u0131r?","text":"<p>Cevap: Expression Trees kullan\u0131m senaryolar\u0131: - LINQ sorgular\u0131n\u0131n \u00e7evirisi - Dinamik sorgu olu\u015fturma - Kod \u00fcretimi - Metod \u00e7a\u011fr\u0131lar\u0131n\u0131n analizi - Validation kurallar\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Basit expression tree \u00f6rne\u011fi\nExpression&lt;Func&lt;int, int, int&gt;&gt; add = (a, b) =&gt; a + b;\n\n// Expression tree olu\u015fturma\nParameterExpression paramA = Expression.Parameter(typeof(int), \"a\");\nParameterExpression paramB = Expression.Parameter(typeof(int), \"b\");\nBinaryExpression addExpr = Expression.Add(paramA, paramB);\nExpression&lt;Func&lt;int, int, int&gt;&gt; addLambda = \n    Expression.Lambda&lt;Func&lt;int, int, int&gt;&gt;(addExpr, paramA, paramB);\n\n// Expression tree \u00e7al\u0131\u015ft\u0131rma\nFunc&lt;int, int, int&gt; addFunc = addLambda.Compile();\nint result = addFunc(5, 3); // Sonu\u00e7: 8\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/expression-trees/#2-expression-trees-nasl-olusturulur-ve-manipule-edilir","title":"2. Expression Trees nas\u0131l olu\u015fturulur ve manip\u00fcle edilir?","text":"<p>Cevap: Expression Trees manip\u00fclasyonu: - Expression s\u0131n\u0131flar\u0131 - ParameterExpression - BinaryExpression - MethodCallExpression - LambdaExpression</p> <p>\u00d6rnek Kod: <pre><code>// Expression tree manip\u00fclasyonu\npublic class ExpressionBuilder\n{\n    public Expression&lt;Func&lt;T, bool&gt;&gt; CreateGreaterThanExpression&lt;T&gt;(\n        string propertyName, object value)\n    {\n        var parameter = Expression.Parameter(typeof(T), \"x\");\n        var property = Expression.Property(parameter, propertyName);\n        var constant = Expression.Constant(value);\n        var greaterThan = Expression.GreaterThan(property, constant);\n\n        return Expression.Lambda&lt;Func&lt;T, bool&gt;&gt;(greaterThan, parameter);\n    }\n\n    public Expression&lt;Func&lt;T, object&gt;&gt; CreatePropertySelector&lt;T&gt;(\n        string propertyName)\n    {\n        var parameter = Expression.Parameter(typeof(T), \"x\");\n        var property = Expression.Property(parameter, propertyName);\n        var convert = Expression.Convert(property, typeof(object));\n\n        return Expression.Lambda&lt;Func&lt;T, object&gt;&gt;(convert, parameter);\n    }\n}\n\n// Kullan\u0131m \u00f6rne\u011fi\nvar builder = new ExpressionBuilder();\nvar greaterThanExpr = builder.CreateGreaterThanExpression&lt;Person&gt;(\"Age\", 18);\nvar propertySelector = builder.CreatePropertySelector&lt;Person&gt;(\"Name\");\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/expression-trees/#3-expression-trees-ile-dinamik-sorgular-nasl-olusturulur","title":"3. Expression Trees ile dinamik sorgular nas\u0131l olu\u015fturulur?","text":"<p>Cevap: Dinamik sorgu olu\u015fturma: - Filter olu\u015fturma - Order by olu\u015fturma - Select olu\u015fturma - Join olu\u015fturma</p> <p>\u00d6rnek Kod: <pre><code>// Dinamik sorgu olu\u015fturma\npublic class DynamicQueryBuilder\n{\n    public IQueryable&lt;T&gt; ApplyFilter&lt;T&gt;(\n        IQueryable&lt;T&gt; query,\n        string propertyName,\n        object value,\n        string @operator)\n    {\n        var parameter = Expression.Parameter(typeof(T), \"x\");\n        var property = Expression.Property(parameter, propertyName);\n        var constant = Expression.Constant(value);\n\n        BinaryExpression binaryExpression = @operator switch\n        {\n            \"==\" =&gt; Expression.Equal(property, constant),\n            \"&gt;\" =&gt; Expression.GreaterThan(property, constant),\n            \"&lt;\" =&gt; Expression.LessThan(property, constant),\n            \"&gt;=\" =&gt; Expression.GreaterThanOrEqual(property, constant),\n            \"&lt;=\" =&gt; Expression.LessThanOrEqual(property, constant),\n            _ =&gt; throw new ArgumentException(\"Ge\u00e7ersiz operat\u00f6r\")\n        };\n\n        var lambda = Expression.Lambda&lt;Func&lt;T, bool&gt;&gt;(binaryExpression, parameter);\n        return query.Where(lambda);\n    }\n\n    public IQueryable&lt;T&gt; ApplyOrderBy&lt;T&gt;(\n        IQueryable&lt;T&gt; query,\n        string propertyName,\n        bool descending = false)\n    {\n        var parameter = Expression.Parameter(typeof(T), \"x\");\n        var property = Expression.Property(parameter, propertyName);\n        var lambda = Expression.Lambda(property, parameter);\n\n        string methodName = descending ? \"OrderByDescending\" : \"OrderBy\";\n        var resultExpression = Expression.Call(\n            typeof(Queryable),\n            methodName,\n            new Type[] { typeof(T), property.Type },\n            query.Expression,\n            Expression.Quote(lambda));\n\n        return query.Provider.CreateQuery&lt;T&gt;(resultExpression);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/expression-trees/#4-expression-trees-performans-optimizasyonu-nasl-yaplr","title":"4. Expression Trees performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Performans optimizasyonu i\u00e7in: - Expression caching - Compile optimizasyonu - Expression tree basitle\u015ftirme - Memory management</p> <p>\u00d6rnek Kod: <pre><code>// Expression optimizasyonu\npublic class ExpressionCache\n{\n    private readonly Dictionary&lt;string, Delegate&gt; _cache = new();\n\n    public TDelegate GetOrCreate&lt;TDelegate&gt;(\n        string key,\n        Func&lt;Expression&lt;TDelegate&gt;&gt; expressionFactory)\n        where TDelegate : Delegate\n    {\n        if (!_cache.TryGetValue(key, out var compiledDelegate))\n        {\n            var expression = expressionFactory();\n            compiledDelegate = expression.Compile();\n            _cache[key] = compiledDelegate;\n        }\n\n        return (TDelegate)compiledDelegate;\n    }\n}\n\n// Expression basitle\u015ftirme\npublic class ExpressionSimplifier\n{\n    public Expression Simplify(Expression expression)\n    {\n        return new Simplifier().Visit(expression);\n    }\n\n    private class Simplifier : ExpressionVisitor\n    {\n        protected override Expression VisitBinary(BinaryExpression node)\n        {\n            // Sabit ifadeleri hesapla\n            if (node.NodeType == ExpressionType.Add &amp;&amp;\n                node.Left is ConstantExpression left &amp;&amp;\n                node.Right is ConstantExpression right)\n            {\n                return Expression.Constant(\n                    (int)left.Value + (int)right.Value);\n            }\n\n            return base.VisitBinary(node);\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/expression-trees/#5-expression-trees-ile-kod-uretimi-nasl-yaplr","title":"5. Expression Trees ile kod \u00fcretimi nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Kod \u00fcretimi i\u00e7in: - DynamicMethod - ILGenerator - Expression tree d\u00f6n\u00fc\u015f\u00fcm\u00fc - Runtime kod \u00fcretimi</p> <p>\u00d6rnek Kod: <pre><code>// Kod \u00fcretimi \u00f6rne\u011fi\npublic class CodeGenerator\n{\n    public Func&lt;T, TResult&gt; GenerateGetter&lt;T, TResult&gt;(\n        string propertyName)\n    {\n        var parameter = Expression.Parameter(typeof(T), \"x\");\n        var property = Expression.Property(parameter, propertyName);\n        var lambda = Expression.Lambda&lt;Func&lt;T, TResult&gt;&gt;(property, parameter);\n\n        return lambda.Compile();\n    }\n\n    public Action&lt;T, TValue&gt; GenerateSetter&lt;T, TValue&gt;(\n        string propertyName)\n    {\n        var parameter = Expression.Parameter(typeof(T), \"x\");\n        var value = Expression.Parameter(typeof(TValue), \"value\");\n        var property = Expression.Property(parameter, propertyName);\n        var assign = Expression.Assign(property, value);\n        var lambda = Expression.Lambda&lt;Action&lt;T, TValue&gt;&gt;(assign, parameter, value);\n\n        return lambda.Compile();\n    }\n}\n\n// Kullan\u0131m \u00f6rne\u011fi\nvar generator = new CodeGenerator();\nvar getter = generator.GenerateGetter&lt;Person, string&gt;(\"Name\");\nvar setter = generator.GenerateSetter&lt;Person, string&gt;(\"Name\");\n\nvar person = new Person();\nsetter(person, \"John\");\nstring name = getter(person); // \"John\"\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/expression-trees/#best-practices","title":"Best Practices","text":"<ol> <li>Kullan\u0131m</li> <li>Uygun expression tree'leri se\u00e7in</li> <li>Expression'lar\u0131 do\u011fru yerde kullan\u0131n</li> <li>Documentation ekleyin</li> <li> <p>Error handling yap\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Expression caching kullan\u0131n</li> <li>Compile optimizasyonu yap\u0131n</li> <li>Expression tree'leri basitle\u015ftirin</li> <li> <p>Memory management yap\u0131n</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod okunabilirli\u011fini koruyun</li> <li>Test coverage sa\u011flay\u0131n</li> <li>Version control yap\u0131n</li> <li>Documentation g\u00fcncelleyin</li> </ol>"},{"location":"mid-level/advanced-csharp/expression-trees/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Expression Trees</li> <li>Expression Tree Building</li> <li>Dynamic LINQ</li> <li>Expression Tree Performance </li> </ul>"},{"location":"mid-level/advanced-csharp/linq-advanced/","title":"LINQ Advanced","text":""},{"location":"mid-level/advanced-csharp/linq-advanced/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>LINQ (Language Integrated Query), C#'ta veri sorgulama i\u00e7in kullan\u0131lan g\u00fc\u00e7l\u00fc bir \u00f6zelliktir. \u0130leri seviye LINQ kullan\u0131m\u0131, karma\u015f\u0131k veri i\u015flemlerini daha verimli ve okunabilir hale getirir.</p>"},{"location":"mid-level/advanced-csharp/linq-advanced/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/advanced-csharp/linq-advanced/#1-linq-query-syntax-vs-method-syntax-arasndaki-farklar-nelerdir","title":"1. LINQ Query Syntax vs Method Syntax aras\u0131ndaki farklar nelerdir?","text":"<p>Cevap: Query Syntax ve Method Syntax farklar\u0131: - Okunabilirlik - Performans - Kullan\u0131m senaryolar\u0131 - Compile-time checking</p> <p>\u00d6rnek Kod: <pre><code>// Query Syntax\nvar querySyntax = from student in students\n                 where student.Age &gt; 18\n                 orderby student.Name\n                 select new { student.Name, student.Age };\n\n// Method Syntax\nvar methodSyntax = students\n    .Where(student =&gt; student.Age &gt; 18)\n    .OrderBy(student =&gt; student.Name)\n    .Select(student =&gt; new { student.Name, student.Age });\n\n// Karma\u015f\u0131k sorgu \u00f6rne\u011fi\nvar complexQuery = from student in students\n                  join course in courses on student.Id equals course.StudentId\n                  where student.Age &gt; 18 &amp;&amp; course.Grade &gt; 80\n                  group student by student.Department into deptGroup\n                  select new\n                  {\n                      Department = deptGroup.Key,\n                      AverageGrade = deptGroup.Average(s =&gt; s.Grades.Average())\n                  };\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/linq-advanced/#2-linqda-lazy-evaluation-nasl-calsr","title":"2. LINQ'da lazy evaluation nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<p>Cevap: Lazy evaluation \u00f6zellikleri: - Deferred execution - Streaming - Memory optimizasyonu - Query composition</p> <p>\u00d6rnek Kod: <pre><code>// Lazy evaluation \u00f6rne\u011fi\npublic IEnumerable&lt;int&gt; GetNumbers()\n{\n    var numbers = Enumerable.Range(1, 1000000);\n\n    // Sorgu hen\u00fcz \u00e7al\u0131\u015ft\u0131r\u0131lmad\u0131\n    var query = numbers.Where(n =&gt; n % 2 == 0)\n                      .Select(n =&gt; n * 2);\n\n    // Sorgu \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\n    foreach (var number in query)\n    {\n        yield return number;\n    }\n}\n\n// Immediate execution \u00f6rne\u011fi\npublic List&lt;int&gt; GetNumbersImmediate()\n{\n    var numbers = Enumerable.Range(1, 1000000);\n\n    // Sorgu hemen \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\n    return numbers.Where(n =&gt; n % 2 == 0)\n                 .Select(n =&gt; n * 2)\n                 .ToList();\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/linq-advanced/#3-custom-linq-extension-metodlar-nasl-yazlr","title":"3. Custom LINQ extension metodlar\u0131 nas\u0131l yaz\u0131l\u0131r?","text":"<p>Cevap: Custom extension metodlar\u0131 i\u00e7in: - Extension method syntax - Generic type parameters - Lambda expressions - Query composition</p> <p>\u00d6rnek Kod: <pre><code>// Custom extension metod \u00f6rne\u011fi\npublic static class LinqExtensions\n{\n    public static IEnumerable&lt;T&gt; WhereIf&lt;T&gt;(\n        this IEnumerable&lt;T&gt; source,\n        bool condition,\n        Func&lt;T, bool&gt; predicate)\n    {\n        return condition ? source.Where(predicate) : source;\n    }\n\n    public static IEnumerable&lt;T&gt; DistinctBy&lt;T, TKey&gt;(\n        this IEnumerable&lt;T&gt; source,\n        Func&lt;T, TKey&gt; keySelector)\n    {\n        var seenKeys = new HashSet&lt;TKey&gt;();\n        return source.Where(item =&gt; seenKeys.Add(keySelector(item)));\n    }\n\n    public static IEnumerable&lt;T&gt; Paginate&lt;T&gt;(\n        this IEnumerable&lt;T&gt; source,\n        int pageNumber,\n        int pageSize)\n    {\n        return source.Skip((pageNumber - 1) * pageSize)\n                    .Take(pageSize);\n    }\n}\n\n// Kullan\u0131m \u00f6rne\u011fi\nvar filteredData = data\n    .WhereIf(shouldFilter, x =&gt; x.IsActive)\n    .DistinctBy(x =&gt; x.Id)\n    .Paginate(pageNumber: 1, pageSize: 10);\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/linq-advanced/#4-linq-performans-optimizasyonu-nasl-yaplr","title":"4. LINQ performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Performans optimizasyonu i\u00e7in: - Index kullan\u0131m\u0131 - Caching - Query optimization - Materialization stratejileri</p> <p>\u00d6rnek Kod: <pre><code>// Performans optimizasyonu \u00f6rnekleri\npublic class LinqOptimization\n{\n    // Index kullan\u0131m\u0131\n    public IEnumerable&lt;Student&gt; GetStudentsByIndex(List&lt;Student&gt; students)\n    {\n        var index = students.ToDictionary(s =&gt; s.Id);\n        return students.Where(s =&gt; index.ContainsKey(s.Id));\n    }\n\n    // Caching \u00f6rne\u011fi\n    private Dictionary&lt;int, Student&gt; _studentCache;\n    public Student GetStudentWithCache(int id)\n    {\n        return _studentCache.GetOrAdd(id, \n            key =&gt; students.FirstOrDefault(s =&gt; s.Id == key));\n    }\n\n    // Query optimization\n    public IQueryable&lt;Student&gt; OptimizeQuery(IQueryable&lt;Student&gt; query)\n    {\n        return query.Where(s =&gt; s.IsActive)\n                   .OrderBy(s =&gt; s.Name)\n                   .Take(100)\n                   .AsNoTracking();\n    }\n}\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/linq-advanced/#5-expression-trees-nedir-ve-nasl-kullanlr","title":"5. Expression Trees nedir ve nas\u0131l kullan\u0131l\u0131r?","text":"<p>Cevap: Expression Trees \u00f6zellikleri: - Runtime query generation - Dynamic query building - Query translation - Custom provider support</p> <p>\u00d6rnek Kod: <pre><code>// Expression Tree \u00f6rne\u011fi\npublic class ExpressionBuilder\n{\n    public Expression&lt;Func&lt;T, bool&gt;&gt; BuildPredicate&lt;T&gt;(\n        string propertyName,\n        string value)\n    {\n        var parameter = Expression.Parameter(typeof(T), \"x\");\n        var property = Expression.Property(parameter, propertyName);\n        var constant = Expression.Constant(value);\n        var body = Expression.Equal(property, constant);\n\n        return Expression.Lambda&lt;Func&lt;T, bool&gt;&gt;(body, parameter);\n    }\n\n    // Dynamic query olu\u015fturma\n    public IQueryable&lt;T&gt; ApplyDynamicFilter&lt;T&gt;(\n        IQueryable&lt;T&gt; source,\n        string propertyName,\n        string value)\n    {\n        var predicate = BuildPredicate&lt;T&gt;(propertyName, value);\n        return source.Where(predicate);\n    }\n}\n\n// Kullan\u0131m \u00f6rne\u011fi\nvar query = db.Students;\nvar filteredQuery = expressionBuilder\n    .ApplyDynamicFilter(query, \"Name\", \"John\");\n</code></pre></p>"},{"location":"mid-level/advanced-csharp/linq-advanced/#best-practices","title":"Best Practices","text":"<ol> <li>Performans</li> <li>Lazy evaluation kullan\u0131n</li> <li>Gereksiz materialization'dan ka\u00e7\u0131n\u0131n</li> <li>Index'leri etkin kullan\u0131n</li> <li> <p>Query'leri optimize edin</p> </li> <li> <p>Kod Kalitesi</p> </li> <li>Query syntax'\u0131 tercih edin</li> <li>Extension metodlar\u0131 kullan\u0131n</li> <li>Lambda ifadelerini d\u00fczenli kullan\u0131n</li> <li> <p>Documentation ekleyin</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Karma\u015f\u0131k sorgular\u0131 par\u00e7alay\u0131n</li> <li>Reusable component'ler olu\u015fturun</li> <li>Test edilebilir kod yaz\u0131n</li> <li>Error handling ekleyin</li> </ol>"},{"location":"mid-level/advanced-csharp/linq-advanced/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft LINQ Documentation</li> <li>LINQ Performance</li> <li>Expression Trees</li> <li>LINQ Best Practices </li> </ul>"},{"location":"mid-level/advanced-csharp/reflection/","title":"Reflection","text":""},{"location":"mid-level/advanced-csharp/reflection/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Reflection, .NET'te \u00e7al\u0131\u015fma zaman\u0131nda (runtime) tip bilgilerini inceleme, tip \u00f6rnekleri olu\u015fturma ve dinamik olarak metod \u00e7a\u011f\u0131rma gibi i\u015flemleri yapmam\u0131z\u0131 sa\u011flayan g\u00fc\u00e7l\u00fc bir \u00f6zelliktir. Bu \u00f6zellik sayesinde, derleme zaman\u0131nda bilinmeyen tipleri ve \u00fcyelerini \u00e7al\u0131\u015fma zaman\u0131nda ke\u015ffedebilir ve kullanabiliriz.</p>"},{"location":"mid-level/advanced-csharp/reflection/#temel-kullanm-alanlar","title":"Temel Kullan\u0131m Alanlar\u0131","text":"<ol> <li>Tip Bilgisi \u0130nceleme</li> <li>Bir tipin \u00f6zelliklerini, metodlar\u0131n\u0131 ve alanlar\u0131n\u0131 ke\u015ffetme</li> <li>Tip hiyerar\u015fisini inceleme</li> <li> <p>Attribute'lar\u0131 okuma</p> </li> <li> <p>Dinamik Tip Olu\u015fturma</p> </li> <li>\u00c7al\u0131\u015fma zaman\u0131nda yeni tip \u00f6rnekleri olu\u015fturma</li> <li>Interface'leri dinamik olarak implemente etme</li> <li> <p>Proxy nesneleri olu\u015fturma</p> </li> <li> <p>Dinamik Metod \u00c7a\u011f\u0131rma</p> </li> <li>Metodlar\u0131 isimlerine g\u00f6re \u00e7a\u011f\u0131rma</li> <li>Private \u00fcyelere eri\u015fim</li> <li>Generic metodlar\u0131 dinamik olarak \u00e7a\u011f\u0131rma</li> </ol>"},{"location":"mid-level/advanced-csharp/reflection/#ornek-kullanmlar","title":"\u00d6rnek Kullan\u0131mlar","text":""},{"location":"mid-level/advanced-csharp/reflection/#1-tip-bilgisi-inceleme","title":"1. Tip Bilgisi \u0130nceleme","text":"<pre><code>Type type = typeof(MyClass);\n\n// \u00d6zellikleri listeleme\nforeach (PropertyInfo prop in type.GetProperties())\n{\n    Console.WriteLine($\"Property: {prop.Name}, Type: {prop.PropertyType}\");\n}\n\n// Metodlar\u0131 listeleme\nforeach (MethodInfo method in type.GetMethods())\n{\n    Console.WriteLine($\"Method: {method.Name}, Return Type: {method.ReturnType}\");\n}\n\n// Attribute'lar\u0131 okuma\nforeach (Attribute attr in type.GetCustomAttributes())\n{\n    Console.WriteLine($\"Attribute: {attr.GetType().Name}\");\n}\n</code></pre>"},{"location":"mid-level/advanced-csharp/reflection/#2-dinamik-tip-olusturma","title":"2. Dinamik Tip Olu\u015fturma","text":"<pre><code>// Assembly'den tip y\u00fckleme\nAssembly assembly = Assembly.Load(\"MyAssembly\");\nType type = assembly.GetType(\"MyNamespace.MyClass\");\n\n// Tip \u00f6rne\u011fi olu\u015fturma\nobject instance = Activator.CreateInstance(type);\n\n// Generic tip olu\u015fturma\nType genericType = typeof(List&lt;&gt;);\nType constructedType = genericType.MakeGenericType(typeof(int));\nobject list = Activator.CreateInstance(constructedType);\n</code></pre>"},{"location":"mid-level/advanced-csharp/reflection/#3-dinamik-metod-cagrma","title":"3. Dinamik Metod \u00c7a\u011f\u0131rma","text":"<pre><code>// Metod bilgisini alma\nMethodInfo method = type.GetMethod(\"MyMethod\");\n\n// Metodu \u00e7a\u011f\u0131rma\nobject result = method.Invoke(instance, new object[] { \"param1\", 42 });\n\n// Generic metod \u00e7a\u011f\u0131rma\nMethodInfo genericMethod = type.GetMethod(\"GenericMethod\");\nMethodInfo constructedMethod = genericMethod.MakeGenericMethod(typeof(string));\nconstructedMethod.Invoke(instance, new object[] { \"value\" });\n</code></pre>"},{"location":"mid-level/advanced-csharp/reflection/#dikkat-edilmesi-gerekenler","title":"Dikkat Edilmesi Gerekenler","text":"<ol> <li>Performans</li> <li>Reflection i\u015flemleri normal kod \u00e7a\u011fr\u0131lar\u0131na g\u00f6re daha yava\u015ft\u0131r</li> <li> <p>S\u0131k kullan\u0131lan reflection i\u015flemleri i\u00e7in cache mekanizmas\u0131 kullan\u0131lmal\u0131d\u0131r</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Private \u00fcyelere eri\u015fim sa\u011flayabildi\u011fi i\u00e7in dikkatli kullan\u0131lmal\u0131d\u0131r</li> <li> <p>G\u00fcvenlik kontrolleri yap\u0131lmal\u0131d\u0131r</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Reflection kullan\u0131lan kodlar daha zor debug edilebilir</li> <li>Refactoring i\u015flemleri daha zor olabilir</li> </ol>"},{"location":"mid-level/advanced-csharp/reflection/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Cache Kullan\u0131m\u0131 <pre><code>private static readonly Dictionary&lt;string, MethodInfo&gt; _methodCache = new();\n\npublic MethodInfo GetCachedMethod(string methodName)\n{\n    if (!_methodCache.TryGetValue(methodName, out MethodInfo method))\n    {\n        method = typeof(MyClass).GetMethod(methodName);\n        _methodCache[methodName] = method;\n    }\n    return method;\n}\n</code></pre></p> </li> <li> <p>Tip G\u00fcvenli\u011fi <pre><code>public T CreateInstance&lt;T&gt;(string typeName) where T : class\n{\n    Type type = Type.GetType(typeName);\n    if (type == null || !typeof(T).IsAssignableFrom(type))\n    {\n        throw new ArgumentException($\"Type {typeName} is not valid\");\n    }\n    return (T)Activator.CreateInstance(type);\n}\n</code></pre></p> </li> <li> <p>Hata Y\u00f6netimi <pre><code>try\n{\n    MethodInfo method = type.GetMethod(\"MyMethod\");\n    if (method == null)\n    {\n        throw new MissingMethodException($\"Method MyMethod not found in type {type.Name}\");\n    }\n    return method.Invoke(instance, parameters);\n}\ncatch (TargetInvocationException ex)\n{\n    throw ex.InnerException ?? ex;\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/advanced-csharp/reflection/#kullanm-senaryolar","title":"Kullan\u0131m Senaryolar\u0131","text":"<ol> <li>Dependency Injection Framework'leri</li> <li>Tip ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131 otomatik \u00e7\u00f6zme</li> <li> <p>Constructor injection i\u00e7in reflection kullan\u0131m\u0131</p> </li> <li> <p>ORM (Object-Relational Mapping)</p> </li> <li>Entity property'lerini otomatik e\u015fle\u015ftirme</li> <li> <p>Dinamik sorgu olu\u015fturma</p> </li> <li> <p>Serialization/Deserialization</p> </li> <li>JSON/XML d\u00f6n\u00fc\u015f\u00fcmleri</li> <li> <p>Custom serializer implementasyonlar\u0131</p> </li> <li> <p>Plugin Sistemleri</p> </li> <li>Dinamik olarak y\u00fcklenen assembly'leri ke\u015ffetme</li> <li> <p>Interface implementasyonlar\u0131n\u0131 bulma</p> </li> <li> <p>Unit Testing Framework'leri</p> </li> <li>Test metodlar\u0131n\u0131 otomatik bulma</li> <li>Test fixture'lar\u0131 olu\u015fturma</li> </ol>"},{"location":"mid-level/advanced-csharp/reflection/#performans-iyilestirmeleri","title":"Performans \u0130yile\u015ftirmeleri","text":"<ol> <li> <p>Expression Trees Kullan\u0131m\u0131 <pre><code>private static readonly Dictionary&lt;string, Func&lt;object, object&gt;&gt; _propertyGetters = new();\n\npublic static Func&lt;object, object&gt; CreatePropertyGetter(PropertyInfo property)\n{\n    var instance = Expression.Parameter(typeof(object), \"instance\");\n    var cast = Expression.Convert(instance, property.DeclaringType);\n    var propertyAccess = Expression.Property(cast, property);\n    var convert = Expression.Convert(propertyAccess, typeof(object));\n    return Expression.Lambda&lt;Func&lt;object, object&gt;&gt;(convert, instance).Compile();\n}\n</code></pre></p> </li> <li> <p>Delegate Cache <pre><code>private static readonly ConcurrentDictionary&lt;MethodInfo, Delegate&gt; _methodCache = new();\n\npublic static TDelegate CreateDelegate&lt;TDelegate&gt;(MethodInfo method)\n    where TDelegate : Delegate\n{\n    return (TDelegate)_methodCache.GetOrAdd(method, m =&gt; \n        Delegate.CreateDelegate(typeof(TDelegate), m));\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/advanced-csharp/reflection/#guvenlik-konular","title":"G\u00fcvenlik Konular\u0131","text":"<ol> <li>Code Access Security (CAS)</li> <li>ReflectionPermission kontrol\u00fc</li> <li> <p>K\u0131s\u0131tl\u0131 reflection eri\u015fimi</p> </li> <li> <p>Private Member Eri\u015fimi <pre><code>public static T GetPrivateField&lt;T&gt;(object instance, string fieldName)\n{\n    var field = instance.GetType().GetField(fieldName, \n        BindingFlags.Instance | BindingFlags.NonPublic);\n    return (T)field?.GetValue(instance);\n}\n</code></pre></p> </li> <li> <p>Assembly Y\u00fckleme G\u00fcvenli\u011fi <pre><code>public static Assembly LoadAssemblySafely(string assemblyPath)\n{\n    try\n    {\n        return Assembly.LoadFrom(assemblyPath);\n    }\n    catch (FileLoadException)\n    {\n        // G\u00fcvenlik politikas\u0131 ihlali\n        throw new SecurityException(\"Assembly y\u00fcklenemedi\");\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/advanced-csharp/reflection/#ileri-seviye-konular","title":"\u0130leri Seviye Konular","text":"<ol> <li> <p>DynamicMethod ile IL Generation <pre><code>public static DynamicMethod CreateDynamicMethod()\n{\n    var method = new DynamicMethod(\"DynamicMethod\", \n        typeof(void), new[] { typeof(object) });\n    var il = method.GetILGenerator();\n    // IL kodlar\u0131\n    il.Emit(OpCodes.Ret);\n    return method;\n}\n</code></pre></p> </li> <li> <p>Custom Attribute Olu\u015fturma <pre><code>[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]\npublic class MyCustomAttribute : Attribute\n{\n    public string Description { get; }\n\n    public MyCustomAttribute(string description)\n    {\n        Description = description;\n    }\n}\n</code></pre></p> </li> <li> <p>Generic Tip Manip\u00fclasyonu <pre><code>public static Type MakeGenericType(Type genericType, params Type[] typeArguments)\n{\n    if (!genericType.IsGenericTypeDefinition)\n    {\n        throw new ArgumentException(\"Type must be a generic type definition\");\n    }\n    return genericType.MakeGenericType(typeArguments);\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/advanced-csharp/reflection/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Docs - Reflection</li> <li>C# Reflection Best Practices</li> <li>Performance Considerations for Reflection </li> </ul>"},{"location":"mid-level/advanced-dotnet/assembly-loading/","title":"Assembly Loading","text":""},{"location":"mid-level/advanced-dotnet/assembly-loading/#giris","title":"Giri\u015f","text":"<p>Assembly Loading, .NET runtime'da assembly'lerin y\u00fcklenmesi, y\u00f6netilmesi ve dinamik olarak \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131 i\u00e7in kullan\u0131lan mekanizmalard\u0131r. Mid-level geli\u015ftiriciler i\u00e7in assembly loading'i anlamak, plugin architecture, dynamic code execution ve runtime extensibility i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, assembly loading mechanisms, reflection, dynamic loading ve plugin systems konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/advanced-dotnet/assembly-loading/#assembly-loading-mechanisms","title":"Assembly Loading Mechanisms","text":""},{"location":"mid-level/advanced-dotnet/assembly-loading/#1-assembly-loader-service","title":"1. Assembly Loader Service","text":"<p>Assembly loading'i y\u00f6neten servis.</p> <pre><code>public class AssemblyLoaderService\n{\n    private readonly ILogger&lt;AssemblyLoaderService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly Dictionary&lt;string, Assembly&gt; _loadedAssemblies;\n    private readonly object _lock = new object();\n\n    public AssemblyLoaderService(ILogger&lt;AssemblyLoaderService&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _loadedAssemblies = new Dictionary&lt;string, Assembly&gt;();\n    }\n\n    public Assembly LoadAssembly(string assemblyPath)\n    {\n        try\n        {\n            lock (_lock)\n            {\n                if (_loadedAssemblies.ContainsKey(assemblyPath))\n                {\n                    _logger.LogDebug(\"Assembly already loaded: {Path}\", assemblyPath);\n                    return _loadedAssemblies[assemblyPath];\n                }\n\n                _logger.LogInformation(\"Loading assembly: {Path}\", assemblyPath);\n\n                var assembly = Assembly.LoadFrom(assemblyPath);\n                _loadedAssemblies[assemblyPath] = assembly;\n\n                _logger.LogInformation(\"Assembly loaded successfully: {Name}, Version: {Version}\", \n                    assembly.FullName, assembly.GetName().Version);\n\n                return assembly;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading assembly: {Path}\", assemblyPath);\n            throw;\n        }\n    }\n\n    public Assembly LoadAssemblyByName(string assemblyName)\n    {\n        try\n        {\n            _logger.LogInformation(\"Loading assembly by name: {Name}\", assemblyName);\n\n            var assembly = Assembly.Load(assemblyName);\n\n            _logger.LogInformation(\"Assembly loaded successfully: {Name}, Version: {Version}\", \n                assembly.FullName, assembly.GetName().Version);\n\n            return assembly;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading assembly by name: {Name}\", assemblyName);\n            throw;\n        }\n    }\n\n    public Assembly LoadAssemblyFromBytes(byte[] assemblyBytes)\n    {\n        try\n        {\n            _logger.LogInformation(\"Loading assembly from bytes. Size: {Size} bytes\", assemblyBytes.Length);\n\n            var assembly = Assembly.Load(assemblyBytes);\n\n            _logger.LogInformation(\"Assembly loaded successfully: {Name}, Version: {Version}\", \n                assembly.FullName, assembly.GetName().Version);\n\n            return assembly;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading assembly from bytes\");\n            throw;\n        }\n    }\n\n    public void UnloadAssembly(string assemblyPath)\n    {\n        try\n        {\n            lock (_lock)\n            {\n                if (_loadedAssemblies.ContainsKey(assemblyPath))\n                {\n                    _loadedAssemblies.Remove(assemblyPath);\n                    _logger.LogInformation(\"Assembly unloaded: {Path}\", assemblyPath);\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error unloading assembly: {Path}\", assemblyPath);\n        }\n    }\n\n    public List&lt;AssemblyInfo&gt; GetLoadedAssemblies()\n    {\n        lock (_lock)\n        {\n            return _loadedAssemblies.Values.Select(a =&gt; new AssemblyInfo\n            {\n                FullName = a.FullName,\n                Location = a.Location,\n                Version = a.GetName().Version?.ToString(),\n                LoadedAt = DateTime.UtcNow\n            }).ToList();\n        }\n    }\n}\n\npublic class AssemblyInfo\n{\n    public string FullName { get; set; }\n    public string Location { get; set; }\n    public string Version { get; set; }\n    public DateTime LoadedAt { get; set; }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/assembly-loading/#2-plugin-system","title":"2. Plugin System","text":"<p>Dynamic plugin loading implementasyonu.</p> <pre><code>public interface IPlugin\n{\n    string Name { get; }\n    string Version { get; }\n    void Initialize();\n    void Execute();\n    void Cleanup();\n}\n\npublic class PluginManager\n{\n    private readonly ILogger&lt;PluginManager&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly Dictionary&lt;string, IPlugin&gt; _plugins;\n    private readonly AssemblyLoaderService _assemblyLoader;\n\n    public PluginManager(ILogger&lt;PluginManager&gt; logger, IConfiguration configuration, AssemblyLoaderService assemblyLoader)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _assemblyLoader = assemblyLoader;\n        _plugins = new Dictionary&lt;string, IPlugin&gt;();\n    }\n\n    public async Task LoadPluginsAsync(string pluginDirectory)\n    {\n        try\n        {\n            if (!Directory.Exists(pluginDirectory))\n            {\n                _logger.LogWarning(\"Plugin directory does not exist: {Directory}\", pluginDirectory);\n                return;\n            }\n\n            var pluginFiles = Directory.GetFiles(pluginDirectory, \"*.dll\");\n            _logger.LogInformation(\"Found {Count} plugin files in {Directory}\", pluginFiles.Length, pluginDirectory);\n\n            foreach (var pluginFile in pluginFiles)\n            {\n                await LoadPluginAsync(pluginFile);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading plugins from directory: {Directory}\", pluginDirectory);\n        }\n    }\n\n    private async Task LoadPluginAsync(string pluginPath)\n    {\n        try\n        {\n            _logger.LogInformation(\"Loading plugin: {Path}\", pluginPath);\n\n            var assembly = _assemblyLoader.LoadAssembly(pluginPath);\n            var pluginTypes = assembly.GetTypes()\n                .Where(t =&gt; typeof(IPlugin).IsAssignableFrom(t) &amp;&amp; !t.IsInterface &amp;&amp; !t.IsAbstract)\n                .ToList();\n\n            foreach (var pluginType in pluginTypes)\n            {\n                var plugin = (IPlugin)Activator.CreateInstance(pluginType);\n                _plugins[plugin.Name] = plugin;\n\n                plugin.Initialize();\n\n                _logger.LogInformation(\"Plugin loaded successfully: {Name}, Version: {Version}\", \n                    plugin.Name, plugin.Version);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading plugin: {Path}\", pluginPath);\n        }\n    }\n\n    public IPlugin GetPlugin(string name)\n    {\n        return _plugins.TryGetValue(name, out var plugin) ? plugin : null;\n    }\n\n    public List&lt;IPlugin&gt; GetAllPlugins()\n    {\n        return _plugins.Values.ToList();\n    }\n\n    public void ExecutePlugin(string name)\n    {\n        try\n        {\n            var plugin = GetPlugin(name);\n            if (plugin != null)\n            {\n                _logger.LogInformation(\"Executing plugin: {Name}\", name);\n                plugin.Execute();\n            }\n            else\n            {\n                _logger.LogWarning(\"Plugin not found: {Name}\", name);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing plugin: {Name}\", name);\n        }\n    }\n\n    public void UnloadAllPlugins()\n    {\n        try\n        {\n            foreach (var plugin in _plugins.Values)\n            {\n                plugin.Cleanup();\n            }\n\n            _plugins.Clear();\n            _logger.LogInformation(\"All plugins unloaded\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error unloading plugins\");\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/assembly-loading/#reflection-and-dynamic-loading","title":"Reflection and Dynamic Loading","text":""},{"location":"mid-level/advanced-dotnet/assembly-loading/#1-dynamic-type-loader","title":"1. Dynamic Type Loader","text":"<p>Runtime'da type'lar\u0131 dinamik olarak y\u00fckleyen servis.</p> <pre><code>public class DynamicTypeLoader\n{\n    private readonly ILogger&lt;DynamicTypeLoader&gt; _logger;\n\n    public DynamicTypeLoader(ILogger&lt;DynamicTypeLoader&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public object CreateInstance(string typeName, params object[] constructorArgs)\n    {\n        try\n        {\n            _logger.LogDebug(\"Creating instance of type: {TypeName}\", typeName);\n\n            var type = Type.GetType(typeName);\n            if (type == null)\n            {\n                throw new TypeLoadException($\"Type not found: {typeName}\");\n            }\n\n            var instance = Activator.CreateInstance(type, constructorArgs);\n\n            _logger.LogDebug(\"Instance created successfully: {TypeName}\", typeName);\n            return instance;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating instance of type: {TypeName}\", typeName);\n            throw;\n        }\n    }\n\n    public object InvokeMethod(object instance, string methodName, params object[] parameters)\n    {\n        try\n        {\n            _logger.LogDebug(\"Invoking method: {MethodName} on type: {TypeName}\", \n                methodName, instance.GetType().Name);\n\n            var method = instance.GetType().GetMethod(methodName);\n            if (method == null)\n            {\n                throw new MissingMethodException($\"Method not found: {methodName}\");\n            }\n\n            var result = method.Invoke(instance, parameters);\n\n            _logger.LogDebug(\"Method invoked successfully: {MethodName}\", methodName);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error invoking method: {MethodName}\", methodName);\n            throw;\n        }\n    }\n\n    public object GetPropertyValue(object instance, string propertyName)\n    {\n        try\n        {\n            _logger.LogDebug(\"Getting property value: {PropertyName} from type: {TypeName}\", \n                propertyName, instance.GetType().Name);\n\n            var property = instance.GetType().GetProperty(propertyName);\n            if (property == null)\n            {\n                throw new MissingMemberException($\"Property not found: {propertyName}\");\n            }\n\n            var value = property.GetValue(instance);\n\n            _logger.LogDebug(\"Property value retrieved successfully: {PropertyName} = {Value}\", \n                propertyName, value);\n\n            return value;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting property value: {PropertyName}\", propertyName);\n            throw;\n        }\n    }\n\n    public void SetPropertyValue(object instance, string propertyName, object value)\n    {\n        try\n        {\n            _logger.LogDebug(\"Setting property value: {PropertyName} = {Value} on type: {TypeName}\", \n                propertyName, value, instance.GetType().Name);\n\n            var property = instance.GetType().GetProperty(propertyName);\n            if (property == null)\n            {\n                throw new MissingMemberException($\"Property not found: {propertyName}\");\n            }\n\n            property.SetValue(instance, value);\n\n            _logger.LogDebug(\"Property value set successfully: {PropertyName}\", propertyName);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error setting property value: {PropertyName}\", propertyName);\n            throw;\n        }\n    }\n\n    public List&lt;TypeInfo&gt; GetTypesWithAttribute&lt;TAttribute&gt;() where TAttribute : Attribute\n    {\n        try\n        {\n            var types = new List&lt;TypeInfo&gt;();\n            var assemblies = AppDomain.CurrentDomain.GetAssemblies();\n\n            foreach (var assembly in assemblies)\n            {\n                try\n                {\n                    var assemblyTypes = assembly.GetTypes()\n                        .Where(t =&gt; t.GetCustomAttribute&lt;TAttribute&gt;() != null)\n                        .Select(t =&gt; new TypeInfo\n                        {\n                            FullName = t.FullName,\n                            AssemblyName = assembly.FullName,\n                            Attributes = t.GetCustomAttributes&lt;TAttribute&gt;().ToList()\n                        });\n\n                    types.AddRange(assemblyTypes);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogWarning(ex, \"Error processing assembly: {Assembly}\", assembly.FullName);\n                }\n            }\n\n            _logger.LogDebug(\"Found {Count} types with attribute {AttributeName}\", \n                types.Count, typeof(TAttribute).Name);\n\n            return types;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting types with attribute: {AttributeName}\", typeof(TAttribute).Name);\n            throw;\n        }\n    }\n}\n\npublic class TypeInfo\n{\n    public string FullName { get; set; }\n    public string AssemblyName { get; set; }\n    public List&lt;Attribute&gt; Attributes { get; set; } = new();\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/assembly-loading/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/advanced-dotnet/assembly-loading/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Assembly loading nedir?</li> <li> <p>Cevap: .NET runtime'da assembly'lerin y\u00fcklenmesi ve y\u00f6netilmesi.</p> </li> <li> <p>Plugin system nedir?</p> </li> <li> <p>Cevap: Runtime'da dinamik olarak y\u00fcklenen ve \u00e7al\u0131\u015ft\u0131r\u0131lan mod\u00fcller.</p> </li> <li> <p>Reflection nedir?</p> </li> <li> <p>Cevap: Runtime'da type'lar hakk\u0131nda bilgi alma ve dinamik olarak \u00e7al\u0131\u015ft\u0131rma.</p> </li> <li> <p>Assembly.Load vs Assembly.LoadFrom fark\u0131 nedir?</p> </li> <li> <p>Cevap: Load: GAC'dan, LoadFrom: belirtilen path'den y\u00fckler.</p> </li> <li> <p>Dynamic loading ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Plugin architecture, runtime extensibility, configuration-based loading.</li> </ol>"},{"location":"mid-level/advanced-dotnet/assembly-loading/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Assembly loading nas\u0131l implement edilir?</li> <li> <p>Cevap: Assembly.Load, Assembly.LoadFrom, Assembly.LoadFile methods.</p> </li> <li> <p>Plugin system nas\u0131l tasarlan\u0131r?</p> </li> <li> <p>Cevap: Interface-based design, assembly loading, dependency injection.</p> </li> <li> <p>Reflection performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Caching, compiled expressions, code generation.</p> </li> <li> <p>Assembly unloading nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: AppDomain isolation, weak references, manual cleanup.</p> </li> <li> <p>Security assembly loading'de nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap: Code signing, strong names, security policies.</li> </ol>"},{"location":"mid-level/advanced-dotnet/assembly-loading/#best-practices","title":"Best Practices","text":"<ol> <li>Assembly Loading</li> <li>Appropriate loading method se\u00e7in</li> <li>Error handling implement edin</li> <li>Resource cleanup yap\u0131n</li> <li> <p>Security considerations g\u00f6z \u00f6n\u00fcnde bulundurun</p> </li> <li> <p>Plugin Architecture</p> </li> <li>Interface-based design kullan\u0131n</li> <li>Dependency injection implement edin</li> <li>Versioning support ekleyin</li> <li> <p>Error isolation sa\u011flay\u0131n</p> </li> <li> <p>Reflection Usage</p> </li> <li>Performance impact minimize edin</li> <li>Caching strategies uygulay\u0131n</li> <li>Error handling ekleyin</li> <li> <p>Security validation yap\u0131n</p> </li> <li> <p>Resource Management</p> </li> <li>Proper disposal implement edin</li> <li>Memory leaks prevent edin</li> <li>Assembly unloading consider edin</li> <li> <p>Monitoring ekleyin</p> </li> <li> <p>Security</p> </li> <li>Code signing validate edin</li> <li>Strong names kullan\u0131n</li> <li>Security policies implement edin</li> <li>Input validation yap\u0131n</li> </ol>"},{"location":"mid-level/advanced-dotnet/assembly-loading/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Assembly Loading</li> <li>Reflection</li> <li>Plugin Architecture</li> <li>Dynamic Loading</li> <li>Assembly Security</li> </ul>"},{"location":"mid-level/advanced-dotnet/high-performance/","title":"High Performance","text":""},{"location":"mid-level/advanced-dotnet/high-performance/#giris","title":"Giri\u015f","text":"<p>High Performance programming, .NET uygulamalar\u0131nda maximum performance elde etmek i\u00e7in kullan\u0131lan teknikler ve best practices'dir. Mid-level geli\u015ftiriciler i\u00e7in high performance programming'i anlamak, optimization, benchmarking ve performance tuning i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, performance optimization, benchmarking, profiling ve high-performance patterns konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/advanced-dotnet/high-performance/#performance-optimization","title":"Performance Optimization","text":""},{"location":"mid-level/advanced-dotnet/high-performance/#1-performance-optimizer","title":"1. Performance Optimizer","text":"<p>Performance optimization yapan servis.</p> <pre><code>public class PerformanceOptimizer\n{\n    private readonly ILogger&lt;PerformanceOptimizer&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public PerformanceOptimizer(ILogger&lt;PerformanceOptimizer&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public async Task&lt;OptimizationResult&gt; OptimizeAsync(OptimizationRequest request)\n    {\n        var stopwatch = Stopwatch.StartNew();\n        var result = new OptimizationResult();\n\n        try\n        {\n            _logger.LogInformation(\"Starting performance optimization for {Target}\", request.Target);\n\n            // Memory optimization\n            if (request.OptimizeMemory)\n            {\n                result.MemoryOptimizations = await OptimizeMemoryAsync();\n            }\n\n            // CPU optimization\n            if (request.OptimizeCpu)\n            {\n                result.CpuOptimizations = await OptimizeCpuAsync();\n            }\n\n            // I/O optimization\n            if (request.OptimizeIo)\n            {\n                result.IoOptimizations = await OptimizeIoAsync();\n            }\n\n            // Network optimization\n            if (request.OptimizeNetwork)\n            {\n                result.NetworkOptimizations = await OptimizeNetworkAsync();\n            }\n\n            stopwatch.Stop();\n            result.Duration = stopwatch.Elapsed;\n            result.Success = true;\n\n            _logger.LogInformation(\"Performance optimization completed in {Duration}\", result.Duration);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during performance optimization\");\n            result.Success = false;\n            result.Error = ex.Message;\n        }\n\n        return result;\n    }\n\n    private async Task&lt;List&lt;string&gt;&gt; OptimizeMemoryAsync()\n    {\n        var optimizations = new List&lt;string&gt;();\n\n        // Force garbage collection\n        var beforeMemory = GC.GetTotalMemory(false);\n        GC.Collect();\n        var afterMemory = GC.GetTotalMemory(false);\n\n        optimizations.Add($\"Memory freed: {beforeMemory - afterMemory} bytes\");\n\n        // Compact large object heap\n        GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce;\n        GC.Collect();\n\n        optimizations.Add(\"Large Object Heap compacted\");\n\n        await Task.Delay(100); // Simulate async work\n        return optimizations;\n    }\n\n    private async Task&lt;List&lt;string&gt;&gt; OptimizeCpuAsync()\n    {\n        var optimizations = new List&lt;string&gt;();\n\n        // Set processor affinity\n        var process = Process.GetCurrentProcess();\n        process.ProcessorAffinity = (IntPtr)((1 &lt;&lt; Environment.ProcessorCount) - 1);\n\n        optimizations.Add($\"Processor affinity set to {Environment.ProcessorCount} cores\");\n\n        // Set priority\n        process.PriorityClass = ProcessPriorityClass.High;\n        optimizations.Add(\"Process priority set to High\");\n\n        await Task.Delay(100);\n        return optimizations;\n    }\n\n    private async Task&lt;List&lt;string&gt;&gt; OptimizeIoAsync()\n    {\n        var optimizations = new List&lt;string&gt;();\n\n        // Optimize file system\n        var drive = new DriveInfo(Path.GetPathRoot(Environment.CurrentDirectory));\n        if (drive.DriveType == DriveType.Fixed)\n        {\n            // Enable write caching\n            optimizations.Add(\"Write caching enabled for fixed drive\");\n        }\n\n        await Task.Delay(100);\n        return optimizations;\n    }\n\n    private async Task&lt;List&lt;string&gt;&gt; OptimizeNetworkAsync()\n    {\n        var optimizations = new List&lt;string&gt;();\n\n        // Optimize TCP settings\n        optimizations.Add(\"TCP optimization applied\");\n\n        await Task.Delay(100);\n        return optimizations;\n    }\n}\n\npublic class OptimizationRequest\n{\n    public string Target { get; set; }\n    public bool OptimizeMemory { get; set; } = true;\n    public bool OptimizeCpu { get; set; } = true;\n    public bool OptimizeIo { get; set; } = true;\n    public bool OptimizeNetwork { get; set; } = true;\n}\n\npublic class OptimizationResult\n{\n    public bool Success { get; set; }\n    public TimeSpan Duration { get; set; }\n    public string Error { get; set; }\n    public List&lt;string&gt; MemoryOptimizations { get; set; } = new();\n    public List&lt;string&gt; CpuOptimizations { get; set; } = new();\n    public List&lt;string&gt; IoOptimizations { get; set; } = new();\n    public List&lt;string&gt; NetworkOptimizations { get; set; } = new();\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/high-performance/#2-high-performance-collections","title":"2. High-Performance Collections","text":"<p>Optimized collection implementations.</p> <pre><code>public class HighPerformanceList&lt;T&gt;\n{\n    private T[] _items;\n    private int _count;\n    private int _capacity;\n\n    public HighPerformanceList(int initialCapacity = 16)\n    {\n        _capacity = initialCapacity;\n        _items = new T[_capacity];\n        _count = 0;\n    }\n\n    public void Add(T item)\n    {\n        if (_count == _capacity)\n        {\n            Grow();\n        }\n\n        _items[_count] = item;\n        _count++;\n    }\n\n    public void AddRange(IEnumerable&lt;T&gt; items)\n    {\n        foreach (var item in items)\n        {\n            Add(item);\n        }\n    }\n\n    public void Clear()\n    {\n        Array.Clear(_items, 0, _count);\n        _count = 0;\n    }\n\n    public T this[int index]\n    {\n        get\n        {\n            if (index &lt; 0 || index &gt;= _count)\n                throw new ArgumentOutOfRangeException(nameof(index));\n\n            return _items[index];\n        }\n        set\n        {\n            if (index &lt; 0 || index &gt;= _count)\n                throw new ArgumentOutOfRangeException(nameof(index));\n\n            _items[index] = value;\n        }\n    }\n\n    public int Count =&gt; _count;\n    public int Capacity =&gt; _capacity;\n\n    private void Grow()\n    {\n        var newCapacity = _capacity * 2;\n        var newItems = new T[newCapacity];\n        Array.Copy(_items, newItems, _count);\n        _items = newItems;\n        _capacity = newCapacity;\n    }\n\n    public T[] ToArray()\n    {\n        var result = new T[_count];\n        Array.Copy(_items, result, _count);\n        return result;\n    }\n}\n\npublic class ObjectPool&lt;T&gt; where T : class, new()\n{\n    private readonly ConcurrentQueue&lt;T&gt; _pool;\n    private readonly int _maxSize;\n    private int _currentSize;\n\n    public ObjectPool(int maxSize = 100)\n    {\n        _pool = new ConcurrentQueue&lt;T&gt;();\n        _maxSize = maxSize;\n        _currentSize = 0;\n    }\n\n    public T Rent()\n    {\n        if (_pool.TryDequeue(out T item))\n        {\n            Interlocked.Decrement(ref _currentSize);\n            return item;\n        }\n\n        return new T();\n    }\n\n    public void Return(T item)\n    {\n        if (item == null) return;\n\n        if (_currentSize &lt; _maxSize)\n        {\n            _pool.Enqueue(item);\n            Interlocked.Increment(ref _currentSize);\n        }\n    }\n\n    public void Clear()\n    {\n        while (_pool.TryDequeue(out _)) { }\n        Interlocked.Exchange(ref _currentSize, 0);\n    }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/high-performance/#benchmarking","title":"Benchmarking","text":""},{"location":"mid-level/advanced-dotnet/high-performance/#1-benchmark-runner","title":"1. Benchmark Runner","text":"<p>Performance benchmarking yapan servis.</p> <pre><code>public class BenchmarkRunner\n{\n    private readonly ILogger&lt;BenchmarkRunner&gt; _logger;\n\n    public BenchmarkRunner(ILogger&lt;BenchmarkRunner&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task&lt;BenchmarkResult&gt; RunBenchmarkAsync&lt;T&gt;(Benchmark&lt;T&gt; benchmark, int iterations = 1000)\n    {\n        var result = new BenchmarkResult\n        {\n            BenchmarkName = benchmark.Name,\n            Iterations = iterations,\n            StartTime = DateTime.UtcNow\n        };\n\n        try\n        {\n            // Warmup\n            await WarmupAsync(benchmark);\n\n            // Run benchmark\n            var measurements = new List&lt;long&gt;();\n\n            for (int i = 0; i &lt; iterations; i++)\n            {\n                var stopwatch = Stopwatch.StartNew();\n                await benchmark.Action();\n                stopwatch.Stop();\n\n                measurements.Add(stopwatch.ElapsedTicks);\n            }\n\n            // Calculate statistics\n            result.Measurements = measurements;\n            result.CalculateStatistics();\n\n            _logger.LogInformation(\"Benchmark {Name} completed. Average: {Average} ticks, \" +\n                \"Min: {Min}, Max: {Max}, StdDev: {StdDev}\",\n                benchmark.Name, result.AverageTicks, result.MinTicks, result.MaxTicks, result.StandardDeviation);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error running benchmark {Name}\", benchmark.Name);\n            result.Error = ex.Message;\n        }\n\n        result.EndTime = DateTime.UtcNow;\n        result.Duration = result.EndTime - result.StartTime;\n\n        return result;\n    }\n\n    private async Task WarmupAsync&lt;T&gt;(Benchmark&lt;T&gt; benchmark)\n    {\n        for (int i = 0; i &lt; 10; i++)\n        {\n            await benchmark.Action();\n        }\n    }\n\n    public async Task&lt;List&lt;BenchmarkResult&gt;&gt; CompareBenchmarksAsync&lt;T&gt;(IEnumerable&lt;Benchmark&lt;T&gt;&gt; benchmarks, int iterations = 1000)\n    {\n        var results = new List&lt;BenchmarkResult&gt;();\n\n        foreach (var benchmark in benchmarks)\n        {\n            var result = await RunBenchmarkAsync(benchmark, iterations);\n            results.Add(result);\n        }\n\n        // Sort by performance\n        results.Sort((a, b) =&gt; a.AverageTicks.CompareTo(b.AverageTicks));\n\n        return results;\n    }\n}\n\npublic class Benchmark&lt;T&gt;\n{\n    public string Name { get; set; }\n    public Func&lt;Task&gt; Action { get; set; }\n\n    public Benchmark(string name, Func&lt;Task&gt; action)\n    {\n        Name = name;\n        Action = action;\n    }\n}\n\npublic class BenchmarkResult\n{\n    public string BenchmarkName { get; set; }\n    public int Iterations { get; set; }\n    public DateTime StartTime { get; set; }\n    public DateTime EndTime { get; set; }\n    public TimeSpan Duration { get; set; }\n    public List&lt;long&gt; Measurements { get; set; } = new();\n    public string Error { get; set; }\n\n    // Statistics\n    public double AverageTicks { get; private set; }\n    public long MinTicks { get; private set; }\n    public long MaxTicks { get; private set; }\n    public double StandardDeviation { get; private set; }\n    public double MedianTicks { get; private set; }\n\n    public void CalculateStatistics()\n    {\n        if (!Measurements.Any()) return;\n\n        var sorted = Measurements.OrderBy(x =&gt; x).ToList();\n\n        AverageTicks = Measurements.Average(x =&gt; x);\n        MinTicks = sorted.First();\n        MaxTicks = sorted.Last();\n        MedianTicks = sorted[sorted.Count / 2];\n\n        // Calculate standard deviation\n        var variance = Measurements.Average(x =&gt; Math.Pow(x - AverageTicks, 2));\n        StandardDeviation = Math.Sqrt(variance);\n    }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/high-performance/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/advanced-dotnet/high-performance/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Performance optimization nedir?</li> <li> <p>Cevap: Uygulama performans\u0131n\u0131 art\u0131rmak i\u00e7in yap\u0131lan iyile\u015ftirmeler.</p> </li> <li> <p>Benchmarking neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Performance measurement, optimization validation, regression detection.</p> </li> <li> <p>Object pooling nedir?</p> </li> <li> <p>Cevap: Object reuse pattern, allocation overhead reduction, GC pressure minimization.</p> </li> <li> <p>High-performance collections nelerdir?</p> </li> <li> <p>Cevap: Optimized data structures, reduced allocations, better memory usage.</p> </li> <li> <p>Performance profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Tools like dotTrace, custom profilers, performance counters.</li> </ol>"},{"location":"mid-level/advanced-dotnet/high-performance/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Performance optimization techniques nelerdir?</li> <li> <p>Cevap: Algorithm optimization, memory management, I/O optimization, caching.</p> </li> <li> <p>Benchmarking best practices nelerdir?</p> </li> <li> <p>Cevap: Warmup, multiple iterations, statistical analysis, environment consistency.</p> </li> <li> <p>Object pooling nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Rent/Return pattern, thread safety, size management, cleanup.</p> </li> <li> <p>Performance regression nas\u0131l tespit edilir?</p> </li> <li> <p>Cevap: Continuous benchmarking, threshold monitoring, trend analysis.</p> </li> <li> <p>High-performance code nas\u0131l yaz\u0131l\u0131r?</p> </li> <li>Cevap: Avoid allocations, use value types, optimize algorithms, profile first.</li> </ol>"},{"location":"mid-level/advanced-dotnet/high-performance/#best-practices","title":"Best Practices","text":"<ol> <li>Performance Optimization</li> <li>Profile first, optimize second</li> <li>Measure before and after</li> <li>Focus on bottlenecks</li> <li> <p>Use appropriate data structures</p> </li> <li> <p>Benchmarking</p> </li> <li>Consistent environment</li> <li>Multiple iterations</li> <li>Statistical analysis</li> <li> <p>Regression detection</p> </li> <li> <p>Memory Management</p> </li> <li>Object pooling</li> <li>Array pooling</li> <li>Reduce allocations</li> <li> <p>Use value types</p> </li> <li> <p>Algorithm Optimization</p> </li> <li>Choose right algorithms</li> <li>Cache results</li> <li>Parallel processing</li> <li> <p>Lazy evaluation</p> </li> <li> <p>I/O Optimization</p> </li> <li>Async operations</li> <li>Buffering</li> <li>Connection pooling</li> <li>Batch processing</li> </ol>"},{"location":"mid-level/advanced-dotnet/high-performance/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Performance Best Practices</li> <li>Benchmarking</li> <li>Performance Profiling</li> <li>High Performance</li> <li>Optimization Techniques</li> </ul>"},{"location":"mid-level/advanced-dotnet/memory-management/","title":"Memory Management","text":""},{"location":"mid-level/advanced-dotnet/memory-management/#giris","title":"Giri\u015f","text":"<p>Memory Management, .NET uygulamalar\u0131nda memory allocation, garbage collection ve memory optimization i\u00e7in kritik bir konudur. Mid-level geli\u015ftiriciler i\u00e7in memory management'\u0131 anlamak, performance optimization, memory leaks prevention ve resource management i\u00e7in esast\u0131r. Bu dosya, garbage collection, memory allocation patterns, memory profiling ve optimization techniques konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/advanced-dotnet/memory-management/#garbage-collection","title":"Garbage Collection","text":""},{"location":"mid-level/advanced-dotnet/memory-management/#1-gc-configuration","title":"1. GC Configuration","text":"<p>Garbage collection'\u0131 optimize eden configuration.</p> <pre><code>public class GarbageCollectionService\n{\n    private readonly ILogger&lt;GarbageCollectionService&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public GarbageCollectionService(ILogger&lt;GarbageCollectionService&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public void ConfigureGarbageCollection()\n    {\n        // Enable server GC for better performance on multi-core systems\n        if (Environment.ProcessorCount &gt; 1)\n        {\n            GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce;\n            _logger.LogInformation(\"Server GC enabled for {ProcessorCount} processors\", Environment.ProcessorCount);\n        }\n\n        // Configure GC latency mode\n        var latencyMode = _configuration.GetValue&lt;GCLatencyMode&gt;(\"GarbageCollection:LatencyMode\", GCLatencyMode.Interactive);\n        GCSettings.LatencyMode = latencyMode;\n\n        // Set memory pressure threshold\n        var memoryPressureThreshold = _configuration.GetValue&lt;double&gt;(\"GarbageCollection:MemoryPressureThreshold\", 0.8);\n        GC.AddMemoryPressure((long)(GC.GetTotalMemory(false) * memoryPressureThreshold));\n\n        _logger.LogInformation(\"GC configured with latency mode: {LatencyMode}\", latencyMode);\n    }\n\n    public void ForceGarbageCollection()\n    {\n        var beforeMemory = GC.GetTotalMemory(false);\n        var beforeGen0 = GC.CollectionCount(0);\n        var beforeGen1 = GC.CollectionCount(1);\n        var beforeGen2 = GC.CollectionCount(2);\n\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n        GC.Collect();\n\n        var afterMemory = GC.GetTotalMemory(false);\n        var afterGen0 = GC.CollectionCount(0);\n        var afterGen1 = GC.CollectionCount(1);\n        var afterGen2 = GC.CollectionCount(2);\n\n        _logger.LogInformation(\"Forced GC completed. Memory: {Before} -&gt; {After} bytes, \" +\n            \"Collections: Gen0: {Gen0Diff}, Gen1: {Gen1Diff}, Gen2: {Gen2Diff}\",\n            beforeMemory, afterMemory,\n            afterGen0 - beforeGen0, afterGen1 - beforeGen1, afterGen2 - beforeGen2);\n    }\n\n    public MemoryInfo GetMemoryInfo()\n    {\n        return new MemoryInfo\n        {\n            TotalMemory = GC.GetTotalMemory(false),\n            TotalMemoryForce = GC.GetTotalMemory(true),\n            Gen0CollectionCount = GC.CollectionCount(0),\n            Gen1CollectionCount = GC.CollectionCount(1),\n            Gen2CollectionCount = GC.CollectionCount(2),\n            MaxGeneration = GC.MaxGeneration,\n            LatencyMode = GCSettings.LatencyMode,\n            IsServerGC = GCSettings.IsServerGC,\n            LargeObjectHeapCompactionMode = GCSettings.LargeObjectHeapCompactionMode\n        };\n    }\n}\n\npublic class MemoryInfo\n{\n    public long TotalMemory { get; set; }\n    public long TotalMemoryForce { get; set; }\n    public int Gen0CollectionCount { get; set; }\n    public int Gen1CollectionCount { get; set; }\n    public int Gen2CollectionCount { get; set; }\n    public int MaxGeneration { get; set; }\n    public GCLatencyMode LatencyMode { get; set; }\n    public bool IsServerGC { get; set; }\n    public GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get; set; }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/memory-management/#2-memory-pool-implementation","title":"2. Memory Pool Implementation","text":"<p>Memory allocation'\u0131 optimize eden pool implementation.</p> <pre><code>public class MemoryPool&lt;T&gt; : IDisposable where T : class\n{\n    private readonly ConcurrentQueue&lt;T&gt; _pool;\n    private readonly Func&lt;T&gt; _factory;\n    private readonly Action&lt;T&gt; _reset;\n    private readonly int _maxSize;\n    private int _currentSize;\n\n    public MemoryPool(Func&lt;T&gt; factory, Action&lt;T&gt; reset = null, int maxSize = 100)\n    {\n        _pool = new ConcurrentQueue&lt;T&gt;();\n        _factory = factory ?? throw new ArgumentNullException(nameof(factory));\n        _reset = reset;\n        _maxSize = maxSize;\n    }\n\n    public T Rent()\n    {\n        if (_pool.TryDequeue(out T item))\n        {\n            Interlocked.Decrement(ref _currentSize);\n            return item;\n        }\n\n        return _factory();\n    }\n\n    public void Return(T item)\n    {\n        if (item == null) return;\n\n        if (_currentSize &lt; _maxSize)\n        {\n            _reset?.Invoke(item);\n            _pool.Enqueue(item);\n            Interlocked.Increment(ref _currentSize);\n        }\n    }\n\n    public void Dispose()\n    {\n        while (_pool.TryDequeue(out _)) { }\n    }\n}\n\npublic class ArrayPoolService\n{\n    private readonly ArrayPool&lt;byte&gt; _bytePool;\n    private readonly ArrayPool&lt;char&gt; _charPool;\n    private readonly ILogger&lt;ArrayPoolService&gt; _logger;\n\n    public ArrayPoolService(ILogger&lt;ArrayPoolService&gt; logger)\n    {\n        _bytePool = ArrayPool&lt;byte&gt;.Shared;\n        _charPool = ArrayPool&lt;char&gt;.Shared;\n        _logger = logger;\n    }\n\n    public async Task&lt;string&gt; ProcessLargeDataAsync(Stream stream)\n    {\n        var buffer = _bytePool.Rent(8192);\n        var charBuffer = _charPool.Rent(8192);\n\n        try\n        {\n            var result = new StringBuilder();\n            int bytesRead;\n\n            while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) &gt; 0)\n            {\n                var charCount = Encoding.UTF8.GetChars(buffer, 0, bytesRead, charBuffer, 0);\n                result.Append(charBuffer, 0, charCount);\n            }\n\n            return result.ToString();\n        }\n        finally\n        {\n            _bytePool.Return(buffer);\n            _charPool.Return(charBuffer);\n        }\n    }\n\n    public async Task&lt;byte[]&gt; CompressDataAsync(byte[] data)\n    {\n        var compressedBuffer = _bytePool.Rent(data.Length);\n\n        try\n        {\n            using var outputStream = new MemoryStream();\n            using var gzipStream = new GZipStream(outputStream, CompressionMode.Compress);\n\n            await gzipStream.WriteAsync(data, 0, data.Length);\n            await gzipStream.FlushAsync();\n\n            return outputStream.ToArray();\n        }\n        finally\n        {\n            _bytePool.Return(compressedBuffer);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/memory-management/#memory-profiling","title":"Memory Profiling","text":""},{"location":"mid-level/advanced-dotnet/memory-management/#1-memory-profiler","title":"1. Memory Profiler","text":"<p>Memory usage'\u0131 izleyen profiler.</p> <pre><code>public class MemoryProfiler : IDisposable\n{\n    private readonly ILogger&lt;MemoryProfiler&gt; _logger;\n    private readonly Timer _timer;\n    private readonly List&lt;MemorySnapshot&gt; _snapshots;\n    private readonly object _lock = new object();\n\n    public MemoryProfiler(ILogger&lt;MemoryProfiler&gt; logger, TimeSpan interval)\n    {\n        _logger = logger;\n        _snapshots = new List&lt;MemorySnapshot&gt;();\n        _timer = new Timer(CollectSnapshot, null, TimeSpan.Zero, interval);\n    }\n\n    private void CollectSnapshot(object state)\n    {\n        var snapshot = new MemorySnapshot\n        {\n            Timestamp = DateTime.UtcNow,\n            TotalMemory = GC.GetTotalMemory(false),\n            Gen0CollectionCount = GC.CollectionCount(0),\n            Gen1CollectionCount = GC.CollectionCount(1),\n            Gen2CollectionCount = GC.CollectionCount(2),\n            WorkingSet = Environment.WorkingSet,\n            PrivateMemory = Environment.WorkingSet\n        };\n\n        lock (_lock)\n        {\n            _snapshots.Add(snapshot);\n\n            // Keep only last 1000 snapshots\n            if (_snapshots.Count &gt; 1000)\n            {\n                _snapshots.RemoveAt(0);\n            }\n        }\n\n        // Check for memory leaks\n        CheckForMemoryLeaks(snapshot);\n    }\n\n    private void CheckForMemoryLeaks(MemorySnapshot current)\n    {\n        if (_snapshots.Count &lt; 10) return;\n\n        var recentSnapshots = _snapshots.TakeLast(10).ToList();\n        var memoryGrowth = recentSnapshots.Last().TotalMemory - recentSnapshots.First().TotalMemory;\n        var timeSpan = recentSnapshots.Last().Timestamp - recentSnapshots.First().Timestamp;\n\n        if (memoryGrowth &gt; 100 * 1024 * 1024 &amp;&amp; timeSpan.TotalMinutes &gt; 5) // 100MB growth in 5 minutes\n        {\n            _logger.LogWarning(\"Potential memory leak detected. Memory growth: {Growth} bytes in {TimeSpan}\",\n                memoryGrowth, timeSpan);\n        }\n    }\n\n    public MemoryAnalysis AnalyzeMemoryUsage()\n    {\n        lock (_lock)\n        {\n            if (_snapshots.Count &lt; 2) return new MemoryAnalysis();\n\n            var first = _snapshots.First();\n            var last = _snapshots.Last();\n            var timeSpan = last.Timestamp - first.Timestamp;\n\n            var memoryGrowth = last.TotalMemory - first.TotalMemory;\n            var growthRate = memoryGrowth / timeSpan.TotalMinutes; // bytes per minute\n\n            var gcFrequency = (last.Gen2CollectionCount - first.Gen2CollectionCount) / timeSpan.TotalMinutes;\n\n            return new MemoryAnalysis\n            {\n                TotalMemoryGrowth = memoryGrowth,\n                MemoryGrowthRate = growthRate,\n                GarbageCollectionFrequency = gcFrequency,\n                AverageMemoryUsage = _snapshots.Average(s =&gt; s.TotalMemory),\n                PeakMemoryUsage = _snapshots.Max(s =&gt; s.TotalMemory),\n                AnalysisDuration = timeSpan\n            };\n        }\n    }\n\n    public void Dispose()\n    {\n        _timer?.Dispose();\n    }\n}\n\npublic class MemorySnapshot\n{\n    public DateTime Timestamp { get; set; }\n    public long TotalMemory { get; set; }\n    public int Gen0CollectionCount { get; set; }\n    public int Gen1CollectionCount { get; set; }\n    public int Gen2CollectionCount { get; set; }\n    public long WorkingSet { get; set; }\n    public long PrivateMemory { get; set; }\n}\n\npublic class MemoryAnalysis\n{\n    public long TotalMemoryGrowth { get; set; }\n    public double MemoryGrowthRate { get; set; }\n    public double GarbageCollectionFrequency { get; set; }\n    public double AverageMemoryUsage { get; set; }\n    public long PeakMemoryUsage { get; set; }\n    public TimeSpan AnalysisDuration { get; set; }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/memory-management/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/advanced-dotnet/memory-management/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Garbage Collection nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: Generational collection, mark-and-sweep algorithm, automatic memory management.</p> </li> <li> <p>Memory pools neden kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Reduce allocation overhead, improve performance, reduce GC pressure.</p> </li> <li> <p>Memory leaks nas\u0131l tespit edilir?</p> </li> <li> <p>Cevap: Memory profiling, growth analysis, GC monitoring, tools like dotMemory.</p> </li> <li> <p>Large Object Heap nedir?</p> </li> <li> <p>Cevap: 85KB+ objects, separate GC generation, compaction challenges.</p> </li> <li> <p>Memory optimization techniques nelerdir?</p> </li> <li>Cevap: Object pooling, value types, structs, array pooling, GC tuning.</li> </ol>"},{"location":"mid-level/advanced-dotnet/memory-management/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>GC.Collect() ne zaman kullan\u0131l\u0131r?</li> <li> <p>Cevap: Rarely, only in specific scenarios like memory pressure, testing.</p> </li> <li> <p>Memory pressure nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap: GC.AddMemoryPressure(), monitoring, proactive cleanup.</p> </li> <li> <p>ArrayPool nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Rent/Return pattern, buffer reuse, automatic cleanup.</p> </li> <li> <p>Memory profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Custom profilers, performance counters, third-party tools.</p> </li> <li> <p>Memory leaks nas\u0131l \u00f6nlenir?</p> </li> <li>Cevap: Proper disposal, weak references, event unsubscription, resource cleanup.</li> </ol>"},{"location":"mid-level/advanced-dotnet/memory-management/#best-practices","title":"Best Practices","text":"<ol> <li>Memory Allocation</li> <li>Object pooling kullan\u0131n</li> <li>Value types tercih edin</li> <li>ArrayPool implement edin</li> <li> <p>Large allocations minimize edin</p> </li> <li> <p>Garbage Collection</p> </li> <li>GC.Collect() avoid edin</li> <li>Server GC enable edin</li> <li>Latency mode optimize edin</li> <li> <p>Memory pressure monitor edin</p> </li> <li> <p>Memory Monitoring</p> </li> <li>Custom profilers implement edin</li> <li>Memory growth track edin</li> <li>GC frequency monitor edin</li> <li> <p>Leak detection automate edin</p> </li> <li> <p>Performance Optimization</p> </li> <li>Allocation patterns optimize edin</li> <li>Memory access patterns improve edin</li> <li>Cache locality optimize edin</li> <li> <p>Memory fragmentation minimize edin</p> </li> <li> <p>Resource Management</p> </li> <li>IDisposable implement edin</li> <li>Using statements kullan\u0131n</li> <li>Finalizers avoid edin</li> <li>Resource cleanup automate edin</li> </ol>"},{"location":"mid-level/advanced-dotnet/memory-management/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Garbage Collection</li> <li>Memory Management</li> <li>ArrayPool</li> <li>Memory Profiling</li> <li>Performance Best Practices</li> </ul>"},{"location":"mid-level/advanced-dotnet/native-interop/","title":"Native Interop","text":""},{"location":"mid-level/advanced-dotnet/native-interop/#giris","title":"Giri\u015f","text":"<p>Native Interop, .NET uygulamalar\u0131n\u0131n native (unmanaged) code ile etkile\u015fim kurmas\u0131n\u0131 sa\u011flayan teknolojidir. Mid-level geli\u015ftiriciler i\u00e7in native interop'u anlamak, performance-critical operations, legacy system integration ve platform-specific functionality i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, P/Invoke, COM interop, unsafe code ve performance optimization konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/advanced-dotnet/native-interop/#pinvoke","title":"P/Invoke","text":""},{"location":"mid-level/advanced-dotnet/native-interop/#1-windows-api-integration","title":"1. Windows API Integration","text":"<p>Windows API'lar\u0131 ile P/Invoke kullanarak entegrasyon.</p> <pre><code>public class WindowsApiService\n{\n    private readonly ILogger&lt;WindowsApiService&gt; _logger;\n\n    public WindowsApiService(ILogger&lt;WindowsApiService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    private static extern IntPtr GetCurrentProcess();\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    private static extern bool GetProcessMemoryInfo(IntPtr process, out PROCESS_MEMORY_COUNTERS_EX counters, uint cb);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    private static extern bool SetProcessWorkingSetSize(IntPtr process, IntPtr minimumWorkingSetSize, IntPtr maximumWorkingSetSize);\n\n    [DllImport(\"user32.dll\")]\n    private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);\n\n    [DllImport(\"user32.dll\")]\n    private static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);\n\n    public ProcessMemoryInfo GetProcessMemoryInfo()\n    {\n        try\n        {\n            var process = GetCurrentProcess();\n            var result = GetProcessMemoryInfo(process, out PROCESS_MEMORY_COUNTERS_EX counters, (uint)Marshal.SizeOf&lt;PROCESS_MEMORY_COUNTERS_EX&gt;());\n\n            if (result)\n            {\n                return new ProcessMemoryInfo\n                {\n                    WorkingSetSize = counters.WorkingSetSize,\n                    PeakWorkingSetSize = counters.PeakWorkingSetSize,\n                    PageFileUsage = counters.PagefileUsage,\n                    PeakPageFileUsage = counters.PeakPagefileUsage,\n                    PrivateUsage = counters.PrivateUsage\n                };\n            }\n\n            _logger.LogWarning(\"Failed to get process memory info. Error: {Error}\", Marshal.GetLastWin32Error());\n            return null;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting process memory info\");\n            return null;\n        }\n    }\n\n    public bool SetProcessWorkingSetSize(long minimumSize, long maximumSize)\n    {\n        try\n        {\n            var process = GetCurrentProcess();\n            var result = SetProcessWorkingSetSize(process, (IntPtr)minimumSize, (IntPtr)maximumSize);\n\n            if (result)\n            {\n                _logger.LogInformation(\"Process working set size set to {Min} - {Max} bytes\", minimumSize, maximumSize);\n            }\n            else\n            {\n                _logger.LogWarning(\"Failed to set process working set size. Error: {Error}\", Marshal.GetLastWin32Error());\n            }\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error setting process working set size\");\n            return false;\n        }\n    }\n\n    public WindowInfo GetWindowInfo(IntPtr windowHandle)\n    {\n        try\n        {\n            var result = GetWindowRect(windowHandle, out RECT rect);\n\n            if (result)\n            {\n                return new WindowInfo\n                {\n                    Left = rect.Left,\n                    Top = rect.Top,\n                    Right = rect.Right,\n                    Bottom = rect.Bottom,\n                    Width = rect.Right - rect.Left,\n                    Height = rect.Bottom - rect.Top\n                };\n            }\n\n            _logger.LogWarning(\"Failed to get window info. Error: {Error}\", Marshal.GetLastWin32Error());\n            return null;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting window info\");\n            return null;\n        }\n    }\n\n    public bool SetWindowPosition(IntPtr windowHandle, int x, int y, int width, int height)\n    {\n        try\n        {\n            const uint SWP_NOZORDER = 0x0004;\n            var result = SetWindowPos(windowHandle, IntPtr.Zero, x, y, width, height, SWP_NOZORDER);\n\n            if (result)\n            {\n                _logger.LogInformation(\"Window position set to ({X}, {Y}) with size {Width}x{Height}\", x, y, width, height);\n            }\n            else\n            {\n                _logger.LogWarning(\"Failed to set window position. Error: {Error}\", Marshal.GetLastWin32Error());\n            }\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error setting window position\");\n            return false;\n        }\n    }\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct PROCESS_MEMORY_COUNTERS_EX\n{\n    public uint cb;\n    public uint PageFaultCount;\n    public ulong PeakWorkingSetSize;\n    public ulong WorkingSetSize;\n    public ulong QuotaPeakPagedPoolUsage;\n    public ulong QuotaPagedPoolUsage;\n    public ulong QuotaPeakNonPagedPoolUsage;\n    public ulong QuotaNonPagedPoolUsage;\n    public ulong PagefileUsage;\n    public ulong PeakPagefileUsage;\n    public ulong PrivateUsage;\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct RECT\n{\n    public int Left;\n    public int Top;\n    public int Right;\n    public int Bottom;\n}\n\npublic class ProcessMemoryInfo\n{\n    public ulong WorkingSetSize { get; set; }\n    public ulong PeakWorkingSetSize { get; set; }\n    public ulong PageFileUsage { get; set; }\n    public ulong PeakPageFileUsage { get; set; }\n    public ulong PrivateUsage { get; set; }\n}\n\npublic class WindowInfo\n{\n    public int Left { get; set; }\n    public int Top { get; set; }\n    public int Right { get; set; }\n    public int Bottom { get; set; }\n    public int Width { get; set; }\n    public int Height { get; set; }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/native-interop/#2-custom-native-library-integration","title":"2. Custom Native Library Integration","text":"<p>Custom native library'ler ile entegrasyon.</p> <pre><code>public class NativeLibraryService\n{\n    private readonly ILogger&lt;NativeLibraryService&gt; _logger;\n    private readonly string _libraryPath;\n\n    public NativeLibraryService(ILogger&lt;NativeLibraryService&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _libraryPath = configuration[\"NativeLibrary:Path\"] ?? \"native_lib.dll\";\n    }\n\n    [DllImport(\"native_lib.dll\", CallingConvention = CallingConvention.Cdecl)]\n    private static extern int Add(int a, int b);\n\n    [DllImport(\"native_lib.dll\", CallingConvention = CallingConvention.Cdecl)]\n    private static extern double Multiply(double a, double b);\n\n    [DllImport(\"native_lib.dll\", CallingConvention = CallingConvention.Cdecl)]\n    private static extern IntPtr CreateString([MarshalAs(UnmanagedType.LPStr)] string text);\n\n    [DllImport(\"native_lib.dll\", CallingConvention = CallingConvention.Cdecl)]\n    private static extern void FreeString(IntPtr ptr);\n\n    [DllImport(\"native_lib.dll\", CallingConvention = CallingConvention.Cdecl)]\n    private static extern int ProcessArray([In, Out] int[] array, int length);\n\n    [DllImport(\"native_lib.dll\", CallingConvention = CallingConvention.Cdecl)]\n    private static extern bool ProcessStruct([In, Out] ref CustomStruct data);\n\n    public int AddNumbers(int a, int b)\n    {\n        try\n        {\n            var result = Add(a, b);\n            _logger.LogDebug(\"Native Add({A}, {B}) = {Result}\", a, b, result);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error calling native Add function\");\n            throw;\n        }\n    }\n\n    public double MultiplyNumbers(double a, double b)\n    {\n        try\n        {\n            var result = Multiply(a, b);\n            _logger.LogDebug(\"Native Multiply({A}, {B}) = {Result}\", a, b, result);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error calling native Multiply function\");\n            throw;\n        }\n    }\n\n    public string ProcessString(string text)\n    {\n        IntPtr nativeString = IntPtr.Zero;\n\n        try\n        {\n            nativeString = CreateString(text);\n            var result = Marshal.PtrToStringAnsi(nativeString);\n\n            _logger.LogDebug(\"Native string processing: {Input} -&gt; {Output}\", text, result);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error processing string with native library\");\n            throw;\n        }\n        finally\n        {\n            if (nativeString != IntPtr.Zero)\n            {\n                FreeString(nativeString);\n            }\n        }\n    }\n\n    public int[] ProcessArray(int[] array)\n    {\n        try\n        {\n            var result = ProcessArray(array, array.Length);\n\n            if (result == 0)\n            {\n                _logger.LogDebug(\"Native array processing completed successfully\");\n                return array;\n            }\n            else\n            {\n                _logger.LogWarning(\"Native array processing failed with code: {Code}\", result);\n                return null;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error processing array with native library\");\n            throw;\n        }\n    }\n\n    public CustomStruct ProcessStruct(CustomStruct data)\n    {\n        try\n        {\n            var result = ProcessStruct(ref data);\n\n            if (result)\n            {\n                _logger.LogDebug(\"Native struct processing completed successfully\");\n                return data;\n            }\n            else\n            {\n                _logger.LogWarning(\"Native struct processing failed\");\n                return data;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error processing struct with native library\");\n            throw;\n        }\n    }\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct CustomStruct\n{\n    public int Id;\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]\n    public string Name;\n    public double Value;\n    public bool Flag;\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/native-interop/#unsafe-code","title":"Unsafe Code","text":""},{"location":"mid-level/advanced-dotnet/native-interop/#1-pointer-operations","title":"1. Pointer Operations","text":"<p>Unsafe code ile pointer operations.</p> <pre><code>public unsafe class UnsafeOperations\n{\n    private readonly ILogger&lt;UnsafeOperations&gt; _logger;\n\n    public UnsafeOperations(ILogger&lt;UnsafeOperations&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public unsafe void ProcessArrayWithPointers(int[] array)\n    {\n        try\n        {\n            fixed (int* ptr = array)\n            {\n                var length = array.Length;\n\n                // Process array using pointers\n                for (int i = 0; i &lt; length; i++)\n                {\n                    *(ptr + i) = *(ptr + i) * 2;\n                }\n\n                _logger.LogDebug(\"Array processed using unsafe pointers. Length: {Length}\", length);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error processing array with unsafe pointers\");\n            throw;\n        }\n    }\n\n    public unsafe void CopyMemory(byte[] source, byte[] destination)\n    {\n        try\n        {\n            if (source.Length &gt; destination.Length)\n                throw new ArgumentException(\"Destination array is too small\");\n\n            fixed (byte* srcPtr = source, dstPtr = destination)\n            {\n                Buffer.MemoryCopy(srcPtr, dstPtr, destination.Length, source.Length);\n            }\n\n            _logger.LogDebug(\"Memory copied using unsafe operations. Size: {Size} bytes\", source.Length);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error copying memory with unsafe operations\");\n            throw;\n        }\n    }\n\n    public unsafe void ProcessStructWithPointer(ref CustomStruct data)\n    {\n        try\n        {\n            fixed (CustomStruct* ptr = &amp;data)\n            {\n                // Access struct fields using pointers\n                ptr-&gt;Id = ptr-&gt;Id + 1;\n                ptr-&gt;Value = ptr-&gt;Value * 1.5;\n                ptr-&gt;Flag = !ptr-&gt;Flag;\n\n                _logger.LogDebug(\"Struct processed using unsafe pointer. ID: {Id}, Value: {Value}\", \n                    ptr-&gt;Id, ptr-&gt;Value);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error processing struct with unsafe pointer\");\n            throw;\n        }\n    }\n\n    public unsafe int FindPattern(byte[] data, byte[] pattern)\n    {\n        try\n        {\n            fixed (byte* dataPtr = data, patternPtr = pattern)\n            {\n                var dataLength = data.Length;\n                var patternLength = pattern.Length;\n\n                for (int i = 0; i &lt;= dataLength - patternLength; i++)\n                {\n                    var found = true;\n\n                    for (int j = 0; j &lt; patternLength; j++)\n                    {\n                        if (*(dataPtr + i + j) != *(patternPtr + j))\n                        {\n                            found = false;\n                            break;\n                        }\n                    }\n\n                    if (found)\n                    {\n                        _logger.LogDebug(\"Pattern found at index {Index}\", i);\n                        return i;\n                    }\n                }\n\n                _logger.LogDebug(\"Pattern not found in data\");\n                return -1;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error finding pattern with unsafe operations\");\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/native-interop/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/advanced-dotnet/native-interop/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>P/Invoke nedir ve ne i\u00e7in kullan\u0131l\u0131r?</li> <li> <p>Cevap: Platform Invoke, native libraries ile .NET entegrasyonu.</p> </li> <li> <p>Unsafe code nedir?</p> </li> <li> <p>Cevap: Pointer operations, direct memory access, performance optimization.</p> </li> <li> <p>COM Interop nedir?</p> </li> <li> <p>Cevap: Component Object Model, legacy COM components ile entegrasyon.</p> </li> <li> <p>Native interop ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Performance-critical operations, platform-specific features, legacy integration.</p> </li> <li> <p>Marshaling nedir?</p> </li> <li>Cevap: Data conversion between managed and unmanaged code.</li> </ol>"},{"location":"mid-level/advanced-dotnet/native-interop/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>P/Invoke ile native function nas\u0131l \u00e7a\u011fr\u0131l\u0131r?</li> <li> <p>Cevap: DllImport attribute, function signature, marshaling.</p> </li> <li> <p>Unsafe code ile pointer operations nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Fixed statement, pointer arithmetic, memory manipulation.</p> </li> <li> <p>Memory leaks native interop'ta nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Proper cleanup, using statements, resource management.</p> </li> <li> <p>Performance optimization native interop'ta nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Minimize marshaling, use value types, avoid allocations.</p> </li> <li> <p>Error handling native interop'ta nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: SetLastError, exception handling, return value checking.</li> </ol>"},{"location":"mid-level/advanced-dotnet/native-interop/#best-practices","title":"Best Practices","text":"<ol> <li>P/Invoke Usage</li> <li>Correct function signatures kullan\u0131n</li> <li>Proper marshaling implement edin</li> <li>Error handling ekleyin</li> <li> <p>Resource cleanup yap\u0131n</p> </li> <li> <p>Unsafe Code</p> </li> <li>Minimize unsafe blocks</li> <li>Proper bounds checking</li> <li>Memory safety ensure edin</li> <li> <p>Performance benefits validate edin</p> </li> <li> <p>Error Handling</p> </li> <li>SetLastError check edin</li> <li>Exception handling implement edin</li> <li>Resource cleanup guarantee edin</li> <li> <p>Logging ekleyin</p> </li> <li> <p>Performance Optimization</p> </li> <li>Marshaling minimize edin</li> <li>Value types kullan\u0131n</li> <li>Allocations avoid edin</li> <li> <p>Benchmarking yap\u0131n</p> </li> <li> <p>Security</p> </li> <li>Input validation yap\u0131n</li> <li>Buffer overflow prevent edin</li> <li>Trusted libraries kullan\u0131n</li> <li>Security review yap\u0131n</li> </ol>"},{"location":"mid-level/advanced-dotnet/native-interop/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>P/Invoke</li> <li>Unsafe Code</li> <li>COM Interop</li> <li>Native Interop</li> <li>Performance Considerations</li> </ul>"},{"location":"mid-level/advanced-dotnet/source-generators/","title":"Source Generators","text":""},{"location":"mid-level/advanced-dotnet/source-generators/#giris","title":"Giri\u015f","text":"<p>Source Generators, .NET 5+ ile gelen compile-time code generation teknolojisidir. Mid-level geli\u015ftiriciler i\u00e7in source generators'\u0131 anlamak, performance optimization, boilerplate code reduction ve compile-time validation i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, source generator fundamentals, custom generators, incremental generators ve best practices konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/advanced-dotnet/source-generators/#source-generator-fundamentals","title":"Source Generator Fundamentals","text":""},{"location":"mid-level/advanced-dotnet/source-generators/#1-basic-source-generator","title":"1. Basic Source Generator","text":"<p>Temel source generator implementasyonu.</p> <pre><code>[Generator]\npublic class HelloWorldGenerator : ISourceGenerator\n{\n    public void Initialize(GeneratorInitializationContext context)\n    {\n        // Register for syntax notifications\n        context.RegisterForSyntaxNotifications(() =&gt; new HelloWorldSyntaxReceiver());\n    }\n\n    public void Execute(GeneratorExecutionContext context)\n    {\n        // Get the registered receiver\n        if (context.SyntaxReceiver is not HelloWorldSyntaxReceiver receiver)\n            return;\n\n        // Generate source code\n        var sourceBuilder = new StringBuilder(@\"\nusing System;\n\nnamespace Generated\n{\n    public static class HelloWorld\n    {\n        public static void SayHello()\n        {\n            Console.WriteLine(\"\"Hello from Source Generator!\"\");\n        }\n    }\n}\");\n\n        // Add the generated source\n        context.AddSource(\"HelloWorld.g.cs\", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));\n    }\n}\n\npublic class HelloWorldSyntaxReceiver : ISyntaxReceiver\n{\n    public List&lt;ClassDeclarationSyntax&gt; Classes { get; } = new();\n\n    public void OnVisitSyntaxNode(SyntaxNode syntaxNode)\n    {\n        if (syntaxNode is ClassDeclarationSyntax classDeclaration)\n        {\n            Classes.Add(classDeclaration);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/source-generators/#2-attribute-based-generator","title":"2. Attribute-Based Generator","text":"<p>Attribute kullanarak source generation tetikleyen generator.</p> <pre><code>[Generator]\npublic class AutoToStringGenerator : ISourceGenerator\n{\n    public void Initialize(GeneratorInitializationContext context)\n    {\n        context.RegisterForSyntaxNotifications(() =&gt; new AutoToStringSyntaxReceiver());\n    }\n\n    public void Execute(GeneratorExecutionContext context)\n    {\n        if (context.SyntaxReceiver is not AutoToStringSyntaxReceiver receiver)\n            return;\n\n        foreach (var classDeclaration in receiver.Classes)\n        {\n            var className = classDeclaration.Identifier.ValueText;\n            var properties = GetProperties(classDeclaration);\n\n            var source = GenerateToStringMethod(className, properties);\n            context.AddSource($\"{className}.ToString.g.cs\", SourceText.From(source, Encoding.UTF8));\n        }\n    }\n\n    private string GenerateToStringMethod(string className, List&lt;PropertyInfo&gt; properties)\n    {\n        var propertyStrings = properties.Select(p =&gt; $\"{p.Name} = {{{p.Name}}}\");\n        var toStringBody = string.Join(\", \", propertyStrings);\n\n        return $@\"\nusing System;\n\nnamespace Generated\n{{\n    public partial class {className}\n    {{\n        public override string ToString()\n        {{\n            return $\"\"{className} {{{toStringBody}}}\"\";\n        }}\n    }}\n}}\";\n    }\n\n    private List&lt;PropertyInfo&gt; GetProperties(ClassDeclarationSyntax classDeclaration)\n    {\n        return classDeclaration.Members\n            .OfType&lt;PropertyDeclarationSyntax&gt;()\n            .Select(p =&gt; new PropertyInfo { Name = p.Identifier.ValueText })\n            .ToList();\n    }\n}\n\npublic class PropertyInfo\n{\n    public string Name { get; set; }\n}\n\npublic class AutoToStringSyntaxReceiver : ISyntaxReceiver\n{\n    public List&lt;ClassDeclarationSyntax&gt; Classes { get; } = new();\n\n    public void OnVisitSyntaxNode(SyntaxNode syntaxNode)\n    {\n        if (syntaxNode is ClassDeclarationSyntax classDeclaration &amp;&amp;\n            HasAutoToStringAttribute(classDeclaration))\n        {\n            Classes.Add(classDeclaration);\n        }\n    }\n\n    private bool HasAutoToStringAttribute(ClassDeclarationSyntax classDeclaration)\n    {\n        return classDeclaration.AttributeLists\n            .SelectMany(al =&gt; al.Attributes)\n            .Any(a =&gt; a.Name.ToString() == \"AutoToString\");\n    }\n}\n\n[AttributeUsage(AttributeTargets.Class)]\npublic class AutoToStringAttribute : Attribute\n{\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/source-generators/#incremental-source-generators","title":"Incremental Source Generators","text":""},{"location":"mid-level/advanced-dotnet/source-generators/#1-performance-optimized-generator","title":"1. Performance-Optimized Generator","text":"<p>Incremental generation kullanan generator.</p> <pre><code>[Generator]\npublic class IncrementalGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        // Create a pipeline for class declarations\n        var classDeclarations = context.SyntaxProvider\n            .CreateSyntaxProvider(\n                predicate: static (s, _) =&gt; IsSyntaxTargetForGeneration(s),\n                transform: static (ctx, _) =&gt; GetTargetForGeneration(ctx))\n            .Where(static m =&gt; m is not null);\n\n        // Generate the source\n        context.RegisterSourceOutput(classDeclarations,\n            static (spc, source) =&gt; Execute(source!, spc));\n    }\n\n    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)\n        =&gt; node is ClassDeclarationSyntax { AttributeLists.Count: &gt; 0 };\n\n    private static ClassDeclarationSyntax? GetTargetForGeneration(GeneratorSyntaxContext context)\n    {\n        var classDeclarationSyntax = (ClassDeclarationSyntax)context.Node;\n\n        foreach (AttributeListSyntax attributeListSyntax in classDeclarationSyntax.AttributeLists)\n        {\n            foreach (AttributeSyntax attributeSyntax in attributeListSyntax.Attributes)\n            {\n                if (IsAutoToStringAttribute(attributeSyntax))\n                {\n                    return classDeclarationSyntax;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private static bool IsAutoToStringAttribute(AttributeSyntax attributeSyntax)\n    {\n        var name = attributeSyntax.Name.ToString();\n        return name == \"AutoToString\" || name == \"AutoToStringAttribute\";\n    }\n\n    private static void Execute(ClassDeclarationSyntax classDeclaration, SourceProductionContext context)\n    {\n        var className = classDeclaration.Identifier.ValueText;\n        var namespaceName = GetNamespace(classDeclaration);\n\n        var source = GenerateSource(className, namespaceName);\n        context.AddSource($\"{className}.g.cs\", SourceText.From(source, Encoding.UTF8));\n    }\n\n    private static string GetNamespace(ClassDeclarationSyntax classDeclaration)\n    {\n        var parent = classDeclaration.Parent;\n        while (parent is not NamespaceDeclarationSyntax namespaceDeclaration)\n        {\n            parent = parent?.Parent;\n        }\n        return namespaceDeclaration?.Name.ToString() ?? \"Generated\";\n    }\n\n    private static string GenerateSource(string className, string namespaceName)\n    {\n        return $@\"\nusing System;\n\nnamespace {namespaceName}\n{{\n    public partial class {className}\n    {{\n        public string GeneratedProperty {{ get; set; }} = \"\"Generated by Source Generator\"\";\n\n        public void GeneratedMethod()\n        {{\n            Console.WriteLine(\"\"This method was generated at compile time\"\");\n        }}\n    }}\n}}\";\n    }\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/source-generators/#advanced-source-generators","title":"Advanced Source Generators","text":""},{"location":"mid-level/advanced-dotnet/source-generators/#1-json-serialization-generator","title":"1. JSON Serialization Generator","text":"<p>JSON serialization i\u00e7in custom generator.</p> <pre><code>[Generator]\npublic class JsonSerializerGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        var classDeclarations = context.SyntaxProvider\n            .CreateSyntaxProvider(\n                predicate: static (s, _) =&gt; s is ClassDeclarationSyntax,\n                transform: static (ctx, _) =&gt; ctx.Node as ClassDeclarationSyntax)\n            .Where(static m =&gt; m is not null);\n\n        context.RegisterSourceOutput(classDeclarations,\n            static (spc, source) =&gt; GenerateJsonSerializer(source!, spc));\n    }\n\n    private static void GenerateJsonSerializer(ClassDeclarationSyntax classDeclaration, SourceProductionContext context)\n    {\n        var className = classDeclaration.Identifier.ValueText;\n        var properties = GetSerializableProperties(classDeclaration);\n\n        if (!properties.Any()) return;\n\n        var source = GenerateJsonSerializerSource(className, properties);\n        context.AddSource($\"{className}.JsonSerializer.g.cs\", SourceText.From(source, Encoding.UTF8));\n    }\n\n    private static List&lt;PropertyInfo&gt; GetSerializableProperties(ClassDeclarationSyntax classDeclaration)\n    {\n        return classDeclaration.Members\n            .OfType&lt;PropertyDeclarationSyntax&gt;()\n            .Where(p =&gt; !HasIgnoreAttribute(p))\n            .Select(p =&gt; new PropertyInfo \n            { \n                Name = p.Identifier.ValueText,\n                Type = p.Type?.ToString() ?? \"object\"\n            })\n            .ToList();\n    }\n\n    private static bool HasIgnoreAttribute(PropertyDeclarationSyntax property)\n    {\n        return property.AttributeLists\n            .SelectMany(al =&gt; al.Attributes)\n            .Any(a =&gt; a.Name.ToString() == \"JsonIgnore\");\n    }\n\n    private static string GenerateJsonSerializerSource(string className, List&lt;PropertyInfo&gt; properties)\n    {\n        var serializationCode = string.Join(\"\\n            \", \n            properties.Select(p =&gt; $\"\\\"{p.Name}\\\": {GetJsonValue(p)}\"));\n\n        var deserializationCode = string.Join(\"\\n            \", \n            properties.Select(p =&gt; $\"{p.Name} = json[\\\"{p.Name}\\\"].{GetDeserializationMethod(p.Type)}\"));\n\n        return $@\"\nusing System;\nusing System.Text.Json;\nusing System.Collections.Generic;\n\nnamespace Generated\n{{\n    public partial class {className}\n    {{\n        public string ToJson()\n        {{\n            return JsonSerializer.Serialize(new\n            {{\n                {serializationCode}\n            }});\n        }}\n\n        public static {className} FromJson(string json)\n        {{\n            var jsonDoc = JsonDocument.Parse(json);\n            var root = jsonDoc.RootElement;\n\n            return new {className}\n            {{\n                {deserializationCode}\n            }};\n        }}\n    }}\n}}\";\n    }\n\n    private static string GetJsonValue(PropertyInfo property)\n    {\n        return property.Type switch\n        {\n            \"string\" =&gt; $\"\\\"{property.Name}\\\"\",\n            \"int\" or \"long\" or \"double\" or \"decimal\" =&gt; property.Name,\n            \"bool\" =&gt; property.Name,\n            _ =&gt; $\"JsonSerializer.Serialize({property.Name})\"\n        };\n    }\n\n    private static string GetDeserializationMethod(string type)\n    {\n        return type switch\n        {\n            \"string\" =&gt; \"GetString()\",\n            \"int\" =&gt; \"GetInt32()\",\n            \"long\" =&gt; \"GetInt64()\",\n            \"double\" =&gt; \"GetDouble()\",\n            \"decimal\" =&gt; \"GetDecimal()\",\n            \"bool\" =&gt; \"GetBoolean()\",\n            _ =&gt; \"GetString()\"\n        };\n    }\n}\n\n[AttributeUsage(AttributeTargets.Property)]\npublic class JsonIgnoreAttribute : Attribute\n{\n}\n</code></pre>"},{"location":"mid-level/advanced-dotnet/source-generators/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/advanced-dotnet/source-generators/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Source Generators nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Compile-time code generation teknolojisi. Performance improvement, boilerplate reduction, compile-time validation i\u00e7in.</p> </li> <li> <p>Source Generators vs Reflection fark\u0131 nedir?</p> </li> <li> <p>Cevap: Source generators compile-time, reflection runtime. Source generators daha performansl\u0131, type-safe.</p> </li> <li> <p>Incremental Generators nedir?</p> </li> <li> <p>Cevap: Performance-optimized generators, sadece de\u011fi\u015fen k\u0131s\u0131mlar\u0131 regenerate eder.</p> </li> <li> <p>Source Generators ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Boilerplate code, compile-time validation, performance-critical scenarios.</p> </li> <li> <p>Source Generators limitations nelerdir?</p> </li> <li>Cevap: Compile-time only, no runtime access, limited debugging.</li> </ol>"},{"location":"mid-level/advanced-dotnet/source-generators/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Custom Source Generator nas\u0131l implement edilir?</li> <li> <p>Cevap: ISourceGenerator interface, Initialize ve Execute methods, syntax analysis.</p> </li> <li> <p>Incremental Generator nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: IIncrementalGenerator interface, syntax provider pipeline, conditional generation.</p> </li> <li> <p>Source Generator debugging nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Debugger.Launch(), conditional compilation, logging.</p> </li> <li> <p>Source Generator testing nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: SourceGeneratorVerifier, expected output validation, unit testing.</p> </li> <li> <p>Source Generator performance nas\u0131l \u00f6l\u00e7\u00fcl\u00fcr?</p> </li> <li>Cevap: Compilation time measurement, memory usage, incremental generation efficiency.</li> </ol>"},{"location":"mid-level/advanced-dotnet/source-generators/#best-practices","title":"Best Practices","text":"<ol> <li>Generator Design</li> <li>Single responsibility principle uygulay\u0131n</li> <li>Performance optimize edin</li> <li>Error handling implement edin</li> <li> <p>Documentation sa\u011flay\u0131n</p> </li> <li> <p>Performance Optimization</p> </li> <li>Incremental generation kullan\u0131n</li> <li>Conditional compilation implement edin</li> <li>Memory allocation minimize edin</li> <li> <p>Caching strategies uygulay\u0131n</p> </li> <li> <p>Error Handling</p> </li> <li>Compilation errors handle edin</li> <li>User-friendly error messages sa\u011flay\u0131n</li> <li>Fallback mechanisms implement edin</li> <li> <p>Validation logic ekleyin</p> </li> <li> <p>Testing &amp; Debugging</p> </li> <li>Unit tests yaz\u0131n</li> <li>Integration tests implement edin</li> <li>Debugging tools ekleyin</li> <li> <p>Performance testing yap\u0131n</p> </li> <li> <p>Documentation</p> </li> <li>Usage examples sa\u011flay\u0131n</li> <li>API documentation yaz\u0131n</li> <li>Best practices document edin</li> <li>Troubleshooting guide olu\u015fturun</li> </ol>"},{"location":"mid-level/advanced-dotnet/source-generators/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Source Generators</li> <li>Incremental Generators</li> <li>Source Generator Cookbook</li> <li>Performance Best Practices</li> <li>Testing Source Generators</li> </ul>"},{"location":"mid-level/api-design/","title":"API Design &amp; Development","text":""},{"location":"mid-level/api-design/#giris","title":"Giri\u015f","text":"<p>API Design &amp; Development, modern backend geli\u015ftiricileri i\u00e7in kritik bir konudur. \u0130yi tasarlanm\u0131\u015f API'ler, frontend-backend entegrasyonunu kolayla\u015ft\u0131r\u0131r, developer experience'i art\u0131r\u0131r ve sistem \u00f6l\u00e7eklenebilirli\u011fini sa\u011flar.</p>"},{"location":"mid-level/api-design/#api-design-development-temel-konular","title":"API Design &amp; Development Temel Konular\u0131","text":""},{"location":"mid-level/api-design/#1-graphql","title":"1. GraphQL","text":"<ul> <li>GraphQL vs REST kar\u015f\u0131la\u015ft\u0131rmas\u0131</li> <li>Schema design ve type system</li> <li>Resolvers ve data fetching</li> <li>Performance optimization</li> </ul>"},{"location":"mid-level/api-design/#2-api-rate-limiting","title":"2. API Rate Limiting","text":"<ul> <li>Rate limiting stratejileri</li> <li>Token bucket algorithm</li> <li>Sliding window counter</li> <li>Distributed rate limiting</li> </ul>"},{"location":"mid-level/api-design/#3-api-authentication-patterns","title":"3. API Authentication Patterns","text":"<ul> <li>JWT implementation</li> <li>OAuth 2.0 flows</li> <li>API key management</li> <li>Multi-factor authentication</li> </ul>"},{"location":"mid-level/api-design/#4-api-testing","title":"4. API Testing","text":"<ul> <li>Postman ve Newman</li> <li>API automation</li> <li>Contract testing</li> <li>Performance testing</li> </ul>"},{"location":"mid-level/api-design/#api-design-prensipleri","title":"API Design Prensipleri","text":""},{"location":"mid-level/api-design/#1-restful-design","title":"1. RESTful Design","text":"<ul> <li>Resource-based URL yap\u0131s\u0131</li> <li>Proper HTTP methods kullan\u0131m\u0131</li> <li>Consistent response formatlar\u0131</li> <li>Error handling standartlar\u0131</li> </ul>"},{"location":"mid-level/api-design/#2-api-versioning","title":"2. API Versioning","text":"<ul> <li>URL versioning</li> <li>Header versioning</li> <li>Content negotiation</li> <li>Backward compatibility</li> </ul>"},{"location":"mid-level/api-design/#3-documentation","title":"3. Documentation","text":"<ul> <li>OpenAPI/Swagger specification</li> <li>Interactive documentation</li> <li>Code examples</li> <li>Error code reference</li> </ul>"},{"location":"mid-level/api-design/#4-security","title":"4. Security","text":"<ul> <li>Authentication ve authorization</li> <li>Input validation</li> <li>Rate limiting</li> <li>Security headers</li> </ul>"},{"location":"mid-level/api-design/#api-development-best-practices","title":"API Development Best Practices","text":""},{"location":"mid-level/api-design/#1-design-patterns","title":"1. Design Patterns","text":"<ul> <li>Repository pattern</li> <li>Service layer pattern</li> <li>DTO pattern</li> <li>Response wrapper pattern</li> </ul>"},{"location":"mid-level/api-design/#2-error-handling","title":"2. Error Handling","text":"<ul> <li>Consistent error formatlar\u0131</li> <li>Proper HTTP status codes</li> <li>Error logging ve monitoring</li> <li>User-friendly error messages</li> </ul>"},{"location":"mid-level/api-design/#3-performance","title":"3. Performance","text":"<ul> <li>Caching stratejileri</li> <li>Pagination</li> <li>Compression</li> <li>Async processing</li> </ul>"},{"location":"mid-level/api-design/#4-monitoring","title":"4. Monitoring","text":"<ul> <li>API metrics</li> <li>Response time tracking</li> <li>Error rate monitoring</li> <li>Usage analytics</li> </ul>"},{"location":"mid-level/api-design/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/api-design/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>REST API nedir ve temel prensipleri nelerdir?</li> <li> <p>Cevap: Representational State Transfer, stateless, client-server, cacheable, uniform interface, layered system.</p> </li> <li> <p>GraphQL'in REST'e g\u00f6re avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap: Over-fetching ve under-fetching'i \u00f6nler, single endpoint, strong typing, real-time updates.</p> </li> <li> <p>API versioning neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Backward compatibility, breaking changes y\u00f6netimi, client migration s\u00fcreci i\u00e7in gerekli.</p> </li> <li> <p>Rate limiting nedir ve nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: API kullan\u0131m\u0131n\u0131 s\u0131n\u0131rlama, abuse prevention, fair usage i\u00e7in. Token bucket, sliding window algoritmalar\u0131.</p> </li> <li> <p>API authentication y\u00f6ntemleri nelerdir?</p> </li> <li>Cevap: JWT, OAuth 2.0, API keys, Basic auth, certificate-based authentication.</li> </ol>"},{"location":"mid-level/api-design/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>JWT token'lar\u0131n g\u00fcvenlik riskleri nelerdir?</li> <li> <p>Cevap: Token hijacking, XSS attacks, token expiration, secure storage requirements.</p> </li> <li> <p>GraphQL'de N+1 problem nedir?</p> </li> <li> <p>Cevap: Multiple database queries, DataLoader pattern, batching ve caching ile \u00e7\u00f6z\u00fcl\u00fcr.</p> </li> <li> <p>API caching stratejileri nelerdir?</p> </li> <li> <p>Cevap: HTTP caching, application-level caching, distributed caching, cache invalidation.</p> </li> <li> <p>API testing'de contract testing nedir?</p> </li> <li> <p>Cevap: Consumer-driven contracts, API schema validation, breaking changes detection.</p> </li> <li> <p>Microservices'de API gateway pattern nedir?</p> </li> <li>Cevap: Centralized routing, authentication, rate limiting, monitoring ve logging.</li> </ol>"},{"location":"mid-level/api-design/#best-practices","title":"Best Practices","text":"<ol> <li>Design</li> <li>RESTful prensipleri uygulay\u0131n</li> <li>Consistent naming convention kullan\u0131n</li> <li>Proper HTTP status codes kullan\u0131n</li> <li> <p>Meaningful error messages verin</p> </li> <li> <p>Security</p> </li> <li>HTTPS kullan\u0131n</li> <li>Input validation yap\u0131n</li> <li>Rate limiting uygulay\u0131n</li> <li> <p>Security headers ekleyin</p> </li> <li> <p>Performance</p> </li> <li>Caching stratejileri uygulay\u0131n</li> <li>Pagination kullan\u0131n</li> <li>Compression uygulay\u0131n</li> <li> <p>Async processing yap\u0131n</p> </li> <li> <p>Documentation</p> </li> <li>OpenAPI specification yaz\u0131n</li> <li>Interactive documentation sa\u011flay\u0131n</li> <li>Code examples ekleyin</li> <li>Regular updates yap\u0131n</li> </ol>"},{"location":"mid-level/api-design/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>REST API Design</li> <li>GraphQL Documentation</li> <li>OpenAPI Specification</li> <li>API Design Patterns</li> <li>OWASP API Security </li> </ul>"},{"location":"mid-level/api-design/authentication-patterns/","title":"API Authentication Patterns","text":""},{"location":"mid-level/api-design/authentication-patterns/#giris","title":"Giri\u015f","text":"<p>API Authentication Patterns, API'lerin g\u00fcvenli\u011fini sa\u011flamak i\u00e7in kullan\u0131lan kimlik do\u011frulama y\u00f6ntemleridir. Mid-level geli\u015ftiriciler i\u00e7in bu pattern'leri anlamak ve implement etmek, g\u00fcvenli API tasar\u0131m\u0131nda kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/api-design/authentication-patterns/#authentication-pattern-turleri","title":"Authentication Pattern T\u00fcrleri","text":""},{"location":"mid-level/api-design/authentication-patterns/#1-api-key-authentication","title":"1. API Key Authentication","text":"<p>En basit authentication y\u00f6ntemi, genellikle public API'lerde kullan\u0131l\u0131r.</p> <pre><code>public class ApiKeyAuthenticationHandler : AuthenticationHandler&lt;AuthenticationSchemeOptions&gt;\n{\n    private const string ApiKeyHeaderName = \"X-API-Key\";\n    private readonly IApiKeyService _apiKeyService;\n\n    public ApiKeyAuthenticationHandler(\n        IOptionsMonitor&lt;AuthenticationSchemeOptions&gt; options,\n        ILoggerFactory logger,\n        UrlEncoder encoder,\n        ISystemClock clock,\n        IApiKeyService apiKeyService)\n        : base(options, logger, encoder, clock)\n    {\n        _apiKeyService = apiKeyService;\n    }\n\n    protected override async Task&lt;AuthenticateResult&gt; HandleAuthenticateAsync()\n    {\n        if (!Request.Headers.TryGetValue(ApiKeyHeaderName, out var apiKeyHeaderValues))\n        {\n            return AuthenticateResult.Fail(\"API Key header not found.\");\n        }\n\n        var providedApiKey = apiKeyHeaderValues.FirstOrDefault();\n        if (string.IsNullOrWhiteSpace(providedApiKey))\n        {\n            return AuthenticateResult.Fail(\"API Key is empty.\");\n        }\n\n        var apiKey = await _apiKeyService.GetApiKeyAsync(providedApiKey);\n        if (apiKey == null)\n        {\n            return AuthenticateResult.Fail(\"Invalid API Key.\");\n        }\n\n        var claims = new[]\n        {\n            new Claim(ClaimTypes.NameIdentifier, apiKey.UserId.ToString()),\n            new Claim(ClaimTypes.Name, apiKey.UserName),\n            new Claim(\"ApiKeyId\", apiKey.Id.ToString()),\n            new Claim(\"Permissions\", string.Join(\",\", apiKey.Permissions))\n        };\n\n        var identity = new ClaimsIdentity(claims, Scheme.Name);\n        var principal = new ClaimsPrincipal(identity);\n        var ticket = new AuthenticationTicket(principal, Scheme.Name);\n\n        return AuthenticateResult.Success(ticket);\n    }\n}\n\n// API Key Service\npublic interface IApiKeyService\n{\n    Task&lt;ApiKey&gt; GetApiKeyAsync(string key);\n    Task&lt;ApiKey&gt; CreateApiKeyAsync(string userId, IEnumerable&lt;string&gt; permissions);\n    Task&lt;bool&gt; ValidateApiKeyAsync(string key);\n}\n\npublic class ApiKeyService : IApiKeyService\n{\n    private readonly IDbConnection _connection;\n    private readonly IMemoryCache _cache;\n\n    public async Task&lt;ApiKey&gt; GetApiKeyAsync(string key)\n    {\n        var cacheKey = $\"apikey:{key}\";\n\n        if (_cache.TryGetValue(cacheKey, out ApiKey cachedKey))\n        {\n            return cachedKey;\n        }\n\n        var sql = @\"\n            SELECT Id, UserId, UserName, KeyHash, Permissions, IsActive, ExpiresAt\n            FROM ApiKeys \n            WHERE KeyHash = @KeyHash AND IsActive = 1 AND (ExpiresAt IS NULL OR ExpiresAt &gt; @Now)\";\n\n        var apiKey = await _connection.QueryFirstOrDefaultAsync&lt;ApiKey&gt;(sql, \n            new { KeyHash = HashKey(key), Now = DateTime.UtcNow });\n\n        if (apiKey != null)\n        {\n            _cache.Set(cacheKey, apiKey, TimeSpan.FromMinutes(5));\n        }\n\n        return apiKey;\n    }\n\n    private string HashKey(string key)\n    {\n        using var sha256 = SHA256.Create();\n        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(key));\n        return Convert.ToBase64String(hashBytes);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/authentication-patterns/#2-jwt-json-web-token-authentication","title":"2. JWT (JSON Web Token) Authentication","text":"<p>Stateless authentication i\u00e7in kullan\u0131lan modern y\u00f6ntem.</p> <pre><code>public class JwtAuthenticationHandler : AuthenticationHandler&lt;AuthenticationSchemeOptions&gt;\n{\n    private readonly IJwtService _jwtService;\n\n    public JwtAuthenticationHandler(\n        IOptionsMonitor&lt;AuthenticationSchemeOptions&gt; options,\n        ILoggerFactory logger,\n        UrlEncoder encoder,\n        ISystemClock clock,\n        IJwtService jwtService)\n        : base(options, logger, encoder, clock)\n    {\n        _jwtService = jwtService;\n    }\n\n    protected override async Task&lt;AuthenticateResult&gt; HandleAuthenticateAsync()\n    {\n        var token = GetTokenFromRequest();\n        if (string.IsNullOrEmpty(token))\n        {\n            return AuthenticateResult.Fail(\"JWT token not found.\");\n        }\n\n        try\n        {\n            var principal = await _jwtService.ValidateTokenAsync(token);\n            var ticket = new AuthenticationTicket(principal, Scheme.Name);\n            return AuthenticateResult.Success(ticket);\n        }\n        catch (Exception ex)\n        {\n            return AuthenticateResult.Fail($\"JWT validation failed: {ex.Message}\");\n        }\n    }\n\n    private string GetTokenFromRequest()\n    {\n        // Authorization header'dan Bearer token al\n        if (Request.Headers.TryGetValue(\"Authorization\", out var authHeader))\n        {\n            var authValue = authHeader.FirstOrDefault();\n            if (authValue?.StartsWith(\"Bearer \") == true)\n            {\n                return authValue.Substring(\"Bearer \".Length);\n            }\n        }\n\n        return null;\n    }\n}\n\n// JWT Service\npublic interface IJwtService\n{\n    Task&lt;string&gt; GenerateTokenAsync(User user);\n    Task&lt;ClaimsPrincipal&gt; ValidateTokenAsync(string token);\n    Task&lt;string&gt; RefreshTokenAsync(string refreshToken);\n}\n\npublic class JwtService : IJwtService\n{\n    private readonly IConfiguration _configuration;\n    private readonly IUserService _userService;\n\n    public async Task&lt;string&gt; GenerateTokenAsync(User user)\n    {\n        var claims = new[]\n        {\n            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n            new Claim(ClaimTypes.Name, user.UserName),\n            new Claim(ClaimTypes.Email, user.Email),\n            new Claim(ClaimTypes.Role, user.Role),\n            new Claim(\"UserId\", user.Id.ToString()),\n            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\n            new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString())\n        };\n\n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\"Jwt:Key\"]));\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        var token = new JwtSecurityToken(\n            issuer: _configuration[\"Jwt:Issuer\"],\n            audience: _configuration[\"Jwt:Audience\"],\n            claims: claims,\n            expires: DateTime.UtcNow.AddHours(1),\n            signingCredentials: creds\n        );\n\n        return new JwtSecurityTokenHandler().WriteToken(token);\n    }\n\n    public async Task&lt;ClaimsPrincipal&gt; ValidateTokenAsync(string token)\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = Encoding.UTF8.GetBytes(_configuration[\"Jwt:Key\"]);\n\n        var validationParameters = new TokenValidationParameters\n        {\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(key),\n            ValidateIssuer = true,\n            ValidIssuer = _configuration[\"Jwt:Issuer\"],\n            ValidateAudience = true,\n            ValidAudience = _configuration[\"Jwt:Audience\"],\n            ValidateLifetime = true,\n            ClockSkew = TimeSpan.Zero\n        };\n\n        var principal = tokenHandler.ValidateToken(token, validationParameters, out var validatedToken);\n\n        // Token blacklist kontrol\u00fc\n        if (await IsTokenBlacklistedAsync(token))\n        {\n            throw new SecurityTokenException(\"Token is blacklisted.\");\n        }\n\n        return principal;\n    }\n\n    private async Task&lt;bool&gt; IsTokenBlacklistedAsync(string token)\n    {\n        // Redis veya database'de blacklist kontrol\u00fc\n        return false; // Implementation\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/authentication-patterns/#3-oauth-20-authentication","title":"3. OAuth 2.0 Authentication","text":"<p>Third-party authentication i\u00e7in kullan\u0131lan standart protokol.</p> <pre><code>public class OAuth2Service : IOAuth2Service\n{\n    private readonly IConfiguration _configuration;\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly IUserService _userService;\n\n    public async Task&lt;OAuth2TokenResponse&gt; ExchangeCodeForTokenAsync(string authorizationCode, string redirectUri)\n    {\n        var client = _httpClientFactory.CreateClient(\"OAuth2\");\n\n        var tokenRequest = new FormUrlEncodedContent(new[]\n        {\n            new KeyValuePair&lt;string, string&gt;(\"grant_type\", \"authorization_code\"),\n            new KeyValuePair&lt;string, string&gt;(\"code\", authorizationCode),\n            new KeyValuePair&lt;string, string&gt;(\"redirect_uri\", redirectUri),\n            new KeyValuePair&lt;string, string&gt;(\"client_id\", _configuration[\"OAuth2:ClientId\"]),\n            new KeyValuePair&lt;string, string&gt;(\"client_secret\", _configuration[\"OAuth2:ClientSecret\"])\n        });\n\n        var response = await client.PostAsync(\"/oauth/token\", tokenRequest);\n        var responseContent = await response.Content.ReadAsStringAsync();\n\n        if (!response.IsSuccessStatusCode)\n        {\n            throw new OAuth2Exception($\"Token exchange failed: {responseContent}\");\n        }\n\n        return JsonSerializer.Deserialize&lt;OAuth2TokenResponse&gt;(responseContent);\n    }\n\n    public async Task&lt;UserInfo&gt; GetUserInfoAsync(string accessToken)\n    {\n        var client = _httpClientFactory.CreateClient(\"OAuth2\");\n        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n\n        var response = await client.GetAsync(\"/oauth/userinfo\");\n        var responseContent = await response.Content.ReadAsStringAsync();\n\n        if (!response.IsSuccessStatusCode)\n        {\n            throw new OAuth2Exception($\"User info retrieval failed: {responseContent}\");\n        }\n\n        return JsonSerializer.Deserialize&lt;UserInfo&gt;(responseContent);\n    }\n}\n\n// OAuth2 Controller\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class OAuth2Controller : ControllerBase\n{\n    private readonly IOAuth2Service _oauth2Service;\n    private readonly IJwtService _jwtService;\n    private readonly IUserService _userService;\n\n    [HttpGet(\"authorize\")]\n    public IActionResult Authorize(string responseType, string clientId, string redirectUri, string scope, string state)\n    {\n        // OAuth2 authorization endpoint\n        var authorizationUrl = $\"{_configuration[\"OAuth2:AuthorizationUrl\"]}?\" +\n            $\"response_type={responseType}&amp;\" +\n            $\"client_id={clientId}&amp;\" +\n            $\"redirect_uri={Uri.EscapeDataString(redirectUri)}&amp;\" +\n            $\"scope={scope}&amp;\" +\n            $\"state={state}\";\n\n        return Redirect(authorizationUrl);\n    }\n\n    [HttpPost(\"callback\")]\n    public async Task&lt;IActionResult&gt; Callback(string code, string state)\n    {\n        try\n        {\n            // Authorization code'u access token ile de\u011fi\u015ftir\n            var tokenResponse = await _oauth2Service.ExchangeCodeForTokenAsync(code, _configuration[\"OAuth2:RedirectUri\"]);\n\n            // User bilgilerini al\n            var userInfo = await _oauth2Service.GetUserInfoAsync(tokenResponse.AccessToken);\n\n            // User'\u0131 sistemde bul veya olu\u015ftur\n            var user = await _userService.GetOrCreateUserAsync(userInfo);\n\n            // JWT token olu\u015ftur\n            var jwtToken = await _jwtService.GenerateTokenAsync(user);\n\n            return Ok(new\n            {\n                access_token = jwtToken,\n                token_type = \"Bearer\",\n                expires_in = 3600,\n                user = user\n            });\n        }\n        catch (Exception ex)\n        {\n            return BadRequest(new { error = \"OAuth2 callback failed\", message = ex.Message });\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/authentication-patterns/#4-multi-factor-authentication-mfa","title":"4. Multi-Factor Authentication (MFA)","text":"<p>Ek g\u00fcvenlik katman\u0131 i\u00e7in kullan\u0131lan authentication y\u00f6ntemi.</p> <pre><code>public class MfaService : IMfaService\n{\n    private readonly IUserService _userService;\n    private readonly IEmailService _emailService;\n    private readonly ISmsService _smsService;\n    private readonly IMemoryCache _cache;\n\n    public async Task&lt;bool&gt; SendMfaCodeAsync(string userId, string method)\n    {\n        var user = await _userService.GetByIdAsync(userId);\n        if (user == null)\n            return false;\n\n        var mfaCode = GenerateMfaCode();\n        var cacheKey = $\"mfa:{userId}:{method}\";\n\n        // MFA code'u cache'e kaydet (5 dakika ge\u00e7erli)\n        _cache.Set(cacheKey, mfaCode, TimeSpan.FromMinutes(5));\n\n        switch (method.ToLower())\n        {\n            case \"email\":\n                await _emailService.SendMfaCodeAsync(user.Email, mfaCode);\n                break;\n            case \"sms\":\n                await _smsService.SendMfaCodeAsync(user.PhoneNumber, mfaCode);\n                break;\n            default:\n                return false;\n        }\n\n        return true;\n    }\n\n    public async Task&lt;bool&gt; ValidateMfaCodeAsync(string userId, string method, string code)\n    {\n        var cacheKey = $\"mfa:{userId}:{method}\";\n\n        if (!_cache.TryGetValue(cacheKey, out string cachedCode))\n        {\n            return false; // Code expired or not found\n        }\n\n        if (cachedCode == code)\n        {\n            _cache.Remove(cacheKey); // Code used, remove from cache\n            return true;\n        }\n\n        return false;\n    }\n\n    private string GenerateMfaCode()\n    {\n        var random = new Random();\n        return random.Next(100000, 999999).ToString();\n    }\n}\n\n// MFA Controller\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class MfaController : ControllerBase\n{\n    private readonly IMfaService _mfaService;\n\n    [HttpPost(\"send\")]\n    public async Task&lt;IActionResult&gt; SendMfaCode([FromBody] SendMfaRequest request)\n    {\n        var success = await _mfaService.SendMfaCodeAsync(request.UserId, request.Method);\n\n        if (success)\n        {\n            return Ok(new { message = \"MFA code sent successfully\" });\n        }\n\n        return BadRequest(new { error = \"Failed to send MFA code\" });\n    }\n\n    [HttpPost(\"validate\")]\n    public async Task&lt;IActionResult&gt; ValidateMfaCode([FromBody] ValidateMfaRequest request)\n    {\n        var isValid = await _mfaService.ValidateMfaCodeAsync(request.UserId, request.Method, request.Code);\n\n        if (isValid)\n        {\n            return Ok(new { message = \"MFA code validated successfully\" });\n        }\n\n        return BadRequest(new { error = \"Invalid MFA code\" });\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/authentication-patterns/#authentication-middleware-configuration","title":"Authentication Middleware Configuration","text":""},{"location":"mid-level/api-design/authentication-patterns/#programcsde-authentication-setup","title":"Program.cs'de Authentication Setup","text":"<pre><code>var builder = WebApplication.CreateBuilder(args);\n\n// Authentication services\nbuilder.Services.AddAuthentication(options =&gt;\n{\n    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n})\n.AddJwtBearer(options =&gt;\n{\n    options.TokenValidationParameters = new TokenValidationParameters\n    {\n        ValidateIssuer = true,\n        ValidIssuer = builder.Configuration[\"Jwt:Issuer\"],\n        ValidateAudience = true,\n        ValidAudience = builder.Configuration[\"Jwt:Audience\"],\n        ValidateLifetime = true,\n        ValidateIssuerSigningKey = true,\n        IssuerSigningKey = new SymmetricSecurityKey(\n            Encoding.UTF8.GetBytes(builder.Configuration[\"Jwt:Key\"]))\n    };\n\n    options.Events = new JwtBearerEvents\n    {\n        OnAuthenticationFailed = context =&gt;\n        {\n            context.Response.StatusCode = 401;\n            context.Response.ContentType = \"application/json\";\n            var result = JsonSerializer.Serialize(new { error = \"Authentication failed\" });\n            return context.Response.WriteAsync(result);\n        },\n        OnChallenge = context =&gt;\n        {\n            context.HandleResponse();\n            context.Response.StatusCode = 401;\n            context.Response.ContentType = \"application/json\";\n            var result = JsonSerializer.Serialize(new { error = \"Authentication required\" });\n            return context.Response.WriteAsync(result);\n        }\n    };\n})\n.AddApiKey(options =&gt; { }) // Custom API Key authentication\n.AddOAuth2(options =&gt; { }); // OAuth2 authentication\n\n// Authorization\nbuilder.Services.AddAuthorization(options =&gt;\n{\n    options.AddPolicy(\"RequireAdminRole\", policy =&gt;\n        policy.RequireRole(\"Admin\"));\n\n    options.AddPolicy(\"RequirePremiumUser\", policy =&gt;\n        policy.RequireClaim(\"UserType\", \"Premium\"));\n\n    options.AddPolicy(\"RequireMfa\", policy =&gt;\n        policy.RequireClaim(\"MfaVerified\", \"true\"));\n});\n\nvar app = builder.Build();\n\n// Authentication middleware\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.Run();\n</code></pre>"},{"location":"mid-level/api-design/authentication-patterns/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/api-design/authentication-patterns/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>API Key authentication nedir ve ne zaman kullan\u0131l\u0131r?</li> <li> <p>Cevap: Basit authentication y\u00f6ntemi, public API'lerde kullan\u0131l\u0131r. Client'\u0131n API key ile kimlik do\u011frulamas\u0131 yapmas\u0131.</p> </li> <li> <p>JWT nedir ve avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap: JSON Web Token, stateless authentication sa\u011flar. Stateless, scalable, self-contained \u00f6zellikleri vard\u0131r.</p> </li> <li> <p>OAuth 2.0 nedir ve flow'lar\u0131 nelerdir?</p> </li> <li> <p>Cevap: Authorization framework, Authorization Code, Client Credentials, Resource Owner Password, Implicit flow'lar\u0131 vard\u0131r.</p> </li> <li> <p>Multi-Factor Authentication nedir?</p> </li> <li> <p>Cevap: Birden fazla authentication y\u00f6ntemi kullanarak g\u00fcvenli\u011fi art\u0131rma. SMS, email, TOTP gibi y\u00f6ntemler.</p> </li> <li> <p>Stateless vs Stateful authentication aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: Stateless server'da session bilgisi saklanmaz (JWT), stateful server'da session bilgisi saklan\u0131r.</li> </ol>"},{"location":"mid-level/api-design/authentication-patterns/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>JWT token'lar\u0131n g\u00fcvenlik riskleri nelerdir?</li> <li> <p>Cevap: Token hijacking, XSS attacks, token expiration, secure storage requirements. HTTPS ve proper validation gerekli.</p> </li> <li> <p>OAuth 2.0'da refresh token nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Access token expire oldu\u011funda refresh token ile yeni access token al\u0131n\u0131r. Refresh token daha uzun s\u00fcreli.</p> </li> <li> <p>API authentication'da rate limiting nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Client identification (API key, JWT), request counting, window-based limits, distributed rate limiting.</p> </li> <li> <p>JWT token blacklisting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Redis veya database'de blacklisted token'lar saklan\u0131r, token validation s\u0131ras\u0131nda kontrol edilir.</p> </li> <li> <p>Multi-tenant sistemde authentication nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Tenant-specific claims, tenant isolation, separate authentication services, tenant-aware token validation.</li> </ol>"},{"location":"mid-level/api-design/authentication-patterns/#best-practices","title":"Best Practices","text":"<ol> <li>Security</li> <li>HTTPS kullan\u0131n</li> <li>Token expiration ayarlay\u0131n</li> <li>Secure storage implement edin</li> <li> <p>Input validation yap\u0131n</p> </li> <li> <p>Performance</p> </li> <li>Token caching kullan\u0131n</li> <li>Efficient validation implement edin</li> <li>Background token cleanup yap\u0131n</li> <li> <p>Monitoring ekleyin</p> </li> <li> <p>User Experience</p> </li> <li>Clear error messages verin</li> <li>Graceful degradation sa\u011flay\u0131n</li> <li>MFA options sunun</li> <li> <p>Remember me functionality ekleyin</p> </li> <li> <p>Monitoring</p> </li> <li>Authentication metrics toplay\u0131n</li> <li>Failed attempts izleyin</li> <li>Token usage analiz edin</li> <li>Security alerts kurun</li> </ol>"},{"location":"mid-level/api-design/authentication-patterns/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Authentication</li> <li>JWT.io</li> <li>OAuth 2.0 Specification</li> <li>OpenID Connect</li> <li>Multi-Factor Authentication</li> </ul>"},{"location":"mid-level/api-design/graphql/","title":"GraphQL","text":""},{"location":"mid-level/api-design/graphql/#giris","title":"Giri\u015f","text":"<p>GraphQL, Facebook taraf\u0131ndan geli\u015ftirilen modern bir API query language'd\u0131r. REST API'lerin s\u0131n\u0131rlamalar\u0131n\u0131 a\u015farak, client'lar\u0131n ihtiya\u00e7 duyduklar\u0131 veriyi tam olarak almalar\u0131n\u0131 sa\u011flar.</p>"},{"location":"mid-level/api-design/graphql/#graphql-vs-rest","title":"GraphQL vs REST","text":""},{"location":"mid-level/api-design/graphql/#rest-api-snrlamalar","title":"REST API S\u0131n\u0131rlamalar\u0131","text":"<pre><code># REST API - Over-fetching \u00f6rne\u011fi\nGET /api/users/123\nResponse: {\n  \"id\": 123,\n  \"name\": \"Ahmet\",\n  \"email\": \"ahmet@example.com\",\n  \"phone\": \"+90 555 123 4567\",\n  \"address\": \"\u0130stanbul, T\u00fcrkiye\",\n  \"birthDate\": \"1990-01-01\",\n  \"profilePicture\": \"https://...\",\n  \"lastLogin\": \"2024-01-15T10:30:00Z\"\n}\n\n# Client sadece name ve email istiyor ama t\u00fcm veri geliyor\n</code></pre>"},{"location":"mid-level/api-design/graphql/#graphql-cozumu","title":"GraphQL \u00c7\u00f6z\u00fcm\u00fc","text":"<pre><code># GraphQL Query - Sadece ihtiya\u00e7 duyulan veri\nquery GetUserBasicInfo($id: ID!) {\n  user(id: $id) {\n    name\n    email\n  }\n}\n\n# Response - Sadece istenen veri\n{\n  \"data\": {\n    \"user\": {\n      \"name\": \"Ahmet\",\n      \"email\": \"ahmet@example.com\"\n    }\n  }\n}\n</code></pre>"},{"location":"mid-level/api-design/graphql/#graphql-temel-kavramlar","title":"GraphQL Temel Kavramlar","text":""},{"location":"mid-level/api-design/graphql/#schema-definition","title":"Schema Definition","text":"<pre><code># Schema definition\ntype User {\n  id: ID!\n  name: String!\n  email: String!\n  posts: [Post!]!\n  profile: Profile\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  author: User!\n  comments: [Comment!]!\n  createdAt: DateTime!\n}\n\ntype Profile {\n  bio: String\n  avatar: String\n  website: String\n}\n\ntype Query {\n  user(id: ID!): User\n  users(limit: Int, offset: Int): [User!]!\n  post(id: ID!): Post\n  posts(authorId: ID): [Post!]!\n}\n\ntype Mutation {\n  createUser(input: CreateUserInput!): User!\n  updateUser(id: ID!, input: UpdateUserInput!): User!\n  deleteUser(id: ID!): Boolean!\n}\n\ninput CreateUserInput {\n  name: String!\n  email: String!\n  password: String!\n}\n\ninput UpdateUserInput {\n  name: String\n  email: String\n  bio: String\n}\n</code></pre>"},{"location":"mid-level/api-design/graphql/#resolvers","title":"Resolvers","text":"<pre><code>// ASP.NET Core GraphQL resolver \u00f6rne\u011fi\npublic class UserResolver\n{\n    private readonly IUserService _userService;\n    private readonly IPostService _postService;\n\n    public UserResolver(IUserService userService, IPostService postService)\n    {\n        _userService = userService;\n        _postService = postService;\n    }\n\n    public async Task&lt;User&gt; GetUser(string id)\n    {\n        return await _userService.GetByIdAsync(id);\n    }\n\n    public async Task&lt;IEnumerable&lt;Post&gt;&gt; GetUserPosts(User user, int? limit = null)\n    {\n        var posts = await _postService.GetByAuthorIdAsync(user.Id);\n\n        if (limit.HasValue)\n            posts = posts.Take(limit.Value);\n\n        return posts;\n    }\n\n    public async Task&lt;Profile&gt; GetUserProfile(User user)\n    {\n        return await _userService.GetProfileAsync(user.Id);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/graphql/#graphql-implementation-net","title":"GraphQL Implementation (.NET)","text":""},{"location":"mid-level/api-design/graphql/#hotchocolate-setup","title":"HotChocolate Setup","text":"<pre><code>// Program.cs\nvar builder = WebApplication.CreateBuilder(args);\n\n// GraphQL services\nbuilder.Services\n    .AddGraphQLServer()\n    .AddQueryType&lt;Query&gt;()\n    .AddMutationType&lt;Mutation&gt;()\n    .AddType&lt;UserType&gt;()\n    .AddType&lt;PostType&gt;()\n    .AddType&lt;ProfileType&gt;()\n    .AddDataLoader&lt;UserDataLoader&gt;()\n    .AddFiltering()\n    .AddSorting()\n    .AddProjections();\n\nvar app = builder.Build();\n\n// GraphQL endpoint\napp.MapGraphQL();\n\napp.Run();\n</code></pre>"},{"location":"mid-level/api-design/graphql/#type-definitions","title":"Type Definitions","text":"<pre><code>public class UserType : ObjectType&lt;User&gt;\n{\n    protected override void Configure(IObjectTypeDescriptor&lt;User&gt; descriptor)\n    {\n        descriptor.Field(u =&gt; u.Id).Type&lt;NonNullType&lt;IdType&gt;&gt;();\n        descriptor.Field(u =&gt; u.Name).Type&lt;NonNullType&lt;StringType&gt;&gt;();\n        descriptor.Field(u =&gt; u.Email).Type&lt;NonNullType&lt;StringType&gt;&gt;();\n\n        descriptor.Field(\"posts\")\n            .ResolveWith&lt;UserResolver&gt;(r =&gt; r.GetUserPosts(default!, default!))\n            .UseDbContext&lt;ApplicationDbContext&gt;()\n            .UsePaging()\n            .UseFiltering()\n            .UseSorting();\n\n        descriptor.Field(\"profile\")\n            .ResolveWith&lt;UserResolver&gt;(r =&gt; r.GetUserProfile(default!))\n            .UseDbContext&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/graphql/#query-implementation","title":"Query Implementation","text":"<pre><code>public class Query\n{\n    public async Task&lt;User?&gt; GetUser(string id, [Service] IUserService userService)\n    {\n        return await userService.GetByIdAsync(id);\n    }\n\n    public async Task&lt;IEnumerable&lt;User&gt;&gt; GetUsers(\n        int? limit = null, \n        int? offset = null,\n        [Service] IUserService userService)\n    {\n        var users = await userService.GetAllAsync();\n\n        if (offset.HasValue)\n            users = users.Skip(offset.Value);\n\n        if (limit.HasValue)\n            users = users.Take(limit.Value);\n\n        return users;\n    }\n\n    public async Task&lt;Post?&gt; GetPost(string id, [Service] IPostService postService)\n    {\n        return await postService.GetByIdAsync(id);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/graphql/#mutation-implementation","title":"Mutation Implementation","text":"<pre><code>public class Mutation\n{\n    public async Task&lt;User&gt; CreateUser(\n        CreateUserInput input,\n        [Service] IUserService userService)\n    {\n        var user = new User\n        {\n            Name = input.Name,\n            Email = input.Email,\n            PasswordHash = HashPassword(input.Password)\n        };\n\n        return await userService.CreateAsync(user);\n    }\n\n    public async Task&lt;User&gt; UpdateUser(\n        string id,\n        UpdateUserInput input,\n        [Service] IUserService userService)\n    {\n        var user = await userService.GetByIdAsync(id);\n        if (user == null)\n            throw new UserNotFoundException(id);\n\n        if (input.Name != null)\n            user.Name = input.Name;\n\n        if (input.Email != null)\n            user.Email = input.Email;\n\n        if (input.Bio != null)\n            user.Bio = input.Bio;\n\n        return await userService.UpdateAsync(user);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/graphql/#dataloader-pattern","title":"DataLoader Pattern","text":""},{"location":"mid-level/api-design/graphql/#n1-problem-cozumu","title":"N+1 Problem \u00c7\u00f6z\u00fcm\u00fc","text":"<pre><code>public class UserDataLoader : BatchDataLoader&lt;string, User&gt;\n{\n    private readonly IUserService _userService;\n\n    public UserDataLoader(IUserService userService, IBatchScheduler batchScheduler)\n        : base(batchScheduler)\n    {\n        _userService = userService;\n    }\n\n    protected override async Task&lt;IReadOnlyDictionary&lt;string, User&gt;&gt; LoadBatchAsync(\n        IReadOnlyList&lt;string&gt; keys, CancellationToken cancellationToken)\n    {\n        var users = await _userService.GetByIdsAsync(keys);\n        return users.ToDictionary(u =&gt; u.Id);\n    }\n}\n\n// Resolver'da kullan\u0131m\npublic async Task&lt;IEnumerable&lt;Post&gt;&gt; GetUserPosts(User user, int? limit = null)\n{\n    var posts = await _postService.GetByAuthorIdAsync(user.Id);\n\n    if (limit.HasValue)\n        posts = posts.Take(limit.Value);\n\n    return posts;\n}\n</code></pre>"},{"location":"mid-level/api-design/graphql/#graphql-subscriptions","title":"GraphQL Subscriptions","text":""},{"location":"mid-level/api-design/graphql/#real-time-updates","title":"Real-time Updates","text":"<pre><code>public class Subscription\n{\n    [Subscribe]\n    [Topic(\"UserCreated\")]\n    public User OnUserCreated([EventMessage] User user)\n    {\n        return user;\n    }\n\n    [Subscribe]\n    [Topic(\"PostUpdated\")]\n    public Post OnPostUpdated([EventMessage] Post post)\n    {\n        return post;\n    }\n}\n\n// Publisher\npublic class UserService\n{\n    private readonly ITopicEventSender _eventSender;\n\n    public async Task&lt;User&gt; CreateUser(CreateUserInput input)\n    {\n        var user = new User { /* ... */ };\n        await _context.Users.AddAsync(user);\n        await _context.SaveChangesAsync();\n\n        // Publish event\n        await _eventSender.SendAsync(\"UserCreated\", user);\n\n        return user;\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/graphql/#performance-optimization","title":"Performance Optimization","text":""},{"location":"mid-level/api-design/graphql/#query-complexity-analysis","title":"Query Complexity Analysis","text":"<pre><code>// Program.cs'de complexity limit\nbuilder.Services\n    .AddGraphQLServer()\n    .AddQueryType&lt;Query&gt;()\n    .AddMutationType&lt;Mutation&gt;()\n    .AddComplexityAnalyzer(options =&gt;\n    {\n        options.MaximumAllowedComplexity = 100;\n        options.MaximumAllowedDepth = 10;\n    });\n</code></pre>"},{"location":"mid-level/api-design/graphql/#caching","title":"Caching","text":"<pre><code>// Redis cache integration\nbuilder.Services\n    .AddGraphQLServer()\n    .AddQueryType&lt;Query&gt;()\n    .AddRedisQueryStorage(options =&gt;\n    {\n        options.ConnectionMultiplexerFactory = sp =&gt;\n            Task.FromResult(ConnectionMultiplexer.Connect(\"localhost:6379\"));\n    });\n</code></pre>"},{"location":"mid-level/api-design/graphql/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/api-design/graphql/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>GraphQL nedir ve REST'e g\u00f6re avantajlar\u0131 nelerdir?</li> <li> <p>Cevap: Query language, over-fetching/under-fetching'i \u00f6nler, single endpoint, strong typing, real-time updates.</p> </li> <li> <p>GraphQL'de N+1 problem nedir?</p> </li> <li> <p>Cevap: Multiple database queries, DataLoader pattern ile \u00e7\u00f6z\u00fcl\u00fcr, batching ve caching kullan\u0131l\u0131r.</p> </li> <li> <p>GraphQL schema nedir?</p> </li> <li> <p>Cevap: API'nin contract'\u0131, type definitions, queries, mutations ve subscriptions tan\u0131mlar.</p> </li> <li> <p>Resolver nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: GraphQL field'lar\u0131n\u0131n nas\u0131l resolve edilece\u011fini tan\u0131mlayan fonksiyonlar.</p> </li> <li> <p>GraphQL vs REST performance kar\u015f\u0131la\u015ft\u0131rmas\u0131 nas\u0131ld\u0131r?</p> </li> <li>Cevap: GraphQL single request, REST multiple requests. Caching ve batching \u00f6nemli.</li> </ol>"},{"location":"mid-level/api-design/graphql/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>GraphQL'de introspection nedir?</li> <li> <p>Cevap: Schema'y\u0131 query edebilme, GraphQL Playground, documentation generation.</p> </li> <li> <p>GraphQL'de error handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Errors array, partial results, proper error codes ve messages.</p> </li> <li> <p>GraphQL'de authentication nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: HTTP headers, context, directives, custom middleware.</p> </li> <li> <p>GraphQL'de caching stratejileri nelerdir?</p> </li> <li> <p>Cevap: HTTP caching, application-level caching, Redis integration, query result caching.</p> </li> <li> <p>GraphQL'de rate limiting nas\u0131l uygulan\u0131r?</p> </li> <li>Cevap: Query complexity analysis, depth limiting, field limiting, custom middleware.</li> </ol>"},{"location":"mid-level/api-design/graphql/#best-practices","title":"Best Practices","text":"<ol> <li>Schema Design</li> <li>Meaningful type names kullan\u0131n</li> <li>Proper nullability tan\u0131mlay\u0131n</li> <li>Input types kullan\u0131n</li> <li> <p>Documentation ekleyin</p> </li> <li> <p>Performance</p> </li> <li>DataLoader pattern kullan\u0131n</li> <li>Query complexity limitleri ayarlay\u0131n</li> <li>Caching implement edin</li> <li> <p>Pagination kullan\u0131n</p> </li> <li> <p>Security</p> </li> <li>Authentication implement edin</li> <li>Authorization kontrol edin</li> <li>Input validation yap\u0131n</li> <li> <p>Rate limiting uygulay\u0131n</p> </li> <li> <p>Error Handling</p> </li> <li>Consistent error formatlar\u0131 kullan\u0131n</li> <li>Proper error codes verin</li> <li>User-friendly messages yaz\u0131n</li> <li>Logging yap\u0131n</li> </ol>"},{"location":"mid-level/api-design/graphql/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>GraphQL Documentation</li> <li>HotChocolate Documentation</li> <li>GraphQL Best Practices</li> <li>GraphQL Security</li> <li>GraphQL Performance </li> </ul>"},{"location":"mid-level/api-design/rate-limiting/","title":"API Rate Limiting","text":""},{"location":"mid-level/api-design/rate-limiting/#giris","title":"Giri\u015f","text":"<p>API Rate Limiting, API'lerin k\u00f6t\u00fcye kullan\u0131m\u0131n\u0131 \u00f6nlemek, adil kullan\u0131m sa\u011flamak ve sistem kaynaklar\u0131n\u0131 korumak i\u00e7in kullan\u0131lan kritik bir g\u00fcvenlik ve performans mekanizmas\u0131d\u0131r. Mid-level geli\u015ftiriciler i\u00e7in rate limiting stratejilerini anlamak ve implement etmek \u00f6nemlidir.</p>"},{"location":"mid-level/api-design/rate-limiting/#rate-limiting-nedir","title":"Rate Limiting Nedir?","text":"<p>Rate Limiting, belirli bir zaman diliminde bir client'tan gelen istek say\u0131s\u0131n\u0131 s\u0131n\u0131rlayan mekanizmad\u0131r. Bu sayede:</p> <ul> <li>API Abuse Prevention: K\u00f6t\u00fc niyetli kullan\u0131c\u0131lar\u0131n sistemi a\u015f\u0131r\u0131 y\u00fcklemesi \u00f6nlenir</li> <li>Resource Protection: Sunucu kaynaklar\u0131 korunur</li> <li>Fair Usage: T\u00fcm kullan\u0131c\u0131lar i\u00e7in adil kullan\u0131m sa\u011flan\u0131r</li> <li>Cost Control: API maliyetleri kontrol alt\u0131nda tutulur</li> </ul>"},{"location":"mid-level/api-design/rate-limiting/#rate-limiting-stratejileri","title":"Rate Limiting Stratejileri","text":""},{"location":"mid-level/api-design/rate-limiting/#1-fixed-window-counter","title":"1. Fixed Window Counter","text":"<pre><code>public class FixedWindowRateLimiter : IRateLimiter\n{\n    private readonly IDictionary&lt;string, WindowInfo&gt; _windows;\n    private readonly int _maxRequests;\n    private readonly TimeSpan _windowSize;\n\n    public FixedWindowRateLimiter(int maxRequests, TimeSpan windowSize)\n    {\n        _maxRequests = maxRequests;\n        _windowSize = windowSize;\n        _windows = new Dictionary&lt;string, WindowInfo&gt;();\n    }\n\n    public async Task&lt;bool&gt; IsAllowedAsync(string clientId)\n    {\n        var now = DateTime.UtcNow;\n        var windowStart = new DateTime(now.Ticks - (now.Ticks % _windowSize.Ticks));\n\n        if (!_windows.TryGetValue(clientId, out var window) || \n            window.WindowStart &lt; windowStart)\n        {\n            // Yeni window ba\u015flat\n            window = new WindowInfo { WindowStart = windowStart, RequestCount = 0 };\n            _windows[clientId] = window;\n        }\n\n        if (window.RequestCount &gt;= _maxRequests)\n        {\n            return false; // Rate limit exceeded\n        }\n\n        window.RequestCount++;\n        return true;\n    }\n}\n\npublic class WindowInfo\n{\n    public DateTime WindowStart { get; set; }\n    public int RequestCount { get; set; }\n}\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#2-sliding-window-counter","title":"2. Sliding Window Counter","text":"<pre><code>public class SlidingWindowRateLimiter : IRateLimiter\n{\n    private readonly IDictionary&lt;string, Queue&lt;DateTime&gt;&gt; _requestTimestamps;\n    private readonly int _maxRequests;\n    private readonly TimeSpan _windowSize;\n\n    public SlidingWindowRateLimiter(int maxRequests, TimeSpan windowSize)\n    {\n        _maxRequests = maxRequests;\n        _windowSize = windowSize;\n        _requestTimestamps = new Dictionary&lt;string, Queue&lt;DateTime&gt;&gt;();\n    }\n\n    public async Task&lt;bool&gt; IsAllowedAsync(string clientId)\n    {\n        var now = DateTime.UtcNow;\n        var cutoff = now - _windowSize;\n\n        if (!_requestTimestamps.TryGetValue(clientId, out var timestamps))\n        {\n            timestamps = new Queue&lt;DateTime&gt;();\n            _requestTimestamps[clientId] = timestamps;\n        }\n\n        // Eski timestamp'leri temizle\n        while (timestamps.Count &gt; 0 &amp;&amp; timestamps.Peek() &lt; cutoff)\n        {\n            timestamps.Dequeue();\n        }\n\n        if (timestamps.Count &gt;= _maxRequests)\n        {\n            return false; // Rate limit exceeded\n        }\n\n        timestamps.Enqueue(now);\n        return true;\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#3-token-bucket-algorithm","title":"3. Token Bucket Algorithm","text":"<pre><code>public class TokenBucketRateLimiter : IRateLimiter\n{\n    private readonly IDictionary&lt;string, TokenBucket&gt; _buckets;\n    private readonly int _capacity;\n    private readonly double _refillRate; // tokens per second\n\n    public TokenBucketRateLimiter(int capacity, double refillRate)\n    {\n        _capacity = capacity;\n        _refillRate = refillRate;\n        _buckets = new Dictionary&lt;string, TokenBucket&gt;();\n    }\n\n    public async Task&lt;bool&gt; IsAllowedAsync(string clientId)\n    {\n        var now = DateTime.UtcNow;\n\n        if (!_buckets.TryGetValue(clientId, out var bucket))\n        {\n            bucket = new TokenBucket { Tokens = _capacity, LastRefill = now };\n            _buckets[clientId] = bucket;\n        }\n\n        // Token'lar\u0131 yenile\n        var timePassed = (now - bucket.LastRefill).TotalSeconds;\n        var tokensToAdd = timePassed * _refillRate;\n        bucket.Tokens = Math.Min(_capacity, bucket.Tokens + tokensToAdd);\n        bucket.LastRefill = now;\n\n        if (bucket.Tokens &lt; 1)\n        {\n            return false; // Rate limit exceeded\n        }\n\n        bucket.Tokens--;\n        return true;\n    }\n}\n\npublic class TokenBucket\n{\n    public double Tokens { get; set; }\n    public DateTime LastRefill { get; set; }\n}\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#aspnet-core-middleware-implementation","title":"ASP.NET Core Middleware Implementation","text":""},{"location":"mid-level/api-design/rate-limiting/#rate-limiting-middleware","title":"Rate Limiting Middleware","text":"<pre><code>public class RateLimitingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IRateLimiter _rateLimiter;\n    private readonly ILogger&lt;RateLimitingMiddleware&gt; _logger;\n\n    public RateLimitingMiddleware(\n        RequestDelegate next, \n        IRateLimiter rateLimiter,\n        ILogger&lt;RateLimitingMiddleware&gt; logger)\n    {\n        _next = next;\n        _rateLimiter = rateLimiter;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var clientId = GetClientId(context);\n\n        if (await _rateLimiter.IsAllowedAsync(clientId))\n        {\n            await _next(context);\n        }\n        else\n        {\n            _logger.LogWarning(\"Rate limit exceeded for client: {ClientId}\", clientId);\n\n            context.Response.StatusCode = 429; // Too Many Requests\n            context.Response.Headers.Add(\"Retry-After\", \"60\");\n\n            var response = new\n            {\n                Error = \"Rate limit exceeded\",\n                Message = \"Too many requests. Please try again later.\",\n                RetryAfter = 60\n            };\n\n            await context.Response.WriteAsJsonAsync(response);\n        }\n    }\n\n    private string GetClientId(HttpContext context)\n    {\n        // API key'den client ID al\n        if (context.Request.Headers.TryGetValue(\"X-API-Key\", out var apiKey))\n        {\n            return apiKey.ToString();\n        }\n\n        // IP adresinden client ID al\n        var ipAddress = context.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n        return ipAddress;\n    }\n}\n\n// Extension method\npublic static class RateLimitingMiddlewareExtensions\n{\n    public static IApplicationBuilder UseRateLimiting(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware&lt;RateLimitingMiddleware&gt;();\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#programcsde-kullanm","title":"Program.cs'de Kullan\u0131m","text":"<pre><code>var builder = WebApplication.CreateBuilder(args);\n\n// Rate limiting services\nbuilder.Services.AddSingleton&lt;IRateLimiter&gt;(provider =&gt;\n{\n    var configuration = provider.GetRequiredService&lt;IConfiguration&gt;();\n    var maxRequests = configuration.GetValue&lt;int&gt;(\"RateLimiting:MaxRequests\", 100);\n    var windowSize = configuration.GetValue&lt;int&gt;(\"RateLimiting:WindowSizeSeconds\", 60);\n\n    return new SlidingWindowRateLimiter(maxRequests, TimeSpan.FromSeconds(windowSize));\n});\n\nvar app = builder.Build();\n\n// Rate limiting middleware\napp.UseRateLimiting();\n\napp.Run();\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#distributed-rate-limiting","title":"Distributed Rate Limiting","text":""},{"location":"mid-level/api-design/rate-limiting/#redis-based-rate-limiter","title":"Redis-based Rate Limiter","text":"<pre><code>public class RedisRateLimiter : IRateLimiter\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly string _keyPrefix;\n    private readonly int _maxRequests;\n    private readonly TimeSpan _windowSize;\n\n    public RedisRateLimiter(\n        IConnectionMultiplexer redis, \n        int maxRequests, \n        TimeSpan windowSize,\n        string keyPrefix = \"rate_limit\")\n    {\n        _redis = redis;\n        _maxRequests = maxRequests;\n        _windowSize = windowSize;\n        _keyPrefix = keyPrefix;\n    }\n\n    public async Task&lt;bool&gt; IsAllowedAsync(string clientId)\n    {\n        var db = _redis.GetDatabase();\n        var key = $\"{_keyPrefix}:{clientId}\";\n        var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n        var windowStart = now - (long)_windowSize.TotalSeconds;\n\n        // Lua script ile atomic operation\n        var script = @\"\n            local key = KEYS[1]\n            local window_start = tonumber(ARGV[1])\n            local max_requests = tonumber(ARGV[2])\n            local current_time = tonumber(ARGV[3])\n\n            -- Eski timestamp'leri temizle\n            redis.call('ZREMRANGEBYSCORE', key, '-inf', window_start)\n\n            -- Mevcut request say\u0131s\u0131n\u0131 al\n            local current_count = redis.call('ZCARD', key)\n\n            if current_count &gt;= max_requests then\n                return 0\n            end\n\n            -- Yeni request'i ekle\n            redis.call('ZADD', key, current_time, current_time .. '-' .. math.random())\n\n            -- TTL ayarla\n            redis.call('EXPIRE', key, 3600)\n\n            return 1\n        \";\n\n        var result = await db.ScriptEvaluateAsync(script, \n            new RedisKey[] { key }, \n            new RedisValue[] { windowStart, _maxRequests, now });\n\n        return (int)result == 1;\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#configuration","title":"Configuration","text":"<pre><code>{\n  \"RateLimiting\": {\n    \"MaxRequests\": 100,\n    \"WindowSizeSeconds\": 60,\n    \"Redis\": {\n      \"ConnectionString\": \"localhost:6379\",\n      \"KeyPrefix\": \"api_rate_limit\"\n    }\n  }\n}\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#rate-limiting-policies","title":"Rate Limiting Policies","text":""},{"location":"mid-level/api-design/rate-limiting/#different-policies-for-different-endpoints","title":"Different Policies for Different Endpoints","text":"<pre><code>public class RateLimitingPolicy\n{\n    public string Endpoint { get; set; }\n    public int MaxRequests { get; set; }\n    public TimeSpan WindowSize { get; set; }\n    public string ClientType { get; set; } // \"free\", \"premium\", \"enterprise\"\n}\n\npublic class PolicyBasedRateLimiter : IRateLimiter\n{\n    private readonly IDictionary&lt;string, IRateLimiter&gt; _limiters;\n    private readonly IDictionary&lt;string, RateLimitingPolicy&gt; _policies;\n\n    public PolicyBasedRateLimiter(IEnumerable&lt;RateLimitingPolicy&gt; policies)\n    {\n        _policies = policies.ToDictionary(p =&gt; p.Endpoint);\n        _limiters = new Dictionary&lt;string, IRateLimiter&gt;();\n\n        foreach (var policy in policies)\n        {\n            _limiters[policy.Endpoint] = new SlidingWindowRateLimiter(\n                policy.MaxRequests, \n                policy.WindowSize);\n        }\n    }\n\n    public async Task&lt;bool&gt; IsAllowedAsync(string clientId, string endpoint)\n    {\n        if (!_limiters.TryGetValue(endpoint, out var limiter))\n        {\n            return true; // No rate limiting for this endpoint\n        }\n\n        var key = $\"{clientId}:{endpoint}\";\n        return await limiter.IsAllowedAsync(key);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#response-headers","title":"Response Headers","text":""},{"location":"mid-level/api-design/rate-limiting/#rate-limit-headers","title":"Rate Limit Headers","text":"<pre><code>public class RateLimitHeadersMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IRateLimiter _rateLimiter;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var clientId = GetClientId(context);\n        var endpoint = context.Request.Path.Value;\n\n        // Rate limit bilgilerini al\n        var limitInfo = await _rateLimiter.GetLimitInfoAsync(clientId, endpoint);\n\n        // Response headers ekle\n        context.Response.Headers.Add(\"X-RateLimit-Limit\", limitInfo.Limit.ToString());\n        context.Response.Headers.Add(\"X-RateLimit-Remaining\", limitInfo.Remaining.ToString());\n        context.Response.Headers.Add(\"X-RateLimit-Reset\", limitInfo.ResetTime.ToUnixTimeSeconds().ToString());\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/rate-limiting/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/api-design/rate-limiting/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Rate limiting nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: API kullan\u0131m\u0131n\u0131 s\u0131n\u0131rlayan mekanizma. API abuse prevention, resource protection ve fair usage i\u00e7in kritik.</p> </li> <li> <p>Fixed Window vs Sliding Window aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Fixed window belirli zaman dilimlerinde sayar, sliding window s\u00fcrekli hareket eden pencere kullan\u0131r. Sliding window daha adil.</p> </li> <li> <p>Token Bucket algorithm nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Bucket'da token'lar saklan\u0131r, her request bir token kullan\u0131r. Token'lar s\u00fcrekli yenilenir, burst traffic'e izin verir.</p> </li> <li> <p>Rate limiting'de client identification nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: API key, IP address, user ID, session token gibi y\u00f6ntemlerle. Context'e g\u00f6re en uygun y\u00f6ntem se\u00e7ilir.</p> </li> <li> <p>Distributed rate limiting neden gerekli?</p> </li> <li>Cevap: Multiple server instance'larda rate limit state'i payla\u015fmak i\u00e7in. Redis gibi shared storage kullan\u0131l\u0131r.</li> </ol>"},{"location":"mid-level/api-design/rate-limiting/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Rate limiting'de race condition nas\u0131l \u00f6nlenir?</li> <li> <p>Cevap: Atomic operations, distributed locks, Lua scripts (Redis'te) kullanarak. Concurrent request'lerde consistency sa\u011flan\u0131r.</p> </li> <li> <p>Rate limit exceeded durumunda ne yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: 429 status code, Retry-After header, rate limit bilgileri. Client'a ne zaman tekrar deneyebilece\u011fi bilgisi verilir.</p> </li> <li> <p>Different rate limits for different users nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Policy-based approach, user tiers (free/premium/enterprise), endpoint-specific limits. Configuration-driven design.</p> </li> <li> <p>Rate limiting performance'\u0131 nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Caching, efficient data structures, background cleanup, Redis pipelining. Memory ve CPU kullan\u0131m\u0131 optimize edilir.</p> </li> <li> <p>Rate limiting bypass nas\u0131l \u00f6nlenir?</p> </li> <li>Cevap: Multiple identification methods, IP rotation detection, behavioral analysis, rate limit evasion detection.</li> </ol>"},{"location":"mid-level/api-design/rate-limiting/#best-practices","title":"Best Practices","text":"<ol> <li>Policy Design</li> <li>Endpoint-specific limits belirleyin</li> <li>User tier-based limits uygulay\u0131n</li> <li>Burst traffic'e izin verin</li> <li> <p>Graceful degradation sa\u011flay\u0131n</p> </li> <li> <p>Implementation</p> </li> <li>Atomic operations kullan\u0131n</li> <li>Efficient data structures se\u00e7in</li> <li>Background cleanup yap\u0131n</li> <li> <p>Monitoring ekleyin</p> </li> <li> <p>Monitoring</p> </li> <li>Rate limit metrics toplay\u0131n</li> <li>Client behavior analiz edin</li> <li>Alerting kurun</li> <li> <p>Performance izleyin</p> </li> <li> <p>Security</p> </li> <li>Multiple identification methods kullan\u0131n</li> <li>Bypass detection implement edin</li> <li>Rate limit evasion \u00f6nleyin</li> <li>Audit logging yap\u0131n</li> </ol>"},{"location":"mid-level/api-design/rate-limiting/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Rate Limiting</li> <li>Redis Rate Limiting</li> <li>Rate Limiting Strategies</li> <li>API Rate Limiting Best Practices</li> <li>Rate Limiting Algorithms</li> </ul>"},{"location":"mid-level/api-design/testing/","title":"API Testing","text":""},{"location":"mid-level/api-design/testing/#giris","title":"Giri\u015f","text":"<p>API Testing, API'lerin do\u011fru \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131, beklenen davran\u0131\u015flar\u0131 sergiledi\u011fini ve g\u00fcvenlik gereksinimlerini kar\u015f\u0131lad\u0131\u011f\u0131n\u0131 do\u011frulamak i\u00e7in yap\u0131lan test s\u00fcre\u00e7leridir. Mid-level geli\u015ftiriciler i\u00e7in kapsaml\u0131 API testing stratejileri \u00f6nemlidir.</p>"},{"location":"mid-level/api-design/testing/#api-testing-turleri","title":"API Testing T\u00fcrleri","text":""},{"location":"mid-level/api-design/testing/#1-unit-testing","title":"1. Unit Testing","text":"<p>API controller'lar\u0131n ve service'lerin ba\u011f\u0131ms\u0131z test edilmesi.</p> <pre><code>public class UserControllerTests\n{\n    private readonly UserController _controller;\n    private readonly Mock&lt;IUserService&gt; _mockUserService;\n    private readonly Mock&lt;ILogger&lt;UserController&gt;&gt; _mockLogger;\n\n    public UserControllerTests()\n    {\n        _mockUserService = new Mock&lt;IUserService&gt;();\n        _mockLogger = new Mock&lt;ILogger&lt;UserController&gt;&gt;();\n        _controller = new UserController(_mockUserService.Object, _mockLogger.Object);\n    }\n\n    [Fact]\n    public async Task GetUser_WithValidId_ReturnsOkResult()\n    {\n        // Arrange\n        var userId = 1;\n        var expectedUser = new UserDto { Id = userId, Name = \"Ahmet\", Email = \"ahmet@example.com\" };\n        _mockUserService.Setup(x =&gt; x.GetByIdAsync(userId)).ReturnsAsync(expectedUser);\n\n        // Act\n        var result = await _controller.GetUser(userId);\n\n        // Assert\n        var okResult = Assert.IsType&lt;OkObjectResult&gt;(result);\n        var returnedUser = Assert.IsType&lt;UserDto&gt;(okResult.Value);\n        Assert.Equal(expectedUser.Id, returnedUser.Id);\n        Assert.Equal(expectedUser.Name, returnedUser.Name);\n    }\n\n    [Fact]\n    public async Task GetUser_WithInvalidId_ReturnsNotFound()\n    {\n        // Arrange\n        var userId = 999;\n        _mockUserService.Setup(x =&gt; x.GetByIdAsync(userId)).ReturnsAsync((UserDto)null);\n\n        // Act\n        var result = await _controller.GetUser(userId);\n\n        // Assert\n        Assert.IsType&lt;NotFoundResult&gt;(result);\n    }\n\n    [Fact]\n    public async Task CreateUser_WithValidData_ReturnsCreatedResult()\n    {\n        // Arrange\n        var createUserRequest = new CreateUserRequest { Name = \"Ahmet\", Email = \"ahmet@example.com\" };\n        var createdUser = new UserDto { Id = 1, Name = \"Ahmet\", Email = \"ahmet@example.com\" };\n\n        _mockUserService.Setup(x =&gt; x.CreateAsync(It.IsAny&lt;User&gt;())).ReturnsAsync(createdUser);\n\n        // Act\n        var result = await _controller.CreateUser(createUserRequest);\n\n        // Assert\n        var createdResult = Assert.IsType&lt;CreatedAtActionResult&gt;(result);\n        var returnedUser = Assert.IsType&lt;UserDto&gt;(createdResult.Value);\n        Assert.Equal(createdUser.Id, returnedUser.Id);\n        Assert.Equal(\"GetUser\", createdResult.ActionName);\n    }\n\n    [Fact]\n    public async Task CreateUser_WithInvalidData_ReturnsBadRequest()\n    {\n        // Arrange\n        var createUserRequest = new CreateUserRequest { Name = \"\", Email = \"invalid-email\" };\n        _controller.ModelState.AddModelError(\"Name\", \"Name is required\");\n        _controller.ModelState.AddModelError(\"Email\", \"Invalid email format\");\n\n        // Act\n        var result = await _controller.CreateUser(createUserRequest);\n\n        // Assert\n        Assert.IsType&lt;BadRequestObjectResult&gt;(result);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/testing/#2-integration-testing","title":"2. Integration Testing","text":"<p>API'lerin ger\u00e7ek veritaban\u0131 ve external service'ler ile entegrasyonunun test edilmesi.</p> <pre><code>public class UserApiIntegrationTests : IClassFixture&lt;WebApplicationFactory&lt;Program&gt;&gt;\n{\n    private readonly WebApplicationFactory&lt;Program&gt; _factory;\n    private readonly HttpClient _client;\n\n    public UserApiIntegrationTests(WebApplicationFactory&lt;Program&gt; factory)\n    {\n        _factory = factory.WithWebHostBuilder(builder =&gt;\n        {\n            builder.ConfigureServices(services =&gt;\n            {\n                // Test database kullan\n                var descriptor = services.SingleOrDefault(\n                    d =&gt; d.ServiceType == typeof(DbContextOptions&lt;ApplicationDbContext&gt;));\n\n                if (descriptor != null)\n                {\n                    services.Remove(descriptor);\n                }\n\n                services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n                {\n                    options.UseInMemoryDatabase(\"TestDb\");\n                });\n            });\n        });\n\n        _client = _factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task CreateUser_Integration_ShouldCreateUserInDatabase()\n    {\n        // Arrange\n        var createUserRequest = new CreateUserRequest\n        {\n            Name = \"Integration Test User\",\n            Email = \"integration@test.com\"\n        };\n\n        var json = JsonSerializer.Serialize(createUserRequest);\n        var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n        // Act\n        var response = await _client.PostAsync(\"/api/users\", content);\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n        Assert.Equal(HttpStatusCode.Created, response.StatusCode);\n\n        var responseContent = await response.Content.ReadAsStringAsync();\n        var createdUser = JsonSerializer.Deserialize&lt;UserDto&gt;(responseContent, new JsonSerializerOptions\n        {\n            PropertyNameCaseInsensitive = true\n        });\n\n        Assert.NotNull(createdUser);\n        Assert.Equal(createUserRequest.Name, createdUser.Name);\n        Assert.Equal(createUserRequest.Email, createdUser.Email);\n\n        // Verify user exists in database\n        var getResponse = await _client.GetAsync($\"/api/users/{createdUser.Id}\");\n        getResponse.EnsureSuccessStatusCode();\n    }\n\n    [Fact]\n    public async Task GetUsers_Integration_ShouldReturnUsersFromDatabase()\n    {\n        // Arrange - Test data ekle\n        var testUsers = new[]\n        {\n            new CreateUserRequest { Name = \"User 1\", Email = \"user1@test.com\" },\n            new CreateUserRequest { Name = \"User 2\", Email = \"user2@test.com\" }\n        };\n\n        foreach (var user in testUsers)\n        {\n            var json = JsonSerializer.Serialize(user);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            await _client.PostAsync(\"/api/users\", content);\n        }\n\n        // Act\n        var response = await _client.GetAsync(\"/api/users\");\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n        var responseContent = await response.Content.ReadAsStringAsync();\n        var users = JsonSerializer.Deserialize&lt;List&lt;UserDto&gt;&gt;(responseContent, new JsonSerializerOptions\n        {\n            PropertyNameCaseInsensitive = true\n        });\n\n        Assert.NotNull(users);\n        Assert.True(users.Count &gt;= testUsers.Length);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/testing/#3-contract-testing","title":"3. Contract Testing","text":"<p>API consumer'lar ile provider'lar aras\u0131ndaki contract'lar\u0131n test edilmesi.</p> <pre><code>// Pact.NET kullanarak contract testing\npublic class UserApiContractTests\n{\n    private readonly IPactBuilderV3 _pactBuilder;\n\n    public UserApiContractTests()\n    {\n        var config = new PactConfig\n        {\n            PactDir = Path.Join(\"..\", \"..\", \"..\", \"pacts\")\n        };\n\n        _pactBuilder = Pact.V3(\"UserApi\", \"UserClient\", config);\n    }\n\n    [Fact]\n    public async Task GetUser_Contract_ShouldMatchExpectedResponse()\n    {\n        // Arrange\n        var expectedUser = new UserDto\n        {\n            Id = 1,\n            Name = \"Contract Test User\",\n            Email = \"contract@test.com\"\n        };\n\n        _pactBuilder\n            .UponReceiving(\"A request for a user\")\n            .Given(\"A user exists\")\n            .WithRequest(HttpMethod.Get, \"/api/users/1\")\n            .WillRespond()\n            .WithStatus(HttpStatusCode.OK)\n            .WithHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n            .WithJsonBody(expectedUser);\n\n        await _pactBuilder.VerifyAsync(async ctx =&gt;\n        {\n            var client = new HttpClient { BaseAddress = new Uri(ctx.MockServerUri) };\n            var response = await client.GetAsync(\"/api/users/1\");\n\n            Assert.Equal(HttpStatusCode.OK, response.StatusCode);\n\n            var content = await response.Content.ReadAsStringAsync();\n            var actualUser = JsonSerializer.Deserialize&lt;UserDto&gt;(content);\n\n            Assert.Equal(expectedUser.Id, actualUser.Id);\n            Assert.Equal(expectedUser.Name, actualUser.Name);\n            Assert.Equal(expectedUser.Email, actualUser.Email);\n        });\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/testing/#postman-ve-newman-ile-api-testing","title":"Postman ve Newman ile API Testing","text":""},{"location":"mid-level/api-design/testing/#postman-collection","title":"Postman Collection","text":"<pre><code>{\n  \"info\": {\n    \"name\": \"User API Tests\",\n    \"description\": \"Comprehensive tests for User API endpoints\"\n  },\n  \"item\": [\n    {\n      \"name\": \"Get Users\",\n      \"request\": {\n        \"method\": \"GET\",\n        \"header\": [\n          {\n            \"key\": \"Authorization\",\n            \"value\": \"Bearer {{access_token}}\"\n          }\n        ],\n        \"url\": {\n          \"raw\": \"{{base_url}}/api/users\",\n          \"host\": [\"{{base_url}}\"],\n          \"path\": [\"api\", \"users\"]\n        }\n      },\n      \"response\": [\n        {\n          \"name\": \"Success Response\",\n          \"originalRequest\": {\n            \"method\": \"GET\",\n            \"header\": [],\n            \"url\": {\n              \"raw\": \"{{base_url}}/api/users\",\n              \"host\": [\"{{base_url}}\"],\n              \"path\": [\"api\", \"users\"]\n            }\n          },\n          \"status\": \"OK\",\n          \"code\": 200,\n          \"_postman_previewlanguage\": \"json\",\n          \"header\": [\n            {\n              \"key\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ],\n          \"cookie\": [],\n          \"body\": \"[\\n  {\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"Ahmet\\\",\\n    \\\"email\\\": \\\"ahmet@example.com\\\"\\n  }\\n]\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Create User\",\n      \"request\": {\n        \"method\": \"POST\",\n        \"header\": [\n          {\n            \"key\": \"Content-Type\",\n            \"value\": \"application/json\"\n          },\n          {\n            \"key\": \"Authorization\",\n            \"value\": \"Bearer {{access_token}}\"\n          }\n        ],\n        \"body\": {\n          \"mode\": \"raw\",\n          \"raw\": \"{\\n  \\\"name\\\": \\\"Test User\\\",\\n  \\\"email\\\": \\\"test@example.com\\\"\\n}\"\n        },\n        \"url\": {\n          \"raw\": \"{{base_url}}/api/users\",\n          \"host\": [\"{{base_url}}\"],\n          \"path\": [\"api\", \"users\"]\n        }\n      },\n      \"response\": [\n        {\n          \"name\": \"Created Response\",\n          \"originalRequest\": {\n            \"method\": \"POST\",\n            \"header\": [],\n            \"body\": {\n              \"mode\": \"raw\",\n              \"raw\": \"{\\n  \\\"name\\\": \\\"Test User\\\",\\n  \\\"email\\\": \\\"test@example.com\\\"\\n}\"\n            },\n            \"url\": {\n              \"raw\": \"{{base_url}}/api/users\",\n              \"host\": [\"{{base_url}}\"],\n              \"path\": [\"api\", \"users\"]\n            }\n          },\n          \"status\": \"Created\",\n          \"code\": 201,\n          \"_postman_previewlanguage\": \"json\",\n          \"header\": [\n            {\n              \"key\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ],\n          \"cookie\": [],\n          \"body\": \"{\\n  \\\"id\\\": 2,\\n  \\\"name\\\": \\\"Test User\\\",\\n  \\\"email\\\": \\\"test@example.com\\\"\\n}\"\n        }\n      ]\n    }\n  ],\n  \"variable\": [\n    {\n      \"key\": \"base_url\",\n      \"value\": \"https://api.example.com\"\n    },\n    {\n      \"key\": \"access_token\",\n      \"value\": \"your_jwt_token_here\"\n    }\n  ]\n}\n</code></pre>"},{"location":"mid-level/api-design/testing/#newman-cli-ile-automation","title":"Newman CLI ile Automation","text":"<pre><code># Newman installation\nnpm install -g newman\n\n# Collection'\u0131 \u00e7al\u0131\u015ft\u0131r\nnewman run UserApiTests.postman_collection.json\n\n# Environment variables ile\nnewman run UserApiTests.postman_collection.json -e environment.json\n\n# CI/CD pipeline'da\nnewman run UserApiTests.postman_collection.json \\\n  --reporters cli,json \\\n  --reporter-json-export results.json \\\n  --exit-code\n</code></pre>"},{"location":"mid-level/api-design/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"mid-level/api-design/testing/#load-testing-with-nbomber","title":"Load Testing with NBomber","text":"<pre><code>public class UserApiLoadTests\n{\n    [Fact]\n    public void GetUsers_LoadTest()\n    {\n        var httpClient = new HttpClient();\n        httpClient.BaseAddress = new Uri(\"https://api.example.com\");\n\n        var scenario = ScenarioBuilder.CreateScenario(\"Get Users Load Test\", async context =&gt;\n        {\n            try\n            {\n                var response = await httpClient.GetAsync(\"/api/users\");\n\n                if (response.IsSuccessStatusCode)\n                {\n                    context.Ok();\n                }\n                else\n                {\n                    context.Fail($\"HTTP {response.StatusCode}\");\n                }\n            }\n            catch (Exception ex)\n            {\n                context.Fail(ex.Message);\n            }\n        })\n        .WithLoadSimulations(\n            Simulation.Inject(rate: 100, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(5))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n\n    [Fact]\n    public void CreateUser_StressTest()\n    {\n        var httpClient = new HttpClient();\n        httpClient.BaseAddress = new Uri(\"https://api.example.com\");\n\n        var scenario = ScenarioBuilder.CreateScenario(\"Create User Stress Test\", async context =&gt;\n        {\n            try\n            {\n                var userData = new { name = $\"User_{Guid.NewGuid()}\", email = $\"user_{Guid.NewGuid()}@test.com\" };\n                var json = JsonSerializer.Serialize(userData);\n                var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await httpClient.PostAsync(\"/api/users\", content);\n\n                if (response.IsSuccessStatusCode)\n                {\n                    context.Ok();\n                }\n                else\n                {\n                    context.Fail($\"HTTP {response.StatusCode}\");\n                }\n            }\n            catch (Exception ex)\n            {\n                context.Fail(ex.Message);\n            }\n        })\n        .WithLoadSimulations(\n            Simulation.Stress(rate: 50, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(10))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/testing/#security-testing","title":"Security Testing","text":""},{"location":"mid-level/api-design/testing/#authentication-ve-authorization-testing","title":"Authentication ve Authorization Testing","text":"<pre><code>public class UserApiSecurityTests\n{\n    private readonly WebApplicationFactory&lt;Program&gt; _factory;\n\n    [Fact]\n    public async Task GetUsers_WithoutAuthentication_ReturnsUnauthorized()\n    {\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/api/users\");\n\n        // Assert\n        Assert.Equal(HttpStatusCode.Unauthorized, response.StatusCode);\n    }\n\n    [Fact]\n    public async Task GetUsers_WithInvalidToken_ReturnsUnauthorized()\n    {\n        // Arrange\n        var client = _factory.CreateClient();\n        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"invalid_token\");\n\n        // Act\n        var response = await client.GetAsync(\"/api/users\");\n\n        // Assert\n        Assert.Equal(HttpStatusCode.Unauthorized, response.StatusCode);\n    }\n\n    [Fact]\n    public async Task CreateUser_WithoutAdminRole_ReturnsForbidden()\n    {\n        // Arrange\n        var client = _factory.CreateClient();\n        var token = await GetUserToken(\"regular_user\");\n        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n        var userData = new { name = \"Test User\", email = \"test@example.com\" };\n        var json = JsonSerializer.Serialize(userData);\n        var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n        // Act\n        var response = await client.PostAsync(\"/api/users\", content);\n\n        // Assert\n        Assert.Equal(HttpStatusCode.Forbidden, response.StatusCode);\n    }\n\n    [Fact]\n    public async Task CreateUser_WithXssPayload_ShouldSanitizeInput()\n    {\n        // Arrange\n        var client = _factory.CreateClient();\n        var token = await GetAdminToken();\n        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n        var maliciousData = new { name = \"&lt;script&gt;alert('xss')&lt;/script&gt;\", email = \"test@example.com\" };\n        var json = JsonSerializer.Serialize(maliciousData);\n        var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n        // Act\n        var response = await client.PostAsync(\"/api/users\", content);\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n\n        var responseContent = await response.Content.ReadAsStringAsync();\n        var createdUser = JsonSerializer.Deserialize&lt;UserDto&gt;(responseContent);\n\n        // XSS payload'\u0131n sanitize edildi\u011fini kontrol et\n        Assert.DoesNotContain(\"&lt;script&gt;\", createdUser.Name);\n        Assert.Contains(\"&amp;lt;script&amp;gt;\", createdUser.Name);\n    }\n}\n</code></pre>"},{"location":"mid-level/api-design/testing/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/api-design/testing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>API testing t\u00fcrleri nelerdir?</li> <li> <p>Cevap: Unit testing, integration testing, contract testing, performance testing, security testing. Her biri farkl\u0131 seviyede test coverage sa\u011flar.</p> </li> <li> <p>Integration testing nedir ve neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: API'lerin ger\u00e7ek dependencies ile \u00e7al\u0131\u015fmas\u0131n\u0131n test edilmesi. Database, external services ve middleware entegrasyonunu do\u011frular.</p> </li> <li> <p>Contract testing nedir?</p> </li> <li> <p>Cevap: API consumer ve provider aras\u0131ndaki contract'lar\u0131n test edilmesi. Breaking changes'lar\u0131 \u00f6nler ve API compatibility sa\u011flar.</p> </li> <li> <p>Postman vs Newman aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Postman GUI tool, Newman CLI tool. Newman CI/CD pipeline'da automation i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Performance testing'de hangi metrikler \u00f6nemlidir?</p> </li> <li>Cevap: Response time, throughput, error rate, resource utilization, scalability metrics.</li> </ol>"},{"location":"mid-level/api-design/testing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>API testing'de mocking nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: Moq, NSubstitute gibi library'ler kullanarak. External dependencies mock edilir, test isolation sa\u011flan\u0131r.</p> </li> <li> <p>Integration testing'de test database nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap: In-memory database, test database, database seeding, test data cleanup. Her test i\u00e7in isolated environment.</p> </li> <li> <p>Contract testing'de Pact nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Consumer-driven contracts, provider verification, contract validation. Breaking changes detection.</p> </li> <li> <p>Security testing'de hangi testler yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Authentication bypass, authorization testing, input validation, XSS protection, SQL injection prevention.</p> </li> <li> <p>Performance testing'de load vs stress testing aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: Load testing normal y\u00fck, stress testing sistem limitlerini test eder. Performance degradation ve failure points bulunur.</li> </ol>"},{"location":"mid-level/api-design/testing/#best-practices","title":"Best Practices","text":"<ol> <li>Test Organization</li> <li>Test pyramid'i takip edin</li> <li>Test isolation sa\u011flay\u0131n</li> <li>Test data management yap\u0131n</li> <li> <p>CI/CD integration kurun</p> </li> <li> <p>Test Coverage</p> </li> <li>Happy path testing</li> <li>Error scenarios testing</li> <li>Edge cases testing</li> <li> <p>Security testing</p> </li> <li> <p>Performance Testing</p> </li> <li>Realistic load patterns</li> <li>Monitoring ve alerting</li> <li>Baseline metrics</li> <li> <p>Continuous performance testing</p> </li> <li> <p>Security Testing</p> </li> <li>OWASP Top 10 testing</li> <li>Authentication testing</li> <li>Authorization testing</li> <li>Input validation testing</li> </ol>"},{"location":"mid-level/api-design/testing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Testing</li> <li>Postman Documentation</li> <li>Newman CLI</li> <li>NBomber</li> <li>Pact.NET</li> </ul>"},{"location":"mid-level/architecture/","title":"Mimari","text":""},{"location":"mid-level/architecture/#giris","title":"Giri\u015f","text":"<p>Software architecture, modern .NET uygulamalar\u0131nda scalability, maintainability ve reliability i\u00e7in kritik \u00f6neme sahiptir. Mid-level geli\u015ftiriciler i\u00e7in software architecture konular\u0131n\u0131 anlamak, distributed systems, enterprise applications ve cloud-native solutions geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, distributed locking konusunu kapsar.</p>"},{"location":"mid-level/architecture/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/architecture/#1-distributed-locking","title":"1. Distributed Locking","text":"<p>Distributed systems'de resource coordination, concurrency control, ve distributed locking patterns.</p> <p>\u00d6\u011frenilecekler: - Distributed locking concepts - Lock implementation strategies - Redis-based locking - Database-based locking - Lock coordination</p>"},{"location":"mid-level/architecture/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/architecture/#1-distributed-systems","title":"1. Distributed Systems","text":"<ul> <li>Resource coordination</li> <li>Concurrency control</li> <li>Data consistency</li> <li>System reliability</li> </ul>"},{"location":"mid-level/architecture/#2-scalability","title":"2. Scalability","text":"<ul> <li>Horizontal scaling</li> <li>Load distribution</li> <li>Resource management</li> <li>Performance optimization</li> </ul>"},{"location":"mid-level/architecture/#3-reliability","title":"3. Reliability","text":"<ul> <li>Fault tolerance</li> <li>Error handling</li> <li>System stability</li> <li>Data integrity</li> </ul>"},{"location":"mid-level/architecture/#4-enterprise-applications","title":"4. Enterprise Applications","text":"<ul> <li>Large-scale systems</li> <li>Complex workflows</li> <li>Business critical operations</li> <li>Compliance requirements</li> </ul>"},{"location":"mid-level/architecture/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/architecture/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Distributed locking nedir?</li> <li> <p>Cevap: Resource coordination, concurrency control, distributed systems.</p> </li> <li> <p>Distributed locking ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Resource coordination, concurrency control, data consistency.</p> </li> <li> <p>Distributed locking nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Redis, database, coordination protocols.</p> </li> <li> <p>Distributed locking challenges nelerdir?</p> </li> <li> <p>Cevap: Network latency, failure handling, consistency.</p> </li> <li> <p>Distributed locking alternatives nelerdir?</p> </li> <li>Cevap: Optimistic locking, event sourcing, saga pattern.</li> </ol>"},{"location":"mid-level/architecture/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Redis-based locking nas\u0131l implement edilir?</li> <li> <p>Cevap: SET NX EX, Lua scripts, lock renewal.</p> </li> <li> <p>Database-based locking nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: SELECT FOR UPDATE, advisory locks, table locks.</p> </li> <li> <p>Lock timeout nas\u0131l handle edilir?</p> </li> <li> <p>Cevap: TTL management, lock renewal, timeout handling.</p> </li> <li> <p>Lock failure nas\u0131l handle edilir?</p> </li> <li> <p>Cevap: Retry strategies, fallback mechanisms, error handling.</p> </li> <li> <p>Distributed locking performance nas\u0131l optimize edilir?</p> </li> <li>Cevap: Lock granularity, timeout optimization, coordination efficiency.</li> </ol>"},{"location":"mid-level/architecture/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/architecture/#1-lock-design","title":"1. Lock Design","text":"<ul> <li>Choose appropriate lock type</li> <li>Implement proper timeout</li> <li>Handle lock failures</li> <li>Monitor lock performance</li> <li>Plan for scalability</li> </ul>"},{"location":"mid-level/architecture/#2-implementation-strategy","title":"2. Implementation Strategy","text":"<ul> <li>Use reliable storage</li> <li>Implement proper coordination</li> <li>Handle network failures</li> <li>Monitor lock health</li> <li>Plan for recovery</li> </ul>"},{"location":"mid-level/architecture/#3-performance-optimization","title":"3. Performance Optimization","text":"<ul> <li>Optimize lock granularity</li> <li>Minimize lock duration</li> <li>Use appropriate timeouts</li> <li>Monitor lock contention</li> <li>Plan for optimization</li> </ul>"},{"location":"mid-level/architecture/#4-error-handling","title":"4. Error Handling","text":"<ul> <li>Implement retry logic</li> <li>Handle lock failures</li> <li>Implement fallback mechanisms</li> <li>Monitor error rates</li> <li>Plan for recovery</li> </ul>"},{"location":"mid-level/architecture/#5-monitoring-maintenance","title":"5. Monitoring &amp; Maintenance","text":"<ul> <li>Monitor lock performance</li> <li>Track lock contention</li> <li>Monitor error rates</li> <li>Implement alerting</li> <li>Plan for maintenance</li> </ul>"},{"location":"mid-level/architecture/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Distributed Locking</li> <li>Redis Distributed Locking</li> <li>Database Locking</li> <li>Distributed Systems</li> <li>Concurrency Control</li> <li>Distributed Patterns </li> </ul>"},{"location":"mid-level/architecture/distributed-locking/","title":"Distributed Locking","text":""},{"location":"mid-level/architecture/distributed-locking/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Distributed locking, da\u011f\u0131t\u0131k sistemlerde kaynaklara eri\u015fimi senkronize etmek i\u00e7in kullan\u0131lan bir mekanizmad\u0131r. Bu b\u00f6l\u00fcmde, distributed locking'in temel kavramlar\u0131n\u0131 ve C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"mid-level/architecture/distributed-locking/#temel-distributed-locking-islemleri","title":"Temel Distributed Locking \u0130\u015flemleri","text":""},{"location":"mid-level/architecture/distributed-locking/#1-redis-ile-distributed-lock","title":"1. Redis ile Distributed Lock","text":"<pre><code>public class RedisDistributedLock\n{\n    private readonly IDatabase _redis;\n    private readonly string _lockKey;\n    private readonly string _lockValue;\n    private readonly TimeSpan _expiry;\n\n    public RedisDistributedLock(IDatabase redis, string lockKey, TimeSpan expiry)\n    {\n        _redis = redis;\n        _lockKey = lockKey;\n        _lockValue = Guid.NewGuid().ToString();\n        _expiry = expiry;\n    }\n\n    public async Task&lt;bool&gt; AcquireLockAsync()\n    {\n        return await _redis.StringSetAsync(_lockKey, _lockValue, _expiry, When.NotExists);\n    }\n\n    public async Task ReleaseLockAsync()\n    {\n        var script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\";\n        await _redis.ScriptEvaluateAsync(script, new RedisKey[] { _lockKey }, new RedisValue[] { _lockValue });\n    }\n}\n</code></pre>"},{"location":"mid-level/architecture/distributed-locking/#2-zookeeper-ile-distributed-lock","title":"2. ZooKeeper ile Distributed Lock","text":"<pre><code>public class ZooKeeperDistributedLock\n{\n    private readonly ZooKeeper _zooKeeper;\n    private readonly string _lockPath;\n    private string _currentNode;\n\n    public ZooKeeperDistributedLock(ZooKeeper zooKeeper, string lockPath)\n    {\n        _zooKeeper = zooKeeper;\n        _lockPath = lockPath;\n    }\n\n    public async Task AcquireLockAsync()\n    {\n        _currentNode = await _zooKeeper.CreateAsync(\n            $\"{_lockPath}/lock-\",\n            Array.Empty&lt;byte&gt;(),\n            ZooDefs.Ids.OPEN_ACL_UNSAFE,\n            CreateMode.EPHEMERAL_SEQUENTIAL);\n\n        var children = await _zooKeeper.GetChildrenAsync(_lockPath, false);\n        var sortedNodes = children.OrderBy(x =&gt; x).ToList();\n        var currentNodeIndex = sortedNodes.IndexOf(_currentNode.Split('/').Last());\n\n        if (currentNodeIndex &gt; 0)\n        {\n            var previousNode = $\"{_lockPath}/{sortedNodes[currentNodeIndex - 1]}\";\n            var watcher = new LockWatcher();\n            await _zooKeeper.ExistsAsync(previousNode, watcher);\n            await watcher.WaitAsync();\n        }\n    }\n\n    public async Task ReleaseLockAsync()\n    {\n        await _zooKeeper.DeleteAsync(_currentNode);\n    }\n}\n</code></pre>"},{"location":"mid-level/architecture/distributed-locking/#ileri-distributed-locking-algoritmalar","title":"\u0130leri Distributed Locking Algoritmalar\u0131","text":""},{"location":"mid-level/architecture/distributed-locking/#1-lease-based-locking","title":"1. Lease-based Locking","text":"<pre><code>public class LeaseBasedLock\n{\n    private readonly IDistributedCache _cache;\n    private readonly string _lockKey;\n    private readonly string _lockValue;\n    private readonly TimeSpan _leaseTime;\n    private Timer _renewalTimer;\n\n    public LeaseBasedLock(IDistributedCache cache, string lockKey, TimeSpan leaseTime)\n    {\n        _cache = cache;\n        _lockKey = lockKey;\n        _lockValue = Guid.NewGuid().ToString();\n        _leaseTime = leaseTime;\n    }\n\n    public async Task&lt;bool&gt; AcquireLockAsync()\n    {\n        var options = new DistributedCacheEntryOptions\n        {\n            AbsoluteExpirationRelativeToNow = _leaseTime\n        };\n\n        if (await _cache.GetStringAsync(_lockKey) == null)\n        {\n            await _cache.SetStringAsync(_lockKey, _lockValue, options);\n            StartLeaseRenewal();\n            return true;\n        }\n\n        return false;\n    }\n\n    private void StartLeaseRenewal()\n    {\n        _renewalTimer = new Timer(async _ =&gt;\n        {\n            await _cache.SetStringAsync(_lockKey, _lockValue, new DistributedCacheEntryOptions\n            {\n                AbsoluteExpirationRelativeToNow = _leaseTime\n            });\n        }, null, _leaseTime / 2, _leaseTime / 2);\n    }\n\n    public async Task ReleaseLockAsync()\n    {\n        _renewalTimer?.Dispose();\n        await _cache.RemoveAsync(_lockKey);\n    }\n}\n</code></pre>"},{"location":"mid-level/architecture/distributed-locking/#2-redlock-algorithm","title":"2. Redlock Algorithm","text":"<pre><code>public class Redlock\n{\n    private readonly List&lt;IDatabase&gt; _redisInstances;\n    private readonly int _quorum;\n    private readonly TimeSpan _lockTimeToLive;\n\n    public Redlock(List&lt;IDatabase&gt; redisInstances, TimeSpan lockTimeToLive)\n    {\n        _redisInstances = redisInstances;\n        _quorum = redisInstances.Count / 2 + 1;\n        _lockTimeToLive = lockTimeToLive;\n    }\n\n    public async Task&lt;bool&gt; LockAsync(string resource, string value)\n    {\n        var startTime = DateTime.UtcNow;\n        var acquiredLocks = 0;\n\n        foreach (var redis in _redisInstances)\n        {\n            if (await redis.StringSetAsync(resource, value, _lockTimeToLive, When.NotExists))\n            {\n                acquiredLocks++;\n            }\n        }\n\n        var elapsedTime = DateTime.UtcNow - startTime;\n        if (acquiredLocks &gt;= _quorum &amp;&amp; elapsedTime &lt; _lockTimeToLive)\n        {\n            return true;\n        }\n\n        await UnlockAsync(resource, value);\n        return false;\n    }\n\n    public async Task UnlockAsync(string resource, string value)\n    {\n        foreach (var redis in _redisInstances)\n        {\n            var script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\";\n            await redis.ScriptEvaluateAsync(script, new RedisKey[] { resource }, new RedisValue[] { value });\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/architecture/distributed-locking/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Redis Lock O(1) O(1) O(n) O(1) ZooKeeper Lock O(log n) O(log n) O(n) O(1) Lease-based Lock O(1) O(1) O(n) O(1) Redlock O(n) O(n) O(n) O(1)"},{"location":"mid-level/architecture/distributed-locking/#best-practices","title":"Best Practices","text":"<ol> <li>Deadlock'lar\u0131 \u00f6nle</li> <li>Lock s\u00fcresini optimize et</li> <li>Hata durumlar\u0131n\u0131 y\u00f6net</li> <li>Performans\u0131 izle</li> <li>Yedeklilik sa\u011fla</li> </ol>"},{"location":"mid-level/architecture/distributed-locking/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>Da\u011f\u0131t\u0131k i\u015flemler</li> <li>Kaynak y\u00f6netimi</li> <li>Veri tutarl\u0131l\u0131\u011f\u0131</li> <li>\u00d6l\u00e7eklendirme</li> <li>Y\u00fcksek eri\u015filebilirlik</li> </ol>"},{"location":"mid-level/architecture/distributed-locking/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Distributed Locks with Redis</li> <li>ZooKeeper Recipes</li> <li>Distributed Systems </li> </ul>"},{"location":"mid-level/architecture-patterns/","title":"Architecture Patterns","text":""},{"location":"mid-level/architecture-patterns/#giris","title":"Giri\u015f","text":"<p>Architecture patterns, software design'da proven solutions, best practices ve architectural decisions i\u00e7in kritik \u00f6neme sahiptir. Mid-level geli\u015ftiriciler i\u00e7in architecture patterns'i anlamak, scalable, maintainable ve robust software geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, hexagonal architecture, event-driven architecture, microservices patterns, serverless architecture ve cloud-native patterns konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/architecture-patterns/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/architecture-patterns/#1-hexagonal-architecture","title":"1. Hexagonal Architecture","text":"<p>Ports and adapters pattern, dependency inversion, ve clean architecture.</p> <p>\u00d6\u011frenilecekler: - Ports and adapters - Dependency inversion - Clean architecture - Testability - Maintainability</p>"},{"location":"mid-level/architecture-patterns/#2-event-driven-architecture","title":"2. Event-Driven Architecture","text":"<p>Event sourcing, event streaming, ve reactive systems.</p> <p>\u00d6\u011frenilecekler: - Event sourcing - Event streaming - Reactive systems - Event processing - Event storage</p>"},{"location":"mid-level/architecture-patterns/#3-microservices-patterns","title":"3. Microservices Patterns","text":"<p>Service decomposition, communication patterns, ve data management.</p> <p>\u00d6\u011frenilecekler: - Service decomposition - Communication patterns - Data management - Service discovery - Load balancing</p>"},{"location":"mid-level/architecture-patterns/#4-serverless-architecture","title":"4. Serverless Architecture","text":"<p>Function-as-a-Service, event-driven computing, ve cloud-native patterns.</p> <p>\u00d6\u011frenilecekler: - FaaS patterns - Event-driven computing - Cloud-native design - Scalability patterns - Cost optimization</p>"},{"location":"mid-level/architecture-patterns/#5-cloud-native-patterns","title":"5. Cloud-Native Patterns","text":"<p>Cloud-native design principles, containerization, ve orchestration.</p> <p>\u00d6\u011frenilecekler: - Cloud-native principles - Containerization - Orchestration - Service mesh - Observability</p>"},{"location":"mid-level/architecture-patterns/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/architecture-patterns/#1-software-design","title":"1. Software Design","text":"<ul> <li>Proven solutions</li> <li>Best practices</li> <li>Architectural decisions</li> <li>Design principles</li> <li>Pattern selection</li> </ul>"},{"location":"mid-level/architecture-patterns/#2-scalability","title":"2. Scalability","text":"<ul> <li>Horizontal scaling</li> <li>Load distribution</li> <li>Resource optimization</li> <li>Performance improvement</li> <li>Capacity planning</li> </ul>"},{"location":"mid-level/architecture-patterns/#3-maintainability","title":"3. Maintainability","text":"<ul> <li>Clear structure</li> <li>Separation of concerns</li> <li>Modular design</li> <li>Easy modification</li> <li>Code organization</li> </ul>"},{"location":"mid-level/architecture-patterns/#4-team-collaboration","title":"4. Team Collaboration","text":"<ul> <li>Shared understanding</li> <li>Consistent approach</li> <li>Knowledge transfer</li> <li>Code review support</li> <li>Architecture governance</li> </ul>"},{"location":"mid-level/architecture-patterns/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/architecture-patterns/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Architecture pattern nedir?</li> <li> <p>Cevap: Proven solutions, architectural decisions, design principles.</p> </li> <li> <p>Hexagonal architecture nedir?</p> </li> <li> <p>Cevap: Ports and adapters, dependency inversion, clean architecture.</p> </li> <li> <p>Event-driven architecture nedir?</p> </li> <li> <p>Cevap: Event sourcing, event streaming, reactive systems.</p> </li> <li> <p>Microservices patterns nelerdir?</p> </li> <li> <p>Cevap: Service decomposition, communication patterns, data management.</p> </li> <li> <p>Serverless architecture nedir?</p> </li> <li>Cevap: FaaS, event-driven computing, cloud-native patterns.</li> </ol>"},{"location":"mid-level/architecture-patterns/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Hexagonal architecture nas\u0131l implement edilir?</li> <li> <p>Cevap: Ports definition, adapters implementation, dependency injection.</p> </li> <li> <p>Event sourcing nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: Event store, event replay, event versioning, migration.</p> </li> <li> <p>Microservices decomposition nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Domain boundaries, service responsibilities, data ownership.</p> </li> <li> <p>Serverless functions nas\u0131l design edilir?</p> </li> <li> <p>Cevap: Single responsibility, stateless design, event handling.</p> </li> <li> <p>Cloud-native patterns nas\u0131l uygulan\u0131r?</p> </li> <li>Cevap: Containerization, orchestration, service mesh, observability.</li> </ol>"},{"location":"mid-level/architecture-patterns/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/architecture-patterns/#1-pattern-selection","title":"1. Pattern Selection","text":"<ul> <li>Choose appropriate patterns</li> <li>Consider requirements</li> <li>Plan for evolution</li> <li>Document decisions</li> <li>Share knowledge</li> </ul>"},{"location":"mid-level/architecture-patterns/#2-implementation","title":"2. Implementation","text":"<ul> <li>Follow pattern structure</li> <li>Maintain consistency</li> <li>Handle edge cases</li> <li>Plan for testing</li> <li>Consider performance</li> </ul>"},{"location":"mid-level/architecture-patterns/#3-documentation","title":"3. Documentation","text":"<ul> <li>Document architecture</li> <li>Explain decisions</li> <li>Provide examples</li> <li>Update documentation</li> <li>Share knowledge</li> </ul>"},{"location":"mid-level/architecture-patterns/#4-testing","title":"4. Testing","text":"<ul> <li>Test implementations</li> <li>Mock dependencies</li> <li>Test edge cases</li> <li>Monitor performance</li> <li>Plan for maintenance</li> </ul>"},{"location":"mid-level/architecture-patterns/#5-evolution","title":"5. Evolution","text":"<ul> <li>Plan for changes</li> <li>Maintain flexibility</li> <li>Consider alternatives</li> <li>Monitor usage</li> <li>Refactor when needed</li> </ul>"},{"location":"mid-level/architecture-patterns/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Architecture Patterns</li> <li>Hexagonal Architecture</li> <li>Event-Driven Architecture</li> <li>Microservices Patterns</li> <li>Serverless Architecture</li> <li>Cloud-Native Patterns</li> </ul>"},{"location":"mid-level/async-operations/","title":"Asenkron \u0130\u015flemler","text":""},{"location":"mid-level/async-operations/#giris","title":"Giri\u015f","text":"<p>Asenkron i\u015flemler, modern .NET uygulamalar\u0131nda responsive, scalable ve performansl\u0131 uygulamalar geli\u015ftirmek i\u00e7in kritik \u00f6neme sahiptir. Mid-level geli\u015ftiriciler i\u00e7in asenkron programlama tekniklerini anlamak, background job processing, task scheduling ve reactive programming konular\u0131nda uzmanla\u015fmak, enterprise-level uygulamalar geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, background jobs, Hangfire, Quartz.NET, Task Parallel Library (TPL) ve reactive programming konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/async-operations/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/async-operations/#1-background-jobs","title":"1. Background Jobs","text":"<p>Background job processing, job queuing, ve asynchronous task execution.</p> <p>\u00d6\u011frenilecekler: - Background job patterns - Job queuing strategies - Job persistence - Job retry mechanisms - Job monitoring</p>"},{"location":"mid-level/async-operations/#2-hangfire","title":"2. Hangfire","text":"<p>Hangfire job scheduling, background job processing, ve job management.</p> <p>\u00d6\u011frenilecekler: - Hangfire setup - Job scheduling - Recurring jobs - Job filters - Dashboard configuration</p>"},{"location":"mid-level/async-operations/#3-quartznet","title":"3. Quartz.NET","text":"<p>Quartz.NET job scheduling, cron expressions, ve advanced scheduling.</p> <p>\u00d6\u011frenilecekler: - Quartz.NET configuration - Job scheduling - Cron expressions - Job clustering - Job persistence</p>"},{"location":"mid-level/async-operations/#4-task-parallel-library-tpl","title":"4. Task Parallel Library (TPL)","text":"<p>Advanced task management, parallel processing, ve task coordination.</p> <p>\u00d6\u011frenilecekler: - Task composition - Parallel processing - Task coordination - Cancellation support - Exception handling</p>"},{"location":"mid-level/async-operations/#5-reactive-programming","title":"5. Reactive Programming","text":"<p>Reactive Extensions (Rx), event streams, ve reactive patterns.</p> <p>\u00d6\u011frenilecekler: - Observable patterns - Event streams - Reactive operators - Backpressure handling - Error handling</p>"},{"location":"mid-level/async-operations/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/async-operations/#1-performance-scalability","title":"1. Performance &amp; Scalability","text":"<ul> <li>Non-blocking operations</li> <li>Resource utilization optimization</li> <li>Horizontal scaling support</li> <li>Better user experience</li> </ul>"},{"location":"mid-level/async-operations/#2-system-reliability","title":"2. System Reliability","text":"<ul> <li>Fault tolerance</li> <li>Retry mechanisms</li> <li>Circuit breaker patterns</li> <li>Graceful degradation</li> </ul>"},{"location":"mid-level/async-operations/#3-user-experience","title":"3. User Experience","text":"<ul> <li>Responsive applications</li> <li>Background processing</li> <li>Real-time updates</li> <li>Non-blocking UI</li> </ul>"},{"location":"mid-level/async-operations/#4-resource-management","title":"4. Resource Management","text":"<ul> <li>Efficient resource utilization</li> <li>Memory management</li> <li>CPU optimization</li> <li>I/O optimization</li> </ul>"},{"location":"mid-level/async-operations/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/async-operations/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Asenkron programlama nedir?</li> <li> <p>Cevap: Non-blocking operations, async/await pattern, Task-based programming.</p> </li> <li> <p>Background job nedir?</p> </li> <li> <p>Cevap: Asynchronous task execution, job queuing, background processing.</p> </li> <li> <p>Hangfire nedir?</p> </li> <li> <p>Cevap: Background job processing library, job scheduling, .NET integration.</p> </li> <li> <p>Quartz.NET nedir?</p> </li> <li> <p>Cevap: Job scheduling library, cron expressions, enterprise scheduling.</p> </li> <li> <p>TPL nedir?</p> </li> <li>Cevap: Task Parallel Library, task management, parallel processing.</li> </ol>"},{"location":"mid-level/async-operations/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Background job nas\u0131l implement edilir?</li> <li> <p>Cevap: Job queuing, persistence, retry mechanisms, monitoring.</p> </li> <li> <p>Hangfire ile recurring job nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: RecurringJob.AddOrUpdate, cron expressions, job persistence.</p> </li> <li> <p>Quartz.NET ile job clustering nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Job store configuration, clustering setup, failover strategies.</p> </li> <li> <p>TPL ile parallel processing nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Parallel.ForEach, Task.WhenAll, cancellation support.</p> </li> <li> <p>Reactive programming ile event stream nas\u0131l handle edilir?</p> </li> <li>Cevap: Observable patterns, event streams, backpressure handling.</li> </ol>"},{"location":"mid-level/async-operations/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/async-operations/#1-asyncawait-usage","title":"1. Async/Await Usage","text":"<ul> <li>Use ConfigureAwait(false) appropriately</li> <li>Handle exceptions properly</li> <li>Implement cancellation support</li> <li>Avoid async void methods</li> <li>Use async all the way</li> </ul>"},{"location":"mid-level/async-operations/#2-background-job-management","title":"2. Background Job Management","text":"<ul> <li>Implement proper retry mechanisms</li> <li>Handle job failures gracefully</li> <li>Monitor job execution</li> <li>Implement job persistence</li> <li>Plan for scalability</li> </ul>"},{"location":"mid-level/async-operations/#3-task-coordination","title":"3. Task Coordination","text":"<ul> <li>Use appropriate task composition</li> <li>Handle task exceptions</li> <li>Implement cancellation support</li> <li>Monitor task performance</li> <li>Plan for resource limits</li> </ul>"},{"location":"mid-level/async-operations/#4-reactive-programming","title":"4. Reactive Programming","text":"<ul> <li>Understand backpressure</li> <li>Handle errors appropriately</li> <li>Use appropriate operators</li> <li>Monitor stream performance</li> <li>Plan for memory usage</li> </ul>"},{"location":"mid-level/async-operations/#5-performance-optimization","title":"5. Performance Optimization","text":"<ul> <li>Minimize blocking operations</li> <li>Use appropriate concurrency levels</li> <li>Monitor resource usage</li> <li>Implement caching strategies</li> <li>Plan for scalability</li> </ul>"},{"location":"mid-level/async-operations/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Async Programming</li> <li>Hangfire Documentation</li> <li>Quartz.NET Documentation</li> <li>Task Parallel Library</li> <li>Reactive Extensions</li> <li>Background Services </li> </ul>"},{"location":"mid-level/async-operations/background-jobs/","title":"Background Jobs","text":""},{"location":"mid-level/async-operations/background-jobs/#giris","title":"Giri\u015f","text":"<p>Background Jobs (Arka Plan \u0130\u015fleri), uygulaman\u0131n ana i\u015f ak\u0131\u015f\u0131ndan ba\u011f\u0131ms\u0131z olarak \u00e7al\u0131\u015fan, genellikle zaman uyumsuz (asynchronous) ve uzun s\u00fcren i\u015flemlerdir. .NET uygulamalar\u0131nda e-posta g\u00f6nderimi, rapor olu\u015fturma, veri i\u015fleme gibi i\u015flemler i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"mid-level/async-operations/background-jobs/#background-jobsn-onemi","title":"Background Jobs'\u0131n \u00d6nemi","text":"<ol> <li>Performans</li> <li>Ana i\u015f ak\u0131\u015f\u0131n\u0131 bloklamama</li> <li>Kaynak kullan\u0131m\u0131 optimizasyonu</li> <li>Y\u00fck dengeleme</li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li> <p>G\u00fcvenilirlik</p> </li> <li>Hata y\u00f6netimi</li> <li>Yeniden deneme mekanizmalar\u0131</li> <li>\u0130\u015f durumu takibi</li> <li> <p>\u0130\u015flem izlenebilirli\u011fi</p> </li> <li> <p>Kullan\u0131c\u0131 Deneyimi</p> </li> <li>H\u0131zl\u0131 yan\u0131t s\u00fcreleri</li> <li>Asenkron i\u015flem bildirimleri</li> <li>\u0130\u015flem durumu takibi</li> <li>Kullan\u0131c\u0131 geri bildirimi</li> </ol>"},{"location":"mid-level/async-operations/background-jobs/#background-jobs-araclar","title":"Background Jobs Ara\u00e7lar\u0131","text":"<ol> <li>Hangfire</li> <li>Kolay kurulum</li> <li>Zengin \u00f6zellik seti</li> <li>Dashboard</li> <li> <p>Persistence deste\u011fi</p> </li> <li> <p>Quartz.NET</p> </li> <li>G\u00fc\u00e7l\u00fc zamanlama</li> <li>Cluster deste\u011fi</li> <li>\u0130\u015flem y\u00f6netimi</li> <li> <p>Plugin mimarisi</p> </li> <li> <p>Azure WebJobs</p> </li> <li>Azure entegrasyonu</li> <li>Otomatik \u00f6l\u00e7eklendirme</li> <li>Monitoring</li> <li>Logging</li> </ol>"},{"location":"mid-level/async-operations/background-jobs/#background-jobs-kullanm","title":"Background Jobs Kullan\u0131m\u0131","text":"<ol> <li> <p>Hangfire Kurulumu <pre><code>// NuGet paketleri:\n// Hangfire\n// Hangfire.AspNetCore\n// Hangfire.SqlServer\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddHangfire(config =&gt; config\n            .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)\n            .UseSimpleAssemblyNameTypeSerializer()\n            .UseRecommendedSerializerSettings()\n            .UseSqlServerStorage(Configuration.GetConnectionString(\"HangfireConnection\")));\n\n        services.AddHangfireServer();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseHangfireDashboard();\n    }\n}\n</code></pre></p> </li> <li> <p>Background Job Olu\u015fturma <pre><code>public class EmailService\n{\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public EmailService(IBackgroundJobClient backgroundJobClient)\n    {\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void SendEmail(string to, string subject, string body)\n    {\n        _backgroundJobClient.Enqueue(() =&gt; SendEmailAsync(to, subject, body));\n    }\n\n    public async Task SendEmailAsync(string to, string subject, string body)\n    {\n        // E-posta g\u00f6nderme i\u015flemi\n        await Task.Delay(1000); // Sim\u00fclasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Zamanlanm\u0131\u015f Job <pre><code>public class ReportService\n{\n    private readonly IRecurringJobManager _recurringJobManager;\n\n    public ReportService(IRecurringJobManager recurringJobManager)\n    {\n        _recurringJobManager = recurringJobManager;\n    }\n\n    public void ScheduleDailyReport()\n    {\n        _recurringJobManager.AddOrUpdate(\n            \"daily-report\",\n            () =&gt; GenerateDailyReportAsync(),\n            Cron.Daily);\n    }\n\n    public async Task GenerateDailyReportAsync()\n    {\n        // G\u00fcnl\u00fck rapor olu\u015fturma i\u015flemi\n        await Task.Delay(5000); // Sim\u00fclasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Job \u0130zleme <pre><code>public class JobMonitor\n{\n    private readonly IMonitoringApi _monitoringApi;\n\n    public JobMonitor(IMonitoringApi monitoringApi)\n    {\n        _monitoringApi = monitoringApi;\n    }\n\n    public async Task&lt;JobStatus&gt; GetJobStatus(string jobId)\n    {\n        var job = await _monitoringApi.JobDetails(jobId);\n        return new JobStatus\n        {\n            State = job.History[0].StateName,\n            CreatedAt = job.CreatedAt,\n            StartedAt = job.StartedAt,\n            CompletedAt = job.CompletedAt\n        };\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/async-operations/background-jobs/#background-jobs-best-practices","title":"Background Jobs Best Practices","text":"<ol> <li>Job Tasar\u0131m\u0131</li> <li>Idempotent i\u015flemler</li> <li>K\u00fc\u00e7\u00fck ve odakl\u0131 joblar</li> <li>Hata y\u00f6netimi</li> <li> <p>\u0130\u015flem durumu takibi</p> </li> <li> <p>Performans</p> </li> <li>Kaynak kullan\u0131m\u0131 optimizasyonu</li> <li>Batch i\u015flemler</li> <li>\u00d6l\u00e7eklendirme stratejileri</li> <li> <p>Queue y\u00f6netimi</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Eri\u015fim kontrol\u00fc</li> <li>Veri g\u00fcvenli\u011fi</li> <li>Audit logging</li> <li> <p>Job do\u011frulama</p> </li> <li> <p>Monitoring</p> </li> <li>Job durumu takibi</li> <li>Hata izleme</li> <li>Performans metrikleri</li> <li>Alerting</li> </ol>"},{"location":"mid-level/async-operations/background-jobs/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/async-operations/background-jobs/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Background Jobs nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Background Jobs, uygulaman\u0131n ana i\u015f ak\u0131\u015f\u0131ndan ba\u011f\u0131ms\u0131z olarak \u00e7al\u0131\u015fan, genellikle zaman uyumsuz ve uzun s\u00fcren i\u015flemlerdir. E-posta g\u00f6nderimi, rapor olu\u015fturma, veri i\u015fleme gibi i\u015flemler i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Pop\u00fcler Background Jobs ara\u00e7lar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Hangfire</li> <li>Quartz.NET</li> <li>Azure WebJobs</li> <li>MassTransit</li> <li>NServiceBus</li> </ul> </li> <li> <p>Background Jobs'\u0131n avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performans optimizasyonu</li> <li>G\u00fcvenilirlik</li> <li>Kullan\u0131c\u0131 deneyimi</li> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Kaynak y\u00f6netimi</li> </ul> </li> <li> <p>Idempotent i\u015flem nedir?</p> </li> <li> <p>Cevap: Idempotent i\u015flem, ayn\u0131 i\u015flemin birden fazla kez yap\u0131lmas\u0131n\u0131n sonucu de\u011fi\u015ftirmemesidir. Background Jobs'da \u00f6nemli bir kavramd\u0131r.</p> </li> <li> <p>Job durumu nedir?</p> </li> <li>Cevap: Job durumu, bir background job'\u0131n ya\u015fam d\u00f6ng\u00fcs\u00fcndeki mevcut durumunu temsil eder (\u00f6rn. Scheduled, Processing, Succeeded, Failed).</li> </ol>"},{"location":"mid-level/async-operations/background-jobs/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Hangfire nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddHangfire(config =&gt; config\n            .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)\n            .UseSimpleAssemblyNameTypeSerializer()\n            .UseRecommendedSerializerSettings()\n            .UseSqlServerStorage(Configuration.GetConnectionString(\"HangfireConnection\")));\n\n        services.AddHangfireServer();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseHangfireDashboard();\n    }\n}\n</code></pre></p> </li> <li> <p>Background job nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class EmailService\n{\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public EmailService(IBackgroundJobClient backgroundJobClient)\n    {\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void SendEmail(string to, string subject, string body)\n    {\n        _backgroundJobClient.Enqueue(() =&gt; SendEmailAsync(to, subject, body));\n    }\n}\n</code></pre></p> </li> <li> <p>Zamanlanm\u0131\u015f job nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class ReportService\n{\n    private readonly IRecurringJobManager _recurringJobManager;\n\n    public ReportService(IRecurringJobManager recurringJobManager)\n    {\n        _recurringJobManager = recurringJobManager;\n    }\n\n    public void ScheduleDailyReport()\n    {\n        _recurringJobManager.AddOrUpdate(\n            \"daily-report\",\n            () =&gt; GenerateDailyReportAsync(),\n            Cron.Daily);\n    }\n}\n</code></pre></p> </li> <li> <p>Job izleme nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class JobMonitor\n{\n    private readonly IMonitoringApi _monitoringApi;\n\n    public JobMonitor(IMonitoringApi monitoringApi)\n    {\n        _monitoringApi = monitoringApi;\n    }\n\n    public async Task&lt;JobStatus&gt; GetJobStatus(string jobId)\n    {\n        var job = await _monitoringApi.JobDetails(jobId);\n        return new JobStatus\n        {\n            State = job.History[0].StateName,\n            CreatedAt = job.CreatedAt,\n            StartedAt = job.StartedAt,\n            CompletedAt = job.CompletedAt\n        };\n    }\n}\n</code></pre></p> </li> <li> <p>Job hata y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class JobErrorHandler\n{\n    private readonly ILogger _logger;\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public JobErrorHandler(ILogger&lt;JobErrorHandler&gt; logger, IBackgroundJobClient backgroundJobClient)\n    {\n        _logger = logger;\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void HandleJobError(string jobId, Exception ex)\n    {\n        _logger.LogError(ex, \"Job {JobId} failed\", jobId);\n\n        // Yeniden deneme stratejisi\n        if (ex is TransientException)\n        {\n            _backgroundJobClient.Schedule(() =&gt; RetryJob(jobId), TimeSpan.FromMinutes(5));\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/async-operations/background-jobs/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Background Jobs performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Job par\u00e7alama</li> <li>Batch i\u015flemler</li> <li>Queue y\u00f6netimi</li> <li>Kaynak optimizasyonu</li> <li>\u00d6l\u00e7eklendirme stratejileri</li> </ul> </li> <li> <p>Background Jobs g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Eri\u015fim kontrol\u00fc</li> <li>Veri \u015fifreleme</li> <li>Job do\u011frulama</li> <li>Audit logging</li> <li>G\u00fcvenlik izleme</li> </ul> </li> <li> <p>Background Jobs ile distributed sistemler nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Cluster yap\u0131land\u0131rmas\u0131</li> <li>Job da\u011f\u0131t\u0131m\u0131</li> <li>Load balancing</li> <li>Failover stratejileri</li> <li>Consistency y\u00f6netimi</li> </ul> </li> <li> <p>Background Jobs ile monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Job durumu takibi</li> <li>Performans metrikleri</li> <li>Hata izleme</li> <li>Alerting</li> <li>Dashboard tasar\u0131m\u0131</li> </ul> </li> <li> <p>Background Jobs ile scaling nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Horizontal scaling</li> <li>Vertical scaling</li> <li>Auto-scaling</li> <li>Load balancing</li> <li>Resource allocation </li> </ul> </li> </ol>"},{"location":"mid-level/async-operations/hangfire/","title":"Hangfire","text":""},{"location":"mid-level/async-operations/hangfire/#giris","title":"Giri\u015f","text":"<p>Hangfire, .NET uygulamalar\u0131 i\u00e7in a\u00e7\u0131k kaynakl\u0131 bir background job processing framework'\u00fcd\u00fcr. Zamanlanm\u0131\u015f i\u015fler, tekrarlayan g\u00f6revler ve arka plan i\u015flemleri i\u00e7in g\u00fcvenilir ve \u00f6l\u00e7eklenebilir bir \u00e7\u00f6z\u00fcm sunar.</p>"},{"location":"mid-level/async-operations/hangfire/#hangfiren-onemi","title":"Hangfire'\u0131n \u00d6nemi","text":"<ol> <li>G\u00fcvenilirlik</li> <li>\u0130\u015flem kal\u0131c\u0131l\u0131\u011f\u0131</li> <li>Otomatik yeniden deneme</li> <li>Hata y\u00f6netimi</li> <li> <p>\u0130\u015flem izlenebilirli\u011fi</p> </li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li>\u00c7oklu sunucu deste\u011fi</li> <li>Y\u00fck dengeleme</li> <li>Queue y\u00f6netimi</li> <li> <p>Cluster deste\u011fi</p> </li> <li> <p>Kullan\u0131m Kolayl\u0131\u011f\u0131</p> </li> <li>Kolay kurulum</li> <li>Zengin API</li> <li>Dashboard</li> <li>Detayl\u0131 dok\u00fcmantasyon</li> </ol>"},{"location":"mid-level/async-operations/hangfire/#hangfire-ozellikleri","title":"Hangfire \u00d6zellikleri","text":"<ol> <li>Job Tipleri</li> <li>Fire-and-forget jobs</li> <li>Delayed jobs</li> <li>Recurring jobs</li> <li>Continuations</li> <li> <p>Batches</p> </li> <li> <p>Storage Se\u00e7enekleri</p> </li> <li>SQL Server</li> <li>Redis</li> <li>MongoDB</li> <li>PostgreSQL</li> <li> <p>MSMQ</p> </li> <li> <p>Monitoring</p> </li> <li>Web Dashboard</li> <li>Job durumu takibi</li> <li>Performans metrikleri</li> <li>Hata izleme</li> </ol>"},{"location":"mid-level/async-operations/hangfire/#hangfire-kullanm","title":"Hangfire Kullan\u0131m\u0131","text":"<ol> <li> <p>Temel Kurulum <pre><code>// NuGet paketleri:\n// Hangfire\n// Hangfire.AspNetCore\n// Hangfire.SqlServer\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddHangfire(config =&gt; config\n            .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)\n            .UseSimpleAssemblyNameTypeSerializer()\n            .UseRecommendedSerializerSettings()\n            .UseSqlServerStorage(Configuration.GetConnectionString(\"HangfireConnection\")));\n\n        services.AddHangfireServer();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseHangfireDashboard();\n    }\n}\n</code></pre></p> </li> <li> <p>Fire-and-Forget Job <pre><code>public class EmailService\n{\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public EmailService(IBackgroundJobClient backgroundJobClient)\n    {\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void SendEmail(string to, string subject, string body)\n    {\n        _backgroundJobClient.Enqueue(() =&gt; SendEmailAsync(to, subject, body));\n    }\n\n    public async Task SendEmailAsync(string to, string subject, string body)\n    {\n        // E-posta g\u00f6nderme i\u015flemi\n        await Task.Delay(1000); // Sim\u00fclasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Delayed Job <pre><code>public class NotificationService\n{\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public NotificationService(IBackgroundJobClient backgroundJobClient)\n    {\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void ScheduleNotification(string userId, string message, TimeSpan delay)\n    {\n        _backgroundJobClient.Schedule(\n            () =&gt; SendNotificationAsync(userId, message),\n            delay);\n    }\n\n    public async Task SendNotificationAsync(string userId, string message)\n    {\n        // Bildirim g\u00f6nderme i\u015flemi\n        await Task.Delay(1000); // Sim\u00fclasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Recurring Job <pre><code>public class ReportService\n{\n    private readonly IRecurringJobManager _recurringJobManager;\n\n    public ReportService(IRecurringJobManager recurringJobManager)\n    {\n        _recurringJobManager = recurringJobManager;\n    }\n\n    public void ScheduleDailyReport()\n    {\n        _recurringJobManager.AddOrUpdate(\n            \"daily-report\",\n            () =&gt; GenerateDailyReportAsync(),\n            Cron.Daily);\n    }\n\n    public async Task GenerateDailyReportAsync()\n    {\n        // G\u00fcnl\u00fck rapor olu\u015fturma i\u015flemi\n        await Task.Delay(5000); // Sim\u00fclasyon\n    }\n}\n</code></pre></p> </li> <li> <p>Job Continuations <pre><code>public class OrderService\n{\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public OrderService(IBackgroundJobClient backgroundJobClient)\n    {\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void ProcessOrder(string orderId)\n    {\n        var jobId = _backgroundJobClient.Enqueue(() =&gt; ValidateOrderAsync(orderId));\n        _backgroundJobClient.ContinueWith(jobId, () =&gt; ProcessPaymentAsync(orderId));\n        _backgroundJobClient.ContinueWith(jobId, () =&gt; SendConfirmationAsync(orderId));\n    }\n\n    public async Task ValidateOrderAsync(string orderId)\n    {\n        // Sipari\u015f do\u011frulama\n        await Task.Delay(1000);\n    }\n\n    public async Task ProcessPaymentAsync(string orderId)\n    {\n        // \u00d6deme i\u015flemi\n        await Task.Delay(1000);\n    }\n\n    public async Task SendConfirmationAsync(string orderId)\n    {\n        // Onay g\u00f6nderme\n        await Task.Delay(1000);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/async-operations/hangfire/#hangfire-best-practices","title":"Hangfire Best Practices","text":"<ol> <li>Job Tasar\u0131m\u0131</li> <li>Idempotent i\u015flemler</li> <li>K\u00fc\u00e7\u00fck ve odakl\u0131 joblar</li> <li>Hata y\u00f6netimi</li> <li> <p>\u0130\u015flem durumu takibi</p> </li> <li> <p>Performans</p> </li> <li>Queue y\u00f6netimi</li> <li>Worker say\u0131s\u0131 optimizasyonu</li> <li>Batch i\u015flemler</li> <li> <p>Kaynak kullan\u0131m\u0131</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Dashboard eri\u015fim kontrol\u00fc</li> <li>Job do\u011frulama</li> <li>Veri g\u00fcvenli\u011fi</li> <li> <p>Audit logging</p> </li> <li> <p>Monitoring</p> </li> <li>Job durumu takibi</li> <li>Performans metrikleri</li> <li>Hata izleme</li> <li>Alerting</li> </ol>"},{"location":"mid-level/async-operations/hangfire/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/async-operations/hangfire/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Hangfire nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Hangfire, .NET uygulamalar\u0131 i\u00e7in a\u00e7\u0131k kaynakl\u0131 bir background job processing framework'\u00fcd\u00fcr. Zamanlanm\u0131\u015f i\u015fler, tekrarlayan g\u00f6revler ve arka plan i\u015flemleri i\u00e7in g\u00fcvenilir ve \u00f6l\u00e7eklenebilir bir \u00e7\u00f6z\u00fcm sunar.</p> </li> <li> <p>Hangfire'\u0131n temel \u00f6zellikleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Fire-and-forget jobs</li> <li>Delayed jobs</li> <li>Recurring jobs</li> <li>Continuations</li> <li>Batches</li> <li>Web Dashboard</li> <li>\u00c7oklu storage deste\u011fi</li> </ul> </li> <li> <p>Hangfire'\u0131n avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>G\u00fcvenilirlik</li> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Kullan\u0131m kolayl\u0131\u011f\u0131</li> <li>Zengin \u00f6zellik seti</li> <li>Detayl\u0131 dok\u00fcmantasyon</li> </ul> </li> <li> <p>Hangfire'da job tipleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Fire-and-forget jobs: Hemen \u00e7al\u0131\u015ft\u0131r\u0131lan i\u015fler</li> <li>Delayed jobs: Belirli bir s\u00fcre sonra \u00e7al\u0131\u015ft\u0131r\u0131lan i\u015fler</li> <li>Recurring jobs: Periyodik olarak \u00e7al\u0131\u015ft\u0131r\u0131lan i\u015fler</li> <li>Continuations: Ba\u015fka bir job'\u0131n tamamlanmas\u0131na ba\u011fl\u0131 i\u015fler</li> <li>Batches: Toplu i\u015flemler</li> </ul> </li> <li> <p>Hangfire'da storage se\u00e7enekleri nelerdir?</p> </li> <li>Cevap:<ul> <li>SQL Server</li> <li>Redis</li> <li>MongoDB</li> <li>PostgreSQL</li> <li>MSMQ</li> </ul> </li> </ol>"},{"location":"mid-level/async-operations/hangfire/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Hangfire nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddHangfire(config =&gt; config\n            .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)\n            .UseSimpleAssemblyNameTypeSerializer()\n            .UseRecommendedSerializerSettings()\n            .UseSqlServerStorage(Configuration.GetConnectionString(\"HangfireConnection\")));\n\n        services.AddHangfireServer();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseHangfireDashboard();\n    }\n}\n</code></pre></p> </li> <li> <p>Fire-and-forget job nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class EmailService\n{\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public EmailService(IBackgroundJobClient backgroundJobClient)\n    {\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void SendEmail(string to, string subject, string body)\n    {\n        _backgroundJobClient.Enqueue(() =&gt; SendEmailAsync(to, subject, body));\n    }\n}\n</code></pre></p> </li> <li> <p>Recurring job nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class ReportService\n{\n    private readonly IRecurringJobManager _recurringJobManager;\n\n    public ReportService(IRecurringJobManager recurringJobManager)\n    {\n        _recurringJobManager = recurringJobManager;\n    }\n\n    public void ScheduleDailyReport()\n    {\n        _recurringJobManager.AddOrUpdate(\n            \"daily-report\",\n            () =&gt; GenerateDailyReportAsync(),\n            Cron.Daily);\n    }\n}\n</code></pre></p> </li> <li> <p>Job continuations nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class OrderService\n{\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public OrderService(IBackgroundJobClient backgroundJobClient)\n    {\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void ProcessOrder(string orderId)\n    {\n        var jobId = _backgroundJobClient.Enqueue(() =&gt; ValidateOrderAsync(orderId));\n        _backgroundJobClient.ContinueWith(jobId, () =&gt; ProcessPaymentAsync(orderId));\n        _backgroundJobClient.ContinueWith(jobId, () =&gt; SendConfirmationAsync(orderId));\n    }\n}\n</code></pre></p> </li> <li> <p>Hangfire'da hata y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class JobErrorHandler\n{\n    private readonly ILogger _logger;\n    private readonly IBackgroundJobClient _backgroundJobClient;\n\n    public JobErrorHandler(ILogger&lt;JobErrorHandler&gt; logger, IBackgroundJobClient backgroundJobClient)\n    {\n        _logger = logger;\n        _backgroundJobClient = backgroundJobClient;\n    }\n\n    public void HandleJobError(string jobId, Exception ex)\n    {\n        _logger.LogError(ex, \"Job {JobId} failed\", jobId);\n\n        if (ex is TransientException)\n        {\n            _backgroundJobClient.Schedule(() =&gt; RetryJob(jobId), TimeSpan.FromMinutes(5));\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/async-operations/hangfire/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Hangfire'da performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Queue y\u00f6netimi</li> <li>Worker say\u0131s\u0131 optimizasyonu</li> <li>Batch i\u015flemler</li> <li>Kaynak kullan\u0131m\u0131</li> <li>Storage optimizasyonu</li> </ul> </li> <li> <p>Hangfire'da g\u00fcvenlik nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Dashboard eri\u015fim kontrol\u00fc</li> <li>Job do\u011frulama</li> <li>Veri g\u00fcvenli\u011fi</li> <li>Audit logging</li> <li>G\u00fcvenlik izleme</li> </ul> </li> <li> <p>Hangfire ile distributed sistemler nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>\u00c7oklu sunucu yap\u0131land\u0131rmas\u0131</li> <li>Queue y\u00f6netimi</li> <li>Load balancing</li> <li>Failover stratejileri</li> <li>Consistency y\u00f6netimi</li> </ul> </li> <li> <p>Hangfire'da monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Web Dashboard kullan\u0131m\u0131</li> <li>Job durumu takibi</li> <li>Performans metrikleri</li> <li>Hata izleme</li> <li>Alerting</li> </ul> </li> <li> <p>Hangfire'da scaling nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Worker say\u0131s\u0131 art\u0131rma</li> <li>Queue say\u0131s\u0131 art\u0131rma</li> <li>Storage optimizasyonu</li> <li>Load balancing</li> <li>Resource allocation </li> </ul> </li> </ol>"},{"location":"mid-level/async-operations/reactive-programming/","title":"Reactive Programming","text":""},{"location":"mid-level/async-operations/reactive-programming/#giris","title":"Giri\u015f","text":"<p>Reactive Programming, veri ak\u0131\u015flar\u0131 ve de\u011fi\u015fiklik yay\u0131l\u0131m\u0131na dayal\u0131 bir programlama paradigmas\u0131d\u0131r. .NET d\u00fcnyas\u0131nda Reactive Extensions (Rx.NET) ile uygulan\u0131r ve asenkron veri ak\u0131\u015flar\u0131n\u0131 y\u00f6netmek i\u00e7in g\u00fc\u00e7l\u00fc bir ara\u00e7 seti sunar.</p>"},{"location":"mid-level/async-operations/reactive-programming/#reactive-programmingin-onemi","title":"Reactive Programming'in \u00d6nemi","text":"<ol> <li>Asenkron Veri Y\u00f6netimi</li> <li>Veri ak\u0131\u015f\u0131 kontrol\u00fc</li> <li>Olay tabanl\u0131 programlama</li> <li>Zaman uyumsuz i\u015flemler</li> <li> <p>Ger\u00e7ek zamanl\u0131 veri i\u015fleme</p> </li> <li> <p>Kod Kalitesi</p> </li> <li>Daha temiz kod yap\u0131s\u0131</li> <li>Daha az boilerplate kod</li> <li>Daha iyi hata y\u00f6netimi</li> <li> <p>Daha kolay bak\u0131m</p> </li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li>Y\u00fcksek performans</li> <li>Kaynak optimizasyonu</li> <li>Paralel i\u015fleme</li> <li>Da\u011f\u0131t\u0131k sistemler</li> </ol>"},{"location":"mid-level/async-operations/reactive-programming/#reactive-programming-ozellikleri","title":"Reactive Programming \u00d6zellikleri","text":"<ol> <li>Observable Pattern</li> <li>Veri kayna\u011f\u0131</li> <li>Olay yay\u0131nlama</li> <li>Abonelik y\u00f6netimi</li> <li> <p>Veri d\u00f6n\u00fc\u015f\u00fcm\u00fc</p> </li> <li> <p>Operat\u00f6rler</p> </li> <li>Filtreleme</li> <li>D\u00f6n\u00fc\u015ft\u00fcrme</li> <li>Birle\u015ftirme</li> <li> <p>Zamanlama</p> </li> <li> <p>Schedulers</p> </li> <li>Thread y\u00f6netimi</li> <li>Zamanlama</li> <li>E\u015fzamanl\u0131l\u0131k kontrol\u00fc</li> <li>Kaynak y\u00f6netimi</li> </ol>"},{"location":"mid-level/async-operations/reactive-programming/#reactive-programming-kullanm","title":"Reactive Programming Kullan\u0131m\u0131","text":"<ol> <li> <p>Temel Observable <pre><code>public class DataProducer\n{\n    public IObservable&lt;int&gt; CreateObservable()\n    {\n        return Observable.Create&lt;int&gt;(observer =&gt;\n        {\n            // Veri \u00fcretme\n            observer.OnNext(1);\n            observer.OnNext(2);\n            observer.OnNext(3);\n            observer.OnCompleted();\n\n            return Disposable.Empty;\n        });\n    }\n\n    public void SubscribeToObservable()\n    {\n        var observable = CreateObservable();\n\n        var subscription = observable.Subscribe(\n            value =&gt; Console.WriteLine($\"Value: {value}\"),\n            error =&gt; Console.WriteLine($\"Error: {error}\"),\n            () =&gt; Console.WriteLine(\"Completed\")\n        );\n    }\n}\n</code></pre></p> </li> <li> <p>Event Stream <pre><code>public class EventProcessor\n{\n    public IObservable&lt;MouseEvent&gt; CreateMouseEventStream()\n    {\n        return Observable.FromEventPattern&lt;MouseEventHandler, MouseEventArgs&gt;(\n            h =&gt; MouseMove += h,\n            h =&gt; MouseMove -= h\n        ).Select(e =&gt; new MouseEvent(e.EventArgs.X, e.EventArgs.Y));\n    }\n\n    public void ProcessMouseEvents()\n    {\n        var mouseStream = CreateMouseEventStream();\n\n        var subscription = mouseStream\n            .Throttle(TimeSpan.FromMilliseconds(250))\n            .Subscribe(e =&gt; ProcessEvent(e));\n    }\n\n    private void ProcessEvent(MouseEvent e)\n    {\n        // Olay i\u015fleme\n    }\n}\n</code></pre></p> </li> <li> <p>Veri D\u00f6n\u00fc\u015f\u00fcm\u00fc <pre><code>public class DataTransformer\n{\n    public IObservable&lt;string&gt; TransformData(IObservable&lt;int&gt; source)\n    {\n        return source\n            .Where(x =&gt; x &gt; 0)\n            .Select(x =&gt; x * 2)\n            .Select(x =&gt; $\"Transformed: {x}\");\n    }\n\n    public void ProcessTransformedData()\n    {\n        var source = Observable.Range(1, 5);\n        var transformed = TransformData(source);\n\n        transformed.Subscribe(Console.WriteLine);\n    }\n}\n</code></pre></p> </li> <li> <p>Zamanlama \u0130\u015flemleri <pre><code>public class TimeBasedProcessor\n{\n    public IObservable&lt;int&gt; CreateTimedSequence()\n    {\n        return Observable.Interval(TimeSpan.FromSeconds(1))\n            .Select(x =&gt; (int)x)\n            .Take(5);\n    }\n\n    public void ProcessTimedSequence()\n    {\n        var sequence = CreateTimedSequence();\n\n        sequence.Subscribe(\n            x =&gt; Console.WriteLine($\"Tick: {x}\"),\n            () =&gt; Console.WriteLine(\"Sequence completed\")\n        );\n    }\n}\n</code></pre></p> </li> <li> <p>Hata Y\u00f6netimi <pre><code>public class ErrorHandler\n{\n    public IObservable&lt;int&gt; CreateErrorProneStream()\n    {\n        return Observable.Create&lt;int&gt;(observer =&gt;\n        {\n            try\n            {\n                observer.OnNext(1);\n                throw new Exception(\"Simulated error\");\n                observer.OnNext(2);\n            }\n            catch (Exception ex)\n            {\n                observer.OnError(ex);\n            }\n            return Disposable.Empty;\n        });\n    }\n\n    public void HandleErrors()\n    {\n        var stream = CreateErrorProneStream();\n\n        stream\n            .Catch&lt;int, Exception&gt;(ex =&gt;\n            {\n                Console.WriteLine($\"Error caught: {ex.Message}\");\n                return Observable.Return(-1);\n            })\n            .Subscribe(\n                x =&gt; Console.WriteLine($\"Value: {x}\"),\n                ex =&gt; Console.WriteLine($\"Error: {ex}\"),\n                () =&gt; Console.WriteLine(\"Completed\")\n            );\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/async-operations/reactive-programming/#reactive-programming-best-practices","title":"Reactive Programming Best Practices","text":"<ol> <li>Stream Tasar\u0131m\u0131</li> <li>Tek sorumluluk prensibi</li> <li>\u0130simlendirme kurallar\u0131</li> <li>Hata y\u00f6netimi</li> <li> <p>Kaynak temizleme</p> </li> <li> <p>Performans</p> </li> <li>Backpressure y\u00f6netimi</li> <li>Buffer optimizasyonu</li> <li>Memory kullan\u0131m\u0131</li> <li> <p>CPU kullan\u0131m\u0131</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Thread safety</li> <li>Race condition \u00f6nleme</li> <li>Deadlock \u00f6nleme</li> <li> <p>Kaynak y\u00f6netimi</p> </li> <li> <p>Monitoring</p> </li> <li>Stream durumu</li> <li>Performans metrikleri</li> <li>Hata izleme</li> <li>Kaynak kullan\u0131m\u0131</li> </ol>"},{"location":"mid-level/async-operations/reactive-programming/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/async-operations/reactive-programming/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Reactive Programming nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Reactive Programming, veri ak\u0131\u015flar\u0131 ve de\u011fi\u015fiklik yay\u0131l\u0131m\u0131na dayal\u0131 bir programlama paradigmas\u0131d\u0131r. Asenkron veri ak\u0131\u015flar\u0131n\u0131 y\u00f6netmek, olay tabanl\u0131 programlama yapmak ve ger\u00e7ek zamanl\u0131 veri i\u015flemek i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Reactive Programming'in temel \u00f6zellikleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Observable pattern</li> <li>Operat\u00f6rler</li> <li>Schedulers</li> <li>Asenkron veri ak\u0131\u015f\u0131</li> <li>Olay y\u00f6netimi</li> </ul> </li> <li> <p>Reactive Programming'in avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Asenkron veri y\u00f6netimi</li> <li>Kod kalitesi</li> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Performans</li> <li>Esneklik</li> </ul> </li> <li> <p>Observable ve Observer nedir?</p> </li> <li> <p>Cevap: Observable, veri kayna\u011f\u0131n\u0131 temsil eden ve veri yay\u0131nlayan bir yap\u0131d\u0131r. Observer ise bu verileri alan ve i\u015fleyen yap\u0131d\u0131r. Observer pattern'in bir uygulamas\u0131d\u0131r.</p> </li> <li> <p>Reactive Programming'de operat\u00f6rler nelerdir?</p> </li> <li>Cevap:<ul> <li>Filtreleme operat\u00f6rleri (Where, Filter)</li> <li>D\u00f6n\u00fc\u015ft\u00fcrme operat\u00f6rleri (Select, Map)</li> <li>Birle\u015ftirme operat\u00f6rleri (Merge, Concat)</li> <li>Zamanlama operat\u00f6rleri (Delay, Throttle)</li> </ul> </li> </ol>"},{"location":"mid-level/async-operations/reactive-programming/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Observable nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>public class ObservableCreator\n{\n    public IObservable&lt;int&gt; CreateObservable()\n    {\n        return Observable.Create&lt;int&gt;(observer =&gt;\n        {\n            observer.OnNext(1);\n            observer.OnNext(2);\n            observer.OnCompleted();\n            return Disposable.Empty;\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Event stream nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class EventStreamCreator\n{\n    public IObservable&lt;MouseEvent&gt; CreateMouseEventStream()\n    {\n        return Observable.FromEventPattern&lt;MouseEventHandler, MouseEventArgs&gt;(\n            h =&gt; MouseMove += h,\n            h =&gt; MouseMove -= h\n        ).Select(e =&gt; new MouseEvent(e.EventArgs.X, e.EventArgs.Y));\n    }\n}\n</code></pre></p> </li> <li> <p>Veri d\u00f6n\u00fc\u015f\u00fcm\u00fc nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class DataTransformer\n{\n    public IObservable&lt;string&gt; TransformData(IObservable&lt;int&gt; source)\n    {\n        return source\n            .Where(x =&gt; x &gt; 0)\n            .Select(x =&gt; x * 2)\n            .Select(x =&gt; $\"Transformed: {x}\");\n    }\n}\n</code></pre></p> </li> <li> <p>Hata y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class ErrorHandler\n{\n    public void HandleErrors()\n    {\n        var stream = CreateErrorProneStream();\n\n        stream\n            .Catch&lt;int, Exception&gt;(ex =&gt;\n            {\n                Console.WriteLine($\"Error caught: {ex.Message}\");\n                return Observable.Return(-1);\n            })\n            .Subscribe(\n                x =&gt; Console.WriteLine($\"Value: {x}\"),\n                ex =&gt; Console.WriteLine($\"Error: {ex}\"),\n                () =&gt; Console.WriteLine(\"Completed\")\n            );\n    }\n}\n</code></pre></p> </li> <li> <p>Zamanlama i\u015flemleri nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class TimeBasedProcessor\n{\n    public IObservable&lt;int&gt; CreateTimedSequence()\n    {\n        return Observable.Interval(TimeSpan.FromSeconds(1))\n            .Select(x =&gt; (int)x)\n            .Take(5);\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/async-operations/reactive-programming/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Reactive Programming'de performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Backpressure y\u00f6netimi</li> <li>Buffer optimizasyonu</li> <li>Memory kullan\u0131m\u0131</li> <li>CPU kullan\u0131m\u0131</li> <li>Thread pool y\u00f6netimi</li> </ul> </li> <li> <p>Reactive Programming'de memory leak nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Subscription y\u00f6netimi</li> <li>Dispose pattern</li> <li>Weak references</li> <li>Memory profiling</li> <li>Resource cleanup</li> </ul> </li> <li> <p>Reactive Programming ile distributed sistemler nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Stream da\u011f\u0131t\u0131m\u0131</li> <li>Load balancing</li> <li>Failover stratejileri</li> <li>Consistency y\u00f6netimi</li> <li>Monitoring</li> </ul> </li> <li> <p>Reactive Programming'de monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Stream durumu takibi</li> <li>Performans metrikleri</li> <li>Hata izleme</li> <li>Kaynak kullan\u0131m\u0131</li> <li>Profiling</li> </ul> </li> <li> <p>Reactive Programming'de scaling nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Stream par\u00e7alama</li> <li>Paralellik derecesi ayar\u0131</li> <li>Kaynak y\u00f6netimi</li> <li>Load balancing</li> <li>Performance tuning </li> </ul> </li> </ol>"},{"location":"mid-level/async-operations/tpl/","title":"Task Parallel Library (TPL)","text":""},{"location":"mid-level/async-operations/tpl/#giris","title":"Giri\u015f","text":"<p>Task Parallel Library (TPL), .NET uygulamalar\u0131nda paralel programlama ve e\u015fzamanl\u0131l\u0131k i\u00e7in g\u00fc\u00e7l\u00fc bir framework't\u00fcr. Paralel i\u015flemleri kolayla\u015ft\u0131rmak, performans\u0131 art\u0131rmak ve kod karma\u015f\u0131kl\u0131\u011f\u0131n\u0131 azaltmak i\u00e7in tasarlanm\u0131\u015ft\u0131r.</p>"},{"location":"mid-level/async-operations/tpl/#tplin-onemi","title":"TPL'in \u00d6nemi","text":"<ol> <li>Performans</li> <li>\u00c7ok \u00e7ekirdekli i\u015flemcilerden yararlanma</li> <li>Paralel i\u015flem optimizasyonu</li> <li>Kaynak kullan\u0131m\u0131 optimizasyonu</li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li> <p>Kod Kalitesi</p> </li> <li>Daha temiz kod yap\u0131s\u0131</li> <li>Daha az boilerplate kod</li> <li>Daha iyi hata y\u00f6netimi</li> <li> <p>Daha kolay bak\u0131m</p> </li> <li> <p>\u00dcretkenlik</p> </li> <li>Kolay kullan\u0131m</li> <li>Zengin API</li> <li>Entegre hata y\u00f6netimi</li> <li>\u0130leri seviye \u00f6zellikler</li> </ol>"},{"location":"mid-level/async-operations/tpl/#tpl-ozellikleri","title":"TPL \u00d6zellikleri","text":"<ol> <li>Task S\u0131n\u0131f\u0131</li> <li>Asenkron i\u015flemler</li> <li>\u0130ptal deste\u011fi</li> <li>Hata y\u00f6netimi</li> <li> <p>Continuation deste\u011fi</p> </li> <li> <p>Parallel S\u0131n\u0131f\u0131</p> </li> <li>Parallel.For</li> <li>Parallel.ForEach</li> <li>Parallel.Invoke</li> <li> <p>Paralel LINQ (PLINQ)</p> </li> <li> <p>Dataflow K\u00fct\u00fcphanesi</p> </li> <li>Pipeline i\u015flemleri</li> <li>Mesaj ge\u00e7i\u015fi</li> <li>Veri d\u00f6n\u00fc\u015f\u00fcm\u00fc</li> <li>Ak\u0131\u015f kontrol\u00fc</li> </ol>"},{"location":"mid-level/async-operations/tpl/#tpl-kullanm","title":"TPL Kullan\u0131m\u0131","text":"<ol> <li> <p>Task Olu\u015fturma <pre><code>public class DataProcessor\n{\n    public async Task ProcessDataAsync()\n    {\n        // Basit task olu\u015fturma\n        var task = Task.Run(() =&gt; HeavyComputation());\n\n        // Task ile \u00e7al\u0131\u015fma\n        await task;\n\n        // Task sonucu alma\n        var result = await Task.Run(() =&gt; ComputeResult());\n    }\n\n    private void HeavyComputation()\n    {\n        // A\u011f\u0131r hesaplama i\u015flemi\n        Thread.Sleep(1000);\n    }\n\n    private int ComputeResult()\n    {\n        // Sonu\u00e7 hesaplama\n        return 42;\n    }\n}\n</code></pre></p> </li> <li> <p>Task Continuation <pre><code>public class DataProcessor\n{\n    public async Task ProcessWithContinuationAsync()\n    {\n        var task = Task.Run(() =&gt; GetData())\n            .ContinueWith(t =&gt; ProcessData(t.Result))\n            .ContinueWith(t =&gt; SaveData(t.Result));\n\n        await task;\n    }\n\n    private string GetData()\n    {\n        // Veri alma\n        return \"data\";\n    }\n\n    private string ProcessData(string data)\n    {\n        // Veri i\u015fleme\n        return data.ToUpper();\n    }\n\n    private void SaveData(string data)\n    {\n        // Veri kaydetme\n    }\n}\n</code></pre></p> </li> <li> <p>Parallel.For Kullan\u0131m\u0131 <pre><code>public class ParallelProcessor\n{\n    public void ProcessInParallel()\n    {\n        var data = new int[1000];\n\n        Parallel.For(0, data.Length, i =&gt;\n        {\n            data[i] = ComputeValue(i);\n        });\n    }\n\n    private int ComputeValue(int index)\n    {\n        // De\u011fer hesaplama\n        return index * 2;\n    }\n}\n</code></pre></p> </li> <li> <p>Parallel.ForEach Kullan\u0131m\u0131 <pre><code>public class ParallelProcessor\n{\n    public void ProcessCollectionInParallel()\n    {\n        var items = Enumerable.Range(0, 1000).ToList();\n        var results = new ConcurrentBag&lt;int&gt;();\n\n        Parallel.ForEach(items, item =&gt;\n        {\n            var result = ProcessItem(item);\n            results.Add(result);\n        });\n    }\n\n    private int ProcessItem(int item)\n    {\n        // \u00d6\u011fe i\u015fleme\n        return item * 2;\n    }\n}\n</code></pre></p> </li> <li> <p>Dataflow Kullan\u0131m\u0131 <pre><code>public class DataflowProcessor\n{\n    public async Task ProcessWithDataflowAsync()\n    {\n        var transformBlock = new TransformBlock&lt;int, string&gt;(n =&gt;\n        {\n            return n.ToString();\n        });\n\n        var actionBlock = new ActionBlock&lt;string&gt;(s =&gt;\n        {\n            Console.WriteLine(s);\n        });\n\n        transformBlock.LinkTo(actionBlock, new DataflowLinkOptions { PropagateCompletion = true });\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            transformBlock.Post(i);\n        }\n\n        transformBlock.Complete();\n        await actionBlock.Completion;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/async-operations/tpl/#tpl-best-practices","title":"TPL Best Practices","text":"<ol> <li>Task Tasar\u0131m\u0131</li> <li>K\u00fc\u00e7\u00fck ve odakl\u0131 tasklar</li> <li>\u0130ptal deste\u011fi</li> <li>Hata y\u00f6netimi</li> <li> <p>Kaynak temizleme</p> </li> <li> <p>Performans</p> </li> <li>Task boyutu optimizasyonu</li> <li>Paralellik derecesi ayar\u0131</li> <li>Kaynak kullan\u0131m\u0131</li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Thread-safe kod</li> <li>Veri senkronizasyonu</li> <li>Kaynak y\u00f6netimi</li> <li> <p>Hata izolasyonu</p> </li> <li> <p>Monitoring</p> </li> <li>Task durumu takibi</li> <li>Performans metrikleri</li> <li>Hata izleme</li> <li>Kaynak kullan\u0131m\u0131</li> </ol>"},{"location":"mid-level/async-operations/tpl/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/async-operations/tpl/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>TPL nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Task Parallel Library (TPL), .NET uygulamalar\u0131nda paralel programlama ve e\u015fzamanl\u0131l\u0131k i\u00e7in g\u00fc\u00e7l\u00fc bir framework't\u00fcr. Paralel i\u015flemleri kolayla\u015ft\u0131rmak, performans\u0131 art\u0131rmak ve kod karma\u015f\u0131kl\u0131\u011f\u0131n\u0131 azaltmak i\u00e7in tasarlanm\u0131\u015ft\u0131r.</p> </li> <li> <p>TPL'in temel \u00f6zellikleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Task s\u0131n\u0131f\u0131</li> <li>Parallel s\u0131n\u0131f\u0131</li> <li>Dataflow k\u00fct\u00fcphanesi</li> <li>Asenkron programlama deste\u011fi</li> <li>Paralel LINQ</li> </ul> </li> <li> <p>TPL'in avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performans art\u0131\u015f\u0131</li> <li>Kod kalitesi</li> <li>\u00dcretkenlik</li> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Kolay kullan\u0131m</li> </ul> </li> <li> <p>Task ve Thread aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Task, daha y\u00fcksek seviyeli bir soyutlamad\u0131r ve thread havuzunu kullan\u0131r. Thread ise daha d\u00fc\u015f\u00fck seviyeli bir i\u015fletim sistemi kayna\u011f\u0131d\u0131r. Task'lar daha az kaynak kullan\u0131r ve daha kolay y\u00f6netilir.</p> </li> <li> <p>TPL'de task tipleri nelerdir?</p> </li> <li>Cevap:<ul> <li>Task: Genel ama\u00e7l\u0131 task</li> <li>Task: Sonu\u00e7 d\u00f6nd\u00fcren task <li>ValueTask: Hafif task</li> <li>TaskCompletionSource: Manuel task kontrol\u00fc</li>"},{"location":"mid-level/async-operations/tpl/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Task nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>public class TaskCreator\n{\n    public Task CreateTask()\n    {\n        return Task.Run(() =&gt;\n        {\n            // \u0130\u015flem\n        });\n    }\n\n    public Task&lt;int&gt; CreateTaskWithResult()\n    {\n        return Task.Run(() =&gt;\n        {\n            return 42;\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Task continuation nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class TaskContinuation\n{\n    public async Task ProcessWithContinuation()\n    {\n        await Task.Run(() =&gt; GetData())\n            .ContinueWith(t =&gt; ProcessData(t.Result))\n            .ContinueWith(t =&gt; SaveData(t.Result));\n    }\n}\n</code></pre></p> </li> <li> <p>Parallel.For nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class ParallelProcessor\n{\n    public void ProcessInParallel()\n    {\n        var data = new int[1000];\n\n        Parallel.For(0, data.Length, i =&gt;\n        {\n            data[i] = ComputeValue(i);\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Dataflow nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class DataflowProcessor\n{\n    public async Task ProcessWithDataflow()\n    {\n        var transformBlock = new TransformBlock&lt;int, string&gt;(n =&gt; n.ToString());\n        var actionBlock = new ActionBlock&lt;string&gt;(s =&gt; Console.WriteLine(s));\n\n        transformBlock.LinkTo(actionBlock);\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            transformBlock.Post(i);\n        }\n\n        transformBlock.Complete();\n        await actionBlock.Completion;\n    }\n}\n</code></pre></p> </li> <li> <p>TPL'de hata y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class TaskErrorHandler\n{\n    public async Task HandleErrors()\n    {\n        try\n        {\n            await Task.Run(() =&gt; RiskyOperation());\n        }\n        catch (Exception ex)\n        {\n            // Hata y\u00f6netimi\n        }\n    }\n\n    private void RiskyOperation()\n    {\n        // Riskli i\u015flem\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/async-operations/tpl/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>TPL'de performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Task boyutu optimizasyonu</li> <li>Paralellik derecesi ayar\u0131</li> <li>Kaynak kullan\u0131m\u0131</li> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Thread pool y\u00f6netimi</li> </ul> </li> <li> <p>TPL'de deadlock nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Async/await kullan\u0131m\u0131</li> <li>Task.WhenAll kullan\u0131m\u0131</li> <li>Timeout mekanizmalar\u0131</li> <li>Kaynak s\u0131ralamas\u0131</li> <li>Deadlock tespiti</li> </ul> </li> <li> <p>TPL ile distributed sistemler nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Task da\u011f\u0131t\u0131m\u0131</li> <li>Load balancing</li> <li>Failover stratejileri</li> <li>Consistency y\u00f6netimi</li> <li>Monitoring</li> </ul> </li> <li> <p>TPL'de monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Task durumu takibi</li> <li>Performans metrikleri</li> <li>Hata izleme</li> <li>Kaynak kullan\u0131m\u0131</li> <li>Profiling</li> </ul> </li> <li> <p>TPL'de scaling nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Task par\u00e7alama</li> <li>Paralellik derecesi ayar\u0131</li> <li>Kaynak y\u00f6netimi</li> <li>Load balancing</li> <li>Performance tuning </li> </ul> </li> </ol>"},{"location":"mid-level/caching/","title":"Caching Stratejileri","text":""},{"location":"mid-level/caching/#giris","title":"Giri\u015f","text":"<p>Caching stratejileri, modern .NET uygulamalar\u0131nda performans optimizasyonu i\u00e7in kritik \u00f6neme sahiptir. Mid-level geli\u015ftiriciler i\u00e7in caching'in farkl\u0131 t\u00fcrlerini anlamak, uygun caching stratejilerini se\u00e7mek ve implement etmek, production-ready uygulamalar geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, in-memory caching, distributed caching, cache invalidation, cache patterns ve Redis kullan\u0131m\u0131 konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/caching/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/caching/#1-in-memory-caching","title":"1. In-Memory Caching","text":"<p>Application memory'de veri saklama, memory management, ve in-memory cache optimization.</p> <p>\u00d6\u011frenilecekler: - IMemoryCache interface - Memory cache configuration - Cache size management - Memory pressure handling - Cache eviction policies</p>"},{"location":"mid-level/caching/#2-distributed-caching","title":"2. Distributed Caching","text":"<p>Multiple application instances aras\u0131nda cache sharing, cache synchronization, ve distributed cache management.</p> <p>\u00d6\u011frenilecekler: - IDistributedCache interface - Cache serialization - Cache synchronization - Network latency handling - Cache consistency</p>"},{"location":"mid-level/caching/#3-cache-invalidation","title":"3. Cache Invalidation","text":"<p>Cache data freshness management, invalidation strategies, ve cache coherence.</p> <p>\u00d6\u011frenilecekler: - Time-based expiration - Event-based invalidation - Cache dependency invalidation - Manual invalidation - Cache warming strategies</p>"},{"location":"mid-level/caching/#4-cache-patterns","title":"4. Cache Patterns","text":"<p>Common caching patterns, best practices, ve anti-patterns.</p> <p>\u00d6\u011frenilecekler: - Cache-Aside pattern - Write-Through pattern - Write-Behind pattern - Refresh-Ahead pattern - Cache-As-SoF pattern</p>"},{"location":"mid-level/caching/#5-redis-kullanm","title":"5. Redis Kullan\u0131m\u0131","text":"<p>Redis cache server integration, Redis data structures, ve Redis optimization.</p> <p>\u00d6\u011frenilecekler: - Redis connection management - Redis data types - Redis clustering - Redis persistence - Redis performance tuning</p>"},{"location":"mid-level/caching/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/caching/#1-performance-improvement","title":"1. Performance Improvement","text":"<ul> <li>Response time reduction</li> <li>Database load reduction</li> <li>Network latency mitigation</li> <li>Resource utilization optimization</li> </ul>"},{"location":"mid-level/caching/#2-scalability","title":"2. Scalability","text":"<ul> <li>Horizontal scaling support</li> <li>Load distribution</li> <li>Resource sharing</li> <li>Capacity planning</li> </ul>"},{"location":"mid-level/caching/#3-user-experience","title":"3. User Experience","text":"<ul> <li>Faster page loads</li> <li>Responsive applications</li> <li>Reduced waiting times</li> <li>Better user satisfaction</li> </ul>"},{"location":"mid-level/caching/#4-cost-optimization","title":"4. Cost Optimization","text":"<ul> <li>Infrastructure cost reduction</li> <li>Database licensing optimization</li> <li>Network bandwidth savings</li> <li>Resource efficiency</li> </ul>"},{"location":"mid-level/caching/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/caching/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Caching nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Data storage optimization, performance improvement, resource utilization.</p> </li> <li> <p>In-memory vs distributed caching fark\u0131 nedir?</p> </li> <li> <p>Cevap: Memory scope, scalability, consistency, performance characteristics.</p> </li> <li> <p>Cache invalidation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Time-based, event-based, dependency-based, manual invalidation.</p> </li> <li> <p>Cache patterns nelerdir?</p> </li> <li> <p>Cevap: Cache-Aside, Write-Through, Write-Behind, Refresh-Ahead.</p> </li> <li> <p>Redis nedir ve ne i\u00e7in kullan\u0131l\u0131r?</p> </li> <li>Cevap: In-memory data structure store, caching, session storage, message broker.</li> </ol>"},{"location":"mid-level/caching/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Cache hit ratio nas\u0131l optimize edilir?</li> <li> <p>Cevap: Proper key design, cache size optimization, eviction policies.</p> </li> <li> <p>Distributed cache consistency nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: Cache synchronization, invalidation strategies, consistency models.</p> </li> <li> <p>Cache memory pressure nas\u0131l handle edilir?</p> </li> <li> <p>Cevap: Eviction policies, memory limits, cache size management.</p> </li> <li> <p>Redis clustering nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Master-slave replication, sharding, failover strategies.</p> </li> <li> <p>Cache warming nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Pre-loading strategies, background processes, startup optimization.</li> </ol>"},{"location":"mid-level/caching/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/caching/#1-cache-design","title":"1. Cache Design","text":"<ul> <li>Design appropriate cache keys</li> <li>Implement proper expiration policies</li> <li>Use appropriate cache sizes</li> <li>Plan cache eviction strategies</li> <li>Monitor cache performance</li> </ul>"},{"location":"mid-level/caching/#2-cache-invalidation","title":"2. Cache Invalidation","text":"<ul> <li>Implement proper invalidation strategies</li> <li>Use event-based invalidation</li> <li>Handle cache dependencies</li> <li>Implement cache warming</li> <li>Monitor cache coherence</li> </ul>"},{"location":"mid-level/caching/#3-performance-optimization","title":"3. Performance Optimization","text":"<ul> <li>Optimize cache hit ratios</li> <li>Minimize cache misses</li> <li>Use appropriate serialization</li> <li>Implement cache compression</li> <li>Monitor cache latency</li> </ul>"},{"location":"mid-level/caching/#4-scalability","title":"4. Scalability","text":"<ul> <li>Plan for horizontal scaling</li> <li>Implement cache partitioning</li> <li>Use appropriate cache topologies</li> <li>Handle cache synchronization</li> <li>Plan for failover scenarios</li> </ul>"},{"location":"mid-level/caching/#5-monitoring-maintenance","title":"5. Monitoring &amp; Maintenance","text":"<ul> <li>Monitor cache performance</li> <li>Track cache hit ratios</li> <li>Monitor memory usage</li> <li>Implement cache health checks</li> <li>Plan cache maintenance</li> </ul>"},{"location":"mid-level/caching/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Caching</li> <li>Distributed Caching</li> <li>Redis Documentation</li> <li>Cache Patterns</li> <li>Performance Best Practices</li> <li>.NET Caching </li> </ul>"},{"location":"mid-level/caching/cache-invalidation/","title":"Cache Invalidation","text":""},{"location":"mid-level/caching/cache-invalidation/#giris","title":"Giri\u015f","text":"<p>Cache Invalidation, \u00f6nbellekteki verilerin ge\u00e7erlili\u011fini yitirdi\u011finde veya g\u00fcncellendi\u011finde, bu verilerin \u00f6nbellekten kald\u0131r\u0131lmas\u0131 veya g\u00fcncellenmesi i\u015flemidir. Do\u011fru cache invalidation stratejileri, veri tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flamak i\u00e7in kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/caching/cache-invalidation/#cache-invalidationin-onemi","title":"Cache Invalidation'in \u00d6nemi","text":"<ol> <li>Veri Tutarl\u0131l\u0131\u011f\u0131</li> <li>G\u00fcncel veri sa\u011flama</li> <li>Stale data \u00f6nleme</li> <li> <p>Veri senkronizasyonu</p> </li> <li> <p>Performans</p> </li> <li>Gereksiz \u00f6nbellek kullan\u0131m\u0131n\u0131 \u00f6nleme</li> <li>Bellek optimizasyonu</li> <li> <p>Sistem kaynaklar\u0131n\u0131n verimli kullan\u0131m\u0131</p> </li> <li> <p>G\u00fcvenilirlik</p> </li> <li>Do\u011fru veri sa\u011flama</li> <li>Hata \u00f6nleme</li> <li>Sistem stabilitesi</li> </ol>"},{"location":"mid-level/caching/cache-invalidation/#cache-invalidation-stratejileri","title":"Cache Invalidation Stratejileri","text":"<ol> <li>Time-Based Invalidation</li> <li>Absolute expiration</li> <li>Sliding expiration</li> <li> <p>Hybrid expiration</p> </li> <li> <p>Event-Based Invalidation</p> </li> <li>Veri de\u011fi\u015fikli\u011fi</li> <li>Sistem olaylar\u0131</li> <li> <p>Kullan\u0131c\u0131 aksiyonlar\u0131</p> </li> <li> <p>Dependency-Based Invalidation</p> </li> <li>Veri ba\u011f\u0131ml\u0131l\u0131klar\u0131</li> <li>\u0130li\u015fkisel veriler</li> <li> <p>Cascade invalidation</p> </li> <li> <p>Manual Invalidation</p> </li> <li>Kullan\u0131c\u0131 tetiklemeli</li> <li>Admin kontroll\u00fc</li> <li>Sistem y\u00f6netimi</li> </ol>"},{"location":"mid-level/caching/cache-invalidation/#cache-invalidation-kullanm","title":"Cache Invalidation Kullan\u0131m\u0131","text":"<ol> <li> <p>Time-Based Invalidation <pre><code>public class TimeBasedCache\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;TimeBasedCache&gt; _logger;\n\n    public TimeBasedCache(IMemoryCache cache, ILogger&lt;TimeBasedCache&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void SetWithExpiration&lt;T&gt;(string key, T value, TimeSpan expiration)\n    {\n        var options = new MemoryCacheEntryOptions()\n            .SetAbsoluteExpiration(expiration)\n            .RegisterPostEvictionCallback((key, value, reason, state) =&gt;\n            {\n                _logger.LogInformation(\"Cache entry {Key} was evicted due to {Reason}\", key, reason);\n            });\n\n        _cache.Set(key, value, options);\n    }\n}\n</code></pre></p> </li> <li> <p>Event-Based Invalidation <pre><code>public class EventBasedCache\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;EventBasedCache&gt; _logger;\n\n    public EventBasedCache(IMemoryCache cache, ILogger&lt;EventBasedCache&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void InvalidateOnEvent(string key, IObservable&lt;object&gt; eventStream)\n    {\n        eventStream.Subscribe(_ =&gt;\n        {\n            _cache.Remove(key);\n            _logger.LogInformation(\"Cache entry {Key} was invalidated due to event\", key);\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Dependency-Based Invalidation <pre><code>public class DependencyBasedCache\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;DependencyBasedCache&gt; _logger;\n\n    public DependencyBasedCache(IMemoryCache cache, ILogger&lt;DependencyBasedCache&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void InvalidateDependencies(string key, IEnumerable&lt;string&gt; dependencies)\n    {\n        foreach (var dependency in dependencies)\n        {\n            _cache.Remove(dependency);\n            _logger.LogInformation(\"Cache entry {Dependency} was invalidated due to dependency on {Key}\", dependency, key);\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Manual Invalidation <pre><code>public class ManualCacheInvalidator\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;ManualCacheInvalidator&gt; _logger;\n\n    public ManualCacheInvalidator(IMemoryCache cache, ILogger&lt;ManualCacheInvalidator&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void Invalidate(string key)\n    {\n        _cache.Remove(key);\n        _logger.LogInformation(\"Cache entry {Key} was manually invalidated\", key);\n    }\n\n    public void InvalidateByPattern(string pattern)\n    {\n        var keys = GetKeysByPattern(pattern);\n        foreach (var key in keys)\n        {\n            Invalidate(key);\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/caching/cache-invalidation/#cache-invalidation-best-practices","title":"Cache Invalidation Best Practices","text":"<ol> <li>Strateji Se\u00e7imi</li> <li>Veri t\u00fcr\u00fcne g\u00f6re strateji</li> <li>Kullan\u0131m senaryosuna g\u00f6re strateji</li> <li> <p>Performans gereksinimlerine g\u00f6re strateji</p> </li> <li> <p>Monitoring</p> </li> <li>Invalidation oranlar\u0131</li> <li>Cache hit/miss oranlar\u0131</li> <li>Performans metrikleri</li> <li> <p>Hata izleme</p> </li> <li> <p>Error Handling</p> </li> <li>Graceful degradation</li> <li>Fallback mekanizmalar\u0131</li> <li>Retry politikalar\u0131</li> <li> <p>Logging</p> </li> <li> <p>Performance</p> </li> <li>Batch invalidation</li> <li>Asenkron invalidation</li> <li>Lazy invalidation</li> <li>Optimize edilmi\u015f algoritmalar</li> </ol>"},{"location":"mid-level/caching/cache-invalidation/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/caching/cache-invalidation/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Cache Invalidation nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Cache Invalidation, \u00f6nbellekteki verilerin ge\u00e7erlili\u011fini yitirdi\u011finde veya g\u00fcncellendi\u011finde, bu verilerin \u00f6nbellekten kald\u0131r\u0131lmas\u0131 veya g\u00fcncellenmesi i\u015flemidir. Veri tutarl\u0131l\u0131\u011f\u0131, performans ve g\u00fcvenilirlik i\u00e7in kritik \u00f6neme sahiptir.</p> </li> <li> <p>Farkl\u0131 cache invalidation stratejileri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Time-Based</li> <li>Event-Based</li> <li>Dependency-Based</li> <li>Manual</li> </ul> </li> <li> <p>Cache coherency nedir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Veri tutarl\u0131l\u0131\u011f\u0131</li> <li>Senkronizasyon</li> <li>Consistency modelleri</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Stale data nedir ve nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Eski veri</li> <li>Invalidation stratejileri</li> <li>TTL kullan\u0131m\u0131</li> <li>Versioning</li> </ul> </li> <li> <p>Cache warming nedir?</p> </li> <li>Cevap:<ul> <li>\u00d6nceden y\u00fckleme</li> <li>Performans optimizasyonu</li> <li>Cold start \u00f6nleme</li> <li>Kullan\u0131m senaryolar\u0131</li> </ul> </li> </ol>"},{"location":"mid-level/caching/cache-invalidation/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Time-based cache invalidation nas\u0131l uygulan\u0131r?</li> <li> <p>Cevap: <pre><code>public class TimeBasedInvalidation\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;TimeBasedInvalidation&gt; _logger;\n\n    public TimeBasedInvalidation(IMemoryCache cache, ILogger&lt;TimeBasedInvalidation&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void SetWithExpiration&lt;T&gt;(string key, T value, TimeSpan expiration)\n    {\n        var options = new MemoryCacheEntryOptions()\n            .SetAbsoluteExpiration(expiration)\n            .RegisterPostEvictionCallback((key, value, reason, state) =&gt;\n            {\n                _logger.LogInformation(\"Cache entry {Key} was evicted due to {Reason}\", key, reason);\n            });\n\n        _cache.Set(key, value, options);\n    }\n}\n</code></pre></p> </li> <li> <p>Event-based cache invalidation nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class EventBasedInvalidation\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;EventBasedInvalidation&gt; _logger;\n\n    public EventBasedInvalidation(IMemoryCache cache, ILogger&lt;EventBasedInvalidation&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void InvalidateOnEvent(string key, IObservable&lt;object&gt; eventStream)\n    {\n        eventStream.Subscribe(_ =&gt;\n        {\n            _cache.Remove(key);\n            _logger.LogInformation(\"Cache entry {Key} was invalidated due to event\", key);\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Dependency-based cache invalidation nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class DependencyBasedInvalidation\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;DependencyBasedInvalidation&gt; _logger;\n\n    public DependencyBasedInvalidation(IMemoryCache cache, ILogger&lt;DependencyBasedInvalidation&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void InvalidateDependencies(string key, IEnumerable&lt;string&gt; dependencies)\n    {\n        foreach (var dependency in dependencies)\n        {\n            _cache.Remove(dependency);\n            _logger.LogInformation(\"Cache entry {Dependency} was invalidated due to dependency on {Key}\", dependency, key);\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Cache monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class CacheMonitor\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheMonitor&gt; _logger;\n\n    public CacheMonitor(IMemoryCache cache, ILogger&lt;CacheMonitor&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void LogCacheStatistics()\n    {\n        var stats = new\n        {\n            HitCount = _cache.GetCurrentStatistics()?.TotalHits ?? 0,\n            MissCount = _cache.GetCurrentStatistics()?.TotalMisses ?? 0,\n            CurrentSize = _cache.GetCurrentStatistics()?.CurrentEntryCount ?? 0\n        };\n\n        _logger.LogInformation(\"Cache Statistics: {@Stats}\", stats);\n    }\n}\n</code></pre></p> </li> <li> <p>Cache fallback stratejisi nas\u0131l uygulan\u0131r?</p> </li> <li>Cevap: <pre><code>public class CacheWithFallback\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheWithFallback&gt; _logger;\n\n    public CacheWithFallback(IMemoryCache cache, ILogger&lt;CacheWithFallback&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; GetWithFallback&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan cacheDuration)\n    {\n        try\n        {\n            if (_cache.TryGetValue(key, out T cachedValue))\n            {\n                return cachedValue;\n            }\n\n            var value = await factory();\n            _cache.Set(key, value, cacheDuration);\n            return value;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Cache operation failed for key: {Key}\", key);\n            return await factory();\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/caching/cache-invalidation/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Distributed cache invalidation nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Pub/Sub pattern</li> <li>Event sourcing</li> <li>Message queues</li> <li>Distributed locks</li> <li>Consensus algorithms</li> </ul> </li> <li> <p>Cache coherency sorunlar\u0131 nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?</p> </li> <li> <p>Cevap:</p> <ul> <li>Strong consistency</li> <li>Eventual consistency</li> <li>Read-your-writes</li> <li>Monotonic reads</li> <li>Consistent prefix</li> </ul> </li> <li> <p>Cache warming stratejileri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Startup warming</li> <li>Background warming</li> <li>Predictive warming</li> <li>Scheduled warming</li> <li>On-demand warming</li> </ul> </li> <li> <p>Cache monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performance metrics</li> <li>Hit/miss ratios</li> <li>Memory usage</li> <li>Latency monitoring</li> <li>Custom alerts</li> </ul> </li> <li> <p>Cache security nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap:<ul> <li>Encryption</li> <li>Access control</li> <li>Data isolation</li> <li>Secure communication</li> <li>Audit logging </li> </ul> </li> </ol>"},{"location":"mid-level/caching/cache-patterns/","title":"Cache Patterns","text":""},{"location":"mid-level/caching/cache-patterns/#giris","title":"Giri\u015f","text":"<p>Cache Patterns, \u00f6nbellek sistemlerinde veri eri\u015fimini ve y\u00f6netimini optimize etmek i\u00e7in kullan\u0131lan yayg\u0131n tasar\u0131m kal\u0131plar\u0131d\u0131r. Bu kal\u0131plar, performans, \u00f6l\u00e7eklenebilirlik ve veri tutarl\u0131l\u0131\u011f\u0131 sa\u011flamak i\u00e7in kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/caching/cache-patterns/#cache-patternsin-onemi","title":"Cache Patterns'in \u00d6nemi","text":"<ol> <li>Performans</li> <li>Veri eri\u015fim h\u0131z\u0131n\u0131 art\u0131rma</li> <li>Sistem y\u00fck\u00fcn\u00fc azaltma</li> <li> <p>Yan\u0131t s\u00fcrelerini optimize etme</p> </li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li>Y\u00fck dengeleme</li> <li>Kaynak kullan\u0131m\u0131n\u0131 optimize etme</li> <li> <p>Sistem kapasitesini art\u0131rma</p> </li> <li> <p>Veri Tutarl\u0131l\u0131\u011f\u0131</p> </li> <li>Cache coherency</li> <li>Veri senkronizasyonu</li> <li>Stale data \u00f6nleme</li> </ol>"},{"location":"mid-level/caching/cache-patterns/#yaygn-cache-patterns","title":"Yayg\u0131n Cache Patterns","text":"<ol> <li>Cache-Aside (Lazy Loading)</li> <li>Veri iste\u011fe ba\u011fl\u0131 y\u00fckleme</li> <li>Basit implementasyon</li> <li> <p>Y\u00fcksek esneklik</p> </li> <li> <p>Read-Through</p> </li> <li>Otomatik veri y\u00fckleme</li> <li>\u015eeffaf eri\u015fim</li> <li> <p>D\u00fc\u015f\u00fck karma\u015f\u0131kl\u0131k</p> </li> <li> <p>Write-Through</p> </li> <li>Anl\u0131k veri senkronizasyonu</li> <li>Y\u00fcksek tutarl\u0131l\u0131k</li> <li> <p>D\u00fc\u015f\u00fck latency</p> </li> <li> <p>Write-Behind (Write-Back)</p> </li> <li>Toplu yazma i\u015flemleri</li> <li>Y\u00fcksek performans</li> <li> <p>D\u00fc\u015f\u00fck I/O y\u00fck\u00fc</p> </li> <li> <p>Refresh-Ahead</p> </li> <li>Proaktif veri yenileme</li> <li>D\u00fc\u015f\u00fck latency</li> <li>Y\u00fcksek kullan\u0131labilirlik</li> </ol>"},{"location":"mid-level/caching/cache-patterns/#cache-patterns-kullanm","title":"Cache Patterns Kullan\u0131m\u0131","text":"<ol> <li> <p>Cache-Aside Pattern <pre><code>public class CacheAsideService\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheAsideService&gt; _logger;\n\n    public CacheAsideService(IMemoryCache cache, ILogger&lt;CacheAsideService&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; GetOrCreateAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan? expiry = null)\n    {\n        if (_cache.TryGetValue(key, out T cachedValue))\n        {\n            return cachedValue;\n        }\n\n        var value = await factory();\n        _cache.Set(key, value, expiry ?? TimeSpan.FromMinutes(30));\n        return value;\n    }\n}\n</code></pre></p> </li> <li> <p>Read-Through Pattern <pre><code>public class ReadThroughCache\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;ReadThroughCache&gt; _logger;\n\n    public ReadThroughCache(IMemoryCache cache, ILogger&lt;ReadThroughCache&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; GetAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; dataLoader)\n    {\n        return await _cache.GetOrCreateAsync(key, async entry =&gt;\n        {\n            entry.SetOptions(new MemoryCacheEntryOptions()\n                .SetAbsoluteExpiration(TimeSpan.FromMinutes(30)));\n\n            return await dataLoader();\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Write-Through Pattern <pre><code>public class WriteThroughCache\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;WriteThroughCache&gt; _logger;\n\n    public WriteThroughCache(IMemoryCache cache, ILogger&lt;WriteThroughCache&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task SetAsync&lt;T&gt;(string key, T value, Func&lt;T, Task&gt; dataWriter)\n    {\n        await dataWriter(value);\n        _cache.Set(key, value, TimeSpan.FromMinutes(30));\n        _logger.LogInformation(\"Data written through cache for key: {Key}\", key);\n    }\n}\n</code></pre></p> </li> <li> <p>Write-Behind Pattern <pre><code>public class WriteBehindCache\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;WriteBehindCache&gt; _logger;\n    private readonly Queue&lt;CacheWriteOperation&gt; _writeQueue;\n\n    public WriteBehindCache(IMemoryCache cache, ILogger&lt;WriteBehindCache&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n        _writeQueue = new Queue&lt;CacheWriteOperation&gt;();\n    }\n\n    public void QueueWrite&lt;T&gt;(string key, T value, Func&lt;T, Task&gt; dataWriter)\n    {\n        _cache.Set(key, value);\n        _writeQueue.Enqueue(new CacheWriteOperation(key, value, dataWriter));\n    }\n\n    public async Task ProcessWriteQueue()\n    {\n        while (_writeQueue.Count &gt; 0)\n        {\n            var operation = _writeQueue.Dequeue();\n            try\n            {\n                await operation.DataWriter(operation.Value);\n                _logger.LogInformation(\"Write-behind operation completed for key: {Key}\", operation.Key);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Write-behind operation failed for key: {Key}\", operation.Key);\n            }\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Refresh-Ahead Pattern <pre><code>public class RefreshAheadCache\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;RefreshAheadCache&gt; _logger;\n    private readonly TimeSpan _refreshThreshold;\n\n    public RefreshAheadCache(IMemoryCache cache, ILogger&lt;RefreshAheadCache&gt; logger, TimeSpan refreshThreshold)\n    {\n        _cache = cache;\n        _logger = logger;\n        _refreshThreshold = refreshThreshold;\n    }\n\n    public async Task&lt;T&gt; GetWithRefresh&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; dataLoader, TimeSpan expiry)\n    {\n        if (_cache.TryGetValue(key, out CacheEntry&lt;T&gt; entry))\n        {\n            if (entry.LastAccessed + _refreshThreshold &lt; DateTime.UtcNow)\n            {\n                _ = Task.Run(async () =&gt;\n                {\n                    try\n                    {\n                        var newValue = await dataLoader();\n                        _cache.Set(key, new CacheEntry&lt;T&gt;(newValue), expiry);\n                        _logger.LogInformation(\"Cache refreshed ahead for key: {Key}\", key);\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogError(ex, \"Failed to refresh cache for key: {Key}\", key);\n                    }\n                });\n            }\n            return entry.Value;\n        }\n\n        var value = await dataLoader();\n        _cache.Set(key, new CacheEntry&lt;T&gt;(value), expiry);\n        return value;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/caching/cache-patterns/#cache-patterns-best-practices","title":"Cache Patterns Best Practices","text":"<ol> <li>Pattern Se\u00e7imi</li> <li>Kullan\u0131m senaryosuna g\u00f6re se\u00e7im</li> <li>Performans gereksinimleri</li> <li> <p>Veri tutarl\u0131l\u0131\u011f\u0131 ihtiya\u00e7lar\u0131</p> </li> <li> <p>Monitoring</p> </li> <li>Pattern performans\u0131</li> <li>Cache hit/miss oranlar\u0131</li> <li>Sistem kaynak kullan\u0131m\u0131</li> <li> <p>Hata oranlar\u0131</p> </li> <li> <p>Error Handling</p> </li> <li>Graceful degradation</li> <li>Fallback mekanizmalar\u0131</li> <li>Retry politikalar\u0131</li> <li> <p>Logging</p> </li> <li> <p>Performance</p> </li> <li>Pattern optimizasyonu</li> <li>Kaynak kullan\u0131m\u0131</li> <li>Latency y\u00f6netimi</li> <li>Batch i\u015flemler</li> </ol>"},{"location":"mid-level/caching/cache-patterns/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/caching/cache-patterns/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Cache-Aside pattern nedir ve ne zaman kullan\u0131l\u0131r?</li> <li> <p>Cevap: Cache-Aside pattern, verilerin iste\u011fe ba\u011fl\u0131 olarak \u00f6nbelle\u011fe y\u00fcklendi\u011fi bir desendir. Basit implementasyon ve y\u00fcksek esneklik gerektiren senaryolarda kullan\u0131l\u0131r.</p> </li> <li> <p>Read-Through ve Write-Through pattern'ler aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Read-Through: Otomatik veri y\u00fckleme, \u015feffaf eri\u015fim</li> <li>Write-Through: Anl\u0131k veri senkronizasyonu, y\u00fcksek tutarl\u0131l\u0131k</li> </ul> </li> <li> <p>Write-Behind pattern'in avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Toplu yazma i\u015flemleri</li> <li>Y\u00fcksek performans</li> <li>D\u00fc\u015f\u00fck I/O y\u00fck\u00fc</li> <li>Batch processing</li> </ul> </li> <li> <p>Refresh-Ahead pattern ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>D\u00fc\u015f\u00fck latency gerekti\u011finde</li> <li>Y\u00fcksek kullan\u0131labilirlik gerekti\u011finde</li> <li>Proaktif veri yenileme gerekti\u011finde</li> </ul> </li> <li> <p>Cache pattern se\u00e7iminde dikkat edilmesi gereken fakt\u00f6rler nelerdir?</p> </li> <li>Cevap:<ul> <li>Kullan\u0131m senaryosu</li> <li>Performans gereksinimleri</li> <li>Veri tutarl\u0131l\u0131\u011f\u0131 ihtiya\u00e7lar\u0131</li> <li>Sistem kaynaklar\u0131</li> </ul> </li> </ol>"},{"location":"mid-level/caching/cache-patterns/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Cache-Aside pattern nas\u0131l implemente edilir?</li> <li> <p>Cevap: <pre><code>public class CacheAsideImplementation\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheAsideImplementation&gt; _logger;\n\n    public CacheAsideImplementation(IMemoryCache cache, ILogger&lt;CacheAsideImplementation&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; GetOrCreateAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan? expiry = null)\n    {\n        if (_cache.TryGetValue(key, out T cachedValue))\n        {\n            return cachedValue;\n        }\n\n        var value = await factory();\n        _cache.Set(key, value, expiry ?? TimeSpan.FromMinutes(30));\n        return value;\n    }\n}\n</code></pre></p> </li> <li> <p>Write-Through pattern nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>public class WriteThroughImplementation\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;WriteThroughImplementation&gt; _logger;\n\n    public WriteThroughImplementation(IMemoryCache cache, ILogger&lt;WriteThroughImplementation&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task SetAsync&lt;T&gt;(string key, T value, Func&lt;T, Task&gt; dataWriter)\n    {\n        await dataWriter(value);\n        _cache.Set(key, value, TimeSpan.FromMinutes(30));\n        _logger.LogInformation(\"Data written through cache for key: {Key}\", key);\n    }\n}\n</code></pre></p> </li> <li> <p>Write-Behind pattern nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>public class WriteBehindImplementation\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;WriteBehindImplementation&gt; _logger;\n    private readonly Queue&lt;CacheWriteOperation&gt; _writeQueue;\n\n    public WriteBehindImplementation(IMemoryCache cache, ILogger&lt;WriteBehindImplementation&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n        _writeQueue = new Queue&lt;CacheWriteOperation&gt;();\n    }\n\n    public void QueueWrite&lt;T&gt;(string key, T value, Func&lt;T, Task&gt; dataWriter)\n    {\n        _cache.Set(key, value);\n        _writeQueue.Enqueue(new CacheWriteOperation(key, value, dataWriter));\n    }\n\n    public async Task ProcessWriteQueue()\n    {\n        while (_writeQueue.Count &gt; 0)\n        {\n            var operation = _writeQueue.Dequeue();\n            try\n            {\n                await operation.DataWriter(operation.Value);\n                _logger.LogInformation(\"Write-behind operation completed for key: {Key}\", operation.Key);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Write-behind operation failed for key: {Key}\", operation.Key);\n            }\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Refresh-Ahead pattern nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>public class RefreshAheadImplementation\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;RefreshAheadImplementation&gt; _logger;\n    private readonly TimeSpan _refreshThreshold;\n\n    public RefreshAheadImplementation(IMemoryCache cache, ILogger&lt;RefreshAheadImplementation&gt; logger, TimeSpan refreshThreshold)\n    {\n        _cache = cache;\n        _logger = logger;\n        _refreshThreshold = refreshThreshold;\n    }\n\n    public async Task&lt;T&gt; GetWithRefresh&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; dataLoader, TimeSpan expiry)\n    {\n        if (_cache.TryGetValue(key, out CacheEntry&lt;T&gt; entry))\n        {\n            if (entry.LastAccessed + _refreshThreshold &lt; DateTime.UtcNow)\n            {\n                _ = Task.Run(async () =&gt;\n                {\n                    try\n                    {\n                        var newValue = await dataLoader();\n                        _cache.Set(key, new CacheEntry&lt;T&gt;(newValue), expiry);\n                        _logger.LogInformation(\"Cache refreshed ahead for key: {Key}\", key);\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogError(ex, \"Failed to refresh cache for key: {Key}\", key);\n                    }\n                });\n            }\n            return entry.Value;\n        }\n\n        var value = await dataLoader();\n        _cache.Set(key, new CacheEntry&lt;T&gt;(value), expiry);\n        return value;\n    }\n}\n</code></pre></p> </li> <li> <p>Cache pattern monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class CachePatternMonitor\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CachePatternMonitor&gt; _logger;\n\n    public CachePatternMonitor(IMemoryCache cache, ILogger&lt;CachePatternMonitor&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void LogPatternStatistics()\n    {\n        var stats = new\n        {\n            HitCount = _cache.GetCurrentStatistics()?.TotalHits ?? 0,\n            MissCount = _cache.GetCurrentStatistics()?.TotalMisses ?? 0,\n            CurrentSize = _cache.GetCurrentStatistics()?.CurrentEntryCount ?? 0,\n            PatternPerformance = GetPatternPerformanceMetrics()\n        };\n\n        _logger.LogInformation(\"Cache Pattern Statistics: {@Stats}\", stats);\n    }\n\n    private object GetPatternPerformanceMetrics()\n    {\n        // Implement pattern-specific performance metrics\n        return new { };\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/caching/cache-patterns/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Distributed cache pattern'ler nas\u0131l uygulan\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Distributed locking</li> <li>Consensus algorithms</li> <li>Event sourcing</li> <li>Message queues</li> <li>Pub/Sub pattern</li> </ul> </li> <li> <p>Cache pattern performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Pattern se\u00e7imi</li> <li>Kaynak kullan\u0131m\u0131</li> <li>Batch i\u015flemler</li> <li>Asenkron operasyonlar</li> <li>Caching stratejileri</li> </ul> </li> <li> <p>Cache pattern g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Veri \u015fifreleme</li> <li>Eri\u015fim kontrol\u00fc</li> <li>Audit logging</li> <li>Secure communication</li> <li>Data isolation</li> </ul> </li> <li> <p>Cache pattern monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performance metrics</li> <li>Pattern-specific metrics</li> <li>Health checks</li> <li>Custom alerts</li> <li>Logging</li> </ul> </li> <li> <p>Cache pattern test stratejileri nelerdir?</p> </li> <li>Cevap:<ul> <li>Unit testing</li> <li>Integration testing</li> <li>Performance testing</li> <li>Load testing</li> <li>Chaos testing </li> </ul> </li> </ol>"},{"location":"mid-level/caching/distributed-caching/","title":"Distributed Caching","text":""},{"location":"mid-level/caching/distributed-caching/#giris","title":"Giri\u015f","text":"<p>Distributed Caching, verilerin birden fazla sunucu aras\u0131nda payla\u015f\u0131lan bir \u00f6nbellek sisteminde saklanmas\u0131d\u0131r. .NET'te Redis, NCache gibi da\u011f\u0131t\u0131k \u00f6nbellek sistemleri kullan\u0131larak uygulanabilir.</p>"},{"location":"mid-level/caching/distributed-caching/#distributed-cachingin-onemi","title":"Distributed Caching'in \u00d6nemi","text":"<ol> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Yatay \u00f6l\u00e7eklenebilirlik</li> <li>Y\u00fck dengeleme</li> <li> <p>Y\u00fcksek eri\u015filebilirlik</p> </li> <li> <p>Performans</p> </li> <li>D\u00fc\u015f\u00fck gecikme s\u00fcreleri</li> <li>Y\u00fcksek verimlilik</li> <li> <p>\u00d6l\u00e7eklenebilir performans</p> </li> <li> <p>G\u00fcvenilirlik</p> </li> <li>Fault tolerance</li> <li>Veri tutarl\u0131l\u0131\u011f\u0131</li> <li>Y\u00fcksek eri\u015filebilirlik</li> </ol>"},{"location":"mid-level/caching/distributed-caching/#distributed-caching-turleri","title":"Distributed Caching T\u00fcrleri","text":"<ol> <li>Redis</li> <li>A\u00e7\u0131k kaynak</li> <li>Y\u00fcksek performans</li> <li>Zengin veri tipleri</li> <li> <p>Persistence deste\u011fi</p> </li> <li> <p>NCache</p> </li> <li>.NET i\u00e7in optimize</li> <li>Yerel \u00f6nbellek deste\u011fi</li> <li>Otomatik \u00f6l\u00e7ekleme</li> <li> <p>Y\u00fcksek g\u00fcvenilirlik</p> </li> <li> <p>Memcached</p> </li> <li>Basit ve h\u0131zl\u0131</li> <li>D\u00fc\u015f\u00fck bellek kullan\u0131m\u0131</li> <li>Y\u00fcksek \u00f6l\u00e7eklenebilirlik</li> <li>Kolay entegrasyon</li> </ol>"},{"location":"mid-level/caching/distributed-caching/#distributed-caching-kullanm","title":"Distributed Caching Kullan\u0131m\u0131","text":"<ol> <li> <p>Redis Kullan\u0131m\u0131 <pre><code>public class RedisCacheService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly IDatabase _database;\n\n    public RedisCacheService(IConnectionMultiplexer redis)\n    {\n        _redis = redis;\n        _database = redis.GetDatabase();\n    }\n\n    public async Task&lt;T&gt; GetOrCreateAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan? expiry = null)\n    {\n        var value = await _database.StringGetAsync(key);\n        if (!value.IsNull)\n        {\n            return JsonSerializer.Deserialize&lt;T&gt;(value);\n        }\n\n        var newValue = await factory();\n        await _database.StringSetAsync(key, JsonSerializer.Serialize(newValue), expiry);\n        return newValue;\n    }\n}\n</code></pre></p> </li> <li> <p>NCache Kullan\u0131m\u0131 <pre><code>public class NCacheService\n{\n    private readonly ICache _cache;\n\n    public NCacheService(ICache cache)\n    {\n        _cache = cache;\n    }\n\n    public T GetOrCreate&lt;T&gt;(string key, Func&lt;T&gt; factory, CacheItemPriority priority = CacheItemPriority.Default)\n    {\n        var item = _cache.Get&lt;T&gt;(key);\n        if (item != null)\n        {\n            return item;\n        }\n\n        var newItem = factory();\n        var cacheItem = new CacheItem(newItem)\n        {\n            Priority = priority\n        };\n        _cache.Insert(key, cacheItem);\n        return newItem;\n    }\n}\n</code></pre></p> </li> <li> <p>Memcached Kullan\u0131m\u0131 <pre><code>public class MemcachedService\n{\n    private readonly IMemcachedClient _client;\n\n    public MemcachedService(IMemcachedClient client)\n    {\n        _client = client;\n    }\n\n    public async Task&lt;T&gt; GetOrCreateAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan? expiry = null)\n    {\n        var value = await _client.GetAsync&lt;T&gt;(key);\n        if (value != null)\n        {\n            return value;\n        }\n\n        var newValue = await factory();\n        await _client.SetAsync(key, newValue, expiry ?? TimeSpan.FromMinutes(30));\n        return newValue;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/caching/distributed-caching/#distributed-caching-best-practices","title":"Distributed Caching Best Practices","text":"<ol> <li>Veri Tasar\u0131m\u0131</li> <li>Veri par\u00e7alama</li> <li>Veri s\u0131k\u0131\u015ft\u0131rma</li> <li>Veri serile\u015ftirme</li> <li> <p>Veri boyutu optimizasyonu</p> </li> <li> <p>\u00d6l\u00e7ekleme Stratejileri</p> </li> <li>Sharding</li> <li>Replication</li> <li>Partitioning</li> <li> <p>Load balancing</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>\u015eifreleme</li> <li>Eri\u015fim kontrol\u00fc</li> <li>A\u011f g\u00fcvenli\u011fi</li> <li> <p>Veri izolasyonu</p> </li> <li> <p>Monitoring</p> </li> <li>Performans metrikleri</li> <li>Sa\u011fl\u0131k kontrolleri</li> <li>Kapasite planlama</li> <li>Hata izleme</li> </ol>"},{"location":"mid-level/caching/distributed-caching/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/caching/distributed-caching/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Distributed Caching nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Distributed Caching, verilerin birden fazla sunucu aras\u0131nda payla\u015f\u0131lan bir \u00f6nbellek sisteminde saklanmas\u0131d\u0131r. \u00d6l\u00e7eklenebilirlik, performans ve g\u00fcvenilirlik sa\u011flar.</p> </li> <li> <p>Redis ve Memcached aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Redis: Zengin veri tipleri, persistence, atomic operasyonlar</li> <li>Memcached: Basit, h\u0131zl\u0131, d\u00fc\u015f\u00fck bellek kullan\u0131m\u0131</li> </ul> </li> <li> <p>Cache coherency nedir ve nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Veri tutarl\u0131l\u0131\u011f\u0131</li> <li>Replication stratejileri</li> <li>Consistency modelleri</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Cache invalidation stratejileri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Time-based</li> <li>Event-based</li> <li>Manual</li> <li>Dependency-based</li> </ul> </li> <li> <p>Cache partitioning stratejileri nelerdir?</p> </li> <li>Cevap:<ul> <li>Hash-based</li> <li>Range-based</li> <li>Directory-based</li> <li>Consistent hashing</li> </ul> </li> </ol>"},{"location":"mid-level/caching/distributed-caching/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Redis ile distributed caching nas\u0131l uygulan\u0131r?</li> <li> <p>Cevap: <pre><code>public class RedisDistributedCache\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly IDatabase _database;\n\n    public RedisDistributedCache(IConnectionMultiplexer redis)\n    {\n        _redis = redis;\n        _database = redis.GetDatabase();\n    }\n\n    public async Task&lt;T&gt; GetOrCreateAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan? expiry = null)\n    {\n        var value = await _database.StringGetAsync(key);\n        if (!value.IsNull)\n        {\n            return JsonSerializer.Deserialize&lt;T&gt;(value);\n        }\n\n        var newValue = await factory();\n        await _database.StringSetAsync(key, JsonSerializer.Serialize(newValue), expiry);\n        return newValue;\n    }\n}\n</code></pre></p> </li> <li> <p>Cache monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class CacheMonitor\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;CacheMonitor&gt; _logger;\n\n    public CacheMonitor(IConnectionMultiplexer redis, ILogger&lt;CacheMonitor&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task LogCacheStatistics()\n    {\n        var server = _redis.GetServer(_redis.GetEndPoints().First());\n        var info = await server.InfoAsync();\n\n        var stats = new\n        {\n            ConnectedClients = info.FirstOrDefault(x =&gt; x.Key == \"connected_clients\")?.Value,\n            UsedMemory = info.FirstOrDefault(x =&gt; x.Key == \"used_memory\")?.Value,\n            TotalCommands = info.FirstOrDefault(x =&gt; x.Key == \"total_commands_processed\")?.Value\n        };\n\n        _logger.LogInformation(\"Cache Statistics: {@Stats}\", stats);\n    }\n}\n</code></pre></p> </li> <li> <p>Cache fallback stratejisi nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class CacheWithFallback\n{\n    private readonly IDistributedCache _cache;\n    private readonly ILogger&lt;CacheWithFallback&gt; _logger;\n\n    public CacheWithFallback(IDistributedCache cache, ILogger&lt;CacheWithFallback&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; GetWithFallback&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan cacheDuration)\n    {\n        try\n        {\n            var cachedValue = await _cache.GetStringAsync(key);\n            if (cachedValue != null)\n            {\n                return JsonSerializer.Deserialize&lt;T&gt;(cachedValue);\n            }\n\n            var value = await factory();\n            await _cache.SetStringAsync(key, JsonSerializer.Serialize(value), new DistributedCacheEntryOptions\n            {\n                AbsoluteExpirationRelativeToNow = cacheDuration\n            });\n            return value;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Cache operation failed for key: {Key}\", key);\n            return await factory();\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Cache size y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class CacheSizeManager\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;CacheSizeManager&gt; _logger;\n    private readonly long _maxSize;\n\n    public CacheSizeManager(IConnectionMultiplexer redis, ILogger&lt;CacheSizeManager&gt; logger, long maxSize)\n    {\n        _redis = redis;\n        _logger = logger;\n        _maxSize = maxSize;\n    }\n\n    public async Task EnsureCacheSize()\n    {\n        var server = _redis.GetServer(_redis.GetEndPoints().First());\n        var info = await server.InfoAsync();\n        var usedMemory = long.Parse(info.First(x =&gt; x.Key == \"used_memory\").Value);\n\n        if (usedMemory &gt; _maxSize)\n        {\n            _logger.LogWarning(\"Cache size exceeded limit: {UsedMemory}/{MaxSize}\", usedMemory, _maxSize);\n            await EvictOldestItems();\n        }\n    }\n\n    private async Task EvictOldestItems()\n    {\n        // Implement oldest items eviction logic\n    }\n}\n</code></pre></p> </li> <li> <p>Cache warming nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class CacheWarmer\n{\n    private readonly IDistributedCache _cache;\n    private readonly ILogger&lt;CacheWarmer&gt; _logger;\n\n    public CacheWarmer(IDistributedCache cache, ILogger&lt;CacheWarmer&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task WarmCache&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan cacheDuration)\n    {\n        try\n        {\n            var value = await factory();\n            await _cache.SetStringAsync(key, JsonSerializer.Serialize(value), new DistributedCacheEntryOptions\n            {\n                AbsoluteExpirationRelativeToNow = cacheDuration\n            });\n            _logger.LogInformation(\"Cache warmed for key: {Key}\", key);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to warm cache for key: {Key}\", key);\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/caching/distributed-caching/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Distributed locking nas\u0131l uygulan\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Redis RedLock</li> <li>ZooKeeper</li> <li>Etcd</li> <li>Consul</li> <li>Custom distributed locks</li> </ul> </li> <li> <p>Cache coherency sorunlar\u0131 nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?</p> </li> <li> <p>Cevap:</p> <ul> <li>Strong consistency</li> <li>Eventual consistency</li> <li>Read-your-writes</li> <li>Monotonic reads</li> <li>Consistent prefix</li> </ul> </li> <li> <p>Cache partitioning stratejileri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Hash-based</li> <li>Range-based</li> <li>Directory-based</li> <li>Consistent hashing</li> <li>Dynamic partitioning</li> </ul> </li> <li> <p>Cache monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Prometheus</li> <li>Grafana</li> <li>ELK Stack</li> <li>Custom metrics</li> <li>Alert rules</li> </ul> </li> <li> <p>Cache security nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap:<ul> <li>TLS/SSL</li> <li>Authentication</li> <li>Authorization</li> <li>Network isolation</li> <li>Audit logging </li> </ul> </li> </ol>"},{"location":"mid-level/caching/in-memory-caching/","title":"In-Memory Caching","text":""},{"location":"mid-level/caching/in-memory-caching/#giris","title":"Giri\u015f","text":"<p>In-Memory Caching, verilerin uygulama belle\u011finde ge\u00e7ici olarak saklanmas\u0131 i\u015flemidir. .NET'te <code>IMemoryCache</code> aray\u00fcz\u00fc ve <code>MemoryCache</code> s\u0131n\u0131f\u0131 ile kolayca uygulanabilir.</p>"},{"location":"mid-level/caching/in-memory-caching/#in-memory-cachingin-onemi","title":"In-Memory Caching'in \u00d6nemi","text":"<ol> <li>Performans</li> <li>Veritaban\u0131 y\u00fck\u00fcn\u00fc azaltma</li> <li>Yan\u0131t s\u00fcrelerini k\u0131saltma</li> <li> <p>CPU kullan\u0131m\u0131n\u0131 optimize etme</p> </li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li>Uygulama y\u00fck\u00fcn\u00fc da\u011f\u0131tma</li> <li>Kaynak kullan\u0131m\u0131n\u0131 optimize etme</li> <li> <p>Sistem kapasitesini art\u0131rma</p> </li> <li> <p>Maliyet</p> </li> <li>Veritaban\u0131 maliyetlerini azaltma</li> <li>A\u011f trafi\u011fini azaltma</li> <li>\u0130\u015flem maliyetlerini d\u00fc\u015f\u00fcrme</li> </ol>"},{"location":"mid-level/caching/in-memory-caching/#in-memory-caching-turleri","title":"In-Memory Caching T\u00fcrleri","text":"<ol> <li>MemoryCache</li> <li>Temel in-memory caching</li> <li>Thread-safe</li> <li> <p>Expiration policies</p> </li> <li> <p>Distributed Memory Cache</p> </li> <li>Birden fazla sunucu aras\u0131nda payla\u015f\u0131m</li> <li>Y\u00fcksek \u00f6l\u00e7eklenebilirlik</li> <li> <p>Fault tolerance</p> </li> <li> <p>Hybrid Cache</p> </li> <li>Memory ve distributed cache kombinasyonu</li> <li>Esnek yap\u0131</li> <li>Optimize edilmi\u015f performans</li> </ol>"},{"location":"mid-level/caching/in-memory-caching/#in-memory-caching-kullanm","title":"In-Memory Caching Kullan\u0131m\u0131","text":"<ol> <li> <p>Temel Kullan\u0131m <pre><code>public class CacheService\n{\n    private readonly IMemoryCache _cache;\n    private readonly MemoryCacheEntryOptions _options;\n\n    public CacheService(IMemoryCache cache)\n    {\n        _cache = cache;\n        _options = new MemoryCacheEntryOptions()\n            .SetSlidingExpiration(TimeSpan.FromMinutes(30))\n            .SetAbsoluteExpiration(TimeSpan.FromHours(1));\n    }\n\n    public T GetOrCreate&lt;T&gt;(string key, Func&lt;T&gt; factory)\n    {\n        return _cache.GetOrCreate(key, entry =&gt;\n        {\n            entry.SetOptions(_options);\n            return factory();\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Async Kullan\u0131m <pre><code>public class AsyncCacheService\n{\n    private readonly IMemoryCache _cache;\n    private readonly MemoryCacheEntryOptions _options;\n\n    public AsyncCacheService(IMemoryCache cache)\n    {\n        _cache = cache;\n        _options = new MemoryCacheEntryOptions()\n            .SetSlidingExpiration(TimeSpan.FromMinutes(30))\n            .SetAbsoluteExpiration(TimeSpan.FromHours(1));\n    }\n\n    public async Task&lt;T&gt; GetOrCreateAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory)\n    {\n        if (_cache.TryGetValue(key, out T cachedValue))\n        {\n            return cachedValue;\n        }\n\n        var value = await factory();\n        _cache.Set(key, value, _options);\n        return value;\n    }\n}\n</code></pre></p> </li> <li> <p>Cache Invalidation <pre><code>public class CacheInvalidator\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheInvalidator&gt; _logger;\n\n    public CacheInvalidator(IMemoryCache cache, ILogger&lt;CacheInvalidator&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void Invalidate(string key)\n    {\n        _cache.Remove(key);\n        _logger.LogInformation(\"Cache invalidated for key: {Key}\", key);\n    }\n\n    public void InvalidateByPattern(string pattern)\n    {\n        var keys = GetKeysByPattern(pattern);\n        foreach (var key in keys)\n        {\n            Invalidate(key);\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/caching/in-memory-caching/#in-memory-caching-best-practices","title":"In-Memory Caching Best Practices","text":"<ol> <li>Cache Key Tasar\u0131m\u0131</li> <li>Anlaml\u0131 ve tutarl\u0131 isimlendirme</li> <li>Namespace kullan\u0131m\u0131</li> <li> <p>Versiyonlama</p> </li> <li> <p>Expiration Stratejileri</p> </li> <li>Sliding expiration</li> <li>Absolute expiration</li> <li> <p>Priority-based expiration</p> </li> <li> <p>Memory Y\u00f6netimi</p> </li> <li>Size limitleri</li> <li>Eviction politikalar\u0131</li> <li> <p>Memory pressure handling</p> </li> <li> <p>Error Handling</p> </li> <li>Fallback mekanizmalar\u0131</li> <li>Circuit breaker</li> <li>Retry politikalar\u0131</li> </ol>"},{"location":"mid-level/caching/in-memory-caching/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/caching/in-memory-caching/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>In-Memory Caching nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: In-Memory Caching, verilerin uygulama belle\u011finde ge\u00e7ici olarak saklanmas\u0131d\u0131r. Performans iyile\u015ftirmesi, \u00f6l\u00e7eklenebilirlik ve maliyet optimizasyonu sa\u011flar.</p> </li> <li> <p>MemoryCache ve Distributed Cache aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>MemoryCache: Tek sunucuda, h\u0131zl\u0131, uygulama i\u00e7i</li> <li>Distributed Cache: Birden fazla sunucuda, \u00f6l\u00e7eklenebilir, payla\u015f\u0131ml\u0131</li> </ul> </li> <li> <p>Cache expiration stratejileri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Sliding expiration</li> <li>Absolute expiration</li> <li>Priority-based expiration</li> <li>Size-based expiration</li> </ul> </li> <li> <p>Cache invalidation stratejileri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Zaman tabanl\u0131</li> <li>Olay tabanl\u0131</li> <li>Manuel invalidation</li> <li>Dependency-based</li> </ul> </li> <li> <p>Cache coherency nedir?</p> </li> <li>Cevap:<ul> <li>\u00d6nbellek tutarl\u0131l\u0131\u011f\u0131</li> <li>Veri senkronizasyonu</li> <li>Stale data \u00f6nleme</li> <li>Consistency modelleri</li> </ul> </li> </ol>"},{"location":"mid-level/caching/in-memory-caching/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>MemoryCache kullan\u0131m\u0131 nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class MemoryCacheService\n{\n    private readonly IMemoryCache _cache;\n    private readonly MemoryCacheEntryOptions _options;\n\n    public MemoryCacheService(IMemoryCache cache)\n    {\n        _cache = cache;\n        _options = new MemoryCacheEntryOptions()\n            .SetSlidingExpiration(TimeSpan.FromMinutes(30))\n            .SetAbsoluteExpiration(TimeSpan.FromHours(1));\n    }\n\n    public T GetOrCreate&lt;T&gt;(string key, Func&lt;T&gt; factory)\n    {\n        return _cache.GetOrCreate(key, entry =&gt;\n        {\n            entry.SetOptions(_options);\n            return factory();\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Cache monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class CacheMonitor\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheMonitor&gt; _logger;\n\n    public CacheMonitor(IMemoryCache cache, ILogger&lt;CacheMonitor&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void LogCacheStatistics()\n    {\n        var stats = new\n        {\n            HitCount = _cache.GetCurrentStatistics()?.TotalHits ?? 0,\n            MissCount = _cache.GetCurrentStatistics()?.TotalMisses ?? 0,\n            CurrentSize = _cache.GetCurrentStatistics()?.CurrentEntryCount ?? 0\n        };\n\n        _logger.LogInformation(\"Cache Statistics: {@Stats}\", stats);\n    }\n}\n</code></pre></p> </li> <li> <p>Cache fallback stratejisi nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class CacheWithFallback\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheWithFallback&gt; _logger;\n\n    public CacheWithFallback(IMemoryCache cache, ILogger&lt;CacheWithFallback&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; GetWithFallback&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan cacheDuration)\n    {\n        try\n        {\n            if (_cache.TryGetValue(key, out T cachedValue))\n            {\n                return cachedValue;\n            }\n\n            var value = await factory();\n            _cache.Set(key, value, cacheDuration);\n            return value;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Cache operation failed for key: {Key}\", key);\n            return await factory();\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Cache size y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class CacheSizeManager\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheSizeManager&gt; _logger;\n    private readonly long _maxSize;\n\n    public CacheSizeManager(IMemoryCache cache, ILogger&lt;CacheSizeManager&gt; logger, long maxSize)\n    {\n        _cache = cache;\n        _logger = logger;\n        _maxSize = maxSize;\n    }\n\n    public void EnsureCacheSize()\n    {\n        var currentSize = _cache.GetCurrentStatistics()?.CurrentSize ?? 0;\n        if (currentSize &gt; _maxSize)\n        {\n            _logger.LogWarning(\"Cache size exceeded limit: {CurrentSize}/{MaxSize}\", currentSize, _maxSize);\n            EvictOldestItems();\n        }\n    }\n\n    private void EvictOldestItems()\n    {\n        // Implement oldest items eviction logic\n    }\n}\n</code></pre></p> </li> <li> <p>Cache warming nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class CacheWarmer\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheWarmer&gt; _logger;\n\n    public CacheWarmer(IMemoryCache cache, ILogger&lt;CacheWarmer&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task WarmCache&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory, TimeSpan cacheDuration)\n    {\n        try\n        {\n            var value = await factory();\n            _cache.Set(key, value, cacheDuration);\n            _logger.LogInformation(\"Cache warmed for key: {Key}\", key);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to warm cache for key: {Key}\", key);\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/caching/in-memory-caching/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Cache coherency sorunlar\u0131 nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?</li> <li> <p>Cevap:</p> <ul> <li>Strong consistency modelleri</li> <li>Eventual consistency</li> <li>Versioning</li> <li>Distributed locking</li> <li>Cache synchronization</li> </ul> </li> <li> <p>Cache warming stratejileri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Startup warming</li> <li>Background warming</li> <li>Predictive warming</li> <li>Scheduled warming</li> <li>On-demand warming</li> </ul> </li> <li> <p>Cache partitioning nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Key-based partitioning</li> <li>Hash-based partitioning</li> <li>Range partitioning</li> <li>Directory partitioning</li> <li>Consistent hashing</li> </ul> </li> <li> <p>Cache monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performance metrics</li> <li>Hit/miss ratios</li> <li>Memory usage</li> <li>Latency monitoring</li> <li>Custom alerts</li> </ul> </li> <li> <p>Cache security nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap:<ul> <li>Encryption</li> <li>Access control</li> <li>Data isolation</li> <li>Secure communication</li> <li>Audit logging </li> </ul> </li> </ol>"},{"location":"mid-level/caching/redis/","title":"Redis Kullan\u0131m\u0131","text":""},{"location":"mid-level/caching/redis/#giris","title":"Giri\u015f","text":"<p>Redis (Remote Dictionary Server), a\u00e7\u0131k kaynakl\u0131, in-memory veri yap\u0131s\u0131 deposu olarak kullan\u0131lan bir NoSQL veritaban\u0131d\u0131r. .NET uygulamalar\u0131nda \u00f6nbellekleme, oturum y\u00f6netimi, mesaj kuyru\u011fu ve ger\u00e7ek zamanl\u0131 analitik gibi \u00e7e\u015fitli senaryolarda kullan\u0131l\u0131r.</p>"},{"location":"mid-level/caching/redis/#redisin-onemi","title":"Redis'in \u00d6nemi","text":"<ol> <li>Performans</li> <li>Y\u00fcksek h\u0131zl\u0131 veri eri\u015fimi</li> <li>D\u00fc\u015f\u00fck latency</li> <li> <p>Y\u00fcksek throughput</p> </li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li>Yatay \u00f6l\u00e7eklenebilirlik</li> <li>Cluster deste\u011fi</li> <li> <p>Replikasyon</p> </li> <li> <p>Esneklik</p> </li> <li>\u00c7oklu veri yap\u0131lar\u0131</li> <li>Zengin komut seti</li> <li>Geni\u015fletilebilir mimari</li> </ol>"},{"location":"mid-level/caching/redis/#redis-veri-tipleri","title":"Redis Veri Tipleri","text":"<ol> <li>String</li> <li>Metin ve say\u0131sal de\u011ferler</li> <li>Binary-safe</li> <li> <p>Atomic operasyonlar</p> </li> <li> <p>Hash</p> </li> <li>Alan-de\u011fer \u00e7iftleri</li> <li>Nesne temsili</li> <li> <p>K\u0131smi g\u00fcncelleme</p> </li> <li> <p>List</p> </li> <li>S\u0131ral\u0131 koleksiyonlar</li> <li>Queue/Stack yap\u0131lar\u0131</li> <li> <p>Blocking operasyonlar</p> </li> <li> <p>Set</p> </li> <li>Benzersiz elemanlar</li> <li>K\u00fcme operasyonlar\u0131</li> <li> <p>Random eleman se\u00e7imi</p> </li> <li> <p>Sorted Set</p> </li> <li>S\u0131ral\u0131 benzersiz elemanlar</li> <li>Skor bazl\u0131 s\u0131ralama</li> <li>Range sorgular\u0131</li> </ol>"},{"location":"mid-level/caching/redis/#redis-kullanm-net","title":"Redis Kullan\u0131m\u0131 (.NET)","text":"<ol> <li> <p>Temel Kurulum <pre><code>// NuGet paketi: StackExchange.Redis\npublic class RedisService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisService&gt; _logger;\n\n    public RedisService(IConnectionMultiplexer redis, ILogger&lt;RedisService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task SetAsync&lt;T&gt;(string key, T value, TimeSpan? expiry = null)\n    {\n        var db = _redis.GetDatabase();\n        var serializedValue = JsonSerializer.Serialize(value);\n        await db.StringSetAsync(key, serializedValue, expiry);\n    }\n\n    public async Task&lt;T&gt; GetAsync&lt;T&gt;(string key)\n    {\n        var db = _redis.GetDatabase();\n        var value = await db.StringGetAsync(key);\n        return value.HasValue ? JsonSerializer.Deserialize&lt;T&gt;(value) : default;\n    }\n}\n</code></pre></p> </li> <li> <p>Hash Kullan\u0131m\u0131 <pre><code>public class RedisHashService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisHashService&gt; _logger;\n\n    public RedisHashService(IConnectionMultiplexer redis, ILogger&lt;RedisHashService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task SetHashAsync&lt;T&gt;(string key, string field, T value)\n    {\n        var db = _redis.GetDatabase();\n        var serializedValue = JsonSerializer.Serialize(value);\n        await db.HashSetAsync(key, field, serializedValue);\n    }\n\n    public async Task&lt;T&gt; GetHashAsync&lt;T&gt;(string key, string field)\n    {\n        var db = _redis.GetDatabase();\n        var value = await db.HashGetAsync(key, field);\n        return value.HasValue ? JsonSerializer.Deserialize&lt;T&gt;(value) : default;\n    }\n}\n</code></pre></p> </li> <li> <p>List Kullan\u0131m\u0131 <pre><code>public class RedisListService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisListService&gt; _logger;\n\n    public RedisListService(IConnectionMultiplexer redis, ILogger&lt;RedisListService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task PushAsync&lt;T&gt;(string key, T value)\n    {\n        var db = _redis.GetDatabase();\n        var serializedValue = JsonSerializer.Serialize(value);\n        await db.ListRightPushAsync(key, serializedValue);\n    }\n\n    public async Task&lt;T&gt; PopAsync&lt;T&gt;(string key)\n    {\n        var db = _redis.GetDatabase();\n        var value = await db.ListLeftPopAsync(key);\n        return value.HasValue ? JsonSerializer.Deserialize&lt;T&gt;(value) : default;\n    }\n}\n</code></pre></p> </li> <li> <p>Pub/Sub Kullan\u0131m\u0131 <pre><code>public class RedisPubSubService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisPubSubService&gt; _logger;\n\n    public RedisPubSubService(IConnectionMultiplexer redis, ILogger&lt;RedisPubSubService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task PublishAsync&lt;T&gt;(string channel, T message)\n    {\n        var subscriber = _redis.GetSubscriber();\n        var serializedMessage = JsonSerializer.Serialize(message);\n        await subscriber.PublishAsync(channel, serializedMessage);\n    }\n\n    public void Subscribe&lt;T&gt;(string channel, Action&lt;T&gt; handler)\n    {\n        var subscriber = _redis.GetSubscriber();\n        subscriber.Subscribe(channel, (redisChannel, message) =&gt;\n        {\n            var deserializedMessage = JsonSerializer.Deserialize&lt;T&gt;(message);\n            handler(deserializedMessage);\n        });\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/caching/redis/#redis-best-practices","title":"Redis Best Practices","text":"<ol> <li>Ba\u011flant\u0131 Y\u00f6netimi</li> <li>Connection pooling</li> <li>Ba\u011flant\u0131 multiplexing</li> <li>Timeout y\u00f6netimi</li> <li> <p>Retry politikalar\u0131</p> </li> <li> <p>Veri Tasar\u0131m\u0131</p> </li> <li>Uygun veri tipleri</li> <li>Key naming conventions</li> <li>Veri boyutu optimizasyonu</li> <li> <p>TTL kullan\u0131m\u0131</p> </li> <li> <p>Performans</p> </li> <li>Pipeline kullan\u0131m\u0131</li> <li>Batch i\u015flemler</li> <li>Memory optimizasyonu</li> <li> <p>Monitoring</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Authentication</li> <li>SSL/TLS</li> <li>Network izolasyonu</li> <li>Access control</li> </ol>"},{"location":"mid-level/caching/redis/#redis-monitoring","title":"Redis Monitoring","text":"<ol> <li>Redis CLI</li> <li>INFO komutu</li> <li>MONITOR komutu</li> <li>SLOWLOG komutu</li> <li> <p>MEMORY komutu</p> </li> <li> <p>RedisInsight</p> </li> <li>Real-time monitoring</li> <li>Performance metrics</li> <li>Memory analysis</li> <li> <p>Key space analysis</p> </li> <li> <p>Prometheus + Grafana</p> </li> <li>Custom metrics</li> <li>Alerting</li> <li>Dashboard</li> <li>Trend analysis</li> </ol>"},{"location":"mid-level/caching/redis/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/caching/redis/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Redis nedir ve ne i\u00e7in kullan\u0131l\u0131r?</li> <li> <p>Cevap: Redis, in-memory veri yap\u0131s\u0131 deposu olarak kullan\u0131lan bir NoSQL veritaban\u0131d\u0131r. \u00d6nbellekleme, oturum y\u00f6netimi, mesaj kuyru\u011fu ve ger\u00e7ek zamanl\u0131 analitik gibi senaryolarda kullan\u0131l\u0131r.</p> </li> <li> <p>Redis'in temel veri tipleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>String</li> <li>Hash</li> <li>List</li> <li>Set</li> <li>Sorted Set</li> </ul> </li> <li> <p>Redis'in avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Y\u00fcksek performans</li> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Esneklik</li> <li>Zengin veri tipleri</li> <li>Atomic operasyonlar</li> </ul> </li> <li> <p>Redis'te persistence nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>RDB (Redis Database)</li> <li>AOF (Append Only File)</li> <li>Hybrid yakla\u015f\u0131m</li> </ul> </li> <li> <p>Redis Cluster nedir?</p> </li> <li>Cevap: Redis Cluster, verileri birden fazla Redis node'u aras\u0131nda da\u011f\u0131tan ve y\u00fcksek kullan\u0131labilirlik sa\u011flayan bir yap\u0131d\u0131r.</li> </ol>"},{"location":"mid-level/caching/redis/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Redis'te string veri tipi nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class RedisStringService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisStringService&gt; _logger;\n\n    public RedisStringService(IConnectionMultiplexer redis, ILogger&lt;RedisStringService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task SetAsync&lt;T&gt;(string key, T value, TimeSpan? expiry = null)\n    {\n        var db = _redis.GetDatabase();\n        var serializedValue = JsonSerializer.Serialize(value);\n        await db.StringSetAsync(key, serializedValue, expiry);\n    }\n\n    public async Task&lt;T&gt; GetAsync&lt;T&gt;(string key)\n    {\n        var db = _redis.GetDatabase();\n        var value = await db.StringGetAsync(key);\n        return value.HasValue ? JsonSerializer.Deserialize&lt;T&gt;(value) : default;\n    }\n}\n</code></pre></p> </li> <li> <p>Redis'te hash veri tipi nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class RedisHashService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisHashService&gt; _logger;\n\n    public RedisHashService(IConnectionMultiplexer redis, ILogger&lt;RedisHashService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task SetHashAsync&lt;T&gt;(string key, string field, T value)\n    {\n        var db = _redis.GetDatabase();\n        var serializedValue = JsonSerializer.Serialize(value);\n        await db.HashSetAsync(key, field, serializedValue);\n    }\n\n    public async Task&lt;T&gt; GetHashAsync&lt;T&gt;(string key, string field)\n    {\n        var db = _redis.GetDatabase();\n        var value = await db.HashGetAsync(key, field);\n        return value.HasValue ? JsonSerializer.Deserialize&lt;T&gt;(value) : default;\n    }\n}\n</code></pre></p> </li> <li> <p>Redis'te pub/sub pattern nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>public class RedisPubSubService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisPubSubService&gt; _logger;\n\n    public RedisPubSubService(IConnectionMultiplexer redis, ILogger&lt;RedisPubSubService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task PublishAsync&lt;T&gt;(string channel, T message)\n    {\n        var subscriber = _redis.GetSubscriber();\n        var serializedMessage = JsonSerializer.Serialize(message);\n        await subscriber.PublishAsync(channel, serializedMessage);\n    }\n\n    public void Subscribe&lt;T&gt;(string channel, Action&lt;T&gt; handler)\n    {\n        var subscriber = _redis.GetSubscriber();\n        subscriber.Subscribe(channel, (redisChannel, message) =&gt;\n        {\n            var deserializedMessage = JsonSerializer.Deserialize&lt;T&gt;(message);\n            handler(deserializedMessage);\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Redis'te transaction nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class RedisTransactionService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisTransactionService&gt; _logger;\n\n    public RedisTransactionService(IConnectionMultiplexer redis, ILogger&lt;RedisTransactionService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task&lt;bool&gt; ExecuteTransactionAsync(string key1, string key2, string value)\n    {\n        var db = _redis.GetDatabase();\n        var tran = db.CreateTransaction();\n\n        var set1 = tran.StringSetAsync(key1, value);\n        var set2 = tran.StringSetAsync(key2, value);\n\n        return await tran.ExecuteAsync();\n    }\n}\n</code></pre></p> </li> <li> <p>Redis'te pipeline nas\u0131l kullan\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class RedisPipelineService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly ILogger&lt;RedisPipelineService&gt; _logger;\n\n    public RedisPipelineService(IConnectionMultiplexer redis, ILogger&lt;RedisPipelineService&gt; logger)\n    {\n        _redis = redis;\n        _logger = logger;\n    }\n\n    public async Task&lt;List&lt;string&gt;&gt; ExecutePipelineAsync(List&lt;string&gt; keys)\n    {\n        var db = _redis.GetDatabase();\n        var batch = db.CreateBatch();\n        var tasks = new List&lt;Task&lt;RedisValue&gt;&gt;();\n\n        foreach (var key in keys)\n        {\n            tasks.Add(batch.StringGetAsync(key));\n        }\n\n        batch.Execute();\n        var results = await Task.WhenAll(tasks);\n        return results.Select(r =&gt; r.ToString()).ToList();\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/caching/redis/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Redis Cluster'da veri nas\u0131l da\u011f\u0131t\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Hash slot da\u011f\u0131t\u0131m\u0131</li> <li>Consistent hashing</li> <li>Replica sharding</li> <li>Failover mekanizmalar\u0131</li> </ul> </li> <li> <p>Redis'te memory optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Memory profiling</li> <li>Key compression</li> <li>Data structure se\u00e7imi</li> <li>Memory limits</li> <li>Eviction politikalar\u0131</li> </ul> </li> <li> <p>Redis'te g\u00fcvenlik nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Authentication</li> <li>SSL/TLS</li> <li>Network izolasyonu</li> <li>Access control</li> <li>Audit logging</li> </ul> </li> <li> <p>Redis'te monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Redis CLI</li> <li>RedisInsight</li> <li>Prometheus + Grafana</li> <li>Custom metrics</li> <li>Alerting rules</li> </ul> </li> <li> <p>Redis'te backup ve recovery nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>RDB backup</li> <li>AOF backup</li> <li>Point-in-time recovery</li> <li>Disaster recovery</li> <li>Replication </li> </ul> </li> </ol>"},{"location":"mid-level/clean-architecture/","title":"Clean Architecture","text":""},{"location":"mid-level/clean-architecture/#giris","title":"Giri\u015f","text":"<p>Clean Architecture, software design'da dependency direction, separation of concerns ve maintainability i\u00e7in kritik \u00f6neme sahip bir architectural pattern'dir. Mid-level geli\u015ftiriciler i\u00e7in Clean Architecture'i anlamak, scalable, maintainable ve testable software geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, domain layer, application layer, infrastructure layer, presentation layer ve cross-cutting concerns konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/clean-architecture/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/clean-architecture/#1-domain-layer","title":"1. Domain Layer","text":"<p>Business logic, entities, value objects, ve domain services.</p> <p>\u00d6\u011frenilecekler: - Domain entities - Value objects - Domain services - Business rules - Domain events</p>"},{"location":"mid-level/clean-architecture/#2-application-layer","title":"2. Application Layer","text":"<p>Use cases, application services, ve orchestration logic.</p> <p>\u00d6\u011frenilecekler: - Use case implementation - Application services - Command/Query separation - Application logic - Service orchestration</p>"},{"location":"mid-level/clean-architecture/#3-infrastructure-layer","title":"3. Infrastructure Layer","text":"<p>External concerns, data access, ve third-party integrations.</p> <p>\u00d6\u011frenilecekler: - Data access implementation - External service integration - Configuration management - Logging implementation - Caching implementation</p>"},{"location":"mid-level/clean-architecture/#4-presentation-layer","title":"4. Presentation Layer","text":"<p>User interface, API controllers, ve presentation logic.</p> <p>\u00d6\u011frenilecekler: - API design - Controller implementation - View models - Presentation logic - User interface</p>"},{"location":"mid-level/clean-architecture/#5-cross-cutting-concerns","title":"5. Cross-Cutting Concerns","text":"<p>Logging, security, caching, ve configuration management.</p> <p>\u00d6\u011frenilecekler: - Cross-cutting concerns - Middleware implementation - Aspect-oriented programming - Configuration management - Security implementation</p>"},{"location":"mid-level/clean-architecture/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/clean-architecture/#1-maintainability","title":"1. Maintainability","text":"<ul> <li>Clear separation of concerns</li> <li>Easy to understand</li> <li>Simple to modify</li> <li>Reduced complexity</li> </ul>"},{"location":"mid-level/clean-architecture/#2-testability","title":"2. Testability","text":"<ul> <li>Isolated components</li> <li>Easy to mock</li> <li>Unit testable</li> <li>Integration testable</li> </ul>"},{"location":"mid-level/clean-architecture/#3-scalability","title":"3. Scalability","text":"<ul> <li>Modular design</li> <li>Easy to extend</li> <li>Loose coupling</li> <li>High cohesion</li> </ul>"},{"location":"mid-level/clean-architecture/#4-team-collaboration","title":"4. Team Collaboration","text":"<ul> <li>Clear boundaries</li> <li>Shared understanding</li> <li>Parallel development</li> <li>Knowledge transfer</li> </ul>"},{"location":"mid-level/clean-architecture/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/clean-architecture/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Clean Architecture nedir?</li> <li> <p>Cevap: Dependency direction, separation of concerns, maintainable design.</p> </li> <li> <p>Domain Layer nedir?</p> </li> <li> <p>Cevap: Business logic, entities, value objects, domain services.</p> </li> <li> <p>Application Layer nedir?</p> </li> <li> <p>Cevap: Use cases, application services, orchestration logic.</p> </li> <li> <p>Infrastructure Layer nedir?</p> </li> <li> <p>Cevap: External concerns, data access, third-party integrations.</p> </li> <li> <p>Presentation Layer nedir?</p> </li> <li>Cevap: User interface, API controllers, presentation logic.</li> </ol>"},{"location":"mid-level/clean-architecture/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Dependency direction nas\u0131l sa\u011flan\u0131r?</li> <li> <p>Cevap: Dependency inversion, abstraction usage, interface design.</p> </li> <li> <p>Cross-cutting concerns nas\u0131l handle edilir?</p> </li> <li> <p>Cevap: Middleware, aspect-oriented programming, configuration.</p> </li> <li> <p>Domain events nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Event publishing, event handling, event sourcing.</p> </li> <li> <p>Use case pattern nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: Command/Query separation, application services, orchestration.</p> </li> <li> <p>Repository pattern nas\u0131l implement edilir?</p> </li> <li>Cevap: Interface design, data access abstraction, dependency injection.</li> </ol>"},{"location":"mid-level/clean-architecture/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/clean-architecture/#1-layer-design","title":"1. Layer Design","text":"<ul> <li>Clear boundaries</li> <li>Single responsibility</li> <li>Dependency direction</li> <li>Interface segregation</li> <li>Abstraction usage</li> </ul>"},{"location":"mid-level/clean-architecture/#2-domain-modeling","title":"2. Domain Modeling","text":"<ul> <li>Rich domain models</li> <li>Value objects</li> <li>Domain services</li> <li>Business rules</li> <li>Domain events</li> </ul>"},{"location":"mid-level/clean-architecture/#3-dependency-management","title":"3. Dependency Management","text":"<ul> <li>Dependency inversion</li> <li>Interface design</li> <li>Service registration</li> <li>Lifecycle management</li> <li>Configuration</li> </ul>"},{"location":"mid-level/clean-architecture/#4-testing-strategy","title":"4. Testing Strategy","text":"<ul> <li>Unit testing</li> <li>Integration testing</li> <li>Mock usage</li> <li>Test isolation</li> <li>Coverage planning</li> </ul>"},{"location":"mid-level/clean-architecture/#5-documentation","title":"5. Documentation","text":"<ul> <li>Architecture documentation</li> <li>API documentation</li> <li>Code documentation</li> <li>Design decisions</li> <li>Knowledge sharing</li> </ul>"},{"location":"mid-level/clean-architecture/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Clean Architecture</li> <li>Clean Architecture in .NET</li> <li>Domain-Driven Design</li> <li>CQRS Pattern</li> <li>Repository Pattern</li> <li>Clean Architecture Examples </li> </ul>"},{"location":"mid-level/clean-architecture/application-layer/","title":"Application Layer","text":""},{"location":"mid-level/clean-architecture/application-layer/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Application Layer, Clean Architecture'\u0131n domain layer ile d\u0131\u015f katmanlar aras\u0131nda k\u00f6pr\u00fc g\u00f6revi g\u00f6ren katman\u0131d\u0131r. Bu katman, use case'lerin implementasyonunu i\u00e7erir ve domain layer'\u0131 d\u0131\u015f d\u00fcnyadan izole eder.</p>"},{"location":"mid-level/clean-architecture/application-layer/#temel-bilesenler","title":"Temel Bile\u015fenler","text":""},{"location":"mid-level/clean-architecture/application-layer/#1-use-cases","title":"1. Use Cases","text":"<p>Use case'ler, uygulaman\u0131n temel i\u015flevlerini tan\u0131mlar ve implemente eder.</p> <p>\u00d6rnek Kod: <pre><code>public interface ICreateOrderUseCase\n{\n    Task&lt;OrderDto&gt; Execute(CreateOrderRequest request);\n}\n\npublic class CreateOrderUseCase : ICreateOrderUseCase\n{\n    private readonly IOrderRepository _orderRepository;\n    private readonly IProductRepository _productRepository;\n    private readonly IUnitOfWork _unitOfWork;\n\n    public CreateOrderUseCase(\n        IOrderRepository orderRepository,\n        IProductRepository productRepository,\n        IUnitOfWork unitOfWork)\n    {\n        _orderRepository = orderRepository;\n        _productRepository = productRepository;\n        _unitOfWork = unitOfWork;\n    }\n\n    public async Task&lt;OrderDto&gt; Execute(CreateOrderRequest request)\n    {\n        var order = new Order(request.OrderNumber);\n\n        foreach (var item in request.Items)\n        {\n            var product = await _productRepository.GetById(item.ProductId);\n            order.AddItem(product, item.Quantity);\n        }\n\n        await _orderRepository.Add(order);\n        await _unitOfWork.SaveChanges();\n\n        return OrderDto.FromOrder(order);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/application-layer/#2-dtos-data-transfer-objects","title":"2. DTOs (Data Transfer Objects)","text":"<p>DTO'lar, katmanlar aras\u0131 veri transferini sa\u011flar.</p> <p>\u00d6rnek Kod: <pre><code>public class OrderDto\n{\n    public Guid Id { get; set; }\n    public string OrderNumber { get; set; }\n    public DateTime OrderDate { get; set; }\n    public OrderStatus Status { get; set; }\n    public List&lt;OrderItemDto&gt; Items { get; set; }\n\n    public static OrderDto FromOrder(Order order)\n    {\n        return new OrderDto\n        {\n            Id = order.Id,\n            OrderNumber = order.OrderNumber,\n            OrderDate = order.OrderDate,\n            Status = order.Status,\n            Items = order.Items.Select(OrderItemDto.FromOrderItem).ToList()\n        };\n    }\n}\n\npublic class CreateOrderRequest\n{\n    public string OrderNumber { get; set; }\n    public List&lt;OrderItemRequest&gt; Items { get; set; }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/application-layer/#3-interfaces","title":"3. Interfaces","text":"<p>Interface'ler, domain layer ile di\u011fer katmanlar aras\u0131ndaki ba\u011f\u0131ml\u0131l\u0131klar\u0131 tan\u0131mlar.</p> <p>\u00d6rnek Kod: <pre><code>public interface IOrderRepository\n{\n    Task&lt;Order&gt; GetById(Guid id);\n    Task Add(Order order);\n    Task Update(Order order);\n    Task Delete(Order order);\n}\n\npublic interface IUnitOfWork\n{\n    Task&lt;int&gt; SaveChanges();\n    Task BeginTransaction();\n    Task CommitTransaction();\n    Task RollbackTransaction();\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/application-layer/#4-mappings","title":"4. Mappings","text":"<p>Mappings, domain nesneleri ile DTO'lar aras\u0131ndaki d\u00f6n\u00fc\u015f\u00fcmleri sa\u011flar.</p> <p>\u00d6rnek Kod: <pre><code>public static class OrderMapping\n{\n    public static OrderDto ToDto(this Order order)\n    {\n        return new OrderDto\n        {\n            Id = order.Id,\n            OrderNumber = order.OrderNumber,\n            OrderDate = order.OrderDate,\n            Status = order.Status,\n            Items = order.Items.Select(i =&gt; i.ToDto()).ToList()\n        };\n    }\n\n    public static Order ToDomain(this CreateOrderRequest request)\n    {\n        var order = new Order(request.OrderNumber);\n        // Mapping logic\n        return order;\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/application-layer/#5-validators","title":"5. Validators","text":"<p>Validators, gelen isteklerin do\u011frulu\u011funu kontrol eder.</p> <p>\u00d6rnek Kod: <pre><code>public class CreateOrderRequestValidator : AbstractValidator&lt;CreateOrderRequest&gt;\n{\n    public CreateOrderRequestValidator()\n    {\n        RuleFor(x =&gt; x.OrderNumber)\n            .NotEmpty()\n            .MaximumLength(50);\n\n        RuleFor(x =&gt; x.Items)\n            .NotEmpty()\n            .Must(items =&gt; items.Count &gt; 0)\n            .WithMessage(\"En az bir \u00fcr\u00fcn se\u00e7ilmelidir\");\n\n        RuleForEach(x =&gt; x.Items)\n            .SetValidator(new OrderItemRequestValidator());\n    }\n}\n\npublic class OrderItemRequestValidator : AbstractValidator&lt;OrderItemRequest&gt;\n{\n    public OrderItemRequestValidator()\n    {\n        RuleFor(x =&gt; x.ProductId)\n            .NotEmpty();\n\n        RuleFor(x =&gt; x.Quantity)\n            .GreaterThan(0);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/application-layer/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/clean-architecture/application-layer/#1-use-case-tasarm","title":"1. Use Case Tasar\u0131m\u0131","text":"<ul> <li>Her use case tek bir sorumlulu\u011fa sahip olmal\u0131d\u0131r</li> <li>Use case'ler interface'ler \u00fczerinden tan\u0131mlanmal\u0131d\u0131r</li> <li>Use case'ler ba\u011f\u0131ms\u0131z olarak test edilebilir olmal\u0131d\u0131r</li> <li>Use case'ler domain logic i\u00e7ermemelidir</li> </ul>"},{"location":"mid-level/clean-architecture/application-layer/#2-dto-tasarm","title":"2. DTO Tasar\u0131m\u0131","text":"<ul> <li>DTO'lar immutable olmal\u0131d\u0131r</li> <li>DTO'lar sadece gerekli verileri i\u00e7ermelidir</li> <li>DTO'lar validation logic i\u00e7ermemelidir</li> <li>DTO'lar mapping logic i\u00e7ermemelidir</li> </ul>"},{"location":"mid-level/clean-architecture/application-layer/#3-interface-tasarm","title":"3. Interface Tasar\u0131m\u0131","text":"<ul> <li>Interface'ler k\u00fc\u00e7\u00fck ve \u00f6z olmal\u0131d\u0131r</li> <li>Interface'ler ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize etmelidir</li> <li>Interface'ler domain layer'\u0131 izole etmelidir</li> <li>Interface'ler test edilebilirli\u011fi art\u0131rmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/application-layer/#4-validation-stratejisi","title":"4. Validation Stratejisi","text":"<ul> <li>Validation logic use case'lerden ayr\u0131 tutulmal\u0131d\u0131r</li> <li>Validation rules a\u00e7\u0131k ve anla\u015f\u0131l\u0131r olmal\u0131d\u0131r</li> <li>Validation hatalar\u0131 anlaml\u0131 mesajlar i\u00e7ermelidir</li> <li>Validation i\u015flemleri asenkron olabilmelidir</li> </ul>"},{"location":"mid-level/clean-architecture/application-layer/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/clean-architecture/application-layer/#1-use-case-ve-service-arasndaki-fark-nedir","title":"1. Use case ve service aras\u0131ndaki fark nedir?","text":"<ul> <li>Use case'ler belirli bir i\u015f ak\u0131\u015f\u0131n\u0131 temsil eder</li> <li>Service'ler genel i\u015flevleri sa\u011flar</li> <li>Use case'ler daha spesifiktir</li> <li>Service'ler daha geneldir</li> </ul>"},{"location":"mid-level/clean-architecture/application-layer/#2-dtolar-neden-kullanlmaldr","title":"2. DTO'lar neden kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Domain nesnelerini korumak i\u00e7in</li> <li>Veri transferini optimize etmek i\u00e7in</li> <li>Katmanlar aras\u0131 ba\u011f\u0131ml\u0131l\u0131klar\u0131 azaltmak i\u00e7in</li> <li>API kontratlar\u0131n\u0131 tan\u0131mlamak i\u00e7in</li> </ul>"},{"location":"mid-level/clean-architecture/application-layer/#3-validation-nerede-yaplmaldr","title":"3. Validation nerede yap\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Request validation application layer'da</li> <li>Domain validation domain layer'da</li> <li>Business rule validation domain layer'da</li> <li>Cross-cutting validation infrastructure layer'da</li> </ul>"},{"location":"mid-level/clean-architecture/application-layer/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Application Layer</li> <li>Clean Architecture - Application Layer</li> <li>Application Layer Best Practices </li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/","title":"Cross-Cutting Concerns","text":""},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Cross-Cutting Concerns, uygulaman\u0131n farkl\u0131 katmanlar\u0131nda tekrar eden ve merkezi olarak y\u00f6netilmesi gereken i\u015flevleri ifade eder. Bu i\u015flevler, uygulaman\u0131n temel i\u015f mant\u0131\u011f\u0131ndan ba\u011f\u0131ms\u0131z olarak t\u00fcm katmanlarda kullan\u0131l\u0131r.</p>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#temel-bilesenler","title":"Temel Bile\u015fenler","text":""},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#1-logging","title":"1. Logging","text":"<p>Uygulama genelinde loglama i\u015flemleri.</p> <p>\u00d6rnek Kod: <pre><code>public interface ILoggerService\n{\n    void LogInformation(string message);\n    void LogWarning(string message);\n    void LogError(string message, Exception exception = null);\n    void LogDebug(string message);\n}\n\npublic class SerilogLoggerService : ILoggerService\n{\n    private readonly ILogger _logger;\n\n    public SerilogLoggerService(ILogger logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogInformation(string message)\n    {\n        _logger.LogInformation(message);\n    }\n\n    public void LogWarning(string message)\n    {\n        _logger.LogWarning(message);\n    }\n\n    public void LogError(string message, Exception exception = null)\n    {\n        _logger.LogError(exception, message);\n    }\n\n    public void LogDebug(string message)\n    {\n        _logger.LogDebug(message);\n    }\n}\n\n// Logging middleware\npublic class RequestLoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILoggerService _logger;\n\n    public RequestLoggingMiddleware(RequestDelegate next, ILoggerService logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var startTime = DateTime.UtcNow;\n\n        try\n        {\n            await _next(context);\n            var duration = DateTime.UtcNow - startTime;\n\n            _logger.LogInformation(\n                \"Request {Method} {Path} completed in {Duration}ms\",\n                context.Request.Method,\n                context.Request.Path,\n                duration.TotalMilliseconds\n            );\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Request failed\");\n            throw;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#2-exception-handling","title":"2. Exception Handling","text":"<p>Merkezi hata y\u00f6netimi.</p> <p>\u00d6rnek Kod: <pre><code>public class GlobalExceptionHandler : IExceptionHandler\n{\n    private readonly ILoggerService _logger;\n    private readonly IWebHostEnvironment _environment;\n\n    public GlobalExceptionHandler(\n        ILoggerService logger,\n        IWebHostEnvironment environment)\n    {\n        _logger = logger;\n        _environment = environment;\n    }\n\n    public async Task HandleExceptionAsync(HttpContext context, Exception exception)\n    {\n        _logger.LogError(exception, \"An unhandled exception occurred\");\n\n        var response = new ErrorResponse\n        {\n            Message = _environment.IsDevelopment() \n                ? exception.Message \n                : \"An error occurred while processing your request\",\n            Details = _environment.IsDevelopment() \n                ? exception.ToString() \n                : null\n        };\n\n        context.Response.ContentType = \"application/json\";\n        context.Response.StatusCode = GetStatusCode(exception);\n\n        await context.Response.WriteAsJsonAsync(response);\n    }\n\n    private static int GetStatusCode(Exception exception)\n    {\n        return exception switch\n        {\n            ValidationException =&gt; StatusCodes.Status400BadRequest,\n            NotFoundException =&gt; StatusCodes.Status404NotFound,\n            UnauthorizedAccessException =&gt; StatusCodes.Status401Unauthorized,\n            _ =&gt; StatusCodes.Status500InternalServerError\n        };\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#3-caching","title":"3. Caching","text":"<p>\u00d6nbellekleme i\u015flemleri.</p> <p>\u00d6rnek Kod: <pre><code>public interface ICacheService\n{\n    Task&lt;T&gt; GetAsync&lt;T&gt;(string key);\n    Task SetAsync&lt;T&gt;(string key, T value, TimeSpan? expiration = null);\n    Task RemoveAsync(string key);\n    Task&lt;bool&gt; ExistsAsync(string key);\n}\n\npublic class DistributedCacheService : ICacheService\n{\n    private readonly IDistributedCache _cache;\n    private readonly ILoggerService _logger;\n\n    public DistributedCacheService(\n        IDistributedCache cache,\n        ILoggerService logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; GetAsync&lt;T&gt;(string key)\n    {\n        try\n        {\n            var value = await _cache.GetStringAsync(key);\n            return value == null ? default : JsonSerializer.Deserialize&lt;T&gt;(value);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Cache read error\");\n            return default;\n        }\n    }\n\n    public async Task SetAsync&lt;T&gt;(string key, T value, TimeSpan? expiration = null)\n    {\n        try\n        {\n            var options = new DistributedCacheEntryOptions();\n            if (expiration.HasValue)\n            {\n                options.SetAbsoluteExpiration(expiration.Value);\n            }\n\n            var serializedValue = JsonSerializer.Serialize(value);\n            await _cache.SetStringAsync(key, serializedValue, options);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Cache write error\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#4-validation","title":"4. Validation","text":"<p>Merkezi do\u011frulama i\u015flemleri.</p> <p>\u00d6rnek Kod: <pre><code>public interface IValidator&lt;T&gt;\n{\n    Task&lt;ValidationResult&gt; ValidateAsync(T instance);\n}\n\npublic class FluentValidator&lt;T&gt; : IValidator&lt;T&gt;\n{\n    private readonly IEnumerable&lt;IValidationRule&lt;T&gt;&gt; _rules;\n\n    public FluentValidator(IEnumerable&lt;IValidationRule&lt;T&gt;&gt; rules)\n    {\n        _rules = rules;\n    }\n\n    public async Task&lt;ValidationResult&gt; ValidateAsync(T instance)\n    {\n        var errors = new List&lt;ValidationError&gt;();\n\n        foreach (var rule in _rules)\n        {\n            var result = await rule.ValidateAsync(instance);\n            if (!result.IsValid)\n            {\n                errors.AddRange(result.Errors);\n            }\n        }\n\n        return new ValidationResult(errors);\n    }\n}\n\n// Validation middleware\npublic class ValidationMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IValidatorFactory _validatorFactory;\n\n    public ValidationMiddleware(\n        RequestDelegate next,\n        IValidatorFactory validatorFactory)\n    {\n        _next = next;\n        _validatorFactory = validatorFactory;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.Method == HttpMethods.Post || \n            context.Request.Method == HttpMethods.Put)\n        {\n            var model = await context.Request.ReadFromJsonAsync&lt;object&gt;();\n            var validator = _validatorFactory.GetValidator(model.GetType());\n\n            var result = await validator.ValidateAsync(model);\n            if (!result.IsValid)\n            {\n                context.Response.StatusCode = StatusCodes.Status400BadRequest;\n                await context.Response.WriteAsJsonAsync(result);\n                return;\n            }\n        }\n\n        await _next(context);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#5-security","title":"5. Security","text":"<p>G\u00fcvenlik ile ilgili i\u015flemler.</p> <p>\u00d6rnek Kod: <pre><code>public interface ISecurityService\n{\n    Task&lt;string&gt; GenerateJwtToken(User user);\n    Task&lt;bool&gt; ValidateToken(string token);\n    Task&lt;User&gt; GetUserFromToken(string token);\n}\n\npublic class JwtSecurityService : ISecurityService\n{\n    private readonly JwtSettings _jwtSettings;\n    private readonly ILoggerService _logger;\n\n    public JwtSecurityService(\n        IOptions&lt;JwtSettings&gt; jwtSettings,\n        ILoggerService logger)\n    {\n        _jwtSettings = jwtSettings.Value;\n        _logger = logger;\n    }\n\n    public async Task&lt;string&gt; GenerateJwtToken(User user)\n    {\n        var claims = new[]\n        {\n            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n            new Claim(ClaimTypes.Name, user.Username),\n            new Claim(ClaimTypes.Role, user.Role)\n        };\n\n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwtSettings.Secret));\n        var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        var token = new JwtSecurityToken(\n            issuer: _jwtSettings.Issuer,\n            audience: _jwtSettings.Audience,\n            claims: claims,\n            expires: DateTime.UtcNow.AddMinutes(_jwtSettings.ExpiryMinutes),\n            signingCredentials: credentials\n        );\n\n        return new JwtSecurityTokenHandler().WriteToken(token);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#1-logging-stratejisi","title":"1. Logging Stratejisi","text":"<ul> <li>Log seviyelerini do\u011fru kullan\u0131n</li> <li>Anlaml\u0131 log mesajlar\u0131 yaz\u0131n</li> <li>Structured logging kullan\u0131n</li> <li>Log rotasyonu yap\u0131land\u0131r\u0131n</li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#2-exception-handling_1","title":"2. Exception Handling","text":"<ul> <li>Merkezi exception handling kullan\u0131n</li> <li>\u00d6zel exception tipleri tan\u0131mlay\u0131n</li> <li>Hata mesajlar\u0131n\u0131 anlaml\u0131 yap\u0131n</li> <li>Production'da detayl\u0131 hata g\u00f6stermeyin</li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#3-caching-stratejisi","title":"3. Caching Stratejisi","text":"<ul> <li>Cache key'lerini anlaml\u0131 se\u00e7in</li> <li>Cache s\u00fcrelerini optimize edin</li> <li>Cache invalidation stratejisi belirleyin</li> <li>Distributed cache kullan\u0131n</li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#4-validation-yaklasm","title":"4. Validation Yakla\u015f\u0131m\u0131","text":"<ul> <li>Fluent validation kullan\u0131n</li> <li>Validation kurallar\u0131n\u0131 merkezi y\u00f6netin</li> <li>Custom validators yaz\u0131n</li> <li>Validation hatalar\u0131n\u0131 anlaml\u0131 yap\u0131n</li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#5-security-onlemleri","title":"5. Security \u00d6nlemleri","text":"<ul> <li>JWT kullan\u0131n</li> <li>Role-based authorization uygulay\u0131n</li> <li>Input validation yap\u0131n</li> <li>CORS politikas\u0131 belirleyin</li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#1-cross-cutting-concerns-neden-onemlidir","title":"1. Cross-Cutting Concerns neden \u00f6nemlidir?","text":"<ul> <li>Kod tekrar\u0131n\u0131 \u00f6nler</li> <li>Merkezi y\u00f6netim sa\u011flar</li> <li>Bak\u0131m\u0131 kolayla\u015ft\u0131r\u0131r</li> <li>Tutarl\u0131l\u0131k sa\u011flar</li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#2-logging-nasl-yaplandrlmaldr","title":"2. Logging nas\u0131l yap\u0131land\u0131r\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Log seviyeleri belirlenmelidir</li> <li>Structured logging kullan\u0131lmal\u0131d\u0131r</li> <li>Log rotasyonu yap\u0131land\u0131r\u0131lmal\u0131d\u0131r</li> <li>Log analizi yap\u0131lmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#3-caching-stratejisi-nasl-belirlenmelidir","title":"3. Caching stratejisi nas\u0131l belirlenmelidir?","text":"<ul> <li>Cache key'leri anlaml\u0131 olmal\u0131d\u0131r</li> <li>Cache s\u00fcreleri optimize edilmelidir</li> <li>Cache invalidation stratejisi belirlenmelidir</li> <li>Distributed cache kullan\u0131lmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/cross-cutting-concerns/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Cross-Cutting Concerns</li> <li>Clean Architecture - Cross-Cutting Concerns</li> <li>Cross-Cutting Concerns Best Practices </li> </ul>"},{"location":"mid-level/clean-architecture/domain-layer/","title":"Domain Layer","text":""},{"location":"mid-level/clean-architecture/domain-layer/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Domain Layer, Clean Architecture'\u0131n en i\u00e7 katman\u0131d\u0131r ve i\u015f mant\u0131\u011f\u0131n\u0131n merkezini olu\u015fturur. Bu katman, uygulaman\u0131n temel i\u015f kurallar\u0131n\u0131 ve varl\u0131klar\u0131n\u0131 i\u00e7erir. D\u0131\u015f d\u00fcnyadan tamamen ba\u011f\u0131ms\u0131zd\u0131r ve di\u011fer katmanlara ba\u011f\u0131ml\u0131l\u0131\u011f\u0131 yoktur.</p>"},{"location":"mid-level/clean-architecture/domain-layer/#temel-bilesenler","title":"Temel Bile\u015fenler","text":""},{"location":"mid-level/clean-architecture/domain-layer/#1-entities","title":"1. Entities","text":"<p>Entity'ler, i\u015f mant\u0131\u011f\u0131n\u0131n temel yap\u0131 ta\u015flar\u0131d\u0131r. Her entity benzersiz bir kimli\u011fe sahiptir ve i\u015f kurallar\u0131n\u0131 i\u00e7erir.</p> <p>\u00d6rnek Kod: <pre><code>public class Order : Entity\n{\n    public Guid Id { get; private set; }\n    public string OrderNumber { get; private set; }\n    public DateTime OrderDate { get; private set; }\n    public OrderStatus Status { get; private set; }\n    private readonly List&lt;OrderItem&gt; _items = new();\n    public IReadOnlyCollection&lt;OrderItem&gt; Items =&gt; _items.AsReadOnly();\n\n    public Order(string orderNumber)\n    {\n        Id = Guid.NewGuid();\n        OrderNumber = orderNumber;\n        OrderDate = DateTime.UtcNow;\n        Status = OrderStatus.Pending;\n    }\n\n    public void AddItem(Product product, int quantity)\n    {\n        if (quantity &lt;= 0)\n            throw new DomainException(\"Quantity must be greater than zero\");\n\n        var item = new OrderItem(product, quantity);\n        _items.Add(item);\n    }\n\n    public void Complete()\n    {\n        if (Status != OrderStatus.Pending)\n            throw new DomainException(\"Order is not in pending status\");\n\n        Status = OrderStatus.Completed;\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/domain-layer/#2-value-objects","title":"2. Value Objects","text":"<p>Value Objects, kimli\u011fi olmayan ve de\u011ferleriyle tan\u0131mlanan nesnelerdir.</p> <p>\u00d6rnek Kod: <pre><code>public class Address : ValueObject\n{\n    public string Street { get; private set; }\n    public string City { get; private set; }\n    public string Country { get; private set; }\n    public string PostalCode { get; private set; }\n\n    public Address(string street, string city, string country, string postalCode)\n    {\n        Street = street;\n        City = city;\n        Country = country;\n        PostalCode = postalCode;\n    }\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return Street;\n        yield return City;\n        yield return Country;\n        yield return PostalCode;\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/domain-layer/#3-domain-events","title":"3. Domain Events","text":"<p>Domain Events, domain i\u00e7inde ger\u00e7ekle\u015fen \u00f6nemli olaylar\u0131 temsil eder.</p> <p>\u00d6rnek Kod: <pre><code>public class OrderCompletedEvent : IDomainEvent\n{\n    public Guid OrderId { get; }\n    public DateTime OccurredOn { get; }\n\n    public OrderCompletedEvent(Guid orderId)\n    {\n        OrderId = orderId;\n        OccurredOn = DateTime.UtcNow;\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/domain-layer/#4-domain-services","title":"4. Domain Services","text":"<p>Domain Services, entity'lerin kapsam\u0131 d\u0131\u015f\u0131ndaki i\u015f mant\u0131\u011f\u0131n\u0131 i\u00e7erir.</p> <p>\u00d6rnek Kod: <pre><code>public interface IOrderService\n{\n    bool CanPlaceOrder(Customer customer, Product product);\n    decimal CalculateDiscount(Order order);\n}\n\npublic class OrderService : IOrderService\n{\n    public bool CanPlaceOrder(Customer customer, Product product)\n    {\n        return customer.IsActive &amp;&amp; product.IsAvailable;\n    }\n\n    public decimal CalculateDiscount(Order order)\n    {\n        if (order.Items.Count &gt; 10)\n            return order.Total * 0.1m;\n\n        return 0;\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/domain-layer/#5-domain-exceptions","title":"5. Domain Exceptions","text":"<p>Domain Exceptions, domain katman\u0131nda olu\u015fabilecek \u00f6zel hatalar\u0131 temsil eder.</p> <p>\u00d6rnek Kod: <pre><code>public class DomainException : Exception\n{\n    public DomainException(string message) : base(message)\n    {\n    }\n\n    public DomainException(string message, Exception innerException) \n        : base(message, innerException)\n    {\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/domain-layer/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/clean-architecture/domain-layer/#1-entity-tasarm","title":"1. Entity Tasar\u0131m\u0131","text":"<ul> <li>Entity'ler immutable olmal\u0131d\u0131r</li> <li>Property'ler private set olmal\u0131d\u0131r</li> <li>\u0130\u015f kurallar\u0131 entity i\u00e7inde uygulanmal\u0131d\u0131r</li> <li>Validation logic entity i\u00e7inde olmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/domain-layer/#2-value-object-tasarm","title":"2. Value Object Tasar\u0131m\u0131","text":"<ul> <li>Immutable olmal\u0131d\u0131r</li> <li>Equality comparison override edilmelidir</li> <li>Validation logic i\u00e7ermelidir</li> <li>Business rules i\u00e7erebilir</li> </ul>"},{"location":"mid-level/clean-architecture/domain-layer/#3-domain-event-tasarm","title":"3. Domain Event Tasar\u0131m\u0131","text":"<ul> <li>Event'ler immutable olmal\u0131d\u0131r</li> <li>Event'ler sadece gerekli verileri i\u00e7ermelidir</li> <li>Event'ler anlaml\u0131 isimlere sahip olmal\u0131d\u0131r</li> <li>Event'ler ge\u00e7mi\u015f zaman kipinde olmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/domain-layer/#4-domain-service-tasarm","title":"4. Domain Service Tasar\u0131m\u0131","text":"<ul> <li>Stateless olmal\u0131d\u0131r</li> <li>Interface'ler \u00fczerinden kullan\u0131lmal\u0131d\u0131r</li> <li>Sadece domain logic i\u00e7ermelidir</li> <li>Infrastructure ba\u011f\u0131ml\u0131l\u0131\u011f\u0131 olmamal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/domain-layer/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/clean-architecture/domain-layer/#1-entity-ve-value-object-arasndaki-fark-nedir","title":"1. Entity ve Value Object aras\u0131ndaki fark nedir?","text":"<ul> <li>Entity'lerin kimli\u011fi vard\u0131r, Value Object'lerin yoktur</li> <li>Entity'ler de\u011fi\u015febilir, Value Object'ler immutable'd\u0131r</li> <li>Entity'ler referans e\u015fitli\u011fi ile, Value Object'ler de\u011fer e\u015fitli\u011fi ile kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/domain-layer/#2-domain-service-ne-zaman-kullanlmaldr","title":"2. Domain Service ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>\u0130\u015f mant\u0131\u011f\u0131 birden fazla entity'yi ilgilendirdi\u011finde</li> <li>\u0130\u015f mant\u0131\u011f\u0131 entity'lerin d\u0131\u015f\u0131nda oldu\u011funda</li> <li>Stateless operasyonlar gerekti\u011finde</li> <li>Complex business rules uyguland\u0131\u011f\u0131nda</li> </ul>"},{"location":"mid-level/clean-architecture/domain-layer/#3-domain-eventler-nasl-kullanlmaldr","title":"3. Domain Event'ler nas\u0131l kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>\u00d6nemli domain de\u011fi\u015fikliklerini bildirmek i\u00e7in</li> <li>Sistem par\u00e7alar\u0131 aras\u0131nda loose coupling sa\u011flamak i\u00e7in</li> <li>Event sourcing pattern uyguland\u0131\u011f\u0131nda</li> <li>CQRS pattern uyguland\u0131\u011f\u0131nda</li> </ul>"},{"location":"mid-level/clean-architecture/domain-layer/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Domain-Driven Design - Eric Evans</li> <li>Microsoft Domain Layer</li> <li>Domain Layer Best Practices </li> </ul>"},{"location":"mid-level/clean-architecture/infrastructure-layer/","title":"Infrastructure Layer","text":""},{"location":"mid-level/clean-architecture/infrastructure-layer/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Infrastructure Layer, Clean Architecture'\u0131n d\u0131\u015f katmanlar\u0131ndan biridir ve uygulaman\u0131n teknik detaylar\u0131n\u0131 i\u00e7erir. Bu katman, veritaban\u0131 i\u015flemleri, harici servis entegrasyonlar\u0131 ve framework kullan\u0131m\u0131 gibi teknik konular\u0131 y\u00f6netir.</p>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#temel-bilesenler","title":"Temel Bile\u015fenler","text":""},{"location":"mid-level/clean-architecture/infrastructure-layer/#1-persistence","title":"1. Persistence","text":"<p>Veritaban\u0131 i\u015flemleri ve repository implementasyonlar\u0131.</p> <p>\u00d6rnek Kod: <pre><code>public class OrderRepository : IOrderRepository\n{\n    private readonly ApplicationDbContext _context;\n\n    public OrderRepository(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task&lt;Order&gt; GetById(Guid id)\n    {\n        return await _context.Orders\n            .Include(o =&gt; o.Items)\n            .FirstOrDefaultAsync(o =&gt; o.Id == id);\n    }\n\n    public async Task Add(Order order)\n    {\n        await _context.Orders.AddAsync(order);\n    }\n\n    public async Task Update(Order order)\n    {\n        _context.Orders.Update(order);\n    }\n\n    public async Task Delete(Order order)\n    {\n        _context.Orders.Remove(order);\n    }\n}\n\npublic class UnitOfWork : IUnitOfWork\n{\n    private readonly ApplicationDbContext _context;\n    private IDbContextTransaction _transaction;\n\n    public UnitOfWork(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task&lt;int&gt; SaveChanges()\n    {\n        return await _context.SaveChangesAsync();\n    }\n\n    public async Task BeginTransaction()\n    {\n        _transaction = await _context.Database.BeginTransactionAsync();\n    }\n\n    public async Task CommitTransaction()\n    {\n        await _transaction.CommitAsync();\n    }\n\n    public async Task RollbackTransaction()\n    {\n        await _transaction.RollbackAsync();\n    }\n\n    public void Dispose()\n    {\n        _transaction?.Dispose();\n        _context.Dispose();\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#2-external-services","title":"2. External Services","text":"<p>Harici servis entegrasyonlar\u0131.</p> <p>\u00d6rnek Kod: <pre><code>public interface IEmailService\n{\n    Task SendEmailAsync(string to, string subject, string body);\n}\n\npublic class SmtpEmailService : IEmailService\n{\n    private readonly SmtpClient _smtpClient;\n    private readonly ILogger&lt;SmtpEmailService&gt; _logger;\n\n    public SmtpEmailService(SmtpClient smtpClient, ILogger&lt;SmtpEmailService&gt; logger)\n    {\n        _smtpClient = smtpClient;\n        _logger = logger;\n    }\n\n    public async Task SendEmailAsync(string to, string subject, string body)\n    {\n        try\n        {\n            var message = new MailMessage\n            {\n                To = { to },\n                Subject = subject,\n                Body = body\n            };\n\n            await _smtpClient.SendMailAsync(message);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Email g\u00f6nderimi ba\u015far\u0131s\u0131z oldu\");\n            throw;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#3-logging","title":"3. Logging","text":"<p>Loglama i\u015flemleri.</p> <p>\u00d6rnek Kod: <pre><code>public interface ILoggerService\n{\n    void LogInformation(string message);\n    void LogWarning(string message);\n    void LogError(string message, Exception exception = null);\n}\n\npublic class SerilogLoggerService : ILoggerService\n{\n    private readonly ILogger _logger;\n\n    public SerilogLoggerService(ILogger logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogInformation(string message)\n    {\n        _logger.LogInformation(message);\n    }\n\n    public void LogWarning(string message)\n    {\n        _logger.LogWarning(message);\n    }\n\n    public void LogError(string message, Exception exception = null)\n    {\n        _logger.LogError(exception, message);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#4-caching","title":"4. Caching","text":"<p>\u00d6nbellekleme i\u015flemleri.</p> <p>\u00d6rnek Kod: <pre><code>public interface ICacheService\n{\n    Task&lt;T&gt; GetAsync&lt;T&gt;(string key);\n    Task SetAsync&lt;T&gt;(string key, T value, TimeSpan? expiration = null);\n    Task RemoveAsync(string key);\n}\n\npublic class RedisCacheService : ICacheService\n{\n    private readonly IConnectionMultiplexer _redis;\n    private readonly IDatabase _database;\n\n    public RedisCacheService(IConnectionMultiplexer redis)\n    {\n        _redis = redis;\n        _database = redis.GetDatabase();\n    }\n\n    public async Task&lt;T&gt; GetAsync&lt;T&gt;(string key)\n    {\n        var value = await _database.StringGetAsync(key);\n        return value.HasValue ? JsonSerializer.Deserialize&lt;T&gt;(value) : default;\n    }\n\n    public async Task SetAsync&lt;T&gt;(string key, T value, TimeSpan? expiration = null)\n    {\n        var serializedValue = JsonSerializer.Serialize(value);\n        await _database.StringSetAsync(key, serializedValue, expiration);\n    }\n\n    public async Task RemoveAsync(string key)\n    {\n        await _database.KeyDeleteAsync(key);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#5-file-storage","title":"5. File Storage","text":"<p>Dosya depolama i\u015flemleri.</p> <p>\u00d6rnek Kod: <pre><code>public interface IFileStorageService\n{\n    Task&lt;string&gt; UploadFileAsync(Stream fileStream, string fileName);\n    Task&lt;Stream&gt; DownloadFileAsync(string filePath);\n    Task DeleteFileAsync(string filePath);\n}\n\npublic class AzureBlobStorageService : IFileStorageService\n{\n    private readonly BlobServiceClient _blobServiceClient;\n    private readonly string _containerName;\n\n    public AzureBlobStorageService(BlobServiceClient blobServiceClient, string containerName)\n    {\n        _blobServiceClient = blobServiceClient;\n        _containerName = containerName;\n    }\n\n    public async Task&lt;string&gt; UploadFileAsync(Stream fileStream, string fileName)\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);\n        var blobClient = containerClient.GetBlobClient(fileName);\n\n        await blobClient.UploadAsync(fileStream, true);\n        return blobClient.Uri.ToString();\n    }\n\n    public async Task&lt;Stream&gt; DownloadFileAsync(string filePath)\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);\n        var blobClient = containerClient.GetBlobClient(filePath);\n\n        var response = await blobClient.DownloadAsync();\n        return response.Value.Content;\n    }\n\n    public async Task DeleteFileAsync(string filePath)\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);\n        var blobClient = containerClient.GetBlobClient(filePath);\n\n        await blobClient.DeleteAsync();\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/clean-architecture/infrastructure-layer/#1-repository-tasarm","title":"1. Repository Tasar\u0131m\u0131","text":"<ul> <li>Repository'ler interface'ler \u00fczerinden tan\u0131mlanmal\u0131d\u0131r</li> <li>Repository'ler unit of work pattern ile kullan\u0131lmal\u0131d\u0131r</li> <li>Repository'ler generic olarak tasarlanmal\u0131d\u0131r</li> <li>Repository'ler test edilebilir olmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#2-external-service-tasarm","title":"2. External Service Tasar\u0131m\u0131","text":"<ul> <li>Harici servisler interface'ler \u00fczerinden tan\u0131mlanmal\u0131d\u0131r</li> <li>Harici servisler retry pattern ile kullan\u0131lmal\u0131d\u0131r</li> <li>Harici servisler circuit breaker pattern ile korunmal\u0131d\u0131r</li> <li>Harici servisler test edilebilir olmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#3-logging-stratejisi","title":"3. Logging Stratejisi","text":"<ul> <li>Logging seviyeleri do\u011fru kullan\u0131lmal\u0131d\u0131r</li> <li>Log mesajlar\u0131 anlaml\u0131 olmal\u0131d\u0131r</li> <li>Log format\u0131 standart olmal\u0131d\u0131r</li> <li>Log rotasyonu yap\u0131land\u0131r\u0131lmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#4-caching-stratejisi","title":"4. Caching Stratejisi","text":"<ul> <li>Cache key'leri anlaml\u0131 olmal\u0131d\u0131r</li> <li>Cache s\u00fcreleri optimize edilmelidir</li> <li>Cache invalidation stratejisi belirlenmelidir</li> <li>Distributed cache kullan\u0131lmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/clean-architecture/infrastructure-layer/#1-infrastructure-layer-neden-onemlidir","title":"1. Infrastructure Layer neden \u00f6nemlidir?","text":"<ul> <li>Teknik detaylar\u0131 izole eder</li> <li>Test edilebilirli\u011fi art\u0131r\u0131r</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 y\u00f6netir</li> <li>Framework ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131 sa\u011flar</li> </ul>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#2-repository-pattern-ne-zaman-kullanlmaldr","title":"2. Repository pattern ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Veritaban\u0131 i\u015flemleri i\u00e7in</li> <li>Data access logic'i izole etmek i\u00e7in</li> <li>Unit of work pattern ile birlikte</li> <li>Test edilebilirli\u011fi art\u0131rmak i\u00e7in</li> </ul>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#3-external-service-entegrasyonlar-nasl-yonetilmelidir","title":"3. External service entegrasyonlar\u0131 nas\u0131l y\u00f6netilmelidir?","text":"<ul> <li>Interface'ler \u00fczerinden</li> <li>Retry pattern ile</li> <li>Circuit breaker pattern ile</li> <li>Timeout y\u00f6netimi ile</li> </ul>"},{"location":"mid-level/clean-architecture/infrastructure-layer/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Infrastructure Layer</li> <li>Clean Architecture - Infrastructure Layer</li> <li>Infrastructure Layer Best Practices </li> </ul>"},{"location":"mid-level/clean-architecture/presentation-layer/","title":"Presentation Layer","text":""},{"location":"mid-level/clean-architecture/presentation-layer/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Presentation Layer, Clean Architecture'\u0131n en d\u0131\u015f katman\u0131d\u0131r ve kullan\u0131c\u0131 aray\u00fcz\u00fc ile etkile\u015fimi y\u00f6netir. Bu katman, API endpoints, web sayfalar\u0131 ve kullan\u0131c\u0131 aray\u00fcz\u00fc bile\u015fenlerini i\u00e7erir.</p>"},{"location":"mid-level/clean-architecture/presentation-layer/#temel-bilesenler","title":"Temel Bile\u015fenler","text":""},{"location":"mid-level/clean-architecture/presentation-layer/#1-controllers","title":"1. Controllers","text":"<p>API endpoints ve HTTP isteklerini y\u00f6neten bile\u015fenler.</p> <p>\u00d6rnek Kod: <pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class OrdersController : ControllerBase\n{\n    private readonly ICreateOrderUseCase _createOrderUseCase;\n    private readonly IGetOrderUseCase _getOrderUseCase;\n    private readonly ILogger&lt;OrdersController&gt; _logger;\n\n    public OrdersController(\n        ICreateOrderUseCase createOrderUseCase,\n        IGetOrderUseCase getOrderUseCase,\n        ILogger&lt;OrdersController&gt; logger)\n    {\n        _createOrderUseCase = createOrderUseCase;\n        _getOrderUseCase = getOrderUseCase;\n        _logger = logger;\n    }\n\n    [HttpPost]\n    public async Task&lt;IActionResult&gt; CreateOrder([FromBody] CreateOrderRequest request)\n    {\n        try\n        {\n            var order = await _createOrderUseCase.Execute(request);\n            return CreatedAtAction(nameof(GetOrder), new { id = order.Id }, order);\n        }\n        catch (DomainException ex)\n        {\n            _logger.LogWarning(ex, \"Domain exception occurred\");\n            return BadRequest(new { message = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating order\");\n            return StatusCode(500, new { message = \"Internal server error\" });\n        }\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task&lt;IActionResult&gt; GetOrder(Guid id)\n    {\n        try\n        {\n            var order = await _getOrderUseCase.Execute(id);\n            return Ok(order);\n        }\n        catch (NotFoundException)\n        {\n            return NotFound();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting order\");\n            return StatusCode(500, new { message = \"Internal server error\" });\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/presentation-layer/#2-viewmodels","title":"2. ViewModels","text":"<p>Kullan\u0131c\u0131 aray\u00fcz\u00fc i\u00e7in veri modelleri.</p> <p>\u00d6rnek Kod: <pre><code>public class OrderViewModel\n{\n    public Guid Id { get; set; }\n    public string OrderNumber { get; set; }\n    public DateTime OrderDate { get; set; }\n    public string Status { get; set; }\n    public List&lt;OrderItemViewModel&gt; Items { get; set; }\n    public decimal TotalAmount { get; set; }\n\n    public static OrderViewModel FromOrder(OrderDto order)\n    {\n        return new OrderViewModel\n        {\n            Id = order.Id,\n            OrderNumber = order.OrderNumber,\n            OrderDate = order.OrderDate,\n            Status = order.Status.ToString(),\n            Items = order.Items.Select(OrderItemViewModel.FromOrderItem).ToList(),\n            TotalAmount = order.Items.Sum(i =&gt; i.Total)\n        };\n    }\n}\n\npublic class CreateOrderViewModel\n{\n    [Required]\n    public string OrderNumber { get; set; }\n\n    [Required]\n    [MinLength(1)]\n    public List&lt;OrderItemViewModel&gt; Items { get; set; }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/presentation-layer/#3-middleware","title":"3. Middleware","text":"<p>HTTP pipeline'da \u00e7al\u0131\u015fan ara yaz\u0131l\u0131mlar.</p> <p>\u00d6rnek Kod: <pre><code>public class ExceptionHandlingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;ExceptionHandlingMiddleware&gt; _logger;\n\n    public ExceptionHandlingMiddleware(\n        RequestDelegate next,\n        ILogger&lt;ExceptionHandlingMiddleware&gt; logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (DomainException ex)\n        {\n            _logger.LogWarning(ex, \"Domain exception occurred\");\n            await HandleExceptionAsync(context, ex, StatusCodes.Status400BadRequest);\n        }\n        catch (NotFoundException ex)\n        {\n            _logger.LogWarning(ex, \"Resource not found\");\n            await HandleExceptionAsync(context, ex, StatusCodes.Status404NotFound);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Unhandled exception occurred\");\n            await HandleExceptionAsync(context, ex, StatusCodes.Status500InternalServerError);\n        }\n    }\n\n    private static async Task HandleExceptionAsync(\n        HttpContext context,\n        Exception exception,\n        int statusCode)\n    {\n        context.Response.ContentType = \"application/json\";\n        context.Response.StatusCode = statusCode;\n\n        var response = new\n        {\n            message = exception.Message,\n            statusCode = statusCode\n        };\n\n        await context.Response.WriteAsJsonAsync(response);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/presentation-layer/#4-filters","title":"4. Filters","text":"<p>Controller action'lar\u0131 i\u00e7in filtreler.</p> <p>\u00d6rnek Kod: <pre><code>public class ValidateModelAttribute : ActionFilterAttribute\n{\n    public override void OnActionExecuting(ActionExecutingContext context)\n    {\n        if (!context.ModelState.IsValid)\n        {\n            var errors = context.ModelState\n                .Where(x =&gt; x.Value.Errors.Count &gt; 0)\n                .ToDictionary(\n                    kvp =&gt; kvp.Key,\n                    kvp =&gt; kvp.Value.Errors.Select(e =&gt; e.ErrorMessage).ToArray()\n                );\n\n            context.Result = new BadRequestObjectResult(new\n            {\n                message = \"Validation failed\",\n                errors = errors\n            });\n        }\n    }\n}\n\npublic class LogActionAttribute : ActionFilterAttribute\n{\n    private readonly ILogger _logger;\n\n    public LogActionAttribute(ILogger logger)\n    {\n        _logger = logger;\n    }\n\n    public override void OnActionExecuting(ActionExecutingContext context)\n    {\n        _logger.LogInformation(\n            \"Executing {Action} on {Controller}\",\n            context.ActionDescriptor.RouteValues[\"action\"],\n            context.ActionDescriptor.RouteValues[\"controller\"]\n        );\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/presentation-layer/#5-authenticationauthorization","title":"5. Authentication/Authorization","text":"<p>Kimlik do\u011frulama ve yetkilendirme.</p> <p>\u00d6rnek Kod: <pre><code>[Authorize]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class SecureController : ControllerBase\n{\n    [Authorize(Roles = \"Admin\")]\n    [HttpGet(\"admin-only\")]\n    public IActionResult AdminOnly()\n    {\n        return Ok(new { message = \"Admin access granted\" });\n    }\n\n    [Authorize(Policy = \"RequireManager\")]\n    [HttpGet(\"manager-only\")]\n    public IActionResult ManagerOnly()\n    {\n        return Ok(new { message = \"Manager access granted\" });\n    }\n}\n\npublic class JwtAuthenticationMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IConfiguration _configuration;\n\n    public JwtAuthenticationMiddleware(\n        RequestDelegate next,\n        IConfiguration configuration)\n    {\n        _next = next;\n        _configuration = configuration;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var token = context.Request.Headers[\"Authorization\"].ToString().Replace(\"Bearer \", \"\");\n\n        if (!string.IsNullOrEmpty(token))\n        {\n            try\n            {\n                var tokenHandler = new JwtSecurityTokenHandler();\n                var key = Encoding.ASCII.GetBytes(_configuration[\"Jwt:Secret\"]);\n\n                tokenHandler.ValidateToken(token, new TokenValidationParameters\n                {\n                    ValidateIssuerSigningKey = true,\n                    IssuerSigningKey = new SymmetricSecurityKey(key),\n                    ValidateIssuer = false,\n                    ValidateAudience = false\n                }, out SecurityToken validatedToken);\n\n                var jwtToken = (JwtSecurityToken)validatedToken;\n                var userId = jwtToken.Claims.First(x =&gt; x.Type == \"id\").Value;\n\n                context.Items[\"UserId\"] = userId;\n            }\n            catch\n            {\n                // Token validation failed\n            }\n        }\n\n        await _next(context);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/clean-architecture/presentation-layer/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/clean-architecture/presentation-layer/#1-controller-tasarm","title":"1. Controller Tasar\u0131m\u0131","text":"<ul> <li>Controller'lar ince olmal\u0131d\u0131r</li> <li>Business logic controller'larda olmamal\u0131d\u0131r</li> <li>Exception handling merkezi olmal\u0131d\u0131r</li> <li>Action'lar tek sorumlulu\u011fa sahip olmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/presentation-layer/#2-viewmodel-tasarm","title":"2. ViewModel Tasar\u0131m\u0131","text":"<ul> <li>ViewModel'ler sadece gerekli verileri i\u00e7ermelidir</li> <li>Validation logic ViewModel'lerde olmal\u0131d\u0131r</li> <li>Mapping logic ayr\u0131 tutulmal\u0131d\u0131r</li> <li>ViewModel'ler immutable olmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/presentation-layer/#3-middleware-tasarm","title":"3. Middleware Tasar\u0131m\u0131","text":"<ul> <li>Middleware'ler tek sorumlulu\u011fa sahip olmal\u0131d\u0131r</li> <li>Exception handling merkezi olmal\u0131d\u0131r</li> <li>Logging stratejisi belirlenmelidir</li> <li>Performance optimizasyonu yap\u0131lmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/presentation-layer/#4-security-stratejisi","title":"4. Security Stratejisi","text":"<ul> <li>Authentication merkezi olmal\u0131d\u0131r</li> <li>Authorization granular olmal\u0131d\u0131r</li> <li>Input validation yap\u0131lmal\u0131d\u0131r</li> <li>CORS politikas\u0131 belirlenmelidir</li> </ul>"},{"location":"mid-level/clean-architecture/presentation-layer/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/clean-architecture/presentation-layer/#1-presentation-layer-neden-onemlidir","title":"1. Presentation Layer neden \u00f6nemlidir?","text":"<ul> <li>Kullan\u0131c\u0131 etkile\u015fimini y\u00f6netir</li> <li>API kontratlar\u0131n\u0131 tan\u0131mlar</li> <li>G\u00fcvenlik katman\u0131 sa\u011flar</li> <li>Hata y\u00f6netimini merkezile\u015ftirir</li> </ul>"},{"location":"mid-level/clean-architecture/presentation-layer/#2-controllerlar-nasl-tasarlanmaldr","title":"2. Controller'lar nas\u0131l tasarlanmal\u0131d\u0131r?","text":"<ul> <li>\u0130nce olmal\u0131d\u0131r</li> <li>Business logic i\u00e7ermemelidir</li> <li>Exception handling yapmal\u0131d\u0131r</li> <li>Tek sorumlulu\u011fa sahip olmal\u0131d\u0131r</li> </ul>"},{"location":"mid-level/clean-architecture/presentation-layer/#3-security-nasl-saglanmaldr","title":"3. Security nas\u0131l sa\u011flanmal\u0131d\u0131r?","text":"<ul> <li>Authentication merkezi olmal\u0131d\u0131r</li> <li>Authorization granular olmal\u0131d\u0131r</li> <li>Input validation yap\u0131lmal\u0131d\u0131r</li> <li>CORS politikas\u0131 belirlenmelidir</li> </ul>"},{"location":"mid-level/clean-architecture/presentation-layer/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Presentation Layer</li> <li>Clean Architecture - Presentation Layer</li> <li>Presentation Layer Best Practices </li> </ul>"},{"location":"mid-level/database-design/design-patterns/","title":"Database Design Patterns","text":""},{"location":"mid-level/database-design/design-patterns/#giris","title":"Giri\u015f","text":"<p>Database Design Patterns, veritaban\u0131 tasar\u0131m\u0131nda kar\u015f\u0131la\u015f\u0131lan yayg\u0131n problemleri \u00e7\u00f6zmek i\u00e7in kullan\u0131lan kan\u0131tlanm\u0131\u015f \u00e7\u00f6z\u00fcmlerdir. Mid-level geli\u015ftiriciler i\u00e7in bu pattern'leri anlamak, \u00f6l\u00e7eklenebilir ve maintainable veritaban\u0131 sistemleri tasarlamada kritiktir.</p>"},{"location":"mid-level/database-design/design-patterns/#temel-database-design-patterns","title":"Temel Database Design Patterns","text":""},{"location":"mid-level/database-design/design-patterns/#1-normalization-patterns","title":"1. Normalization Patterns","text":"<p>Veri tekrar\u0131n\u0131 \u00f6nlemek ve veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc sa\u011flamak i\u00e7in kullan\u0131lan pattern'ler.</p>"},{"location":"mid-level/database-design/design-patterns/#first-normal-form-1nf","title":"First Normal Form (1NF)","text":"<pre><code>-- 1NF Violation - Multiple values in single column\nCREATE TABLE Users (\n    Id INT PRIMARY KEY,\n    Name VARCHAR(100),\n    PhoneNumbers VARCHAR(500) -- \"555-1234, 555-5678\" - VIOLATION\n);\n\n-- 1NF Compliant\nCREATE TABLE Users (\n    Id INT PRIMARY KEY,\n    Name VARCHAR(100)\n);\n\nCREATE TABLE UserPhoneNumbers (\n    Id INT PRIMARY KEY,\n    UserId INT,\n    PhoneNumber VARCHAR(20),\n    FOREIGN KEY (UserId) REFERENCES Users(Id)\n);\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#second-normal-form-2nf","title":"Second Normal Form (2NF)","text":"<pre><code>-- 2NF Violation - Partial dependency\nCREATE TABLE Orders (\n    OrderId INT PRIMARY KEY,\n    CustomerId INT,\n    CustomerName VARCHAR(100), -- Depends on CustomerId, not OrderId\n    OrderDate DATETIME,\n    TotalAmount DECIMAL(10,2)\n);\n\n-- 2NF Compliant\nCREATE TABLE Customers (\n    CustomerId INT PRIMARY KEY,\n    CustomerName VARCHAR(100)\n);\n\nCREATE TABLE Orders (\n    OrderId INT PRIMARY KEY,\n    CustomerId INT,\n    OrderDate DATETIME,\n    TotalAmount DECIMAL(10,2),\n    FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId)\n);\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#third-normal-form-3nf","title":"Third Normal Form (3NF)","text":"<pre><code>-- 3NF Violation - Transitive dependency\nCREATE TABLE Orders (\n    OrderId INT PRIMARY KEY,\n    CustomerId INT,\n    CustomerName VARCHAR(100),\n    CustomerCity VARCHAR(100), -- Depends on CustomerName, not OrderId\n    OrderDate DATETIME\n);\n\n-- 3NF Compliant\nCREATE TABLE Cities (\n    CityId INT PRIMARY KEY,\n    CityName VARCHAR(100)\n);\n\nCREATE TABLE Customers (\n    CustomerId INT PRIMARY KEY,\n    CustomerName VARCHAR(100),\n    CityId INT,\n    FOREIGN KEY (CityId) REFERENCES Cities(CityId)\n);\n\nCREATE TABLE Orders (\n    OrderId INT PRIMARY KEY,\n    CustomerId INT,\n    OrderDate DATETIME,\n    FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId)\n);\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#2-denormalization-patterns","title":"2. Denormalization Patterns","text":"<p>Performance i\u00e7in bilin\u00e7li olarak normalization kurallar\u0131n\u0131 ihlal etme.</p>"},{"location":"mid-level/database-design/design-patterns/#read-optimized-denormalization","title":"Read-Optimized Denormalization","text":"<pre><code>-- Denormalized table for reporting\nCREATE TABLE UserActivitySummary (\n    UserId INT PRIMARY KEY,\n    UserName VARCHAR(100),\n    TotalOrders INT,\n    TotalSpent DECIMAL(10,2),\n    LastOrderDate DATETIME,\n    FavoriteCategory VARCHAR(100),\n    UpdatedAt DATETIME DEFAULT GETDATE()\n);\n\n-- Stored procedure to maintain denormalized data\nCREATE PROCEDURE UpdateUserActivitySummary\n    @UserId INT\nAS\nBEGIN\n    UPDATE UserActivitySummary\n    SET \n        TotalOrders = (\n            SELECT COUNT(*) FROM Orders WHERE UserId = @UserId\n        ),\n        TotalSpent = (\n            SELECT SUM(TotalAmount) FROM Orders WHERE UserId = @UserId\n        ),\n        LastOrderDate = (\n            SELECT MAX(OrderDate) FROM Orders WHERE UserId = @UserId\n        ),\n        FavoriteCategory = (\n            SELECT TOP 1 c.CategoryName\n            FROM Orders o\n            JOIN OrderItems oi ON o.OrderId = oi.OrderId\n            JOIN Products p ON oi.ProductId = p.ProductId\n            JOIN Categories c ON p.CategoryId = c.CategoryId\n            WHERE o.UserId = @UserId\n            GROUP BY c.CategoryName\n            ORDER BY COUNT(*) DESC\n        ),\n        UpdatedAt = GETDATE()\n    WHERE UserId = @UserId;\nEND;\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#materialized-views","title":"Materialized Views","text":"<pre><code>-- Materialized view for complex aggregations\nCREATE VIEW vw_ProductSalesSummary\nWITH SCHEMABINDING\nAS\nSELECT \n    p.ProductId,\n    p.ProductName,\n    c.CategoryName,\n    COUNT_BIG(*) as TotalOrders,\n    SUM(oi.Quantity) as TotalQuantity,\n    SUM(oi.Quantity * oi.UnitPrice) as TotalRevenue,\n    AVG(oi.UnitPrice) as AveragePrice\nFROM dbo.Products p\nJOIN dbo.Categories c ON p.CategoryId = c.CategoryId\nJOIN dbo.OrderItems oi ON p.ProductId = oi.ProductId\nJOIN dbo.Orders o ON oi.OrderId = o.OrderId\nGROUP BY p.ProductId, p.ProductName, c.CategoryName;\n\n-- Create indexed view\nCREATE UNIQUE CLUSTERED INDEX IX_ProductSalesSummary_ProductId\nON vw_ProductSalesSummary(ProductId);\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#3-partitioning-patterns","title":"3. Partitioning Patterns","text":"<p>B\u00fcy\u00fck tablolar\u0131 daha k\u00fc\u00e7\u00fck, y\u00f6netilebilir par\u00e7alara b\u00f6lme.</p>"},{"location":"mid-level/database-design/design-patterns/#horizontal-partitioning-sharding","title":"Horizontal Partitioning (Sharding)","text":"<pre><code>-- Partition function by date\nCREATE PARTITION FUNCTION PF_OrdersByDate (DATETIME)\nAS RANGE RIGHT FOR VALUES (\n    '2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01',\n    '2024-05-01', '2024-06-01', '2024-07-01', '2024-08-01',\n    '2024-09-01', '2024-10-01', '2024-11-01', '2024-12-01'\n);\n\n-- Partition scheme\nCREATE PARTITION SCHEME PS_OrdersByDate\nAS PARTITION PF_OrdersByDate\nTO (\n    [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY],\n    [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY],\n    [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY]\n);\n\n-- Partitioned table\nCREATE TABLE Orders (\n    OrderId INT,\n    UserId INT,\n    OrderDate DATETIME,\n    TotalAmount DECIMAL(10,2)\n) ON PS_OrdersByDate(OrderDate);\n\n-- Create indexes on partitioned table\nCREATE CLUSTERED INDEX IX_Orders_OrderDate\nON Orders(OrderDate)\nON PS_OrdersByDate(OrderDate);\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#vertical-partitioning","title":"Vertical Partitioning","text":"<pre><code>-- Main table with frequently accessed columns\nCREATE TABLE Users (\n    UserId INT PRIMARY KEY,\n    Username VARCHAR(50),\n    Email VARCHAR(100),\n    IsActive BIT,\n    CreatedAt DATETIME\n);\n\n-- Extended table with less frequently accessed columns\nCREATE TABLE UserProfiles (\n    UserId INT PRIMARY KEY,\n    FirstName VARCHAR(50),\n    LastName VARCHAR(50),\n    DateOfBirth DATE,\n    PhoneNumber VARCHAR(20),\n    Address TEXT,\n    Bio TEXT,\n    ProfilePictureUrl VARCHAR(500),\n    FOREIGN KEY (UserId) REFERENCES Users(UserId)\n);\n\n-- View to combine both tables\nCREATE VIEW vw_CompleteUserProfile\nAS\nSELECT \n    u.UserId,\n    u.Username,\n    u.Email,\n    u.IsActive,\n    u.CreatedAt,\n    up.FirstName,\n    up.LastName,\n    up.DateOfBirth,\n    up.PhoneNumber,\n    up.Address,\n    up.Bio,\n    up.ProfilePictureUrl\nFROM Users u\nLEFT JOIN UserProfiles up ON u.UserId = up.UserId;\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#advanced-database-patterns","title":"Advanced Database Patterns","text":""},{"location":"mid-level/database-design/design-patterns/#1-audit-trail-pattern","title":"1. Audit Trail Pattern","text":"<p>Veri de\u011fi\u015fikliklerini takip etmek i\u00e7in kullan\u0131lan pattern.</p> <pre><code>-- Audit table\nCREATE TABLE AuditLogs (\n    AuditId BIGINT IDENTITY(1,1) PRIMARY KEY,\n    TableName VARCHAR(100),\n    PrimaryKeyValue VARCHAR(100),\n    ColumnName VARCHAR(100),\n    OldValue NVARCHAR(MAX),\n    NewValue NVARCHAR(MAX),\n    ChangeType VARCHAR(10), -- INSERT, UPDATE, DELETE\n    ChangedBy VARCHAR(100),\n    ChangedAt DATETIME DEFAULT GETDATE()\n);\n\n-- Trigger for audit logging\nCREATE TRIGGER TR_Users_Audit\nON Users\nAFTER INSERT, UPDATE, DELETE\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    -- Handle INSERT\n    IF EXISTS(SELECT * FROM INSERTED) AND NOT EXISTS(SELECT * FROM DELETED)\n    BEGIN\n        INSERT INTO AuditLogs (TableName, PrimaryKeyValue, ColumnName, NewValue, ChangeType, ChangedBy)\n        SELECT \n            'Users',\n            CAST(i.UserId AS VARCHAR(100)),\n            'ALL',\n            'INSERTED',\n            'INSERT',\n            SYSTEM_USER\n        FROM INSERTED i;\n    END\n\n    -- Handle UPDATE\n    IF EXISTS(SELECT * FROM INSERTED) AND EXISTS(SELECT * FROM DELETED)\n    BEGIN\n        INSERT INTO AuditLogs (TableName, PrimaryKeyValue, ColumnName, OldValue, NewValue, ChangeType, ChangedBy)\n        SELECT \n            'Users',\n            CAST(i.UserId AS VARCHAR(100)),\n            'Username',\n            d.Username,\n            i.Username,\n            'UPDATE',\n            SYSTEM_USER\n        FROM INSERTED i\n        JOIN DELETED d ON i.UserId = d.UserId\n        WHERE i.Username &lt;&gt; d.Username;\n\n        -- Add more columns as needed\n    END\n\n    -- Handle DELETE\n    IF EXISTS(SELECT * FROM DELETED) AND NOT EXISTS(SELECT * FROM INSERTED)\n    BEGIN\n        INSERT INTO AuditLogs (TableName, PrimaryKeyValue, ColumnName, OldValue, ChangeType, ChangedBy)\n        SELECT \n            'Users',\n            CAST(d.UserId AS VARCHAR(100)),\n            'ALL',\n            'DELETED',\n            'DELETE',\n            SYSTEM_USER\n        FROM DELETED d;\n    END\nEND;\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#2-soft-delete-pattern","title":"2. Soft Delete Pattern","text":"<p>Veriyi fiziksel olarak silmek yerine i\u015faretleme.</p> <pre><code>-- Soft delete implementation\nCREATE TABLE Users (\n    UserId INT PRIMARY KEY,\n    Username VARCHAR(50),\n    Email VARCHAR(100),\n    IsActive BIT DEFAULT 1,\n    IsDeleted BIT DEFAULT 0,\n    DeletedAt DATETIME NULL,\n    DeletedBy VARCHAR(100) NULL,\n    CreatedAt DATETIME DEFAULT GETDATE(),\n    UpdatedAt DATETIME DEFAULT GETDATE()\n);\n\n-- Soft delete procedure\nCREATE PROCEDURE SoftDeleteUser\n    @UserId INT,\n    @DeletedBy VARCHAR(100)\nAS\nBEGIN\n    UPDATE Users\n    SET \n        IsDeleted = 1,\n        DeletedAt = GETDATE(),\n        DeletedBy = @DeletedBy,\n        UpdatedAt = GETDATE()\n    WHERE UserId = @UserId;\nEND;\n\n-- View to exclude deleted records\nCREATE VIEW vw_ActiveUsers\nAS\nSELECT UserId, Username, Email, IsActive, CreatedAt, UpdatedAt\nFROM Users\nWHERE IsDeleted = 0;\n\n-- Index for soft delete queries\nCREATE INDEX IX_Users_IsDeleted_IsActive\nON Users(IsDeleted, IsActive)\nWHERE IsDeleted = 0;\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#3-polymorphic-association-pattern","title":"3. Polymorphic Association Pattern","text":"<p>Farkl\u0131 entity t\u00fcrleri ile ili\u015fki kurma.</p> <pre><code>-- Polymorphic association table\nCREATE TABLE Comments (\n    CommentId INT PRIMARY KEY,\n    Content TEXT,\n    CreatedBy INT,\n    CreatedAt DATETIME DEFAULT GETDATE()\n);\n\nCREATE TABLE CommentableEntities (\n    CommentId INT,\n    EntityType VARCHAR(50), -- 'Post', 'Product', 'Review'\n    EntityId INT,\n    PRIMARY KEY (CommentId, EntityType, EntityId),\n    FOREIGN KEY (CommentId) REFERENCES Comments(CommentId)\n);\n\n-- Alternative approach with separate tables\nCREATE TABLE PostComments (\n    CommentId INT PRIMARY KEY,\n    PostId INT,\n    Content TEXT,\n    CreatedBy INT,\n    CreatedAt DATETIME DEFAULT GETDATE(),\n    FOREIGN KEY (PostId) REFERENCES Posts(PostId)\n);\n\nCREATE TABLE ProductComments (\n    CommentId INT PRIMARY KEY,\n    ProductId INT,\n    Content TEXT,\n    CreatedBy INT,\n    CreatedAt DATETIME DEFAULT GETDATE(),\n    FOREIGN KEY (ProductId) REFERENCES Products(ProductId)\n);\n\n-- View to combine all comments\nCREATE VIEW vw_AllComments\nAS\nSELECT \n    'Post' as EntityType,\n    pc.PostId as EntityId,\n    pc.CommentId,\n    pc.Content,\n    pc.CreatedBy,\n    pc.CreatedAt\nFROM PostComments pc\n\nUNION ALL\n\nSELECT \n    'Product' as EntityType,\n    pc.ProductId as EntityId,\n    pc.CommentId,\n    pc.Content,\n    pc.CreatedBy,\n    pc.CreatedAt\nFROM ProductComments pc;\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#performance-optimization-patterns","title":"Performance Optimization Patterns","text":""},{"location":"mid-level/database-design/design-patterns/#1-indexing-strategies","title":"1. Indexing Strategies","text":"<pre><code>-- Composite index for common queries\nCREATE INDEX IX_Orders_UserId_OrderDate\nON Orders(UserId, OrderDate)\nINCLUDE (TotalAmount);\n\n-- Covering index\nCREATE INDEX IX_Users_Email_Covering\nON Users(Email)\nINCLUDE (UserId, Username, IsActive);\n\n-- Filtered index for active users only\nCREATE INDEX IX_Users_Username_Active\nON Users(Username)\nWHERE IsActive = 1 AND IsDeleted = 0;\n\n-- Partial index for recent orders\nCREATE INDEX IX_Orders_Recent_UserId\nON Orders(UserId)\nWHERE OrderDate &gt;= DATEADD(YEAR, -1, GETDATE());\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#2-query-optimization-patterns","title":"2. Query Optimization Patterns","text":"<pre><code>-- Common Table Expression (CTE) for complex queries\nWITH UserOrderStats AS (\n    SELECT \n        UserId,\n        COUNT(*) as OrderCount,\n        SUM(TotalAmount) as TotalSpent,\n        AVG(TotalAmount) as AverageOrderValue\n    FROM Orders\n    WHERE OrderDate &gt;= DATEADD(YEAR, -1, GETDATE())\n    GROUP BY UserId\n),\nUserCategoryPreferences AS (\n    SELECT \n        o.UserId,\n        c.CategoryName,\n        COUNT(*) as PurchaseCount\n    FROM Orders o\n    JOIN OrderItems oi ON o.OrderId = oi.OrderId\n    JOIN Products p ON oi.ProductId = p.ProductId\n    JOIN Categories c ON p.CategoryId = c.CategoryId\n    GROUP BY o.UserId, c.CategoryName\n)\nSELECT \n    u.Username,\n    uos.OrderCount,\n    uos.TotalSpent,\n    uos.AverageOrderValue,\n    ucp.CategoryName as FavoriteCategory\nFROM Users u\nJOIN UserOrderStats uos ON u.UserId = uos.UserId\nJOIN UserCategoryPreferences ucp ON u.UserId = ucp.UserId\nWHERE ucp.PurchaseCount = (\n    SELECT MAX(PurchaseCount)\n    FROM UserCategoryPreferences ucp2\n    WHERE ucp2.UserId = u.UserId\n);\n</code></pre>"},{"location":"mid-level/database-design/design-patterns/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/database-design/design-patterns/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Database normalization nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Veri tekrar\u0131n\u0131 \u00f6nleme ve veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc sa\u011flama s\u00fcreci. 1NF, 2NF, 3NF kurallar\u0131 ile veri organize edilir.</p> </li> <li> <p>Denormalization nedir ve ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Performance i\u00e7in bilin\u00e7li olarak normalization kurallar\u0131n\u0131 ihlal etme. Read-heavy workloads ve reporting i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Horizontal vs Vertical partitioning aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Horizontal partitioning sat\u0131rlar\u0131 b\u00f6ler (sharding), vertical partitioning s\u00fctunlar\u0131 b\u00f6ler. Farkl\u0131 performance ihtiya\u00e7lar\u0131 i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Audit trail pattern nedir?</p> </li> <li> <p>Cevap: Veri de\u011fi\u015fikliklerini takip etme pattern'i. Triggers ile otomatik logging, compliance ve debugging i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Soft delete pattern nedir?</p> </li> <li>Cevap: Veriyi fiziksel olarak silmek yerine i\u015faretleme. Data recovery ve audit trail i\u00e7in \u00f6nemli.</li> </ol>"},{"location":"mid-level/database-design/design-patterns/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Partitioning'de partition function ve scheme nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: Partition function veriyi nas\u0131l b\u00f6lece\u011fini belirler, partition scheme hangi filegroup'lara gidece\u011fini belirler.</p> </li> <li> <p>Materialized view nedir ve ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Pre-computed sonu\u00e7lar\u0131 saklayan view. Complex aggregations ve reporting i\u00e7in performance art\u0131\u015f\u0131 sa\u011flar.</p> </li> <li> <p>Polymorphic association'da hangi yakla\u015f\u0131mlar vard\u0131r?</p> </li> <li> <p>Cevap: Single table with type column, separate tables per entity, junction table with entity type. Trade-offs vard\u0131r.</p> </li> <li> <p>Indexing strategies'de covering index nedir?</p> </li> <li> <p>Cevap: Query'deki t\u00fcm s\u00fctunlar\u0131 i\u00e7eren index. Table lookup'\u0131 \u00f6nler, performance art\u0131r\u0131r.</p> </li> <li> <p>Database design'da performance vs normalization trade-off nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Business requirements, query patterns, data volume analiz edilir. Balanced approach gerekli.</li> </ol>"},{"location":"mid-level/database-design/design-patterns/#best-practices","title":"Best Practices","text":"<ol> <li>Design Principles</li> <li>Normalization kurallar\u0131n\u0131 takip edin</li> <li>Performance i\u00e7in denormalize edin</li> <li>Indexing strategy belirleyin</li> <li> <p>Partitioning planlay\u0131n</p> </li> <li> <p>Performance Optimization</p> </li> <li>Query patterns analiz edin</li> <li>Appropriate indexes olu\u015fturun</li> <li>Partitioning uygulay\u0131n</li> <li> <p>Monitoring yap\u0131n</p> </li> <li> <p>Maintainability</p> </li> <li>Consistent naming conventions</li> <li>Documentation yaz\u0131n</li> <li>Change management planlay\u0131n</li> <li> <p>Testing yap\u0131n</p> </li> <li> <p>Scalability</p> </li> <li>Future growth planlay\u0131n</li> <li>Partitioning strategy belirleyin</li> <li>Sharding architecture tasarlay\u0131n</li> <li>Performance metrics izleyin</li> </ol>"},{"location":"mid-level/database-design/design-patterns/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Database Design Patterns</li> <li>SQL Server Partitioning</li> <li>Database Normalization</li> <li>Performance Tuning</li> <li>Database Design Best Practices</li> </ul>"},{"location":"mid-level/database-design/migration-strategies/","title":"Database Migration Strategies","text":""},{"location":"mid-level/database-design/migration-strategies/#giris","title":"Giri\u015f","text":"<p>Database Migration Strategies, veritaban\u0131 \u015femas\u0131ndaki de\u011fi\u015fiklikleri g\u00fcvenli ve kontroll\u00fc bir \u015fekilde y\u00f6netmek i\u00e7in kullan\u0131lan yakla\u015f\u0131mlard\u0131r. Mid-level geli\u015ftiriciler i\u00e7in migration stratejilerini anlamak, production ortamlar\u0131nda veri kayb\u0131 olmadan de\u011fi\u015fiklik yapmak i\u00e7in kritiktir.</p>"},{"location":"mid-level/database-design/migration-strategies/#migration-stratejileri","title":"Migration Stratejileri","text":""},{"location":"mid-level/database-design/migration-strategies/#1-forward-only-migrations","title":"1. Forward-Only Migrations","text":"<p>Her migration'\u0131n sadece ileri y\u00f6nde \u00e7al\u0131\u015ft\u0131\u011f\u0131, geri al\u0131namayan yakla\u015f\u0131m.</p> <pre><code>// Entity Framework Core migration\npublic partial class AddUserProfileTable : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.CreateTable(\n            name: \"UserProfiles\",\n            columns: table =&gt; new\n            {\n                Id = table.Column&lt;int&gt;(type: \"int\", nullable: false)\n                    .Annotation(\"SqlServer:Identity\", \"1, 1\"),\n                UserId = table.Column&lt;int&gt;(type: \"int\", nullable: false),\n                FirstName = table.Column&lt;string&gt;(type: \"nvarchar(50)\", maxLength: 50, nullable: true),\n                LastName = table.Column&lt;string&gt;(type: \"nvarchar(50)\", maxLength: 50, nullable: true),\n                DateOfBirth = table.Column&lt;DateTime&gt;(type: \"datetime2\", nullable: true),\n                PhoneNumber = table.Column&lt;string&gt;(type: \"nvarchar(20)\", maxLength: 20, nullable: true),\n                CreatedAt = table.Column&lt;DateTime&gt;(type: \"datetime2\", nullable: false, defaultValueSql: \"GETDATE()\"),\n                UpdatedAt = table.Column&lt;DateTime&gt;(type: \"datetime2\", nullable: false, defaultValueSql: \"GETDATE()\")\n            },\n            constraints: table =&gt;\n            {\n                table.PrimaryKey(\"PK_UserProfiles\", x =&gt; x.Id);\n                table.ForeignKey(\n                    name: \"FK_UserProfiles_Users_UserId\",\n                    column: x =&gt; x.UserId,\n                    principalTable: \"Users\",\n                    principalColumn: \"Id\",\n                    onDelete: ReferentialAction.Cascade);\n            });\n\n        migrationBuilder.CreateIndex(\n            name: \"IX_UserProfiles_UserId\",\n            table: \"UserProfiles\",\n            column: \"UserId\",\n            unique: true);\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropTable(\n            name: \"UserProfiles\");\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/migration-strategies/#2-reversible-migrations","title":"2. Reversible Migrations","text":"<p>Her migration'\u0131n geri al\u0131nabilir oldu\u011fu yakla\u015f\u0131m.</p> <pre><code>public partial class AddUserProfileTable : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        // Create table\n        migrationBuilder.CreateTable(\n            name: \"UserProfiles\",\n            columns: table =&gt; new\n            {\n                Id = table.Column&lt;int&gt;(type: \"int\", nullable: false)\n                    .Annotation(\"SqlServer:Identity\", \"1, 1\"),\n                UserId = table.Column&lt;int&gt;(type: \"int\", nullable: false),\n                FirstName = table.Column&lt;string&gt;(type: \"nvarchar(50)\", maxLength: 50, nullable: true),\n                LastName = table.Column&lt;string&gt;(type: \"nvarchar(50)\", maxLength: 50, nullable: true),\n                DateOfBirth = table.Column&lt;DateTime&gt;(type: \"datetime2\", nullable: true),\n                PhoneNumber = table.Column&lt;string&gt;(type: \"nvarchar(20)\", maxLength: 20, nullable: true),\n                CreatedAt = table.Column&lt;DateTime&gt;(type: \"datetime2\", nullable: false, defaultValueSql: \"GETDATE()\"),\n                UpdatedAt = table.Column&lt;DateTime&gt;(type: \"datetime2\", nullable: false, defaultValueSql: \"GETDATE()\")\n            },\n            constraints: table =&gt;\n            {\n                table.PrimaryKey(\"PK_UserProfiles\", x =&gt; x.Id);\n                table.ForeignKey(\n                    name: \"FK_UserProfiles_Users_UserId\",\n                    column: x =&gt; x.UserId,\n                    principalTable: \"Users\",\n                    principalColumn: \"Id\",\n                    onDelete: ReferentialAction.Cascade);\n            });\n\n        // Create index\n        migrationBuilder.CreateIndex(\n            name: \"IX_UserProfiles_UserId\",\n            table: \"UserProfiles\",\n            column: \"UserId\",\n            unique: true);\n\n        // Data migration\n        migrationBuilder.Sql(@\"\n            INSERT INTO UserProfiles (UserId, FirstName, LastName, CreatedAt, UpdatedAt)\n            SELECT Id, \n                   SUBSTRING(Name, 1, CHARINDEX(' ', Name + ' ') - 1) as FirstName,\n                   SUBSTRING(Name, CHARINDEX(' ', Name + ' ') + 1, LEN(Name)) as LastName,\n                   CreatedAt, UpdatedAt\n            FROM Users\n            WHERE Name IS NOT NULL AND Name &lt;&gt; ''\n        \");\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        // Drop index\n        migrationBuilder.DropIndex(\n            name: \"IX_UserProfiles_UserId\",\n            table: \"UserProfiles\");\n\n        // Drop table\n        migrationBuilder.DropTable(\n            name: \"UserProfiles\");\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/migration-strategies/#migration-deployment-stratejileri","title":"Migration Deployment Stratejileri","text":""},{"location":"mid-level/database-design/migration-strategies/#1-blue-green-deployment","title":"1. Blue-Green Deployment","text":"<p>S\u0131f\u0131r downtime ile migration yapma stratejisi.</p> <pre><code>public class BlueGreenMigrationService\n{\n    private readonly IConfiguration _configuration;\n    private readonly ILogger&lt;BlueGreenMigrationService&gt; _logger;\n\n    public async Task DeployMigrationAsync(string connectionString, string migrationScript)\n    {\n        try\n        {\n            // Step 1: Create new database (Green)\n            var greenConnectionString = await CreateGreenDatabaseAsync(connectionString);\n\n            // Step 2: Apply migration to Green database\n            await ApplyMigrationToDatabaseAsync(greenConnectionString, migrationScript);\n\n            // Step 3: Verify Green database\n            await VerifyDatabaseAsync(greenConnectionString);\n\n            // Step 4: Switch traffic to Green database\n            await SwitchTrafficToGreenAsync(greenConnectionString);\n\n            // Step 5: Clean up old database (Blue)\n            await CleanupBlueDatabaseAsync(connectionString);\n\n            _logger.LogInformation(\"Blue-Green migration completed successfully\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Blue-Green migration failed\");\n            await RollbackToBlueAsync(connectionString);\n            throw;\n        }\n    }\n\n    private async Task&lt;string&gt; CreateGreenDatabaseAsync(string blueConnectionString)\n    {\n        // Create new database with timestamp suffix\n        var timestamp = DateTime.UtcNow.ToString(\"yyyyMMddHHmmss\");\n        var greenDbName = $\"Database_{timestamp}\";\n\n        // Implementation details...\n        return greenConnectionString.Replace(\"Database\", greenDbName);\n    }\n\n    private async Task SwitchTrafficToGreenAsync(string greenConnectionString)\n    {\n        // Update connection string in configuration\n        // Update load balancer settings\n        // Update application configuration\n        // Implementation details...\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/migration-strategies/#2-rolling-migration","title":"2. Rolling Migration","text":"<p>A\u015famal\u0131 olarak migration yapma stratejisi.</p> <pre><code>public class RollingMigrationService\n{\n    private readonly IConfiguration _configuration;\n    private readonly ILogger&lt;RollingMigrationService&gt; _logger;\n\n    public async Task DeployRollingMigrationAsync(string migrationScript)\n    {\n        try\n        {\n            // Step 1: Deploy to first instance\n            await DeployToInstanceAsync(\"instance-1\", migrationScript);\n\n            // Step 2: Verify first instance\n            await VerifyInstanceAsync(\"instance-1\");\n\n            // Step 3: Deploy to second instance\n            await DeployToInstanceAsync(\"instance-2\", migrationScript);\n\n            // Step 4: Verify second instance\n            await VerifyInstanceAsync(\"instance-2\");\n\n            // Step 5: Continue with remaining instances\n            var instances = await GetRemainingInstancesAsync();\n            foreach (var instance in instances)\n            {\n                await DeployToInstanceAsync(instance, migrationScript);\n                await VerifyInstanceAsync(instance);\n            }\n\n            _logger.LogInformation(\"Rolling migration completed successfully\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Rolling migration failed\");\n            await RollbackMigrationAsync();\n            throw;\n        }\n    }\n\n    private async Task DeployToInstanceAsync(string instanceId, string migrationScript)\n    {\n        _logger.LogInformation(\"Deploying migration to instance: {InstanceId}\", instanceId);\n\n        // Take instance out of load balancer\n        await RemoveFromLoadBalancerAsync(instanceId);\n\n        // Apply migration\n        await ApplyMigrationAsync(instanceId, migrationScript);\n\n        // Verify migration\n        await VerifyMigrationAsync(instanceId);\n\n        // Put instance back in load balancer\n        await AddToLoadBalancerAsync(instanceId);\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/migration-strategies/#data-migration-stratejileri","title":"Data Migration Stratejileri","text":""},{"location":"mid-level/database-design/migration-strategies/#1-schema-first-migration","title":"1. Schema-First Migration","text":"<p>\u00d6nce \u015fema de\u011fi\u015fikli\u011fi, sonra veri migration'\u0131.</p> <pre><code>public class SchemaFirstMigrationService\n{\n    public async Task MigrateSchemaFirstAsync()\n    {\n        // Step 1: Add new nullable columns\n        await AddNewColumnsAsync();\n\n        // Step 2: Migrate data\n        await MigrateDataAsync();\n\n        // Step 3: Make columns non-nullable\n        await MakeColumnsRequiredAsync();\n\n        // Step 4: Remove old columns\n        await RemoveOldColumnsAsync();\n    }\n\n    private async Task AddNewColumnsAsync()\n    {\n        var sql = @\"\n            ALTER TABLE Users \n            ADD FirstName NVARCHAR(50) NULL,\n                LastName NVARCHAR(50) NULL\n        \";\n\n        await ExecuteSqlAsync(sql);\n    }\n\n    private async Task MigrateDataAsync()\n    {\n        var sql = @\"\n            UPDATE Users \n            SET FirstName = SUBSTRING(Name, 1, CHARINDEX(' ', Name + ' ') - 1),\n                LastName = SUBSTRING(Name, CHARINDEX(' ', Name + ' ') + 1, LEN(Name))\n            WHERE Name IS NOT NULL AND Name &lt;&gt; ''\n        \";\n\n        await ExecuteSqlAsync(sql);\n    }\n\n    private async Task MakeColumnsRequiredAsync()\n    {\n        var sql = @\"\n            ALTER TABLE Users \n            ALTER COLUMN FirstName NVARCHAR(50) NOT NULL;\n\n            ALTER TABLE Users \n            ALTER COLUMN LastName NVARCHAR(50) NOT NULL;\n        \";\n\n        await ExecuteSqlAsync(sql);\n    }\n\n    private async Task RemoveOldColumnsAsync()\n    {\n        var sql = \"ALTER TABLE Users DROP COLUMN Name\";\n        await ExecuteSqlAsync(sql);\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/migration-strategies/#2-data-first-migration","title":"2. Data-First Migration","text":"<p>\u00d6nce veri migration'\u0131, sonra \u015fema de\u011fi\u015fikli\u011fi.</p> <pre><code>public class DataFirstMigrationService\n{\n    public async Task MigrateDataFirstAsync()\n    {\n        // Step 1: Create new table structure\n        await CreateNewTableStructureAsync();\n\n        // Step 2: Migrate data to new structure\n        await MigrateDataToNewStructureAsync();\n\n        // Step 3: Verify data integrity\n        await VerifyDataIntegrityAsync();\n\n        // Step 4: Switch to new table\n        await SwitchToNewTableAsync();\n\n        // Step 5: Clean up old table\n        await CleanupOldTableAsync();\n    }\n\n    private async Task CreateNewTableStructureAsync()\n    {\n        var sql = @\"\n            CREATE TABLE Users_New (\n                Id INT PRIMARY KEY,\n                Username NVARCHAR(50) NOT NULL,\n                Email NVARCHAR(100) NOT NULL,\n                FirstName NVARCHAR(50) NOT NULL,\n                LastName NVARCHAR(50) NOT NULL,\n                IsActive BIT NOT NULL DEFAULT 1,\n                CreatedAt DATETIME2 NOT NULL DEFAULT GETDATE(),\n                UpdatedAt DATETIME2 NOT NULL DEFAULT GETDATE()\n            )\n        \";\n\n        await ExecuteSqlAsync(sql);\n    }\n\n    private async Task MigrateDataToNewStructureAsync()\n    {\n        var sql = @\"\n            INSERT INTO Users_New (Id, Username, Email, FirstName, LastName, IsActive, CreatedAt, UpdatedAt)\n            SELECT \n                Id,\n                Username,\n                Email,\n                SUBSTRING(Name, 1, CHARINDEX(' ', Name + ' ') - 1) as FirstName,\n                SUBSTRING(Name, CHARINDEX(' ', Name + ' ') + 1, LEN(Name)) as LastName,\n                IsActive,\n                CreatedAt,\n                UpdatedAt\n            FROM Users\n        \";\n\n        await ExecuteSqlAsync(sql);\n    }\n\n    private async Task SwitchToNewTableAsync()\n    {\n        // Rename tables\n        var sql = @\"\n            EXEC sp_rename 'Users', 'Users_Old';\n            EXEC sp_rename 'Users_New', 'Users';\n        \";\n\n        await ExecuteSqlAsync(sql);\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/migration-strategies/#migration-testing-stratejileri","title":"Migration Testing Stratejileri","text":""},{"location":"mid-level/database-design/migration-strategies/#1-migration-testing","title":"1. Migration Testing","text":"<pre><code>public class MigrationTests\n{\n    [Fact]\n    public async Task Migration_ShouldPreserveDataIntegrity()\n    {\n        // Arrange\n        var testData = CreateTestData();\n        var migrationService = new MigrationService();\n\n        // Act\n        await migrationService.MigrateAsync();\n\n        // Assert\n        var migratedData = await GetMigratedDataAsync();\n        Assert.Equal(testData.Count, migratedData.Count);\n\n        foreach (var original in testData)\n        {\n            var migrated = migratedData.FirstOrDefault(x =&gt; x.Id == original.Id);\n            Assert.NotNull(migrated);\n            Assert.Equal(original.Username, migrated.Username);\n            Assert.Equal(original.Email, migrated.Email);\n        }\n    }\n\n    [Fact]\n    public async Task Migration_ShouldHandleLargeDatasets()\n    {\n        // Arrange\n        var largeDataset = CreateLargeDataset(100000); // 100K records\n        var migrationService = new MigrationService();\n\n        // Act &amp; Assert\n        var stopwatch = Stopwatch.StartNew();\n        await migrationService.MigrateAsync();\n        stopwatch.Stop();\n\n        // Migration should complete within reasonable time\n        Assert.True(stopwatch.ElapsedMilliseconds &lt; 30000); // 30 seconds\n    }\n\n    [Fact]\n    public async Task Migration_ShouldBeReversible()\n    {\n        // Arrange\n        var originalData = await GetCurrentDataAsync();\n        var migrationService = new MigrationService();\n\n        // Act\n        await migrationService.MigrateAsync();\n        await migrationService.RollbackAsync();\n\n        // Assert\n        var rolledBackData = await GetCurrentDataAsync();\n        Assert.Equal(originalData.Count, rolledBackData.Count);\n\n        // Verify data is identical\n        foreach (var original in originalData)\n        {\n            var rolledBack = rolledBackData.FirstOrDefault(x =&gt; x.Id == original.Id);\n            Assert.NotNull(rolledBack);\n            Assert.Equal(original, rolledBack);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/migration-strategies/#2-migration-validation","title":"2. Migration Validation","text":"<pre><code>public class MigrationValidator\n{\n    public async Task&lt;ValidationResult&gt; ValidateMigrationAsync(string migrationScript)\n    {\n        var result = new ValidationResult();\n\n        try\n        {\n            // Syntax validation\n            await ValidateSyntaxAsync(migrationScript, result);\n\n            // Data integrity validation\n            await ValidateDataIntegrityAsync(migrationScript, result);\n\n            // Performance validation\n            await ValidatePerformanceAsync(migrationScript, result);\n\n            // Rollback validation\n            await ValidateRollbackAsync(migrationScript, result);\n        }\n        catch (Exception ex)\n        {\n            result.AddError(\"Validation failed\", ex.Message);\n        }\n\n        return result;\n    }\n\n    private async Task ValidateSyntaxAsync(string migrationScript, ValidationResult result)\n    {\n        try\n        {\n            // Parse SQL syntax\n            var parsed = await ParseSqlAsync(migrationScript);\n            if (!parsed.IsValid)\n            {\n                result.AddError(\"Syntax Error\", parsed.ErrorMessage);\n            }\n        }\n        catch (Exception ex)\n        {\n            result.AddError(\"Syntax Validation Failed\", ex.Message);\n        }\n    }\n\n    private async Task ValidateDataIntegrityAsync(string migrationScript, ValidationResult result)\n    {\n        // Check for potential data loss\n        if (migrationScript.Contains(\"DROP TABLE\") || migrationScript.Contains(\"TRUNCATE TABLE\"))\n        {\n            result.AddWarning(\"Data Loss Risk\", \"Migration contains operations that may cause data loss\");\n        }\n\n        // Check for foreign key constraints\n        if (migrationScript.Contains(\"ALTER TABLE\") &amp;&amp; !migrationScript.Contains(\"FOREIGN KEY\"))\n        {\n            result.AddWarning(\"Constraint Risk\", \"Table alteration without foreign key consideration\");\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/migration-strategies/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/database-design/migration-strategies/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Database migration nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Veritaban\u0131 \u015femas\u0131ndaki de\u011fi\u015fiklikleri y\u00f6netme s\u00fcreci. Version control, rollback, team collaboration i\u00e7in kritik.</p> </li> <li> <p>Forward-only vs reversible migrations aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Forward-only sadece ileri, reversible geri al\u0131nabilir. Production'da forward-only daha g\u00fcvenli.</p> </li> <li> <p>Blue-green deployment nedir?</p> </li> <li> <p>Cevap: S\u0131f\u0131r downtime ile migration yapma stratejisi. Yeni database olu\u015fturulur, traffic switch edilir.</p> </li> <li> <p>Rolling migration nedir?</p> </li> <li> <p>Cevap: A\u015famal\u0131 olarak migration yapma. Her instance s\u0131rayla g\u00fcncellenir, availability korunur.</p> </li> <li> <p>Schema-first vs data-first migration aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: Schema-first \u00f6nce \u015fema sonra veri, data-first \u00f6nce veri sonra \u015fema. Risk ve complexity farkl\u0131.</li> </ol>"},{"location":"mid-level/database-design/migration-strategies/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Migration'da data loss nas\u0131l \u00f6nlenir?</li> <li> <p>Cevap: Backup al\u0131n\u0131r, test environment'da \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r, validation yap\u0131l\u0131r, rollback plan haz\u0131rlan\u0131r.</p> </li> <li> <p>Large dataset'lerde migration performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Batch processing, parallel execution, index management, maintenance window kullan\u0131l\u0131r.</p> </li> <li> <p>Migration testing'de hangi testler yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Data integrity, performance, rollback, large dataset, edge cases testing.</p> </li> <li> <p>Production'da migration rollback nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Automated rollback scripts, backup restoration, blue-green switchback, rolling rollback.</p> </li> <li> <p>Migration'da team collaboration nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap: Version control, code review, migration scripts, documentation, communication.</li> </ol>"},{"location":"mid-level/database-design/migration-strategies/#best-practices","title":"Best Practices","text":"<ol> <li>Planning</li> <li>Migration strategy belirleyin</li> <li>Risk assessment yap\u0131n</li> <li>Rollback plan haz\u0131rlay\u0131n</li> <li> <p>Testing plan olu\u015fturun</p> </li> <li> <p>Execution</p> </li> <li>Maintenance window kullan\u0131n</li> <li>Backup al\u0131n</li> <li>Monitoring yap\u0131n</li> <li> <p>Communication sa\u011flay\u0131n</p> </li> <li> <p>Validation</p> </li> <li>Data integrity kontrol edin</li> <li>Performance test edin</li> <li>Rollback test edin</li> <li> <p>User acceptance test yap\u0131n</p> </li> <li> <p>Documentation</p> </li> <li>Migration scripts document edin</li> <li>Rollback procedures yaz\u0131n</li> <li>Lessons learned kaydedin</li> <li>Runbook olu\u015fturun</li> </ol>"},{"location":"mid-level/database-design/migration-strategies/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Entity Framework Core Migrations</li> <li>Database Migration Best Practices</li> <li>Blue-Green Deployment</li> <li>Database Migration Strategies</li> <li>Migration Testing</li> </ul>"},{"location":"mid-level/database-design/replication/","title":"Database Replication","text":""},{"location":"mid-level/database-design/replication/#giris","title":"Giri\u015f","text":"<p>Database Replication, veritaban\u0131 verilerini birden fazla sunucuda kopyalama ve senkronize etme s\u00fcrecidir. Mid-level geli\u015ftiriciler i\u00e7in replication stratejilerini anlamak, y\u00fcksek availability, disaster recovery ve read scalability sa\u011flamada kritiktir.</p>"},{"location":"mid-level/database-design/replication/#replication-turleri","title":"Replication T\u00fcrleri","text":""},{"location":"mid-level/database-design/replication/#1-master-slave-replication-primary-secondary","title":"1. Master-Slave Replication (Primary-Secondary)","text":"<p>Tek bir master database ve birden fazla slave database'den olu\u015fan yap\u0131.</p> <pre><code>public class MasterSlaveReplicationService\n{\n    private readonly IDbConnection _masterConnection;\n    private readonly List&lt;IDbConnection&gt; _slaveConnections;\n    private readonly ILogger&lt;MasterSlaveReplicationService&gt; _logger;\n    private readonly Random _random;\n\n    public MasterSlaveReplicationService(\n        string masterConnectionString, \n        List&lt;string&gt; slaveConnectionStrings,\n        ILogger&lt;MasterSlaveReplicationService&gt; logger)\n    {\n        _masterConnection = new SqlConnection(masterConnectionString);\n        _slaveConnections = slaveConnectionStrings.Select(cs =&gt; new SqlConnection(cs)).ToList();\n        _logger = logger;\n        _random = new Random();\n    }\n\n    public async Task&lt;int&gt; WriteToMasterAsync(string sql, object parameters)\n    {\n        try\n        {\n            _logger.LogInformation(\"Writing to master database\");\n            return await _masterConnection.ExecuteAsync(sql, parameters);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error writing to master database\");\n            throw;\n        }\n    }\n\n    public async Task&lt;T&gt; ReadFromSlaveAsync&lt;T&gt;(string sql, object parameters)\n    {\n        // Round-robin load balancing among slaves\n        var slaveConnection = GetNextSlaveConnection();\n\n        try\n        {\n            _logger.LogInformation(\"Reading from slave database\");\n            return await slaveConnection.QueryFirstOrDefaultAsync&lt;T&gt;(sql, parameters);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error reading from slave database, trying master\");\n            // Fallback to master if slave fails\n            return await _masterConnection.QueryFirstOrDefaultAsync&lt;T&gt;(sql, parameters);\n        }\n    }\n\n    public async Task&lt;List&lt;T&gt;&gt; ReadFromAllSlavesAsync&lt;T&gt;(string sql, object parameters)\n    {\n        var tasks = _slaveConnections.Select(conn =&gt; \n            conn.QueryAsync&lt;T&gt;(sql, parameters));\n\n        var results = await Task.WhenAll(tasks);\n        return results.SelectMany(r =&gt; r).ToList();\n    }\n\n    private IDbConnection GetNextSlaveConnection()\n    {\n        var index = _random.Next(_slaveConnections.Count);\n        return _slaveConnections[index];\n    }\n\n    public async Task&lt;bool&gt; IsReplicationLagAcceptableAsync()\n    {\n        try\n        {\n            // Check replication lag between master and slaves\n            var masterTime = await GetMasterTimeAsync();\n            var slaveTimes = await GetSlaveTimesAsync();\n\n            var maxLag = slaveTimes.Max(st =&gt; Math.Abs((masterTime - st).TotalSeconds));\n\n            // Acceptable lag is less than 5 seconds\n            return maxLag &lt; 5;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error checking replication lag\");\n            return false;\n        }\n    }\n\n    private async Task&lt;DateTime&gt; GetMasterTimeAsync()\n    {\n        var result = await _masterConnection.QueryFirstOrDefaultAsync&lt;DateTime&gt;(\"SELECT GETUTCDATE()\");\n        return result;\n    }\n\n    private async Task&lt;List&lt;DateTime&gt;&gt; GetSlaveTimesAsync()\n    {\n        var tasks = _slaveConnections.Select(conn =&gt; \n            conn.QueryFirstOrDefaultAsync&lt;DateTime&gt;(\"SELECT GETUTCDATE()\"));\n\n        var results = await Task.WhenAll(tasks);\n        return results.ToList();\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/replication/#2-multi-master-replication","title":"2. Multi-Master Replication","text":"<p>Birden fazla master database'in ayn\u0131 anda yazma yapabildi\u011fi yap\u0131.</p> <pre><code>public class MultiMasterReplicationService\n{\n    private readonly List&lt;MasterNode&gt; _masterNodes;\n    private readonly ILogger&lt;MultiMasterReplicationService&gt; _logger;\n    private readonly IConflictResolutionStrategy _conflictResolver;\n\n    public MultiMasterReplicationService(\n        List&lt;string&gt; masterConnectionStrings,\n        IConflictResolutionStrategy conflictResolver,\n        ILogger&lt;MultiMasterReplicationService&gt; logger)\n    {\n        _masterNodes = masterConnectionStrings.Select((cs, index) =&gt; \n            new MasterNode { Id = index, Connection = new SqlConnection(cs) }).ToList();\n        _conflictResolver = conflictResolver;\n        _logger = logger;\n    }\n\n    public async Task&lt;bool&gt; WriteToAllMastersAsync(string sql, object parameters)\n    {\n        var tasks = _masterNodes.Select(node =&gt; WriteToMasterAsync(node, sql, parameters));\n        var results = await Task.WhenAll(tasks);\n\n        // Check if all writes were successful\n        return results.All(r =&gt; r);\n    }\n\n    public async Task&lt;bool&gt; WriteToNearestMasterAsync(string sql, object parameters)\n    {\n        var nearestNode = await GetNearestMasterNodeAsync();\n        return await WriteToMasterAsync(nearestNode, sql, parameters);\n    }\n\n    public async Task&lt;T&gt; ReadFromNearestMasterAsync&lt;T&gt;(string sql, object parameters)\n    {\n        var nearestNode = await GetNearestMasterNodeAsync();\n\n        try\n        {\n            return await nearestNode.Connection.QueryFirstOrDefaultAsync&lt;T&gt;(sql, parameters);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error reading from nearest master, trying others\");\n\n            // Try other nodes if nearest fails\n            foreach (var node in _masterNodes.Where(n =&gt; n.Id != nearestNode.Id))\n            {\n                try\n                {\n                    return await node.Connection.QueryFirstOrDefaultAsync&lt;T&gt;(sql, parameters);\n                }\n                catch\n                {\n                    continue;\n                }\n            }\n\n            throw;\n        }\n    }\n\n    private async Task&lt;MasterNode&gt; GetNearestMasterNodeAsync()\n    {\n        // Simple round-robin for now, could be enhanced with latency-based selection\n        var index = Environment.TickCount % _masterNodes.Count;\n        return _masterNodes[index];\n    }\n\n    private async Task&lt;bool&gt; WriteToMasterAsync(MasterNode node, string sql, object parameters)\n    {\n        try\n        {\n            await node.Connection.ExecuteAsync(sql, parameters);\n            _logger.LogInformation(\"Successfully wrote to master node {NodeId}\", node.Id);\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error writing to master node {NodeId}\", node.Id);\n            return false;\n        }\n    }\n\n    public async Task ResolveConflictsAsync()\n    {\n        var conflicts = await DetectConflictsAsync();\n\n        foreach (var conflict in conflicts)\n        {\n            var resolution = await _conflictResolver.ResolveAsync(conflict);\n            await ApplyResolutionAsync(resolution);\n        }\n    }\n\n    private async Task&lt;List&lt;DataConflict&gt;&gt; DetectConflictsAsync()\n    {\n        var conflicts = new List&lt;DataConflict&gt;();\n\n        // Implementation to detect conflicts between master nodes\n        // This would involve comparing data across nodes and identifying inconsistencies\n\n        return conflicts;\n    }\n\n    private async Task ApplyResolutionAsync(ConflictResolution resolution)\n    {\n        // Apply the resolved conflict to all master nodes\n        var tasks = _masterNodes.Select(node =&gt; \n            ApplyResolutionToNodeAsync(node, resolution));\n\n        await Task.WhenAll(tasks);\n    }\n}\n\npublic class MasterNode\n{\n    public int Id { get; set; }\n    public IDbConnection Connection { get; set; }\n    public DateTime LastSync { get; set; }\n    public bool IsHealthy { get; set; }\n}\n\npublic class DataConflict\n{\n    public string TableName { get; set; }\n    public string PrimaryKey { get; set; }\n    public Dictionary&lt;string, object&gt; ConflictingValues { get; set; }\n    public List&lt;int&gt; ConflictingNodeIds { get; set; }\n}\n\npublic class ConflictResolution\n{\n    public string TableName { get; set; }\n    public string PrimaryKey { get; set; }\n    public Dictionary&lt;string, object&gt; ResolvedValues { get; set; }\n    public string ResolutionStrategy { get; set; }\n}\n</code></pre>"},{"location":"mid-level/database-design/replication/#3-chain-replication","title":"3. Chain Replication","text":"<p>Verilerin s\u0131ral\u0131 olarak bir node'dan di\u011ferine aktar\u0131ld\u0131\u011f\u0131 yap\u0131.</p> <pre><code>public class ChainReplicationService\n{\n    private readonly List&lt;ReplicationNode&gt; _nodes;\n    private readonly ILogger&lt;ChainReplicationService&gt; _logger;\n\n    public ChainReplicationService(\n        List&lt;string&gt; connectionStrings,\n        ILogger&lt;ChainReplicationService&gt; logger)\n    {\n        _nodes = connectionStrings.Select((cs, index) =&gt; new ReplicationNode\n        {\n            Id = index,\n            Connection = new SqlConnection(cs),\n            IsHead = index == 0,\n            IsTail = index == connectionStrings.Count - 1\n        }).ToList();\n\n        _logger = logger;\n    }\n\n    public async Task&lt;bool&gt; WriteToHeadAsync(string sql, object parameters)\n    {\n        var headNode = _nodes.First(n =&gt; n.IsHead);\n\n        try\n        {\n            // Write to head node\n            await headNode.Connection.ExecuteAsync(sql, parameters);\n\n            // Propagate to next node in chain\n            await PropagateToNextNodeAsync(headNode, sql, parameters);\n\n            _logger.LogInformation(\"Successfully wrote to head node and propagated\");\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error writing to head node\");\n            return false;\n        }\n    }\n\n    private async Task PropagateToNextNodeAsync(ReplicationNode currentNode, string sql, object parameters)\n    {\n        var nextNode = _nodes.FirstOrDefault(n =&gt; n.Id == currentNode.Id + 1);\n\n        if (nextNode != null)\n        {\n            try\n            {\n                await nextNode.Connection.ExecuteAsync(sql, parameters);\n                _logger.LogInformation(\"Propagated to node {NodeId}\", nextNode.Id);\n\n                // Continue propagation\n                await PropagateToNextNodeAsync(nextNode, sql, parameters);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error propagating to node {NodeId}\", nextNode.Id);\n                throw;\n            }\n        }\n    }\n\n    public async Task&lt;T&gt; ReadFromTailAsync&lt;T&gt;(string sql, object parameters)\n    {\n        var tailNode = _nodes.First(n =&gt; n.IsTail);\n\n        try\n        {\n            return await tailNode.Connection.QueryFirstOrDefaultAsync&lt;T&gt;(sql, parameters);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error reading from tail node\");\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; IsChainHealthyAsync()\n    {\n        foreach (var node in _nodes)\n        {\n            try\n            {\n                var result = await node.Connection.QueryFirstOrDefaultAsync&lt;int&gt;(\"SELECT 1\");\n                if (result != 1)\n                {\n                    _logger.LogWarning(\"Node {NodeId} is unhealthy\", node.Id);\n                    return false;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Node {NodeId} health check failed\", node.Id);\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\npublic class ReplicationNode\n{\n    public int Id { get; set; }\n    public IDbConnection Connection { get; set; }\n    public bool IsHead { get; set; }\n    public bool IsTail { get; set; }\n    public DateTime LastSync { get; set; }\n}\n</code></pre>"},{"location":"mid-level/database-design/replication/#replication-implementation","title":"Replication Implementation","text":""},{"location":"mid-level/database-design/replication/#1-replication-monitor","title":"1. Replication Monitor","text":"<pre><code>public class ReplicationMonitor\n{\n    private readonly IReplicationService _replicationService;\n    private readonly ILogger&lt;ReplicationMonitor&gt; _logger;\n    private readonly Timer _healthCheckTimer;\n\n    public ReplicationMonitor(\n        IReplicationService replicationService,\n        ILogger&lt;ReplicationMonitor&gt; logger)\n    {\n        _replicationService = replicationService;\n        _logger = logger;\n        _healthCheckTimer = new Timer(PerformHealthCheck, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));\n    }\n\n    private async void PerformHealthCheck(object state)\n    {\n        try\n        {\n            var isHealthy = await _replicationService.IsHealthyAsync();\n\n            if (!isHealthy)\n            {\n                _logger.LogWarning(\"Replication health check failed\");\n                await NotifyAdministratorsAsync(\"Replication health check failed\");\n            }\n\n            var lag = await _replicationService.GetReplicationLagAsync();\n            if (lag &gt; TimeSpan.FromMinutes(5))\n            {\n                _logger.LogWarning(\"Replication lag is high: {Lag}\", lag);\n                await NotifyAdministratorsAsync($\"High replication lag: {lag}\");\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during health check\");\n        }\n    }\n\n    private async Task NotifyAdministratorsAsync(string message)\n    {\n        // Implementation to notify administrators via email, Slack, etc.\n        _logger.LogInformation(\"Notifying administrators: {Message}\", message);\n    }\n\n    public async Task&lt;ReplicationStatus&gt; GetReplicationStatusAsync()\n    {\n        return new ReplicationStatus\n        {\n            IsHealthy = await _replicationService.IsHealthyAsync(),\n            ReplicationLag = await _replicationService.GetReplicationLagAsync(),\n            LastSyncTime = await _replicationService.GetLastSyncTimeAsync(),\n            NodeCount = await _replicationService.GetNodeCountAsync(),\n            FailedNodes = await _replicationService.GetFailedNodesAsync()\n        };\n    }\n}\n\npublic class ReplicationStatus\n{\n    public bool IsHealthy { get; set; }\n    public TimeSpan ReplicationLag { get; set; }\n    public DateTime LastSyncTime { get; set; }\n    public int NodeCount { get; set; }\n    public List&lt;int&gt; FailedNodes { get; set; }\n}\n</code></pre>"},{"location":"mid-level/database-design/replication/#2-conflict-resolution-strategies","title":"2. Conflict Resolution Strategies","text":"<pre><code>public interface IConflictResolutionStrategy\n{\n    Task&lt;ConflictResolution&gt; ResolveAsync(DataConflict conflict);\n}\n\npublic class LastWriteWinsStrategy : IConflictResolutionStrategy\n{\n    public async Task&lt;ConflictResolution&gt; ResolveAsync(DataConflict conflict)\n    {\n        // Simple strategy: use the most recent timestamp\n        var mostRecentValue = conflict.ConflictingValues\n            .OrderByDescending(kv =&gt; kv.Value)\n            .First();\n\n        return new ConflictResolution\n        {\n            TableName = conflict.TableName,\n            PrimaryKey = conflict.PrimaryKey,\n            ResolvedValues = new Dictionary&lt;string, object&gt; { mostRecentValue },\n            ResolutionStrategy = \"LastWriteWins\"\n        };\n    }\n}\n\npublic class CustomBusinessLogicStrategy : IConflictResolutionStrategy\n{\n    private readonly IBusinessRuleEngine _businessRuleEngine;\n\n    public CustomBusinessLogicStrategy(IBusinessRuleEngine businessRuleEngine)\n    {\n        _businessRuleEngine = businessRuleEngine;\n    }\n\n    public async Task&lt;ConflictResolution&gt; ResolveAsync(DataConflict conflict)\n    {\n        // Apply business rules to resolve conflicts\n        var resolvedValues = await _businessRuleEngine.ResolveConflictAsync(conflict);\n\n        return new ConflictResolution\n        {\n            TableName = conflict.TableName,\n            PrimaryKey = conflict.PrimaryKey,\n            ResolvedValues = resolvedValues,\n            ResolutionStrategy = \"BusinessLogic\"\n        };\n    }\n}\n\npublic class ManualResolutionStrategy : IConflictResolutionStrategy\n{\n    private readonly IConflictNotificationService _notificationService;\n\n    public ManualResolutionStrategy(IConflictNotificationService notificationService)\n    {\n        _notificationService = notificationService;\n    }\n\n    public async Task&lt;ConflictResolution&gt; ResolveAsync(DataConflict conflict)\n    {\n        // Notify administrators for manual resolution\n        await _notificationService.NotifyConflictAsync(conflict);\n\n        // Return a placeholder resolution that will be updated manually\n        return new ConflictResolution\n        {\n            TableName = conflict.TableName,\n            PrimaryKey = conflict.PrimaryKey,\n            ResolvedValues = new Dictionary&lt;string, object&gt;(),\n            ResolutionStrategy = \"ManualResolution\"\n        };\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/replication/#replication-best-practices","title":"Replication Best Practices","text":""},{"location":"mid-level/database-design/replication/#1-monitoring-ve-alerting","title":"1. Monitoring ve Alerting","text":"<pre><code>public class ReplicationMetricsCollector\n{\n    private readonly IReplicationService _replicationService;\n    private readonly IMetricsService _metricsService;\n\n    public async Task CollectMetricsAsync()\n    {\n        var lag = await _replicationService.GetReplicationLagAsync();\n        var nodeCount = await _replicationService.GetNodeCountAsync();\n        var failedNodes = await _replicationService.GetFailedNodesAsync();\n\n        // Record metrics\n        _metricsService.RecordGauge(\"replication.lag.seconds\", lag.TotalSeconds);\n        _metricsService.RecordGauge(\"replication.nodes.total\", nodeCount);\n        _metricsService.RecordGauge(\"replication.nodes.failed\", failedNodes.Count);\n\n        // Set alerts\n        if (lag &gt; TimeSpan.FromMinutes(5))\n        {\n            _metricsService.RecordAlert(\"replication.lag.high\", lag.TotalSeconds);\n        }\n\n        if (failedNodes.Count &gt; 0)\n        {\n            _metricsService.RecordAlert(\"replication.nodes.failed\", failedNodes.Count);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/replication/#2-disaster-recovery","title":"2. Disaster Recovery","text":"<pre><code>public class DisasterRecoveryService\n{\n    private readonly IReplicationService _replicationService;\n    private readonly IBackupService _backupService;\n\n    public async Task&lt;RecoveryPlan&gt; CreateRecoveryPlanAsync()\n    {\n        var healthyNodes = await _replicationService.GetHealthyNodesAsync();\n        var failedNodes = await _replicationService.GetFailedNodesAsync();\n\n        var plan = new RecoveryPlan\n        {\n            FailedNodes = failedNodes,\n            RecoverySteps = new List&lt;RecoveryStep&gt;()\n        };\n\n        foreach (var failedNode in failedNodes)\n        {\n            var recoveryStep = await CreateRecoveryStepAsync(failedNode, healthyNodes);\n            plan.RecoverySteps.Add(recoveryStep);\n        }\n\n        return plan;\n    }\n\n    private async Task&lt;RecoveryStep&gt; CreateRecoveryStepAsync(\n        int failedNodeId, \n        List&lt;int&gt; healthyNodes)\n    {\n        var sourceNode = healthyNodes.First(); // Use first healthy node as source\n\n        return new RecoveryStep\n        {\n            FailedNodeId = failedNodeId,\n            SourceNodeId = sourceNode,\n            Action = \"RestoreFromReplica\",\n            EstimatedDuration = TimeSpan.FromMinutes(30),\n            Dependencies = new List&lt;string&gt;()\n        };\n    }\n\n    public async Task ExecuteRecoveryPlanAsync(RecoveryPlan plan)\n    {\n        foreach (var step in plan.RecoverySteps)\n        {\n            await ExecuteRecoveryStepAsync(step);\n        }\n    }\n\n    private async Task ExecuteRecoveryStepAsync(RecoveryStep step)\n    {\n        // Implementation of recovery step execution\n        // This would involve restoring data from healthy nodes\n        // and bringing failed nodes back online\n    }\n}\n\npublic class RecoveryPlan\n{\n    public List&lt;int&gt; FailedNodes { get; set; }\n    public List&lt;RecoveryStep&gt; RecoverySteps { get; set; }\n}\n\npublic class RecoveryStep\n{\n    public int FailedNodeId { get; set; }\n    public int SourceNodeId { get; set; }\n    public string Action { get; set; }\n    public TimeSpan EstimatedDuration { get; set; }\n    public List&lt;string&gt; Dependencies { get; set; }\n}\n</code></pre>"},{"location":"mid-level/database-design/replication/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/database-design/replication/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Database replication nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Veritaban\u0131 verilerini birden fazla sunucuda kopyalama. High availability, disaster recovery, read scalability i\u00e7in.</p> </li> <li> <p>Master-Slave vs Multi-Master replication aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Master-Slave tek yazma noktas\u0131, Multi-Master \u00e7oklu yazma noktas\u0131. Complexity ve consistency trade-off'lar\u0131 var.</p> </li> <li> <p>Replication lag nedir ve nas\u0131l \u00f6l\u00e7\u00fcl\u00fcr?</p> </li> <li> <p>Cevap: Master ve slave aras\u0131ndaki veri senkronizasyon gecikmesi. Timestamp kar\u015f\u0131la\u015ft\u0131rmas\u0131 ile \u00f6l\u00e7\u00fcl\u00fcr.</p> </li> <li> <p>Conflict resolution nedir ve hangi stratejiler vard\u0131r?</p> </li> <li> <p>Cevap: \u00c7ak\u0131\u015fan verileri \u00e7\u00f6zme s\u00fcreci. Last-write-wins, business logic, manual resolution stratejileri.</p> </li> <li> <p>Chain replication nedir ve ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Verilerin s\u0131ral\u0131 olarak aktar\u0131ld\u0131\u011f\u0131 yap\u0131. Strong consistency gerektiren durumlarda kullan\u0131l\u0131r.</li> </ol>"},{"location":"mid-level/database-design/replication/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Replication'da data consistency nas\u0131l sa\u011flan\u0131r?</li> <li> <p>Cevap: Synchronous/asynchronous replication, conflict resolution, eventual consistency, monitoring.</p> </li> <li> <p>Replication failure durumunda ne yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Health monitoring, automatic failover, manual intervention, disaster recovery procedures.</p> </li> <li> <p>Replication performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Batch operations, compression, network optimization, monitoring, tuning.</p> </li> <li> <p>Replication vs sharding aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Replication ayn\u0131 veriyi kopyalar, sharding farkl\u0131 veriyi b\u00f6ler. Farkl\u0131 scalability patterns.</p> </li> <li> <p>Replication monitoring'de hangi metrics izlenir?</p> </li> <li>Cevap: Replication lag, node health, sync status, performance metrics, error rates.</li> </ol>"},{"location":"mid-level/database-design/replication/#best-practices","title":"Best Practices","text":"<ol> <li>Replication Strategy Selection</li> <li>Business requirements analiz edin</li> <li>Consistency vs performance trade-off'lar\u0131 de\u011ferlendirin</li> <li>Network infrastructure'\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun</li> <li> <p>Monitoring capabilities planlay\u0131n</p> </li> <li> <p>Conflict Resolution</p> </li> <li>Business rules tan\u0131mlay\u0131n</li> <li>Automated resolution implement edin</li> <li>Manual intervention i\u00e7in processes olu\u015fturun</li> <li> <p>Conflict history maintain edin</p> </li> <li> <p>Monitoring ve Alerting</p> </li> <li>Real-time monitoring implement edin</li> <li>Automated alerting kurun</li> <li>Performance metrics izleyin</li> <li> <p>Health checks automate edin</p> </li> <li> <p>Disaster Recovery</p> </li> <li>Recovery procedures document edin</li> <li>Regular testing yap\u0131n</li> <li>Backup strategies implement edin</li> <li>Failover automation kurun</li> </ol>"},{"location":"mid-level/database-design/replication/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>SQL Server Replication</li> <li>Database Replication Strategies</li> <li>Replication Best Practices</li> <li>Conflict Resolution</li> <li>High Availability</li> </ul>"},{"location":"mid-level/database-design/sharding/","title":"Database Sharding","text":""},{"location":"mid-level/database-design/sharding/#giris","title":"Giri\u015f","text":"<p>Database Sharding, b\u00fcy\u00fck veritabanlar\u0131n\u0131 daha k\u00fc\u00e7\u00fck, y\u00f6netilebilir par\u00e7alara (shard'lara) b\u00f6lme tekni\u011fidir. Mid-level geli\u015ftiriciler i\u00e7in sharding stratejilerini anlamak, \u00f6l\u00e7eklenebilir ve y\u00fcksek performansl\u0131 veritaban\u0131 sistemleri tasarlamada kritiktir.</p>"},{"location":"mid-level/database-design/sharding/#sharding-stratejileri","title":"Sharding Stratejileri","text":""},{"location":"mid-level/database-design/sharding/#1-horizontal-sharding-row-based","title":"1. Horizontal Sharding (Row-based)","text":"<p>Veri sat\u0131rlar\u0131n\u0131 farkl\u0131 shard'lara da\u011f\u0131tma stratejisi.</p>"},{"location":"mid-level/database-design/sharding/#hash-based-sharding","title":"Hash-based Sharding","text":"<pre><code>public class HashBasedShardingStrategy : IShardingStrategy\n{\n    private readonly int _numberOfShards;\n\n    public HashBasedShardingStrategy(int numberOfShards)\n    {\n        _numberOfShards = numberOfShards;\n    }\n\n    public int GetShardId(object shardKey)\n    {\n        var hash = shardKey.GetHashCode();\n        var shardId = Math.Abs(hash) % _numberOfShards;\n        return shardId;\n    }\n\n    public string GetConnectionString(int shardId)\n    {\n        return $\"Server=shard-{shardId};Database=UserDB;Trusted_Connection=true;\";\n    }\n}\n\n// Kullan\u0131m \u00f6rne\u011fi\npublic class UserRepository\n{\n    private readonly HashBasedShardingStrategy _shardingStrategy;\n    private readonly Dictionary&lt;int, IDbConnection&gt; _shardConnections;\n\n    public UserRepository(int numberOfShards)\n    {\n        _shardingStrategy = new HashBasedShardingStrategy(numberOfShards);\n        _shardConnections = InitializeShardConnections(numberOfShards);\n    }\n\n    public async Task&lt;User&gt; GetUserByIdAsync(int userId)\n    {\n        var shardId = _shardingStrategy.GetShardId(userId);\n        var connection = _shardConnections[shardId];\n\n        var sql = \"SELECT * FROM Users WHERE Id = @UserId\";\n        return await connection.QueryFirstOrDefaultAsync&lt;User&gt;(sql, new { UserId = userId });\n    }\n\n    public async Task&lt;int&gt; CreateUserAsync(User user)\n    {\n        var shardId = _shardingStrategy.GetShardId(user.Id);\n        var connection = _shardConnections[shardId];\n\n        var sql = @\"\n            INSERT INTO Users (Id, Username, Email, CreatedAt) \n            VALUES (@Id, @Username, @Email, @CreatedAt);\n            SELECT CAST(SCOPE_IDENTITY() as int)\n        \";\n\n        return await connection.QuerySingleAsync&lt;int&gt;(sql, user);\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/sharding/#range-based-sharding","title":"Range-based Sharding","text":"<pre><code>public class RangeBasedShardingStrategy : IShardingStrategy\n{\n    private readonly List&lt;ShardRange&gt; _shardRanges;\n\n    public RangeBasedShardingStrategy()\n    {\n        _shardRanges = new List&lt;ShardRange&gt;\n        {\n            new ShardRange { ShardId = 0, MinValue = 1, MaxValue = 1000000, ConnectionString = \"shard-0\" },\n            new ShardRange { ShardId = 1, MinValue = 1000001, MaxValue = 2000000, ConnectionString = \"shard-1\" },\n            new ShardRange { ShardId = 2, MinValue = 2000001, MaxValue = 3000000, ConnectionString = \"shard-2\" },\n            new ShardRange { ShardId = 3, MinValue = 3000001, MaxValue = 4000000, ConnectionString = \"shard-3\" }\n        };\n    }\n\n    public int GetShardId(object shardKey)\n    {\n        if (shardKey is int intKey)\n        {\n            var shard = _shardRanges.FirstOrDefault(s =&gt; intKey &gt;= s.MinValue &amp;&amp; intKey &lt;= s.MaxValue);\n            return shard?.ShardId ?? 0;\n        }\n\n        throw new ArgumentException(\"Shard key must be an integer\");\n    }\n\n    public string GetConnectionString(int shardId)\n    {\n        var shard = _shardRanges.FirstOrDefault(s =&gt; s.ShardId == shardId);\n        return shard?.ConnectionString ?? _shardRanges[0].ConnectionString;\n    }\n}\n\npublic class ShardRange\n{\n    public int ShardId { get; set; }\n    public long MinValue { get; set; }\n    public long MaxValue { get; set; }\n    public string ConnectionString { get; set; }\n}\n</code></pre>"},{"location":"mid-level/database-design/sharding/#directory-based-sharding","title":"Directory-based Sharding","text":"<pre><code>public class DirectoryBasedShardingStrategy : IShardingStrategy\n{\n    private readonly Dictionary&lt;string, int&gt; _shardDirectory;\n    private readonly Dictionary&lt;int, string&gt; _shardConnections;\n\n    public DirectoryBasedShardingStrategy()\n    {\n        _shardDirectory = new Dictionary&lt;string, int&gt;();\n        _shardConnections = new Dictionary&lt;int, string&gt;\n        {\n            { 0, \"shard-0\" },\n            { 1, \"shard-1\" },\n            { 2, \"shard-2\" },\n            { 3, \"shard-3\" }\n        };\n\n        InitializeShardDirectory();\n    }\n\n    private void InitializeShardDirectory()\n    {\n        // User ID ranges to shard mapping\n        for (int i = 1; i &lt;= 1000000; i++)\n        {\n            _shardDirectory[i.ToString()] = i % 4;\n        }\n\n        // Username-based sharding\n        _shardDirectory[\"admin\"] = 0;\n        _shardDirectory[\"system\"] = 0;\n        _shardDirectory[\"guest\"] = 1;\n        _shardDirectory[\"test\"] = 2;\n    }\n\n    public int GetShardId(object shardKey)\n    {\n        var key = shardKey.ToString();\n\n        if (_shardDirectory.TryGetValue(key, out int shardId))\n        {\n            return shardId;\n        }\n\n        // Fallback to hash-based for unknown keys\n        return Math.Abs(key.GetHashCode()) % _shardConnections.Count;\n    }\n\n    public string GetConnectionString(int shardId)\n    {\n        return _shardConnections.TryGetValue(shardId, out string connectionString) \n            ? connectionString \n            : _shardConnections[0];\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/sharding/#2-vertical-sharding-column-based","title":"2. Vertical Sharding (Column-based)","text":"<p>Farkl\u0131 s\u00fctunlar\u0131 farkl\u0131 shard'lara da\u011f\u0131tma stratejisi.</p> <pre><code>public class VerticalShardingStrategy : IShardingStrategy\n{\n    private readonly Dictionary&lt;string, int&gt; _columnShardMapping;\n    private readonly Dictionary&lt;int, string&gt; _shardConnections;\n\n    public VerticalShardingStrategy()\n    {\n        _columnShardMapping = new Dictionary&lt;string, int&gt;\n        {\n            // Frequently accessed columns in shard 0\n            { \"Id\", 0 },\n            { \"Username\", 0 },\n            { \"Email\", 0 },\n            { \"IsActive\", 0 },\n\n            // Less frequently accessed columns in shard 1\n            { \"FirstName\", 1 },\n            { \"LastName\", 1 },\n            { \"DateOfBirth\", 1 },\n            { \"PhoneNumber\", 1 },\n\n            // Rarely accessed columns in shard 2\n            { \"Address\", 2 },\n            { \"Bio\", 2 },\n            { \"ProfilePictureUrl\", 2 },\n            { \"Preferences\", 2 }\n        };\n\n        _shardConnections = new Dictionary&lt;int, string&gt;\n        {\n            { 0, \"shard-core\" },\n            { 1, \"shard-profile\" },\n            { 2, \"shard-extended\" }\n        };\n    }\n\n    public int GetShardId(string columnName)\n    {\n        return _columnShardMapping.TryGetValue(columnName, out int shardId) ? shardId : 0;\n    }\n\n    public string GetConnectionString(int shardId)\n    {\n        return _shardConnections.TryGetValue(shardId, out string connectionString) \n            ? connectionString \n            : _shardConnections[0];\n    }\n}\n\npublic class VerticallyShardedUserRepository\n{\n    private readonly VerticalShardingStrategy _shardingStrategy;\n    private readonly Dictionary&lt;int, IDbConnection&gt; _shardConnections;\n\n    public VerticallyShardedUserRepository()\n    {\n        _shardingStrategy = new VerticalShardingStrategy();\n        _shardConnections = InitializeShardConnections();\n    }\n\n    public async Task&lt;User&gt; GetUserByIdAsync(int userId)\n    {\n        var user = new User();\n\n        // Get core data from shard 0\n        var coreConnection = _shardConnections[0];\n        var coreSql = \"SELECT Id, Username, Email, IsActive FROM Users WHERE Id = @UserId\";\n        var coreData = await coreConnection.QueryFirstOrDefaultAsync(coreSql, new { UserId = userId });\n\n        if (coreData != null)\n        {\n            user.Id = coreData.Id;\n            user.Username = coreData.Username;\n            user.Email = coreData.Email;\n            user.IsActive = coreData.IsActive;\n\n            // Get profile data from shard 1\n            var profileConnection = _shardConnections[1];\n            var profileSql = \"SELECT FirstName, LastName, DateOfBirth, PhoneNumber FROM UserProfiles WHERE UserId = @UserId\";\n            var profileData = await profileConnection.QueryFirstOrDefaultAsync(profileSql, new { UserId = userId });\n\n            if (profileData != null)\n            {\n                user.FirstName = profileData.FirstName;\n                user.LastName = profileData.LastName;\n                user.DateOfBirth = profileData.DateOfBirth;\n                user.PhoneNumber = profileData.PhoneNumber;\n            }\n\n            // Get extended data from shard 2\n            var extendedConnection = _shardConnections[2];\n            var extendedSql = \"SELECT Address, Bio, ProfilePictureUrl, Preferences FROM UserExtended WHERE UserId = @UserId\";\n            var extendedData = await extendedConnection.QueryFirstOrDefaultAsync(extendedSql, new { UserId = userId });\n\n            if (extendedData != null)\n            {\n                user.Address = extendedData.Address;\n                user.Bio = extendedData.Bio;\n                user.ProfilePictureUrl = extendedData.ProfilePictureUrl;\n                user.Preferences = extendedData.Preferences;\n            }\n        }\n\n        return user;\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/sharding/#sharding-implementation","title":"Sharding Implementation","text":""},{"location":"mid-level/database-design/sharding/#1-shard-management-service","title":"1. Shard Management Service","text":"<pre><code>public class ShardManagementService\n{\n    private readonly IShardingStrategy _shardingStrategy;\n    private readonly Dictionary&lt;int, ShardInfo&gt; _shards;\n    private readonly ILogger&lt;ShardManagementService&gt; _logger;\n\n    public ShardManagementService(IShardingStrategy shardingStrategy, ILogger&lt;ShardManagementService&gt; logger)\n    {\n        _shardingStrategy = shardingStrategy;\n        _logger = logger;\n        _shards = new Dictionary&lt;int, ShardInfo&gt;();\n    }\n\n    public async Task&lt;ShardInfo&gt; GetShardAsync(object shardKey)\n    {\n        var shardId = _shardingStrategy.GetShardId(shardKey);\n\n        if (!_shards.ContainsKey(shardId))\n        {\n            await InitializeShardAsync(shardId);\n        }\n\n        return _shards[shardId];\n    }\n\n    public async Task&lt;bool&gt; IsShardHealthyAsync(int shardId)\n    {\n        try\n        {\n            var shard = _shards[shardId];\n            using var connection = new SqlConnection(shard.ConnectionString);\n            await connection.OpenAsync();\n\n            // Simple health check query\n            var result = await connection.QueryFirstOrDefaultAsync&lt;int&gt;(\"SELECT 1\");\n            return result == 1;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Health check failed for shard {ShardId}\", shardId);\n            return false;\n        }\n    }\n\n    public async Task RebalanceShardAsync(int shardId, object newShardKey)\n    {\n        var shard = _shards[shardId];\n        var newShardId = _shardingStrategy.GetShardId(newShardKey);\n\n        if (shardId != newShardId)\n        {\n            await MigrateDataAsync(shardId, newShardId);\n            await UpdateShardMappingAsync(shardId, newShardId);\n        }\n    }\n\n    private async Task MigrateDataAsync(int fromShardId, int toShardId)\n    {\n        var fromShard = _shards[fromShardId];\n        var toShard = _shards[toShardId];\n\n        _logger.LogInformation(\"Migrating data from shard {FromShardId} to {ToShardId}\", fromShardId, toShardId);\n\n        // Implementation of data migration logic\n        // This would involve copying data between shards\n        // and updating any cross-shard references\n    }\n}\n\npublic class ShardInfo\n{\n    public int ShardId { get; set; }\n    public string ConnectionString { get; set; }\n    public ShardStatus Status { get; set; }\n    public DateTime LastHealthCheck { get; set; }\n    public long RecordCount { get; set; }\n    public long SizeInBytes { get; set; }\n}\n\npublic enum ShardStatus\n{\n    Healthy,\n    Degraded,\n    Unhealthy,\n    Maintenance\n}\n</code></pre>"},{"location":"mid-level/database-design/sharding/#2-cross-shard-query-service","title":"2. Cross-Shard Query Service","text":"<pre><code>public class CrossShardQueryService\n{\n    private readonly IShardingStrategy _shardingStrategy;\n    private readonly Dictionary&lt;int, IDbConnection&gt; _shardConnections;\n    private readonly ILogger&lt;CrossShardQueryService&gt; _logger;\n\n    public CrossShardQueryService(IShardingStrategy shardingStrategy, ILogger&lt;CrossShardQueryService&gt; logger)\n    {\n        _shardingStrategy = shardingStrategy;\n        _logger = logger;\n        _shardConnections = InitializeShardConnections();\n    }\n\n    public async Task&lt;List&lt;User&gt;&gt; SearchUsersAcrossShardsAsync(string searchTerm)\n    {\n        var results = new List&lt;User&gt;();\n        var tasks = new List&lt;Task&lt;List&lt;User&gt;&gt;&gt;();\n\n        // Query all shards in parallel\n        foreach (var shardConnection in _shardConnections.Values)\n        {\n            var task = SearchUsersInShardAsync(shardConnection, searchTerm);\n            tasks.Add(task);\n        }\n\n        // Wait for all queries to complete\n        var shardResults = await Task.WhenAll(tasks);\n\n        // Combine results from all shards\n        foreach (var shardResult in shardResults)\n        {\n            results.AddRange(shardResult);\n        }\n\n        // Sort and limit results\n        return results.OrderBy(u =&gt; u.Username).Take(100).ToList();\n    }\n\n    public async Task&lt;Dictionary&lt;string, int&gt;&gt; GetUserCountByShardAsync()\n    {\n        var results = new Dictionary&lt;string, int&gt;();\n        var tasks = new List&lt;Task&lt;KeyValuePair&lt;string, int&gt;&gt;&gt;();\n\n        foreach (var kvp in _shardConnections)\n        {\n            var shardId = kvp.Key;\n            var connection = kvp.Value;\n\n            var task = GetUserCountForShardAsync(shardId, connection);\n            tasks.Add(task);\n        }\n\n        var shardCounts = await Task.WhenAll(tasks);\n\n        foreach (var shardCount in shardCounts)\n        {\n            results[shardCount.Key] = shardCount.Value;\n        }\n\n        return results;\n    }\n\n    private async Task&lt;List&lt;User&gt;&gt; SearchUsersInShardAsync(IDbConnection connection, string searchTerm)\n    {\n        var sql = @\"\n            SELECT Id, Username, Email, FirstName, LastName, IsActive\n            FROM Users \n            WHERE Username LIKE @SearchTerm \n               OR Email LIKE @SearchTerm \n               OR FirstName LIKE @SearchTerm \n               OR LastName LIKE @SearchTerm\n        \";\n\n        var searchPattern = $\"%{searchTerm}%\";\n        var users = await connection.QueryAsync&lt;User&gt;(sql, new { SearchTerm = searchPattern });\n\n        return users.ToList();\n    }\n\n    private async Task&lt;KeyValuePair&lt;string, int&gt;&gt; GetUserCountForShardAsync(int shardId, IDbConnection connection)\n    {\n        var sql = \"SELECT COUNT(*) FROM Users\";\n        var count = await connection.QueryFirstOrDefaultAsync&lt;int&gt;(sql);\n\n        return new KeyValuePair&lt;string, int&gt;($\"shard-{shardId}\", count);\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/sharding/#sharding-challenges-ve-solutions","title":"Sharding Challenges ve Solutions","text":""},{"location":"mid-level/database-design/sharding/#1-shard-key-selection","title":"1. Shard Key Selection","text":"<pre><code>public class ShardKeyAnalyzer\n{\n    public ShardKeyRecommendation AnalyzeShardKey(string tableName, List&lt;string&gt; candidateColumns)\n    {\n        var recommendations = new List&lt;ShardKeyRecommendation&gt;();\n\n        foreach (var column in candidateColumns)\n        {\n            var recommendation = AnalyzeColumnForSharding(tableName, column);\n            recommendations.Add(recommendation);\n        }\n\n        return recommendations.OrderByDescending(r =&gt; r.Score).First();\n    }\n\n    private ShardKeyRecommendation AnalyzeColumnForSharding(string tableName, string columnName)\n    {\n        var recommendation = new ShardKeyRecommendation\n        {\n            ColumnName = columnName,\n            Score = 0\n        };\n\n        // Check cardinality (higher is better)\n        var cardinality = GetColumnCardinality(tableName, columnName);\n        recommendation.Score += cardinality * 0.3;\n\n        // Check distribution (more uniform is better)\n        var distribution = GetColumnDistribution(tableName, columnName);\n        recommendation.Score += distribution * 0.3;\n\n        // Check query patterns (more queries is better)\n        var queryFrequency = GetQueryFrequency(tableName, columnName);\n        recommendation.Score += queryFrequency * 0.2;\n\n        // Check update frequency (lower is better)\n        var updateFrequency = GetUpdateFrequency(tableName, columnName);\n        recommendation.Score += (1 - updateFrequency) * 0.2;\n\n        return recommendation;\n    }\n}\n\npublic class ShardKeyRecommendation\n{\n    public string ColumnName { get; set; }\n    public double Score { get; set; }\n    public string Reasoning { get; set; }\n}\n</code></pre>"},{"location":"mid-level/database-design/sharding/#2-shard-rebalancing","title":"2. Shard Rebalancing","text":"<pre><code>public class ShardRebalancingService\n{\n    private readonly IShardingStrategy _shardingStrategy;\n    private readonly ILogger&lt;ShardRebalancingService&gt; _logger;\n\n    public async Task RebalanceShardsAsync()\n    {\n        var shardStats = await GetShardStatisticsAsync();\n        var targetShardSize = CalculateTargetShardSize(shardStats);\n\n        var rebalancingPlan = CreateRebalancingPlan(shardStats, targetShardSize);\n\n        foreach (var operation in rebalancingPlan)\n        {\n            await ExecuteRebalancingOperationAsync(operation);\n        }\n    }\n\n    private async Task ExecuteRebalancingOperationAsync(RebalancingOperation operation)\n    {\n        try\n        {\n            _logger.LogInformation(\"Executing rebalancing operation: {Operation}\", operation.Description);\n\n            switch (operation.Type)\n            {\n                case RebalancingOperationType.MoveData:\n                    await MoveDataBetweenShardsAsync(operation.FromShardId, operation.ToShardId, operation.RecordCount);\n                    break;\n\n                case RebalancingOperationType.SplitShard:\n                    await SplitShardAsync(operation.FromShardId, operation.ToShardId);\n                    break;\n\n                case RebalancingOperationType.MergeShards:\n                    await MergeShardsAsync(operation.FromShardId, operation.ToShardId);\n                    break;\n            }\n\n            _logger.LogInformation(\"Rebalancing operation completed: {Operation}\", operation.Description);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Rebalancing operation failed: {Operation}\", operation.Description);\n            throw;\n        }\n    }\n}\n\npublic class RebalancingOperation\n{\n    public RebalancingOperationType Type { get; set; }\n    public int FromShardId { get; set; }\n    public int ToShardId { get; set; }\n    public long RecordCount { get; set; }\n    public string Description { get; set; }\n}\n\npublic enum RebalancingOperationType\n{\n    MoveData,\n    SplitShard,\n    MergeShards\n}\n</code></pre>"},{"location":"mid-level/database-design/sharding/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/database-design/sharding/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Database sharding nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: B\u00fcy\u00fck veritabanlar\u0131n\u0131 k\u00fc\u00e7\u00fck par\u00e7alara b\u00f6lme tekni\u011fi. Performance, scalability ve availability art\u0131\u015f\u0131 i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Horizontal vs Vertical sharding aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Horizontal sat\u0131rlar\u0131 b\u00f6ler, vertical s\u00fctunlar\u0131 b\u00f6ler. Horizontal daha yayg\u0131n, vertical belirli use case'ler i\u00e7in.</p> </li> <li> <p>Hash-based vs Range-based sharding aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Hash-based uniform distribution sa\u011flar, range-based ordered access sa\u011flar. Query patterns'e g\u00f6re se\u00e7im yap\u0131l\u0131r.</p> </li> <li> <p>Shard key se\u00e7iminde hangi fakt\u00f6rler \u00f6nemlidir?</p> </li> <li> <p>Cevap: Cardinality, distribution uniformity, query patterns, update frequency, data locality.</p> </li> <li> <p>Cross-shard query'ler nas\u0131l optimize edilir?</p> </li> <li>Cevap: Parallel execution, result aggregation, caching, query routing optimization.</li> </ol>"},{"location":"mid-level/database-design/sharding/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Sharding'de data consistency nas\u0131l sa\u011flan\u0131r?</li> <li> <p>Cevap: Distributed transactions, eventual consistency, conflict resolution, data versioning.</p> </li> <li> <p>Shard rebalancing nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Data migration, shard splitting/merging, load balancing, minimal downtime.</p> </li> <li> <p>Sharding'de failure handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Health monitoring, automatic failover, data replication, backup strategies.</p> </li> <li> <p>Sharding vs partitioning aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Sharding farkl\u0131 database'lerde, partitioning ayn\u0131 database'de. Sharding daha complex ama daha scalable.</p> </li> <li> <p>Sharding implementation'da hangi challenges vard\u0131r?</p> </li> <li>Cevap: Shard key selection, cross-shard queries, data distribution, rebalancing, monitoring.</li> </ol>"},{"location":"mid-level/database-design/sharding/#best-practices","title":"Best Practices","text":"<ol> <li>Shard Key Selection</li> <li>High cardinality se\u00e7in</li> <li>Uniform distribution sa\u011flay\u0131n</li> <li>Query patterns analiz edin</li> <li> <p>Update frequency d\u00fc\u015f\u00fck olsun</p> </li> <li> <p>Shard Management</p> </li> <li>Health monitoring yap\u0131n</li> <li>Automatic failover implement edin</li> <li>Rebalancing automate edin</li> <li> <p>Performance metrics izleyin</p> </li> <li> <p>Cross-Shard Operations</p> </li> <li>Parallel execution kullan\u0131n</li> <li>Result aggregation optimize edin</li> <li>Caching implement edin</li> <li> <p>Query routing optimize edin</p> </li> <li> <p>Monitoring ve Maintenance</p> </li> <li>Shard performance izleyin</li> <li>Data distribution balance edin</li> <li>Backup strategies implement edin</li> <li>Disaster recovery planlay\u0131n</li> </ol>"},{"location":"mid-level/database-design/sharding/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Database Sharding Strategies</li> <li>Sharding Best Practices</li> <li>Horizontal vs Vertical Sharding</li> <li>Sharding Implementation</li> <li>Database Scalability Patterns</li> </ul>"},{"location":"mid-level/database-design/validation-sanitization/","title":"Data Validation &amp; Sanitization","text":""},{"location":"mid-level/database-design/validation-sanitization/#giris","title":"Giri\u015f","text":"<p>Data Validation &amp; Sanitization, veritaban\u0131na gelen verilerin g\u00fcvenli, do\u011fru ve tutarl\u0131 olmas\u0131n\u0131 sa\u011flayan kritik s\u00fcre\u00e7lerdir. Mid-level geli\u015ftiriciler i\u00e7in bu konular\u0131 anlamak, g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 \u00f6nlemek ve veri kalitesini korumak i\u00e7in kritiktir.</p>"},{"location":"mid-level/database-design/validation-sanitization/#data-validation-stratejileri","title":"Data Validation Stratejileri","text":""},{"location":"mid-level/database-design/validation-sanitization/#1-input-validation","title":"1. Input Validation","text":"<p>Gelen verilerin format, tip ve business rule'lara uygunlu\u011funu kontrol etme.</p> <pre><code>public interface IValidator&lt;T&gt;\n{\n    ValidationResult Validate(T entity);\n}\n\npublic class UserValidator : IValidator&lt;User&gt;\n{\n    public ValidationResult Validate(User user)\n    {\n        var result = new ValidationResult();\n\n        // Required field validation\n        if (string.IsNullOrWhiteSpace(user.Username))\n        {\n            result.AddError(\"Username\", \"Username is required\");\n        }\n\n        if (string.IsNullOrWhiteSpace(user.Email))\n        {\n            result.AddError(\"Email\", \"Email is required\");\n        }\n\n        // Format validation\n        if (!string.IsNullOrEmpty(user.Email) &amp;&amp; !IsValidEmail(user.Email))\n        {\n            result.AddError(\"Email\", \"Invalid email format\");\n        }\n\n        if (!string.IsNullOrEmpty(user.Username) &amp;&amp; user.Username.Length &lt; 3)\n        {\n            result.AddError(\"Username\", \"Username must be at least 3 characters long\");\n        }\n\n        if (!string.IsNullOrEmpty(user.Username) &amp;&amp; user.Username.Length &gt; 50)\n        {\n            result.AddError(\"Username\", \"Username cannot exceed 50 characters\");\n        }\n\n        // Business rule validation\n        if (user.DateOfBirth.HasValue &amp;&amp; user.DateOfBirth.Value &gt; DateTime.Now)\n        {\n            result.AddError(\"DateOfBirth\", \"Date of birth cannot be in the future\");\n        }\n\n        if (user.DateOfBirth.HasValue &amp;&amp; user.DateOfBirth.Value &lt; DateTime.Now.AddYears(-120))\n        {\n            result.AddError(\"DateOfBirth\", \"Date of birth seems invalid\");\n        }\n\n        return result;\n    }\n\n    private bool IsValidEmail(string email)\n    {\n        try\n        {\n            var addr = new System.Net.Mail.MailAddress(email);\n            return addr.Address == email;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n\npublic class ValidationResult\n{\n    private readonly List&lt;ValidationError&gt; _errors = new();\n\n    public bool IsValid =&gt; !_errors.Any();\n    public IReadOnlyList&lt;ValidationError&gt; Errors =&gt; _errors.AsReadOnly();\n\n    public void AddError(string field, string message)\n    {\n        _errors.Add(new ValidationError(field, message));\n    }\n\n    public void AddErrors(IEnumerable&lt;ValidationError&gt; errors)\n    {\n        _errors.AddRange(errors);\n    }\n}\n\npublic class ValidationError\n{\n    public string Field { get; }\n    public string Message { get; }\n\n    public ValidationError(string field, string message)\n    {\n        Field = field;\n        Message = message;\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/validation-sanitization/#2-fluent-validation","title":"2. Fluent Validation","text":"<p>Daha okunabilir ve maintainable validation kurallar\u0131.</p> <pre><code>public class UserFluentValidator : AbstractValidator&lt;User&gt;\n{\n    public UserFluentValidator()\n    {\n        RuleFor(x =&gt; x.Username)\n            .NotEmpty().WithMessage(\"Username is required\")\n            .Length(3, 50).WithMessage(\"Username must be between 3 and 50 characters\")\n            .Matches(@\"^[a-zA-Z0-9_]+$\").WithMessage(\"Username can only contain letters, numbers and underscores\")\n            .MustAsync(BeUniqueUsername).WithMessage(\"Username already exists\");\n\n        RuleFor(x =&gt; x.Email)\n            .NotEmpty().WithMessage(\"Email is required\")\n            .EmailAddress().WithMessage(\"Invalid email format\")\n            .MustAsync(BeUniqueEmail).WithMessage(\"Email already exists\");\n\n        RuleFor(x =&gt; x.FirstName)\n            .NotEmpty().WithMessage(\"First name is required\")\n            .Length(1, 50).WithMessage(\"First name cannot exceed 50 characters\")\n            .Matches(@\"^[a-zA-Z\\s]+$\").WithMessage(\"First name can only contain letters and spaces\");\n\n        RuleFor(x =&gt; x.LastName)\n            .NotEmpty().WithMessage(\"Last name is required\")\n            .Length(1, 50).WithMessage(\"Last name cannot exceed 50 characters\")\n            .Matches(@\"^[a-zA-Z\\s]+$\").WithMessage(\"Last name can only contain letters and spaces\");\n\n        RuleFor(x =&gt; x.DateOfBirth)\n            .Must(BeValidDate).WithMessage(\"Invalid date of birth\")\n            .Must(BeNotInFuture).WithMessage(\"Date of birth cannot be in the future\")\n            .Must(BeReasonableAge).WithMessage(\"Date of birth seems invalid\");\n\n        RuleFor(x =&gt; x.PhoneNumber)\n            .Matches(@\"^\\+?[1-9]\\d{1,14}$\").WithMessage(\"Invalid phone number format\")\n            .When(x =&gt; !string.IsNullOrEmpty(x.PhoneNumber));\n\n        RuleFor(x =&gt; x.Password)\n            .NotEmpty().WithMessage(\"Password is required\")\n            .MinimumLength(8).WithMessage(\"Password must be at least 8 characters long\")\n            .Matches(@\"[A-Z]\").WithMessage(\"Password must contain at least one uppercase letter\")\n            .Matches(@\"[a-z]\").WithMessage(\"Password must contain at least one lowercase letter\")\n            .Matches(@\"[0-9]\").WithMessage(\"Password must contain at least one number\")\n            .Matches(@\"[^a-zA-Z0-9]\").WithMessage(\"Password must contain at least one special character\");\n\n        RuleFor(x =&gt; x.ConfirmPassword)\n            .Equal(x =&gt; x.Password).WithMessage(\"Passwords do not match\");\n    }\n\n    private async Task&lt;bool&gt; BeUniqueUsername(string username, CancellationToken cancellationToken)\n    {\n        // Implementation to check if username is unique in database\n        return await Task.FromResult(true); // Placeholder\n    }\n\n    private async Task&lt;bool&gt; BeUniqueEmail(string email, CancellationToken cancellationToken)\n    {\n        // Implementation to check if email is unique in database\n        return await Task.FromResult(true); // Placeholder\n    }\n\n    private bool BeValidDate(DateTime? date)\n    {\n        return !date.HasValue || date.Value != DateTime.MinValue;\n    }\n\n    private bool BeNotInFuture(DateTime? date)\n    {\n        return !date.HasValue || date.Value &lt;= DateTime.Now;\n    }\n\n    private bool BeReasonableAge(DateTime? date)\n    {\n        if (!date.HasValue) return true;\n        var age = DateTime.Now.Year - date.Value.Year;\n        return age &gt;= 0 &amp;&amp; age &lt;= 120;\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/validation-sanitization/#3-custom-validation-attributes","title":"3. Custom Validation Attributes","text":"<p>ASP.NET Core i\u00e7in custom validation attribute'lar\u0131.</p> <pre><code>[AttributeUsage(AttributeTargets.Property)]\npublic class StrongPasswordAttribute : ValidationAttribute\n{\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        if (value == null)\n        {\n            return ValidationResult.Success;\n        }\n\n        var password = value.ToString();\n\n        if (string.IsNullOrEmpty(password))\n        {\n            return ValidationResult.Success;\n        }\n\n        var errors = new List&lt;string&gt;();\n\n        if (password.Length &lt; 8)\n        {\n            errors.Add(\"Password must be at least 8 characters long\");\n        }\n\n        if (!password.Any(char.IsUpper))\n        {\n            errors.Add(\"Password must contain at least one uppercase letter\");\n        }\n\n        if (!password.Any(char.IsLower))\n        {\n            errors.Add(\"Password must contain at least one lowercase letter\");\n        }\n\n        if (!password.Any(char.IsDigit))\n        {\n            errors.Add(\"Password must contain at least one number\");\n        }\n\n        if (!password.Any(c =&gt; !char.IsLetterOrDigit(c)))\n        {\n            errors.Add(\"Password must contain at least one special character\");\n        }\n\n        if (errors.Any())\n        {\n            return new ValidationResult(string.Join(\"; \", errors));\n        }\n\n        return ValidationResult.Success;\n    }\n}\n\n[AttributeUsage(AttributeTargets.Property)]\npublic class NoSpecialCharactersAttribute : ValidationAttribute\n{\n    private readonly string _pattern;\n\n    public NoSpecialCharactersAttribute(string pattern = @\"^[a-zA-Z0-9\\s]+$\")\n    {\n        _pattern = pattern;\n    }\n\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        if (value == null)\n        {\n            return ValidationResult.Success;\n        }\n\n        var stringValue = value.ToString();\n\n        if (string.IsNullOrEmpty(stringValue))\n        {\n            return ValidationResult.Success;\n        }\n\n        if (!Regex.IsMatch(stringValue, _pattern))\n        {\n            return new ValidationResult($\"Field contains invalid characters. Only letters, numbers and spaces are allowed.\");\n        }\n\n        return ValidationResult.Success;\n    }\n}\n\n[AttributeUsage(AttributeTargets.Property)]\npublic class FutureDateAttribute : ValidationAttribute\n{\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        if (value == null)\n        {\n            return ValidationResult.Success;\n        }\n\n        if (value is DateTime date)\n        {\n            if (date &lt;= DateTime.Now)\n            {\n                return new ValidationResult(\"Date must be in the future\");\n            }\n        }\n\n        return ValidationResult.Success;\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/validation-sanitization/#data-sanitization-stratejileri","title":"Data Sanitization Stratejileri","text":""},{"location":"mid-level/database-design/validation-sanitization/#1-html-sanitization","title":"1. HTML Sanitization","text":"<p>HTML i\u00e7eri\u011fini g\u00fcvenli hale getirme.</p> <pre><code>public class HtmlSanitizer\n{\n    private readonly HtmlSanitizer _sanitizer;\n\n    public HtmlSanitizer()\n    {\n        _sanitizer = new HtmlSanitizer();\n\n        // Allow safe HTML tags\n        _sanitizer.AllowedTags.Add(\"div\");\n        _sanitizer.AllowedTags.Add(\"span\");\n        _sanitizer.AllowedTags.Add(\"p\");\n        _sanitizer.AllowedTags.Add(\"br\");\n        _sanitizer.AllowedTags.Add(\"strong\");\n        _sanitizer.AllowedTags.Add(\"em\");\n        _sanitizer.AllowedTags.Add(\"ul\");\n        _sanitizer.AllowedTags.Add(\"ol\");\n        _sanitizer.AllowedTags.Add(\"li\");\n\n        // Allow safe CSS properties\n        _sanitizer.AllowedCssProperties.Add(\"color\");\n        _sanitizer.AllowedCssProperties.Add(\"background-color\");\n        _sanitizer.AllowedCssProperties.Add(\"font-size\");\n        _sanitizer.AllowedCssProperties.Add(\"text-align\");\n\n        // Allow safe attributes\n        _sanitizer.AllowedAttributes.Add(\"class\");\n        _sanitizer.AllowedAttributes.Add(\"id\");\n        _sanitizer.AllowedAttributes.Add(\"style\");\n    }\n\n    public string Sanitize(string html)\n    {\n        if (string.IsNullOrEmpty(html))\n        {\n            return html;\n        }\n\n        return _sanitizer.Sanitize(html);\n    }\n\n    public string SanitizeWithCustomRules(string html, IEnumerable&lt;string&gt; allowedTags, IEnumerable&lt;string&gt; allowedAttributes)\n    {\n        var customSanitizer = new HtmlSanitizer();\n\n        foreach (var tag in allowedTags)\n        {\n            customSanitizer.AllowedTags.Add(tag);\n        }\n\n        foreach (var attribute in allowedAttributes)\n        {\n            customSanitizer.AllowedAttributes.Add(attribute);\n        }\n\n        return customSanitizer.Sanitize(html);\n    }\n}\n\npublic class ContentSanitizationService\n{\n    private readonly HtmlSanitizer _htmlSanitizer;\n    private readonly ILogger&lt;ContentSanitizationService&gt; _logger;\n\n    public ContentSanitizationService(ILogger&lt;ContentSanitizationService&gt; logger)\n    {\n        _htmlSanitizer = new HtmlSanitizer();\n        _logger = logger;\n    }\n\n    public async Task&lt;string&gt; SanitizeUserContentAsync(string content, ContentType contentType)\n    {\n        try\n        {\n            switch (contentType)\n            {\n                case ContentType.Html:\n                    return _htmlSanitizer.Sanitize(content);\n\n                case ContentType.PlainText:\n                    return SanitizePlainText(content);\n\n                case ContentType.Markdown:\n                    return await SanitizeMarkdownAsync(content);\n\n                default:\n                    return content;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sanitizing content of type {ContentType}\", contentType);\n            return string.Empty; // Return empty string on error\n        }\n    }\n\n    private string SanitizePlainText(string text)\n    {\n        if (string.IsNullOrEmpty(text))\n        {\n            return text;\n        }\n\n        // Remove control characters except newlines and tabs\n        var sanitized = Regex.Replace(text, @\"[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]\", \"\");\n\n        // Limit length\n        if (sanitized.Length &gt; 10000)\n        {\n            sanitized = sanitized.Substring(0, 10000);\n        }\n\n        return sanitized;\n    }\n\n    private async Task&lt;string&gt; SanitizeMarkdownAsync(string markdown)\n    {\n        if (string.IsNullOrEmpty(markdown))\n        {\n            return markdown;\n        }\n\n        // Convert markdown to HTML first\n        var html = await ConvertMarkdownToHtmlAsync(markdown);\n\n        // Then sanitize the HTML\n        return _htmlSanitizer.Sanitize(html);\n    }\n\n    private async Task&lt;string&gt; ConvertMarkdownToHtmlAsync(string markdown)\n    {\n        // Implementation using a markdown library like Markdig\n        return await Task.FromResult(markdown); // Placeholder\n    }\n}\n\npublic enum ContentType\n{\n    PlainText,\n    Html,\n    Markdown,\n    Json,\n    Xml\n}\n</code></pre>"},{"location":"mid-level/database-design/validation-sanitization/#2-sql-injection-prevention","title":"2. SQL Injection Prevention","text":"<p>SQL injection sald\u0131r\u0131lar\u0131n\u0131 \u00f6nleme.</p> <pre><code>public class SafeSqlBuilder\n{\n    private readonly Dictionary&lt;string, object&gt; _parameters = new();\n    private int _parameterCounter = 0;\n\n    public SafeSqlBuilder AddParameter(object value)\n    {\n        var parameterName = $\"@p{_parameterCounter++}\";\n        _parameters[parameterName] = value;\n        return this;\n    }\n\n    public SafeSqlBuilder AddParameter(string name, object value)\n    {\n        _parameters[name] = value;\n        return this;\n    }\n\n    public (string sql, Dictionary&lt;string, object&gt; parameters) Build(string sqlTemplate)\n    {\n        // Replace placeholders with parameter names\n        var sql = sqlTemplate;\n        var parameters = new Dictionary&lt;string, object&gt;(_parameters);\n\n        return (sql, parameters);\n    }\n}\n\npublic class SecureUserRepository\n{\n    private readonly IDbConnection _connection;\n    private readonly ILogger&lt;SecureUserRepository&gt; _logger;\n\n    public SecureUserRepository(IDbConnection connection, ILogger&lt;SecureUserRepository&gt; logger)\n    {\n        _connection = connection;\n        _logger = logger;\n    }\n\n    public async Task&lt;User&gt; GetUserByUsernameAsync(string username)\n    {\n        try\n        {\n            // Use parameterized query to prevent SQL injection\n            var sql = \"SELECT * FROM Users WHERE Username = @Username\";\n            var parameters = new { Username = username };\n\n            return await _connection.QueryFirstOrDefaultAsync&lt;User&gt;(sql, parameters);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving user by username: {Username}\", username);\n            throw;\n        }\n    }\n\n    public async Task&lt;List&lt;User&gt;&gt; SearchUsersAsync(string searchTerm, int page, int pageSize)\n    {\n        try\n        {\n            // Use parameterized query with LIKE for search\n            var sql = @\"\n                SELECT * FROM Users \n                WHERE Username LIKE @SearchTerm \n                   OR Email LIKE @SearchTerm \n                   OR FirstName LIKE @SearchTerm \n                   OR LastName LIKE @SearchTerm\n                ORDER BY Username\n                OFFSET @Offset ROWS\n                FETCH NEXT @PageSize ROWS ONLY\n            \";\n\n            var parameters = new\n            {\n                SearchTerm = $\"%{searchTerm}%\",\n                Offset = (page - 1) * pageSize,\n                PageSize = pageSize\n            };\n\n            return (await _connection.QueryAsync&lt;User&gt;(sql, parameters)).ToList();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error searching users with term: {SearchTerm}\", searchTerm);\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; UpdateUserAsync(User user)\n    {\n        try\n        {\n            // Use parameterized query for update\n            var sql = @\"\n                UPDATE Users \n                SET Username = @Username,\n                    Email = @Email,\n                    FirstName = @FirstName,\n                    LastName = @LastName,\n                    UpdatedAt = @UpdatedAt\n                WHERE Id = @Id\n            \";\n\n            var parameters = new\n            {\n                user.Id,\n                user.Username,\n                user.Email,\n                user.FirstName,\n                user.LastName,\n                UpdatedAt = DateTime.UtcNow\n            };\n\n            var rowsAffected = await _connection.ExecuteAsync(sql, parameters);\n            return rowsAffected &gt; 0;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating user: {UserId}\", user.Id);\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/validation-sanitization/#3-xss-prevention","title":"3. XSS Prevention","text":"<p>Cross-site scripting sald\u0131r\u0131lar\u0131n\u0131 \u00f6nleme.</p> <pre><code>public class XssPreventionService\n{\n    private readonly ILogger&lt;XssPreventionService&gt; _logger;\n\n    public XssPreventionService(ILogger&lt;XssPreventionService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public string EncodeHtml(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n        {\n            return input;\n        }\n\n        return HttpUtility.HtmlEncode(input);\n    }\n\n    public string EncodeJavaScript(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n        {\n            return input;\n        }\n\n        return HttpUtility.JavaScriptStringEncode(input);\n    }\n\n    public string EncodeUrl(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n        {\n            return input;\n        }\n\n        return HttpUtility.UrlEncode(input);\n    }\n\n    public string EncodeAttribute(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n        {\n            return input;\n        }\n\n        // Encode for HTML attributes\n        return input.Replace(\"\\\"\", \"&amp;quot;\")\n                   .Replace(\"'\", \"&amp;#39;\")\n                   .Replace(\"&lt;\", \"&amp;lt;\")\n                   .Replace(\"&gt;\", \"&amp;gt;\")\n                   .Replace(\"&amp;\", \"&amp;amp;\");\n    }\n\n    public bool ContainsXssPatterns(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n        {\n            return false;\n        }\n\n        var xssPatterns = new[]\n        {\n            @\"&lt;script[^&gt;]*&gt;.*?&lt;/script&gt;\",\n            @\"javascript:\",\n            @\"vbscript:\",\n            @\"onload\\s*=\",\n            @\"onerror\\s*=\",\n            @\"onclick\\s*=\",\n            @\"onmouseover\\s*=\",\n            @\"&lt;iframe[^&gt;]*&gt;\",\n            @\"&lt;object[^&gt;]*&gt;\",\n            @\"&lt;embed[^&gt;]*&gt;\"\n        };\n\n        return xssPatterns.Any(pattern =&gt; Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase));\n    }\n\n    public string SanitizeForDisplay(string input, bool allowHtml = false)\n    {\n        if (string.IsNullOrEmpty(input))\n        {\n            return input;\n        }\n\n        if (ContainsXssPatterns(input))\n        {\n            _logger.LogWarning(\"XSS pattern detected in input: {Input}\", input);\n\n            if (allowHtml)\n            {\n                // Use HTML sanitizer for allowed HTML\n                var sanitizer = new HtmlSanitizer();\n                return sanitizer.Sanitize(input);\n            }\n            else\n            {\n                // Encode everything\n                return EncodeHtml(input);\n            }\n        }\n\n        return allowHtml ? input : EncodeHtml(input);\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/validation-sanitization/#validation-pipeline","title":"Validation Pipeline","text":""},{"location":"mid-level/database-design/validation-sanitization/#1-validation-pipeline-implementation","title":"1. Validation Pipeline Implementation","text":"<pre><code>public class ValidationPipeline&lt;T&gt;\n{\n    private readonly List&lt;IValidator&lt;T&gt;&gt; _validators;\n    private readonly ILogger&lt;ValidationPipeline&lt;T&gt;&gt; _logger;\n\n    public ValidationPipeline(ILogger&lt;ValidationPipeline&lt;T&gt;&gt; logger)\n    {\n        _validators = new List&lt;IValidator&lt;T&gt;&gt;();\n        _logger = logger;\n    }\n\n    public ValidationPipeline&lt;T&gt; AddValidator(IValidator&lt;T&gt; validator)\n    {\n        _validators.Add(validator);\n        return this;\n    }\n\n    public async Task&lt;ValidationResult&gt; ValidateAsync(T entity)\n    {\n        var result = new ValidationResult();\n\n        foreach (var validator in _validators)\n        {\n            try\n            {\n                var validationResult = validator.Validate(entity);\n                result.AddErrors(validationResult.Errors);\n\n                if (!validationResult.IsValid)\n                {\n                    _logger.LogWarning(\"Validation failed for entity {EntityType}: {Errors}\", \n                        typeof(T).Name, string.Join(\", \", validationResult.Errors.Select(e =&gt; $\"{e.Field}: {e.Message}\")));\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error during validation with validator {ValidatorType}\", validator.GetType().Name);\n                result.AddError(\"Validation\", \"Validation error occurred\");\n            }\n        }\n\n        return result;\n    }\n}\n\npublic class UserValidationPipeline\n{\n    private readonly ValidationPipeline&lt;User&gt; _pipeline;\n\n    public UserValidationPipeline(ILogger&lt;UserValidationPipeline&gt; logger)\n    {\n        _pipeline = new ValidationPipeline&lt;User&gt;(logger)\n            .AddValidator(new UserValidator())\n            .AddValidator(new UserBusinessRuleValidator())\n            .AddValidator(new UserSecurityValidator());\n    }\n\n    public async Task&lt;ValidationResult&gt; ValidateUserAsync(User user)\n    {\n        return await _pipeline.ValidateAsync(user);\n    }\n}\n\npublic class UserBusinessRuleValidator : IValidator&lt;User&gt;\n{\n    public ValidationResult Validate(User user)\n    {\n        var result = new ValidationResult();\n\n        // Business rule: Users under 13 cannot register\n        if (user.DateOfBirth.HasValue &amp;&amp; user.DateOfBirth.Value &gt; DateTime.Now.AddYears(-13))\n        {\n            result.AddError(\"DateOfBirth\", \"Users must be at least 13 years old to register\");\n        }\n\n        // Business rule: Premium users must have valid payment method\n        if (user.IsPremium &amp;&amp; string.IsNullOrEmpty(user.PaymentMethodId))\n        {\n            result.AddError(\"PaymentMethodId\", \"Premium users must have a valid payment method\");\n        }\n\n        return result;\n    }\n}\n\npublic class UserSecurityValidator : IValidator&lt;User&gt;\n{\n    public ValidationResult Validate(User user)\n    {\n        var result = new ValidationResult();\n\n        // Security: Check for suspicious patterns\n        if (ContainsSuspiciousPatterns(user.Username))\n        {\n            result.AddError(\"Username\", \"Username contains suspicious patterns\");\n        }\n\n        if (ContainsSuspiciousPatterns(user.Email))\n        {\n            result.AddError(\"Email\", \"Email contains suspicious patterns\");\n        }\n\n        return result;\n    }\n\n    private bool ContainsSuspiciousPatterns(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n        {\n            return false;\n        }\n\n        var suspiciousPatterns = new[]\n        {\n            @\"admin\",\n            @\"root\",\n            @\"system\",\n            @\"test\",\n            @\"guest\",\n            @\"anonymous\"\n        };\n\n        return suspiciousPatterns.Any(pattern =&gt; \n            Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase));\n    }\n}\n</code></pre>"},{"location":"mid-level/database-design/validation-sanitization/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/database-design/validation-sanitization/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Data validation nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Gelen verilerin do\u011frulu\u011funu ve uygunlu\u011funu kontrol etme s\u00fcreci. Data integrity, security ve business rule compliance i\u00e7in kritik.</p> </li> <li> <p>Data sanitization nedir ve hangi t\u00fcrlerde yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Veriyi g\u00fcvenli hale getirme s\u00fcreci. HTML, SQL, JavaScript, URL encoding gibi t\u00fcrlerde yap\u0131l\u0131r.</p> </li> <li> <p>SQL injection nedir ve nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: SQL sorgular\u0131na zararl\u0131 kod enjekte etme sald\u0131r\u0131s\u0131. Parameterized queries, input validation, stored procedures ile \u00f6nlenir.</p> </li> <li> <p>XSS nedir ve nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Cross-site scripting sald\u0131r\u0131s\u0131. HTML encoding, input validation, content security policy ile \u00f6nlenir.</p> </li> <li> <p>Validation pipeline nedir ve nas\u0131l implement edilir?</p> </li> <li>Cevap: Birden fazla validation rule'\u0131 s\u0131rayla \u00e7al\u0131\u015ft\u0131rma sistemi. Chain of responsibility pattern ile implement edilir.</li> </ol>"},{"location":"mid-level/database-design/validation-sanitization/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Fluent validation'da custom rule'lar nas\u0131l yaz\u0131l\u0131r?</li> <li> <p>Cevap: Must() method'u ile custom validation logic, async validation i\u00e7in MustAsync(), cross-property validation i\u00e7in When().</p> </li> <li> <p>HTML sanitization'da hangi HTML tag'lar\u0131 g\u00fcvenli kabul edilir?</p> </li> <li> <p>Cevap: div, span, p, br, strong, em gibi formatting tag'lar\u0131. script, iframe, object gibi tag'lar g\u00fcvenli de\u011fil.</p> </li> <li> <p>Validation error'lar\u0131 nas\u0131l handle edilir?</p> </li> <li> <p>Cevap: ValidationResult object'i ile error collection, field-specific error mapping, user-friendly error messages.</p> </li> <li> <p>Business rule validation nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Custom validator'lar, business logic encapsulation, rule engine pattern, configuration-based rules.</p> </li> <li> <p>Performance i\u00e7in validation nas\u0131l optimize edilir?</p> </li> <li>Cevap: Early validation, caching, parallel validation, lazy validation, validation result caching.</li> </ol>"},{"location":"mid-level/database-design/validation-sanitization/#best-practices","title":"Best Practices","text":"<ol> <li>Input Validation</li> <li>Server-side validation yap\u0131n</li> <li>Client-side validation'\u0131 g\u00fcvenlik i\u00e7in kullanmay\u0131n</li> <li>Whitelist approach kullan\u0131n</li> <li> <p>Business rules'lar\u0131 validate edin</p> </li> <li> <p>Data Sanitization</p> </li> <li>Context-aware sanitization yap\u0131n</li> <li>HTML encoding kullan\u0131n</li> <li>SQL injection prevention implement edin</li> <li> <p>XSS prevention implement edin</p> </li> <li> <p>Validation Pipeline</p> </li> <li>Modular validation yap\u0131n</li> <li>Error handling implement edin</li> <li>Performance optimize edin</li> <li> <p>Logging ve monitoring ekleyin</p> </li> <li> <p>Security</p> </li> <li>Defense in depth approach kullan\u0131n</li> <li>Regular security testing yap\u0131n</li> <li>Input validation'\u0131 her seviyede yap\u0131n</li> <li>Security headers kullan\u0131n</li> </ol>"},{"location":"mid-level/database-design/validation-sanitization/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Data Validation in ASP.NET Core</li> <li>FluentValidation</li> <li>HTML Sanitization</li> <li>SQL Injection Prevention</li> <li>XSS Prevention</li> </ul>"},{"location":"mid-level/design-patterns/","title":"Design Patterns","text":""},{"location":"mid-level/design-patterns/#giris","title":"Giri\u015f","text":"<p>Design patterns, yaz\u0131l\u0131m geli\u015ftirmede kar\u015f\u0131la\u015f\u0131lan yayg\u0131n problemlere kan\u0131tlanm\u0131\u015f \u00e7\u00f6z\u00fcmler sunan, yeniden kullan\u0131labilir tasar\u0131m \u015fablonlar\u0131d\u0131r. Mid-level geli\u015ftiriciler i\u00e7in design patterns'i anlamak, clean code yazmak, maintainable software geli\u015ftirmek ve software architecture konular\u0131nda uzmanla\u015fmak i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, creational patterns, structural patterns, behavioral patterns, repository pattern ve unit of work pattern konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/design-patterns/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/design-patterns/#1-creational-patterns","title":"1. Creational Patterns","text":"<p>Object creation patterns, object instantiation strategies, ve creation logic encapsulation.</p> <p>\u00d6\u011frenilecekler: - Singleton pattern - Factory pattern - Builder pattern - Prototype pattern - Abstract Factory pattern</p>"},{"location":"mid-level/design-patterns/#2-structural-patterns","title":"2. Structural Patterns","text":"<p>Object composition patterns, class relationships, ve structure organization.</p> <p>\u00d6\u011frenilecekler: - Adapter pattern - Bridge pattern - Composite pattern - Decorator pattern - Facade pattern</p>"},{"location":"mid-level/design-patterns/#3-behavioral-patterns","title":"3. Behavioral Patterns","text":"<p>Object communication patterns, responsibility distribution, ve behavior organization.</p> <p>\u00d6\u011frenilecekler: - Observer pattern - Strategy pattern - Command pattern - State pattern - Template Method pattern</p>"},{"location":"mid-level/design-patterns/#4-repository-pattern","title":"4. Repository Pattern","text":"<p>Data access abstraction, data persistence logic, ve business logic separation.</p> <p>\u00d6\u011frenilecekler: - Repository interface design - Data access abstraction - Business logic separation - Testability improvement - Dependency inversion</p>"},{"location":"mid-level/design-patterns/#5-unit-of-work-pattern","title":"5. Unit of Work Pattern","text":"<p>Transaction management, data consistency, ve change tracking.</p> <p>\u00d6\u011frenilecekler: - Transaction coordination - Change tracking - Data consistency - Rollback support - Unit of work lifecycle</p>"},{"location":"mid-level/design-patterns/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/design-patterns/#1-code-quality","title":"1. Code Quality","text":"<ul> <li>Clean, maintainable code</li> <li>Consistent architecture</li> <li>Reduced complexity</li> <li>Better readability</li> </ul>"},{"location":"mid-level/design-patterns/#2-software-design","title":"2. Software Design","text":"<ul> <li>Proven solutions</li> <li>Best practices</li> <li>Architecture consistency</li> <li>Design principles</li> </ul>"},{"location":"mid-level/design-patterns/#3-maintainability","title":"3. Maintainability","text":"<ul> <li>Easier modifications</li> <li>Better extensibility</li> <li>Reduced technical debt</li> <li>Faster development</li> </ul>"},{"location":"mid-level/design-patterns/#4-team-collaboration","title":"4. Team Collaboration","text":"<ul> <li>Shared understanding</li> <li>Consistent approach</li> <li>Knowledge transfer</li> <li>Code review support</li> </ul>"},{"location":"mid-level/design-patterns/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/design-patterns/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Design pattern nedir?</li> <li> <p>Cevap: Reusable design solutions, proven approaches, common problems.</p> </li> <li> <p>Creational patterns nelerdir?</p> </li> <li> <p>Cevap: Object creation patterns, instantiation strategies, creation logic.</p> </li> <li> <p>Structural patterns nelerdir?</p> </li> <li> <p>Cevap: Object composition, class relationships, structure organization.</p> </li> <li> <p>Behavioral patterns nelerdir?</p> </li> <li> <p>Cevap: Object communication, responsibility distribution, behavior.</p> </li> <li> <p>Repository pattern nedir?</p> </li> <li>Cevap: Data access abstraction, business logic separation, testability.</li> </ol>"},{"location":"mid-level/design-patterns/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Singleton pattern nas\u0131l implement edilir?</li> <li> <p>Cevap: Private constructor, static instance, thread safety.</p> </li> <li> <p>Factory pattern ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Complex object creation, conditional instantiation, dependency management.</p> </li> <li> <p>Observer pattern nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Subject-observer relationship, event notification, loose coupling.</p> </li> <li> <p>Repository pattern nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Interface design, data access abstraction, dependency injection.</p> </li> <li> <p>Unit of Work pattern nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li>Cevap: Transaction coordination, change tracking, data consistency.</li> </ol>"},{"location":"mid-level/design-patterns/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/design-patterns/#1-pattern-selection","title":"1. Pattern Selection","text":"<ul> <li>Choose appropriate patterns</li> <li>Avoid over-engineering</li> <li>Consider maintainability</li> <li>Plan for evolution</li> <li>Document decisions</li> </ul>"},{"location":"mid-level/design-patterns/#2-implementation","title":"2. Implementation","text":"<ul> <li>Follow pattern structure</li> <li>Maintain consistency</li> <li>Handle edge cases</li> <li>Plan for testing</li> <li>Consider performance</li> </ul>"},{"location":"mid-level/design-patterns/#3-documentation","title":"3. Documentation","text":"<ul> <li>Document pattern usage</li> <li>Explain design decisions</li> <li>Provide examples</li> <li>Update documentation</li> <li>Share knowledge</li> </ul>"},{"location":"mid-level/design-patterns/#4-testing","title":"4. Testing","text":"<ul> <li>Test pattern implementations</li> <li>Mock dependencies</li> <li>Test edge cases</li> <li>Monitor performance</li> <li>Plan for maintenance</li> </ul>"},{"location":"mid-level/design-patterns/#5-evolution","title":"5. Evolution","text":"<ul> <li>Plan for changes</li> <li>Maintain flexibility</li> <li>Consider alternatives</li> <li>Monitor usage</li> <li>Refactor when needed</li> </ul>"},{"location":"mid-level/design-patterns/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Design Patterns</li> <li>Gang of Four Patterns</li> <li>Repository Pattern</li> <li>Unit of Work Pattern</li> <li>.NET Design Patterns</li> <li>SOLID Principles </li> </ul>"},{"location":"mid-level/design-patterns/behavioral-patterns/","title":"Behavioral Patterns (Davran\u0131\u015fsal Kal\u0131plar)","text":""},{"location":"mid-level/design-patterns/behavioral-patterns/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Behavioral Patterns, nesneler aras\u0131ndaki ileti\u015fimi ve sorumluluk da\u011f\u0131l\u0131m\u0131n\u0131 d\u00fczenleyen tasar\u0131m kal\u0131plar\u0131d\u0131r. Bu kal\u0131plar, nesnelerin nas\u0131l etkile\u015fime girece\u011fini ve g\u00f6revlerini nas\u0131l payla\u015faca\u011f\u0131n\u0131 tan\u0131mlar.</p>"},{"location":"mid-level/design-patterns/behavioral-patterns/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/design-patterns/behavioral-patterns/#1-observer-pattern-nedir-ve-ne-zaman-kullanlr","title":"1. Observer Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Observer Pattern, bir nesnenin durumu de\u011fi\u015fti\u011finde, ona ba\u011fl\u0131 olan di\u011fer nesnelerin otomatik olarak bilgilendirilmesini ve g\u00fcncellenmesini sa\u011flar.</p> <p>\u00d6rnek Kod: <pre><code>// Subject (G\u00f6zlemlenen)\npublic class WeatherStation\n{\n    private List&lt;IObserver&gt; _observers = new List&lt;IObserver&gt;();\n    private float _temperature;\n\n    public float Temperature\n    {\n        get =&gt; _temperature;\n        set\n        {\n            _temperature = value;\n            Notify();\n        }\n    }\n\n    public void Attach(IObserver observer)\n    {\n        _observers.Add(observer);\n    }\n\n    public void Detach(IObserver observer)\n    {\n        _observers.Remove(observer);\n    }\n\n    private void Notify()\n    {\n        foreach (var observer in _observers)\n        {\n            observer.Update(this);\n        }\n    }\n}\n\n// Observer (G\u00f6zlemci)\npublic interface IObserver\n{\n    void Update(WeatherStation subject);\n}\n\npublic class TemperatureDisplay : IObserver\n{\n    public void Update(WeatherStation subject)\n    {\n        Console.WriteLine($\"Temperature Display: {subject.Temperature}\u00b0C\");\n    }\n}\n\n// Kullan\u0131m\nvar weatherStation = new WeatherStation();\nvar display = new TemperatureDisplay();\nweatherStation.Attach(display);\nweatherStation.Temperature = 25.5f;\n</code></pre></p>"},{"location":"mid-level/design-patterns/behavioral-patterns/#2-strategy-pattern-nedir-ve-ne-zaman-kullanlr","title":"2. Strategy Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Strategy Pattern, bir algoritman\u0131n farkl\u0131 varyasyonlar\u0131n\u0131 tan\u0131mlar ve bu algoritmalar\u0131 kullanan nesnelerin, \u00e7al\u0131\u015fma zaman\u0131nda algoritmay\u0131 de\u011fi\u015ftirebilmesini sa\u011flar.</p> <p>\u00d6rnek Kod: <pre><code>// Strategy interface\npublic interface ISortStrategy\n{\n    void Sort(List&lt;int&gt; list);\n}\n\n// Concrete strategies\npublic class BubbleSort : ISortStrategy\n{\n    public void Sort(List&lt;int&gt; list)\n    {\n        Console.WriteLine(\"Sorting using Bubble Sort\");\n        // Bubble sort implementation\n    }\n}\n\npublic class QuickSort : ISortStrategy\n{\n    public void Sort(List&lt;int&gt; list)\n    {\n        Console.WriteLine(\"Sorting using Quick Sort\");\n        // Quick sort implementation\n    }\n}\n\n// Context\npublic class Sorter\n{\n    private ISortStrategy _strategy;\n\n    public Sorter(ISortStrategy strategy)\n    {\n        _strategy = strategy;\n    }\n\n    public void SetStrategy(ISortStrategy strategy)\n    {\n        _strategy = strategy;\n    }\n\n    public void Sort(List&lt;int&gt; list)\n    {\n        _strategy.Sort(list);\n    }\n}\n\n// Kullan\u0131m\nvar numbers = new List&lt;int&gt; { 5, 2, 8, 1, 9 };\nvar sorter = new Sorter(new BubbleSort());\nsorter.Sort(numbers);\n\nsorter.SetStrategy(new QuickSort());\nsorter.Sort(numbers);\n</code></pre></p>"},{"location":"mid-level/design-patterns/behavioral-patterns/#3-command-pattern-nedir-ve-ne-zaman-kullanlr","title":"3. Command Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Command Pattern, bir iste\u011fi bir nesne olarak kaps\u00fcller, b\u00f6ylece farkl\u0131 istekleri parametrele\u015ftirebilir, s\u0131raya alabilir veya geri alabilirsiniz.</p> <p>\u00d6rnek Kod: <pre><code>// Command interface\npublic interface ICommand\n{\n    void Execute();\n    void Undo();\n}\n\n// Concrete command\npublic class LightOnCommand : ICommand\n{\n    private Light _light;\n    private bool _previousState;\n\n    public LightOnCommand(Light light)\n    {\n        _light = light;\n    }\n\n    public void Execute()\n    {\n        _previousState = _light.IsOn;\n        _light.TurnOn();\n    }\n\n    public void Undo()\n    {\n        if (!_previousState)\n            _light.TurnOff();\n    }\n}\n\n// Receiver\npublic class Light\n{\n    public bool IsOn { get; private set; }\n\n    public void TurnOn()\n    {\n        IsOn = true;\n        Console.WriteLine(\"Light is on\");\n    }\n\n    public void TurnOff()\n    {\n        IsOn = false;\n        Console.WriteLine(\"Light is off\");\n    }\n}\n\n// Invoker\npublic class RemoteControl\n{\n    private ICommand _command;\n\n    public void SetCommand(ICommand command)\n    {\n        _command = command;\n    }\n\n    public void PressButton()\n    {\n        _command.Execute();\n    }\n\n    public void PressUndo()\n    {\n        _command.Undo();\n    }\n}\n\n// Kullan\u0131m\nvar light = new Light();\nvar lightOn = new LightOnCommand(light);\nvar remote = new RemoteControl();\n\nremote.SetCommand(lightOn);\nremote.PressButton();\nremote.PressUndo();\n</code></pre></p>"},{"location":"mid-level/design-patterns/behavioral-patterns/#4-state-pattern-nedir-ve-ne-zaman-kullanlr","title":"4. State Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: State Pattern, bir nesnenin i\u00e7 durumu de\u011fi\u015fti\u011finde davran\u0131\u015f\u0131n\u0131 de\u011fi\u015ftirmesini sa\u011flar. Nesne, s\u0131n\u0131f\u0131n\u0131 de\u011fi\u015ftirmeden farkl\u0131 durumlarda farkl\u0131 davranabilir.</p> <p>\u00d6rnek Kod: <pre><code>// State interface\npublic interface IState\n{\n    void Handle(Context context);\n}\n\n// Concrete states\npublic class ConcreteStateA : IState\n{\n    public void Handle(Context context)\n    {\n        Console.WriteLine(\"Handling in State A\");\n        context.State = new ConcreteStateB();\n    }\n}\n\npublic class ConcreteStateB : IState\n{\n    public void Handle(Context context)\n    {\n        Console.WriteLine(\"Handling in State B\");\n        context.State = new ConcreteStateA();\n    }\n}\n\n// Context\npublic class Context\n{\n    private IState _state;\n\n    public Context(IState state)\n    {\n        _state = state;\n    }\n\n    public IState State\n    {\n        get =&gt; _state;\n        set\n        {\n            _state = value;\n            Console.WriteLine($\"State changed to {_state.GetType().Name}\");\n        }\n    }\n\n    public void Request()\n    {\n        _state.Handle(this);\n    }\n}\n\n// Kullan\u0131m\nvar context = new Context(new ConcreteStateA());\ncontext.Request();\ncontext.Request();\n</code></pre></p>"},{"location":"mid-level/design-patterns/behavioral-patterns/#5-chain-of-responsibility-pattern-nedir-ve-ne-zaman-kullanlr","title":"5. Chain of Responsibility Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Chain of Responsibility Pattern, bir iste\u011fi i\u015fleyebilecek nesnelerin zincirini olu\u015fturur. \u0130stek, zincir boyunca ilerler ve uygun i\u015fleyici bulunana kadar devam eder.</p> <p>\u00d6rnek Kod: <pre><code>// Handler interface\npublic interface IHandler\n{\n    IHandler SetNext(IHandler handler);\n    object Handle(object request);\n}\n\n// Abstract handler\npublic abstract class AbstractHandler : IHandler\n{\n    private IHandler _nextHandler;\n\n    public IHandler SetNext(IHandler handler)\n    {\n        _nextHandler = handler;\n        return handler;\n    }\n\n    public virtual object Handle(object request)\n    {\n        if (_nextHandler != null)\n        {\n            return _nextHandler.Handle(request);\n        }\n        return null;\n    }\n}\n\n// Concrete handlers\npublic class MonkeyHandler : AbstractHandler\n{\n    public override object Handle(object request)\n    {\n        if (request.ToString() == \"Banana\")\n        {\n            return $\"Monkey: I'll eat the {request}.\";\n        }\n        return base.Handle(request);\n    }\n}\n\npublic class SquirrelHandler : AbstractHandler\n{\n    public override object Handle(object request)\n    {\n        if (request.ToString() == \"Nut\")\n        {\n            return $\"Squirrel: I'll eat the {request}.\";\n        }\n        return base.Handle(request);\n    }\n}\n\n// Kullan\u0131m\nvar monkey = new MonkeyHandler();\nvar squirrel = new SquirrelHandler();\n\nmonkey.SetNext(squirrel);\n\nConsole.WriteLine(monkey.Handle(\"Banana\"));\nConsole.WriteLine(monkey.Handle(\"Nut\"));\n</code></pre></p>"},{"location":"mid-level/design-patterns/behavioral-patterns/#best-practices","title":"Best Practices","text":"<ol> <li>Pattern Se\u00e7imi</li> <li>Observer: Durum de\u011fi\u015fikliklerini takip etmek i\u00e7in</li> <li>Strategy: Algoritma varyasyonlar\u0131 i\u00e7in</li> <li>Command: \u0130stekleri nesnele\u015ftirmek i\u00e7in</li> <li>State: Nesne durumlar\u0131n\u0131 y\u00f6netmek i\u00e7in</li> <li> <p>Chain of Responsibility: \u0130stek i\u015fleme zinciri i\u00e7in</p> </li> <li> <p>Uygulama</p> </li> <li>Interface'leri do\u011fru tan\u0131mlay\u0131n</li> <li>SOLID prensiplerini takip edin</li> <li>Dependency Injection kullan\u0131n</li> <li> <p>Documentation ekleyin</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod tekrar\u0131ndan ka\u00e7\u0131n\u0131n</li> <li>Test edilebilirli\u011fi g\u00f6z \u00f6n\u00fcnde bulundurun</li> <li>Performans etkilerini de\u011ferlendirin</li> <li>Team review yap\u0131n</li> </ol>"},{"location":"mid-level/design-patterns/behavioral-patterns/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Behavioral Patterns</li> <li>Refactoring Guru - Behavioral Patterns</li> <li>Design Patterns in C# </li> </ul>"},{"location":"mid-level/design-patterns/creational-patterns/","title":"Creational Patterns (Olu\u015fturucu Kal\u0131plar)","text":""},{"location":"mid-level/design-patterns/creational-patterns/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Creational Patterns, nesne olu\u015fturma s\u00fcre\u00e7lerini y\u00f6neten ve nesnelerin olu\u015fturulma \u015feklini kontrol eden tasar\u0131m kal\u0131plar\u0131d\u0131r. Bu kal\u0131plar, nesne olu\u015fturma mant\u0131\u011f\u0131n\u0131 kaps\u00fclleyerek, sistemin nesnelerden ba\u011f\u0131ms\u0131z olmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"mid-level/design-patterns/creational-patterns/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/design-patterns/creational-patterns/#1-singleton-pattern-nedir-ve-ne-zaman-kullanlr","title":"1. Singleton Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Singleton Pattern, bir s\u0131n\u0131f\u0131n yaln\u0131zca bir \u00f6rne\u011finin olu\u015fturulmas\u0131n\u0131 ve bu \u00f6rne\u011fe global bir eri\u015fim noktas\u0131 sa\u011flanmas\u0131n\u0131 garanti eder.</p> <p>\u00d6rnek Kod: <pre><code>public class Singleton\n{\n    private static Singleton _instance;\n    private static readonly object _lock = new object();\n\n    private Singleton() { }\n\n    public static Singleton Instance\n    {\n        get\n        {\n            if (_instance == null)\n            {\n                lock (_lock)\n                {\n                    if (_instance == null)\n                    {\n                        _instance = new Singleton();\n                    }\n                }\n            }\n            return _instance;\n        }\n    }\n}\n\n// Kullan\u0131m\nvar singleton1 = Singleton.Instance;\nvar singleton2 = Singleton.Instance;\n// singleton1 ve singleton2 ayn\u0131 \u00f6rne\u011fi referans eder\n</code></pre></p>"},{"location":"mid-level/design-patterns/creational-patterns/#2-factory-method-pattern-nedir-ve-ne-zaman-kullanlr","title":"2. Factory Method Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Factory Method Pattern, bir nesnenin olu\u015fturulmas\u0131 i\u00e7in bir aray\u00fcz tan\u0131mlar, ancak alt s\u0131n\u0131flar\u0131n hangi s\u0131n\u0131f\u0131n \u00f6rne\u011fini olu\u015fturaca\u011f\u0131na karar vermesine izin verir.</p> <p>\u00d6rnek Kod: <pre><code>public abstract class Document\n{\n    public abstract void CreatePages();\n}\n\npublic class Resume : Document\n{\n    public override void CreatePages()\n    {\n        Pages.Add(new SkillsPage());\n        Pages.Add(new EducationPage());\n        Pages.Add(new ExperiencePage());\n    }\n}\n\npublic class Report : Document\n{\n    public override void CreatePages()\n    {\n        Pages.Add(new IntroductionPage());\n        Pages.Add(new ResultsPage());\n        Pages.Add(new ConclusionPage());\n    }\n}\n\n// Kullan\u0131m\nDocument document = new Resume();\ndocument.CreatePages();\n</code></pre></p>"},{"location":"mid-level/design-patterns/creational-patterns/#3-abstract-factory-pattern-nedir-ve-ne-zaman-kullanlr","title":"3. Abstract Factory Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Abstract Factory Pattern, ilgili nesnelerin ailelerini olu\u015fturmak i\u00e7in bir aray\u00fcz sa\u011flar, somut s\u0131n\u0131flar\u0131 belirtmeden.</p> <p>\u00d6rnek Kod: <pre><code>public interface IGUIFactory\n{\n    IButton CreateButton();\n    ICheckbox CreateCheckbox();\n}\n\npublic class WindowsFactory : IGUIFactory\n{\n    public IButton CreateButton() =&gt; new WindowsButton();\n    public ICheckbox CreateCheckbox() =&gt; new WindowsCheckbox();\n}\n\npublic class MacFactory : IGUIFactory\n{\n    public IButton CreateButton() =&gt; new MacButton();\n    public ICheckbox CreateCheckbox() =&gt; new MacCheckbox();\n}\n\n// Kullan\u0131m\nIGUIFactory factory = new WindowsFactory();\nIButton button = factory.CreateButton();\nICheckbox checkbox = factory.CreateCheckbox();\n</code></pre></p>"},{"location":"mid-level/design-patterns/creational-patterns/#4-builder-pattern-nedir-ve-ne-zaman-kullanlr","title":"4. Builder Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Builder Pattern, karma\u015f\u0131k bir nesnenin ad\u0131m ad\u0131m olu\u015fturulmas\u0131n\u0131 sa\u011flar. Ayn\u0131 olu\u015fturma s\u00fcreci farkl\u0131 temsiller olu\u015fturabilir.</p> <p>\u00d6rnek Kod: <pre><code>public class Pizza\n{\n    public string Dough { get; set; }\n    public string Sauce { get; set; }\n    public string Topping { get; set; }\n}\n\npublic interface IPizzaBuilder\n{\n    void BuildDough();\n    void BuildSauce();\n    void BuildTopping();\n    Pizza GetPizza();\n}\n\npublic class HawaiianPizzaBuilder : IPizzaBuilder\n{\n    private Pizza _pizza = new Pizza();\n\n    public void BuildDough() =&gt; _pizza.Dough = \"Cross\";\n    public void BuildSauce() =&gt; _pizza.Sauce = \"Mild\";\n    public void BuildTopping() =&gt; _pizza.Topping = \"Ham+Pinapple\";\n    public Pizza GetPizza() =&gt; _pizza;\n}\n\npublic class PizzaDirector\n{\n    private IPizzaBuilder _builder;\n\n    public PizzaDirector(IPizzaBuilder builder)\n    {\n        _builder = builder;\n    }\n\n    public void MakePizza()\n    {\n        _builder.BuildDough();\n        _builder.BuildSauce();\n        _builder.BuildTopping();\n    }\n}\n\n// Kullan\u0131m\nvar builder = new HawaiianPizzaBuilder();\nvar director = new PizzaDirector(builder);\ndirector.MakePizza();\nPizza pizza = builder.GetPizza();\n</code></pre></p>"},{"location":"mid-level/design-patterns/creational-patterns/#5-prototype-pattern-nedir-ve-ne-zaman-kullanlr","title":"5. Prototype Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Prototype Pattern, mevcut nesnelerin kopyalar\u0131n\u0131 olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. Bu, \u00f6zellikle nesne olu\u015fturma maliyeti y\u00fcksek oldu\u011funda faydal\u0131d\u0131r.</p> <p>\u00d6rnek Kod: <pre><code>public abstract class Shape : ICloneable\n{\n    public int X { get; set; }\n    public int Y { get; set; }\n    public string Color { get; set; }\n\n    public abstract object Clone();\n}\n\npublic class Circle : Shape\n{\n    public int Radius { get; set; }\n\n    public override object Clone()\n    {\n        return new Circle\n        {\n            X = this.X,\n            Y = this.Y,\n            Color = this.Color,\n            Radius = this.Radius\n        };\n    }\n}\n\n// Kullan\u0131m\nCircle circle = new Circle\n{\n    X = 10,\n    Y = 20,\n    Radius = 15,\n    Color = \"Red\"\n};\n\nCircle clonedCircle = (Circle)circle.Clone();\n</code></pre></p>"},{"location":"mid-level/design-patterns/creational-patterns/#best-practices","title":"Best Practices","text":"<ol> <li>Pattern Se\u00e7imi</li> <li>Singleton: Tek bir \u00f6rnek gerekti\u011finde</li> <li>Factory Method: Alt s\u0131n\u0131flar\u0131n nesne olu\u015fturmas\u0131 gerekti\u011finde</li> <li>Abstract Factory: \u0130lgili nesne aileleri olu\u015fturuldu\u011funda</li> <li>Builder: Karma\u015f\u0131k nesneler ad\u0131m ad\u0131m olu\u015fturuldu\u011funda</li> <li> <p>Prototype: Mevcut nesnelerin kopyalar\u0131 gerekti\u011finde</p> </li> <li> <p>Uygulama</p> </li> <li>Dependency Injection kullan\u0131n</li> <li>Interface'leri tercih edin</li> <li>Unit test edilebilirli\u011fi g\u00f6z \u00f6n\u00fcnde bulundurun</li> <li> <p>Documentation ekleyin</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod tekrar\u0131ndan ka\u00e7\u0131n\u0131n</li> <li>SOLID prensiplerini takip edin</li> <li>Performans etkilerini de\u011ferlendirin</li> <li>Team review yap\u0131n</li> </ol>"},{"location":"mid-level/design-patterns/creational-patterns/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Creational Patterns</li> <li>Refactoring Guru - Creational Patterns</li> <li>Design Patterns in C# </li> </ul>"},{"location":"mid-level/design-patterns/repository-pattern/","title":"Repository Pattern","text":""},{"location":"mid-level/design-patterns/repository-pattern/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Repository Pattern, veri eri\u015fim mant\u0131\u011f\u0131n\u0131 soyutlayarak, uygulama katman\u0131 ile veri eri\u015fim katman\u0131 aras\u0131nda bir arac\u0131 g\u00f6revi g\u00f6r\u00fcr. Bu pattern, veri kayna\u011f\u0131ndan veri almay\u0131 ve veri kayna\u011f\u0131na veri g\u00f6ndermeyi y\u00f6netir.</p>"},{"location":"mid-level/design-patterns/repository-pattern/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/design-patterns/repository-pattern/#1-repository-pattern-nedir-ve-ne-zaman-kullanlr","title":"1. Repository Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Repository Pattern, veri eri\u015fim mant\u0131\u011f\u0131n\u0131 kaps\u00fcller ve veri kayna\u011f\u0131ndan veri almay\u0131 ve veri kayna\u011f\u0131na veri g\u00f6ndermeyi y\u00f6netir. Genellikle: - Veri eri\u015fim mant\u0131\u011f\u0131n\u0131 soyutlamak i\u00e7in - Test edilebilirli\u011fi art\u0131rmak i\u00e7in - Veri kayna\u011f\u0131 de\u011fi\u015fikliklerini y\u00f6netmek i\u00e7in - Kod tekrar\u0131n\u0131 azaltmak i\u00e7in kullan\u0131l\u0131r.</p> <p>\u00d6rnek Kod: <pre><code>// Entity\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n\n// Repository interface\npublic interface IRepository&lt;T&gt; where T : class\n{\n    IEnumerable&lt;T&gt; GetAll();\n    T GetById(int id);\n    void Add(T entity);\n    void Update(T entity);\n    void Delete(T entity);\n}\n\n// Concrete repository\npublic class ProductRepository : IRepository&lt;Product&gt;\n{\n    private readonly DbContext _context;\n\n    public ProductRepository(DbContext context)\n    {\n        _context = context;\n    }\n\n    public IEnumerable&lt;Product&gt; GetAll()\n    {\n        return _context.Products.ToList();\n    }\n\n    public Product GetById(int id)\n    {\n        return _context.Products.Find(id);\n    }\n\n    public void Add(Product product)\n    {\n        _context.Products.Add(product);\n        _context.SaveChanges();\n    }\n\n    public void Update(Product product)\n    {\n        _context.Entry(product).State = EntityState.Modified;\n        _context.SaveChanges();\n    }\n\n    public void Delete(Product product)\n    {\n        _context.Products.Remove(product);\n        _context.SaveChanges();\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/repository-pattern/#2-generic-repository-nasl-implemente-edilir","title":"2. Generic Repository nas\u0131l implemente edilir?","text":"<p>Cevap: Generic Repository, farkl\u0131 entity tipleri i\u00e7in tekrar kullan\u0131labilir bir repository sa\u011flar.</p> <p>\u00d6rnek Kod: <pre><code>public class GenericRepository&lt;T&gt; : IRepository&lt;T&gt; where T : class\n{\n    private readonly DbContext _context;\n    private readonly DbSet&lt;T&gt; _dbSet;\n\n    public GenericRepository(DbContext context)\n    {\n        _context = context;\n        _dbSet = context.Set&lt;T&gt;();\n    }\n\n    public IEnumerable&lt;T&gt; GetAll()\n    {\n        return _dbSet.ToList();\n    }\n\n    public T GetById(int id)\n    {\n        return _dbSet.Find(id);\n    }\n\n    public void Add(T entity)\n    {\n        _dbSet.Add(entity);\n        _context.SaveChanges();\n    }\n\n    public void Update(T entity)\n    {\n        _context.Entry(entity).State = EntityState.Modified;\n        _context.SaveChanges();\n    }\n\n    public void Delete(T entity)\n    {\n        _dbSet.Remove(entity);\n        _context.SaveChanges();\n    }\n}\n\n// Kullan\u0131m\npublic class ProductService\n{\n    private readonly IRepository&lt;Product&gt; _productRepository;\n\n    public ProductService(IRepository&lt;Product&gt; productRepository)\n    {\n        _productRepository = productRepository;\n    }\n\n    public IEnumerable&lt;Product&gt; GetAllProducts()\n    {\n        return _productRepository.GetAll();\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/repository-pattern/#3-repository-patternin-avantajlar-nelerdir","title":"3. Repository Pattern'in avantajlar\u0131 nelerdir?","text":"<p>Cevap: Repository Pattern'in avantajlar\u0131: - Veri eri\u015fim mant\u0131\u011f\u0131n\u0131n merkezile\u015ftirilmesi - Test edilebilirli\u011fin artmas\u0131 - Kod tekrar\u0131n\u0131n azalmas\u0131 - Veri kayna\u011f\u0131 de\u011fi\u015fikliklerinin kolay y\u00f6netimi - \u0130\u015f mant\u0131\u011f\u0131 ve veri eri\u015fim mant\u0131\u011f\u0131n\u0131n ayr\u0131lmas\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Test edilebilirlik \u00f6rne\u011fi\npublic class ProductServiceTests\n{\n    [Fact]\n    public void GetAllProducts_ReturnsAllProducts()\n    {\n        // Arrange\n        var mockRepository = new Mock&lt;IRepository&lt;Product&gt;&gt;();\n        var products = new List&lt;Product&gt;\n        {\n            new Product { Id = 1, Name = \"Product 1\" },\n            new Product { Id = 2, Name = \"Product 2\" }\n        };\n        mockRepository.Setup(r =&gt; r.GetAll()).Returns(products);\n        var service = new ProductService(mockRepository.Object);\n\n        // Act\n        var result = service.GetAllProducts();\n\n        // Assert\n        Assert.Equal(2, result.Count());\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/repository-pattern/#4-repository-pattern-ile-unit-of-work-pattern-nasl-birlikte-kullanlr","title":"4. Repository Pattern ile Unit of Work Pattern nas\u0131l birlikte kullan\u0131l\u0131r?","text":"<p>Cevap: Unit of Work Pattern, birden fazla repository'yi tek bir transaction alt\u0131nda y\u00f6netmek i\u00e7in kullan\u0131l\u0131r.</p> <p>\u00d6rnek Kod: <pre><code>public interface IUnitOfWork : IDisposable\n{\n    IRepository&lt;Product&gt; Products { get; }\n    IRepository&lt;Order&gt; Orders { get; }\n    int SaveChanges();\n}\n\npublic class UnitOfWork : IUnitOfWork\n{\n    private readonly DbContext _context;\n    private IRepository&lt;Product&gt; _products;\n    private IRepository&lt;Order&gt; _orders;\n\n    public UnitOfWork(DbContext context)\n    {\n        _context = context;\n    }\n\n    public IRepository&lt;Product&gt; Products\n    {\n        get\n        {\n            if (_products == null)\n                _products = new GenericRepository&lt;Product&gt;(_context);\n            return _products;\n        }\n    }\n\n    public IRepository&lt;Order&gt; Orders\n    {\n        get\n        {\n            if (_orders == null)\n                _orders = new GenericRepository&lt;Order&gt;(_context);\n            return _orders;\n        }\n    }\n\n    public int SaveChanges()\n    {\n        return _context.SaveChanges();\n    }\n\n    public void Dispose()\n    {\n        _context.Dispose();\n    }\n}\n\n// Kullan\u0131m\npublic class OrderService\n{\n    private readonly IUnitOfWork _unitOfWork;\n\n    public OrderService(IUnitOfWork unitOfWork)\n    {\n        _unitOfWork = unitOfWork;\n    }\n\n    public void CreateOrder(Order order, List&lt;Product&gt; products)\n    {\n        _unitOfWork.Orders.Add(order);\n        foreach (var product in products)\n        {\n            _unitOfWork.Products.Update(product);\n        }\n        _unitOfWork.SaveChanges();\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/repository-pattern/#5-repository-patternde-performans-optimizasyonu-nasl-yaplr","title":"5. Repository Pattern'de performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Repository Pattern'de performans optimizasyonu i\u00e7in: - Lazy loading kullan\u0131m\u0131 - Eager loading stratejileri - Caching mekanizmalar\u0131 - Batch i\u015flemleri - Asenkron operasyonlar</p> <p>\u00d6rnek Kod: <pre><code>public interface IRepository&lt;T&gt; where T : class\n{\n    Task&lt;IEnumerable&lt;T&gt;&gt; GetAllAsync();\n    Task&lt;T&gt; GetByIdAsync(int id);\n    Task AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(T entity);\n}\n\npublic class ProductRepository : IRepository&lt;Product&gt;\n{\n    private readonly DbContext _context;\n    private readonly MemoryCache _cache;\n\n    public ProductRepository(DbContext context)\n    {\n        _context = context;\n        _cache = new MemoryCache(new MemoryCacheOptions());\n    }\n\n    public async Task&lt;IEnumerable&lt;Product&gt;&gt; GetAllAsync()\n    {\n        const string cacheKey = \"products_all\";\n        if (_cache.TryGetValue(cacheKey, out IEnumerable&lt;Product&gt; products))\n        {\n            return products;\n        }\n\n        products = await _context.Products\n            .Include(p =&gt; p.Category)\n            .ToListAsync();\n\n        var cacheOptions = new MemoryCacheEntryOptions()\n            .SetSlidingExpiration(TimeSpan.FromMinutes(5));\n\n        _cache.Set(cacheKey, products, cacheOptions);\n        return products;\n    }\n\n    public async Task AddAsync(Product product)\n    {\n        await _context.Products.AddAsync(product);\n        await _context.SaveChangesAsync();\n        _cache.Remove(\"products_all\");\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/repository-pattern/#best-practices","title":"Best Practices","text":"<ol> <li>Repository Tasar\u0131m\u0131</li> <li>Interface'leri do\u011fru tan\u0131mlay\u0131n</li> <li>Generic repository kullan\u0131n</li> <li>Dependency Injection kullan\u0131n</li> <li> <p>SOLID prensiplerini takip edin</p> </li> <li> <p>Performans</p> </li> <li>Lazy loading kullan\u0131n</li> <li>Caching mekanizmalar\u0131 ekleyin</li> <li>Batch i\u015flemleri yap\u0131n</li> <li> <p>Asenkron operasyonlar kullan\u0131n</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Mock repository'ler olu\u015fturun</li> <li>Unit testler yaz\u0131n</li> <li>Integration testler yap\u0131n</li> <li>Test coverage'\u0131 takip edin</li> </ol>"},{"location":"mid-level/design-patterns/repository-pattern/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Repository Pattern</li> <li>Repository Pattern Best Practices</li> <li>Implementing Repository Pattern in C# </li> </ul>"},{"location":"mid-level/design-patterns/structural-patterns/","title":"Structural Patterns (Yap\u0131sal Kal\u0131plar)","text":""},{"location":"mid-level/design-patterns/structural-patterns/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Structural Patterns, nesnelerin ve s\u0131n\u0131flar\u0131n daha b\u00fcy\u00fck yap\u0131lar olu\u015fturmak i\u00e7in nas\u0131l bir araya getirilece\u011fini tan\u0131mlayan tasar\u0131m kal\u0131plar\u0131d\u0131r. Bu kal\u0131plar, nesneler aras\u0131ndaki ili\u015fkileri d\u00fczenleyerek, sistemin daha esnek ve verimli olmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"mid-level/design-patterns/structural-patterns/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/design-patterns/structural-patterns/#1-adapter-pattern-nedir-ve-ne-zaman-kullanlr","title":"1. Adapter Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Adapter Pattern, uyumsuz aray\u00fczlere sahip s\u0131n\u0131flar\u0131n birlikte \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flar. Mevcut bir s\u0131n\u0131f\u0131n aray\u00fcz\u00fcn\u00fc, istemcinin bekledi\u011fi ba\u015fka bir aray\u00fcze d\u00f6n\u00fc\u015ft\u00fcr\u00fcr.</p> <p>\u00d6rnek Kod: <pre><code>// Mevcut s\u0131n\u0131f\npublic class LegacyPrinter\n{\n    public void PrintDocument(string document)\n    {\n        Console.WriteLine($\"Legacy Printer: {document}\");\n    }\n}\n\n// Hedef aray\u00fcz\npublic interface IPrinter\n{\n    void Print(string content);\n}\n\n// Adapter\npublic class PrinterAdapter : IPrinter\n{\n    private readonly LegacyPrinter _legacyPrinter;\n\n    public PrinterAdapter(LegacyPrinter legacyPrinter)\n    {\n        _legacyPrinter = legacyPrinter;\n    }\n\n    public void Print(string content)\n    {\n        _legacyPrinter.PrintDocument(content);\n    }\n}\n\n// Kullan\u0131m\nvar legacyPrinter = new LegacyPrinter();\nvar adapter = new PrinterAdapter(legacyPrinter);\nadapter.Print(\"Hello World\");\n</code></pre></p>"},{"location":"mid-level/design-patterns/structural-patterns/#2-bridge-pattern-nedir-ve-ne-zaman-kullanlr","title":"2. Bridge Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Bridge Pattern, bir soyutlamay\u0131 onun uygulamas\u0131ndan ay\u0131rarak, ikisinin de ba\u011f\u0131ms\u0131z olarak de\u011fi\u015febilmesini sa\u011flar.</p> <p>\u00d6rnek Kod: <pre><code>// Implementasyon aray\u00fcz\u00fc\npublic interface IRenderer\n{\n    void RenderCircle(float radius);\n    void RenderSquare(float side);\n}\n\n// Somut implementasyonlar\npublic class VectorRenderer : IRenderer\n{\n    public void RenderCircle(float radius)\n    {\n        Console.WriteLine($\"Drawing a circle of radius {radius} using vector graphics\");\n    }\n\n    public void RenderSquare(float side)\n    {\n        Console.WriteLine($\"Drawing a square of side {side} using vector graphics\");\n    }\n}\n\npublic class RasterRenderer : IRenderer\n{\n    public void RenderCircle(float radius)\n    {\n        Console.WriteLine($\"Drawing a circle of radius {radius} using pixels\");\n    }\n\n    public void RenderSquare(float side)\n    {\n        Console.WriteLine($\"Drawing a square of side {side} using pixels\");\n    }\n}\n\n// Soyutlama\npublic abstract class Shape\n{\n    protected IRenderer renderer;\n\n    protected Shape(IRenderer renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    public abstract void Draw();\n}\n\n// Somut \u015fekiller\npublic class Circle : Shape\n{\n    private float radius;\n\n    public Circle(IRenderer renderer, float radius) : base(renderer)\n    {\n        this.radius = radius;\n    }\n\n    public override void Draw()\n    {\n        renderer.RenderCircle(radius);\n    }\n}\n\n// Kullan\u0131m\nvar vectorRenderer = new VectorRenderer();\nvar circle = new Circle(vectorRenderer, 5);\ncircle.Draw();\n</code></pre></p>"},{"location":"mid-level/design-patterns/structural-patterns/#3-composite-pattern-nedir-ve-ne-zaman-kullanlr","title":"3. Composite Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Composite Pattern, nesneleri a\u011fa\u00e7 yap\u0131lar\u0131 halinde d\u00fczenleyerek, tek tek nesneler ve nesne kompozisyonlar\u0131 aras\u0131nda tutarl\u0131 bir \u015fekilde \u00e7al\u0131\u015fmay\u0131 sa\u011flar.</p> <p>\u00d6rnek Kod: <pre><code>public abstract class Component\n{\n    protected string name;\n\n    public Component(string name)\n    {\n        this.name = name;\n    }\n\n    public abstract void Add(Component component);\n    public abstract void Remove(Component component);\n    public abstract void Display(int depth);\n}\n\npublic class Leaf : Component\n{\n    public Leaf(string name) : base(name) { }\n\n    public override void Add(Component component)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override void Remove(Component component)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override void Display(int depth)\n    {\n        Console.WriteLine(new string('-', depth) + name);\n    }\n}\n\npublic class Composite : Component\n{\n    private List&lt;Component&gt; children = new List&lt;Component&gt;();\n\n    public Composite(string name) : base(name) { }\n\n    public override void Add(Component component)\n    {\n        children.Add(component);\n    }\n\n    public override void Remove(Component component)\n    {\n        children.Remove(component);\n    }\n\n    public override void Display(int depth)\n    {\n        Console.WriteLine(new string('-', depth) + name);\n        foreach (var component in children)\n        {\n            component.Display(depth + 2);\n        }\n    }\n}\n\n// Kullan\u0131m\nvar root = new Composite(\"root\");\nroot.Add(new Leaf(\"Leaf A\"));\nroot.Add(new Leaf(\"Leaf B\"));\n\nvar comp = new Composite(\"Composite X\");\ncomp.Add(new Leaf(\"Leaf XA\"));\ncomp.Add(new Leaf(\"Leaf XB\"));\n\nroot.Add(comp);\nroot.Display(1);\n</code></pre></p>"},{"location":"mid-level/design-patterns/structural-patterns/#4-decorator-pattern-nedir-ve-ne-zaman-kullanlr","title":"4. Decorator Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Decorator Pattern, bir nesneye dinamik olarak yeni sorumluluklar eklemek i\u00e7in kullan\u0131l\u0131r. Alt s\u0131n\u0131flama yerine nesneyi sarmalayarak i\u015flevselli\u011fi geni\u015fletir.</p> <p>\u00d6rnek Kod: <pre><code>public abstract class Beverage\n{\n    public string Description { get; set; }\n    public abstract double Cost();\n}\n\npublic class Espresso : Beverage\n{\n    public Espresso()\n    {\n        Description = \"Espresso\";\n    }\n\n    public override double Cost()\n    {\n        return 1.99;\n    }\n}\n\npublic abstract class CondimentDecorator : Beverage\n{\n    protected Beverage beverage;\n}\n\npublic class Mocha : CondimentDecorator\n{\n    public Mocha(Beverage beverage)\n    {\n        this.beverage = beverage;\n    }\n\n    public override string Description\n    {\n        get { return beverage.Description + \", Mocha\"; }\n        set { }\n    }\n\n    public override double Cost()\n    {\n        return 0.20 + beverage.Cost();\n    }\n}\n\n// Kullan\u0131m\nBeverage beverage = new Espresso();\nbeverage = new Mocha(beverage);\nConsole.WriteLine($\"{beverage.Description} ${beverage.Cost()}\");\n</code></pre></p>"},{"location":"mid-level/design-patterns/structural-patterns/#5-facade-pattern-nedir-ve-ne-zaman-kullanlr","title":"5. Facade Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Facade Pattern, karma\u015f\u0131k bir alt sistemin kullan\u0131m\u0131n\u0131 basitle\u015ftirmek i\u00e7in \u00fcst d\u00fczey bir aray\u00fcz sa\u011flar.</p> <p>\u00d6rnek Kod: <pre><code>// Alt sistem s\u0131n\u0131flar\u0131\npublic class SubsystemA\n{\n    public void OperationA()\n    {\n        Console.WriteLine(\"SubsystemA: OperationA\");\n    }\n}\n\npublic class SubsystemB\n{\n    public void OperationB()\n    {\n        Console.WriteLine(\"SubsystemB: OperationB\");\n    }\n}\n\npublic class SubsystemC\n{\n    public void OperationC()\n    {\n        Console.WriteLine(\"SubsystemC: OperationC\");\n    }\n}\n\n// Facade\npublic class Facade\n{\n    private SubsystemA _subsystemA;\n    private SubsystemB _subsystemB;\n    private SubsystemC _subsystemC;\n\n    public Facade()\n    {\n        _subsystemA = new SubsystemA();\n        _subsystemB = new SubsystemB();\n        _subsystemC = new SubsystemC();\n    }\n\n    public void Operation1()\n    {\n        _subsystemA.OperationA();\n        _subsystemB.OperationB();\n    }\n\n    public void Operation2()\n    {\n        _subsystemB.OperationB();\n        _subsystemC.OperationC();\n    }\n}\n\n// Kullan\u0131m\nvar facade = new Facade();\nfacade.Operation1();\nfacade.Operation2();\n</code></pre></p>"},{"location":"mid-level/design-patterns/structural-patterns/#best-practices","title":"Best Practices","text":"<ol> <li>Pattern Se\u00e7imi</li> <li>Adapter: Uyumsuz aray\u00fczleri uyumlu hale getirmek i\u00e7in</li> <li>Bridge: Soyutlama ve implementasyonu ay\u0131rmak i\u00e7in</li> <li>Composite: A\u011fa\u00e7 yap\u0131lar\u0131 olu\u015fturmak i\u00e7in</li> <li>Decorator: Dinamik olarak sorumluluk eklemek i\u00e7in</li> <li> <p>Facade: Karma\u015f\u0131k alt sistemleri basitle\u015ftirmek i\u00e7in</p> </li> <li> <p>Uygulama</p> </li> <li>Interface'leri do\u011fru tan\u0131mlay\u0131n</li> <li>SOLID prensiplerini takip edin</li> <li>Dependency Injection kullan\u0131n</li> <li> <p>Documentation ekleyin</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod tekrar\u0131ndan ka\u00e7\u0131n\u0131n</li> <li>Test edilebilirli\u011fi g\u00f6z \u00f6n\u00fcnde bulundurun</li> <li>Performans etkilerini de\u011ferlendirin</li> <li>Team review yap\u0131n</li> </ol>"},{"location":"mid-level/design-patterns/structural-patterns/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Structural Patterns</li> <li>Refactoring Guru - Structural Patterns</li> <li>Design Patterns in C# </li> </ul>"},{"location":"mid-level/design-patterns/unit-of-work/","title":"Unit of Work Pattern","text":""},{"location":"mid-level/design-patterns/unit-of-work/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Unit of Work Pattern, bir i\u015f birimi i\u00e7inde yap\u0131lan t\u00fcm veritaban\u0131 i\u015flemlerini tek bir transaction alt\u0131nda y\u00f6netir. Bu pattern, veritaban\u0131 i\u015flemlerinin tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flar ve transaction y\u00f6netimini merkezile\u015ftirir.</p>"},{"location":"mid-level/design-patterns/unit-of-work/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/design-patterns/unit-of-work/#1-unit-of-work-pattern-nedir-ve-ne-zaman-kullanlr","title":"1. Unit of Work Pattern nedir ve ne zaman kullan\u0131l\u0131r?","text":"<p>Cevap: Unit of Work Pattern, veritaban\u0131 i\u015flemlerini tek bir transaction alt\u0131nda y\u00f6netmek i\u00e7in kullan\u0131l\u0131r. Genellikle: - Birden fazla repository'yi tek bir transaction alt\u0131nda y\u00f6netmek i\u00e7in - Veritaban\u0131 i\u015flemlerinin tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flamak i\u00e7in - Transaction y\u00f6netimini merkezile\u015ftirmek i\u00e7in - Repository Pattern ile birlikte kullan\u0131l\u0131r.</p> <p>\u00d6rnek Kod: <pre><code>public interface IUnitOfWork : IDisposable\n{\n    IRepository&lt;Product&gt; Products { get; }\n    IRepository&lt;Order&gt; Orders { get; }\n    IRepository&lt;Customer&gt; Customers { get; }\n    int SaveChanges();\n    Task&lt;int&gt; SaveChangesAsync();\n}\n\npublic class UnitOfWork : IUnitOfWork\n{\n    private readonly DbContext _context;\n    private IRepository&lt;Product&gt; _products;\n    private IRepository&lt;Order&gt; _orders;\n    private IRepository&lt;Customer&gt; _customers;\n\n    public UnitOfWork(DbContext context)\n    {\n        _context = context;\n    }\n\n    public IRepository&lt;Product&gt; Products\n    {\n        get\n        {\n            if (_products == null)\n                _products = new GenericRepository&lt;Product&gt;(_context);\n            return _products;\n        }\n    }\n\n    public IRepository&lt;Order&gt; Orders\n    {\n        get\n        {\n            if (_orders == null)\n                _orders = new GenericRepository&lt;Order&gt;(_context);\n            return _orders;\n        }\n    }\n\n    public IRepository&lt;Customer&gt; Customers\n    {\n        get\n        {\n            if (_customers == null)\n                _customers = new GenericRepository&lt;Customer&gt;(_context);\n            return _customers;\n        }\n    }\n\n    public int SaveChanges()\n    {\n        return _context.SaveChanges();\n    }\n\n    public async Task&lt;int&gt; SaveChangesAsync()\n    {\n        return await _context.SaveChangesAsync();\n    }\n\n    public void Dispose()\n    {\n        _context.Dispose();\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/unit-of-work/#2-unit-of-work-patternin-avantajlar-nelerdir","title":"2. Unit of Work Pattern'in avantajlar\u0131 nelerdir?","text":"<p>Cevap: Unit of Work Pattern'in avantajlar\u0131: - Transaction y\u00f6netiminin merkezile\u015ftirilmesi - Veritaban\u0131 i\u015flemlerinin tutarl\u0131l\u0131\u011f\u0131n\u0131n sa\u011flanmas\u0131 - Kod tekrar\u0131n\u0131n azalmas\u0131 - Test edilebilirli\u011fin artmas\u0131 - Repository'ler aras\u0131 i\u015flemlerin kolay y\u00f6netimi</p> <p>\u00d6rnek Kod: <pre><code>public class OrderService\n{\n    private readonly IUnitOfWork _unitOfWork;\n\n    public OrderService(IUnitOfWork unitOfWork)\n    {\n        _unitOfWork = unitOfWork;\n    }\n\n    public async Task CreateOrderAsync(Order order, List&lt;Product&gt; products)\n    {\n        try\n        {\n            // T\u00fcm i\u015flemler tek bir transaction alt\u0131nda\n            _unitOfWork.Orders.Add(order);\n\n            foreach (var product in products)\n            {\n                product.Stock -= order.Quantity;\n                _unitOfWork.Products.Update(product);\n            }\n\n            await _unitOfWork.SaveChangesAsync();\n        }\n        catch (Exception)\n        {\n            // Hata durumunda t\u00fcm de\u011fi\u015fiklikler geri al\u0131n\u0131r\n            throw;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/unit-of-work/#3-unit-of-work-patternde-transaction-yonetimi-nasl-yaplr","title":"3. Unit of Work Pattern'de transaction y\u00f6netimi nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Transaction y\u00f6netimi i\u00e7in: - DbContext transaction'lar\u0131 - TransactionScope kullan\u0131m\u0131 - Manuel transaction y\u00f6netimi - Nested transaction'lar</p> <p>\u00d6rnek Kod: <pre><code>public class UnitOfWork : IUnitOfWork\n{\n    private readonly DbContext _context;\n    private IDbContextTransaction _transaction;\n\n    public UnitOfWork(DbContext context)\n    {\n        _context = context;\n    }\n\n    public void BeginTransaction()\n    {\n        _transaction = _context.Database.BeginTransaction();\n    }\n\n    public void Commit()\n    {\n        try\n        {\n            _context.SaveChanges();\n            _transaction?.Commit();\n        }\n        catch\n        {\n            Rollback();\n            throw;\n        }\n    }\n\n    public void Rollback()\n    {\n        _transaction?.Rollback();\n    }\n\n    public async Task CommitAsync()\n    {\n        try\n        {\n            await _context.SaveChangesAsync();\n            await _transaction?.CommitAsync();\n        }\n        catch\n        {\n            await RollbackAsync();\n            throw;\n        }\n    }\n\n    public async Task RollbackAsync()\n    {\n        if (_transaction != null)\n            await _transaction.RollbackAsync();\n    }\n}\n\n// Kullan\u0131m\npublic class OrderService\n{\n    private readonly IUnitOfWork _unitOfWork;\n\n    public async Task ProcessOrderAsync(Order order)\n    {\n        _unitOfWork.BeginTransaction();\n        try\n        {\n            // \u0130\u015flemler\n            await _unitOfWork.CommitAsync();\n        }\n        catch\n        {\n            await _unitOfWork.RollbackAsync();\n            throw;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/unit-of-work/#4-unit-of-work-patternde-performans-optimizasyonu-nasl-yaplr","title":"4. Unit of Work Pattern'de performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Performans optimizasyonu i\u00e7in: - Batch i\u015flemleri - Asenkron operasyonlar - Caching mekanizmalar\u0131 - Lazy loading - Change tracking optimizasyonu</p> <p>\u00d6rnek Kod: <pre><code>public class UnitOfWork : IUnitOfWork\n{\n    private readonly DbContext _context;\n    private readonly MemoryCache _cache;\n\n    public UnitOfWork(DbContext context)\n    {\n        _context = context;\n        _cache = new MemoryCache(new MemoryCacheOptions());\n\n        // Change tracking optimizasyonu\n        _context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;\n    }\n\n    public async Task&lt;int&gt; SaveChangesAsync()\n    {\n        // Batch i\u015flemleri i\u00e7in\n        _context.ChangeTracker.AutoDetectChangesEnabled = false;\n\n        try\n        {\n            var result = await _context.SaveChangesAsync();\n\n            // Cache temizleme\n            _cache.Remove(\"products_all\");\n            _cache.Remove(\"orders_all\");\n\n            return result;\n        }\n        finally\n        {\n            _context.ChangeTracker.AutoDetectChangesEnabled = true;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/unit-of-work/#5-unit-of-work-pattern-ile-repository-pattern-nasl-birlikte-kullanlr","title":"5. Unit of Work Pattern ile Repository Pattern nas\u0131l birlikte kullan\u0131l\u0131r?","text":"<p>Cevap: Unit of Work ve Repository Pattern'lerin birlikte kullan\u0131m\u0131: - Unit of Work repository'leri y\u00f6netir - Repository'ler veri eri\u015fimini sa\u011flar - Transaction y\u00f6netimi Unit of Work'te yap\u0131l\u0131r - Dependency Injection ile entegrasyon</p> <p>\u00d6rnek Kod: <pre><code>public class OrderService\n{\n    private readonly IUnitOfWork _unitOfWork;\n\n    public OrderService(IUnitOfWork unitOfWork)\n    {\n        _unitOfWork = unitOfWork;\n    }\n\n    public async Task ProcessOrderAsync(Order order)\n    {\n        try\n        {\n            // \u00dcr\u00fcn stok kontrol\u00fc\n            var product = await _unitOfWork.Products.GetByIdAsync(order.ProductId);\n            if (product.Stock &lt; order.Quantity)\n                throw new Exception(\"Yetersiz stok\");\n\n            // Sipari\u015f olu\u015fturma\n            _unitOfWork.Orders.Add(order);\n\n            // Stok g\u00fcncelleme\n            product.Stock -= order.Quantity;\n            _unitOfWork.Products.Update(product);\n\n            // M\u00fc\u015fteri puan\u0131 g\u00fcncelleme\n            var customer = await _unitOfWork.Customers.GetByIdAsync(order.CustomerId);\n            customer.Points += order.TotalAmount / 10;\n            _unitOfWork.Customers.Update(customer);\n\n            // T\u00fcm de\u011fi\u015fiklikleri kaydet\n            await _unitOfWork.SaveChangesAsync();\n        }\n        catch (Exception)\n        {\n            // Hata durumunda t\u00fcm de\u011fi\u015fiklikler geri al\u0131n\u0131r\n            throw;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/design-patterns/unit-of-work/#best-practices","title":"Best Practices","text":"<ol> <li>Transaction Y\u00f6netimi</li> <li>Transaction'lar\u0131 do\u011fru y\u00f6netin</li> <li>Hata durumlar\u0131n\u0131 kontrol edin</li> <li>Nested transaction'lardan ka\u00e7\u0131n\u0131n</li> <li> <p>Transaction scope'lar\u0131n\u0131 s\u0131n\u0131rlay\u0131n</p> </li> <li> <p>Performans</p> </li> <li>Batch i\u015flemleri kullan\u0131n</li> <li>Asenkron operasyonlar tercih edin</li> <li>Change tracking'i optimize edin</li> <li> <p>Caching mekanizmalar\u0131 ekleyin</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Mock Unit of Work olu\u015fturun</li> <li>Unit testler yaz\u0131n</li> <li>Integration testler yap\u0131n</li> <li>Test coverage'\u0131 takip edin</li> </ol>"},{"location":"mid-level/design-patterns/unit-of-work/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Unit of Work Pattern</li> <li>Implementing Unit of Work Pattern</li> <li>Unit of Work Best Practices </li> </ul>"},{"location":"mid-level/devops/ci-cd-pipelines/","title":"CI/CD Pipelines","text":""},{"location":"mid-level/devops/ci-cd-pipelines/#giris","title":"Giri\u015f","text":"<p>CI/CD (Continuous Integration/Continuous Deployment) pipelines, modern software development'da code quality, automated testing ve reliable deployment i\u00e7in temel ara\u00e7lard\u0131r. Mid-level geli\u015ftiriciler i\u00e7in CI/CD pipeline'lar\u0131n\u0131 tasarlamak ve implement etmek, software delivery s\u00fcre\u00e7lerini optimize etmede kritiktir. Bu dosya, pipeline design, automation strategies, testing integration ve deployment strategies'leri kapsar.</p>"},{"location":"mid-level/devops/ci-cd-pipelines/#cicd-pipeline-design","title":"CI/CD Pipeline Design","text":""},{"location":"mid-level/devops/ci-cd-pipelines/#1-pipeline-architecture","title":"1. Pipeline Architecture","text":"<p>Multi-stage CI/CD pipeline tasar\u0131m\u0131.</p> <pre><code># Azure DevOps Pipeline - Multi-stage CI/CD\ntrigger:\n  branches:\n    include:\n    - main\n    - develop\n    - feature/*\n\nvariables:\n  solution: '**/*.sln'\n  buildPlatform: 'Any CPU'\n  buildConfiguration: 'Release'\n  dotNetVersion: '8.0.x'\n  testResultsFormat: 'VSTest'\n  testResultsPublishTarget: 'TestResults'\n\nstages:\n- stage: Build\n  displayName: 'Build and Test'\n  jobs:\n  - job: Build\n    displayName: 'Build .NET Application'\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n    - task: UseDotNet@2\n      displayName: 'Use .NET 8.0'\n      inputs:\n        version: '$(dotNetVersion)'\n\n    - script: |\n        dotnet --version\n        dotnet --list-sdks\n      displayName: 'Display .NET Version'\n\n    - task: DotNetCoreCLI@2\n      displayName: 'Restore NuGet packages'\n      inputs:\n        command: 'restore'\n        projects: '$(solution)'\n        feedsToUse: 'select'\n\n    - task: DotNetCoreCLI@2\n      displayName: 'Build solution'\n      inputs:\n        command: 'build'\n        projects: '$(solution)'\n        arguments: '--configuration $(buildConfiguration) --no-restore'\n\n    - task: DotNetCoreCLI@2\n      displayName: 'Run unit tests'\n      inputs:\n        command: 'test'\n        projects: '**/*Tests/*.csproj'\n        arguments: '--configuration $(buildConfiguration) --no-build --collect:\"XPlat Code Coverage\" --results-directory $(Agent.TempDirectory)/TestResults'\n        publishTestResults: true\n\n    - task: PublishCodeCoverageResults@1\n      displayName: 'Publish code coverage'\n      inputs:\n        codeCoverageTool: 'Cobertura'\n        summaryFileLocation: '$(Agent.TempDirectory)/TestResults/*/coverage.cobertura.xml'\n\n    - task: DotNetCoreCLI@2\n      displayName: 'Publish application'\n      inputs:\n        command: 'publish'\n        projects: '**/MyApp/*.csproj'\n        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish --no-build'\n        publishWebProjects: true\n\n    - task: PublishBuildArtifacts@1\n      displayName: 'Publish build artifacts'\n      inputs:\n        pathToPublish: '$(Build.ArtifactStagingDirectory)/publish'\n        artifactName: 'drop'\n\n    - task: PublishTestResults@2\n      displayName: 'Publish test results'\n      inputs:\n        testResultsFormat: '$(testResultsFormat)'\n        testResultsFiles: '**/TestResults/*.trx'\n        testRunTitle: '$(Build.DefinitionName) - $(Build.BuildNumber)'\n        failTaskOnFailedTests: true\n        mergeTestResults: true\n\n- stage: Security\n  displayName: 'Security Analysis'\n  dependsOn: Build\n  condition: succeeded()\n  jobs:\n  - job: SecurityScan\n    displayName: 'Security Scanning'\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n    - task: UseDotNet@2\n      inputs:\n        version: '$(dotNetVersion)'\n\n    - script: |\n        dotnet tool install --global dotnet-security-scan\n        dotnet security-scan --project-path $(Build.SourcesDirectory)\n      displayName: 'Run security scan'\n\n    - script: |\n        dotnet tool install --global dotnet-outdated-tool\n        dotnet outdated --project-path $(Build.SourcesDirectory) --fail-on-updates\n      displayName: 'Check for outdated packages'\n\n    - task: SonarQubePrepare@4\n      displayName: 'Prepare SonarQube analysis'\n      inputs:\n        SonarQube: 'SonarQube'\n        scannerMode: 'CLI'\n        configMode: 'manual'\n        cliProjectKey: 'myapp'\n        cliProjectName: 'MyApp'\n        cliSources: '$(Build.SourcesDirectory)'\n\n    - task: SonarQubeAnalyze@4\n      displayName: 'Run SonarQube analysis'\n\n    - task: SonarQubePublish@4\n      displayName: 'Publish SonarQube results'\n      inputs:\n        pollingTimeoutSec: '300'\n\n- stage: Quality\n  displayName: 'Code Quality'\n  dependsOn: Security\n  condition: succeeded()\n  jobs:\n  - job: CodeQuality\n    displayName: 'Code Quality Analysis'\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n    - task: UseDotNet@2\n      inputs:\n        version: '$(dotNetVersion)'\n\n    - script: |\n        dotnet tool install --global dotnet-format\n        dotnet format --verify-no-changes --verbosity diagnostic\n      displayName: 'Check code formatting'\n\n    - script: |\n        dotnet tool install --global dotnet-ef\n        dotnet ef migrations list --project $(Build.SourcesDirectory)/src/MyApp.Infrastructure\n      displayName: 'Check database migrations'\n\n    - task: PublishBuildArtifacts@1\n      displayName: 'Publish quality report'\n      inputs:\n        pathToPublish: '$(Build.ArtifactStagingDirectory)'\n        artifactName: 'quality-report'\n\n- stage: DeployStaging\n  displayName: 'Deploy to Staging'\n  dependsOn: Quality\n  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))\n  jobs:\n  - deployment: DeployStaging\n    displayName: 'Deploy to Staging Environment'\n    environment: 'staging'\n    pool:\n      vmImage: 'ubuntu-latest'\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - download: current\n            artifact: drop\n\n          - task: AzureWebApp@1\n            displayName: 'Deploy to Azure Web App (Staging)'\n            inputs:\n              azureSubscription: 'Azure Subscription'\n              appName: 'myapp-staging'\n              package: '$(Pipeline.Workspace)/drop/**/*.zip'\n              appType: 'webApp'\n\n          - script: |\n              # Run smoke tests\n              curl -f https://myapp-staging.azurewebsites.net/health\n            displayName: 'Smoke test'\n\n          - script: |\n              # Run integration tests\n              dotnet test --filter Category=Integration --logger trx --results-directory $(Agent.TempDirectory)/IntegrationTestResults\n            displayName: 'Integration tests'\n\n          - task: PublishTestResults@2\n            displayName: 'Publish integration test results'\n            inputs:\n              testResultsFormat: 'VSTest'\n              testResultsFiles: '$(Agent.TempDirectory)/IntegrationTestResults/*.trx'\n\n- stage: DeployProduction\n  displayName: 'Deploy to Production'\n  dependsOn: DeployStaging\n  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))\n  jobs:\n  - deployment: DeployProduction\n    displayName: 'Deploy to Production Environment'\n    environment: 'production'\n    pool:\n      vmImage: 'ubuntu-latest'\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - download: current\n            artifact: drop\n\n          - task: AzureWebApp@1\n            displayName: 'Deploy to Azure Web App (Production)'\n            inputs:\n              azureSubscription: 'Azure Subscription'\n              appName: 'myapp-production'\n              package: '$(Pipeline.Workspace)/drop/**/*.zip'\n              appType: 'webApp'\n\n          - script: |\n              # Verify deployment\n              curl -f https://myapp-production.azurewebsites.net/health\n            displayName: 'Health check'\n\n          - task: PostDeploymentTest@1\n            displayName: 'Post-deployment tests'\n            inputs:\n              testScript: '$(Build.SourcesDirectory)/scripts/post-deployment-tests.ps1'\n              testResultsFile: '$(Agent.TempDirectory)/PostDeploymentTestResults.xml'\n</code></pre>"},{"location":"mid-level/devops/ci-cd-pipelines/#2-github-actions-workflow","title":"2. GitHub Actions Workflow","text":"<p>GitHub Actions ile CI/CD pipeline.</p> <pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop, feature/* ]\n  pull_request:\n    branches: [ main, develop ]\n\nenv:\n  DOTNET_VERSION: '8.0.x'\n  SOLUTION_FILE: '**/*.sln'\n  TEST_PATTERN: '**/*Tests/*.csproj'\n  MAIN_PROJECT: '**/MyApp/*.csproj'\n\njobs:\n  # Build and Test Job\n  build-and-test:\n    name: Build and Test\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: ${{ env.DOTNET_VERSION }}\n\n    - name: Restore dependencies\n      run: dotnet restore ${{ env.SOLUTION_FILE }}\n\n    - name: Build solution\n      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore\n\n    - name: Run unit tests\n      run: |\n        dotnet test ${{ env.TEST_PATTERN }} \\\n          --configuration Release \\\n          --no-build \\\n          --collect:\"XPlat Code Coverage\" \\\n          --results-directory $(pwd)/TestResults \\\n          --logger trx\n\n    - name: Publish test results\n      uses: actions/upload-artifact@v4\n      with:\n        name: test-results\n        path: TestResults/\n\n    - name: Generate coverage report\n      run: |\n        dotnet tool install --global dotnet-reportgenerator-globaltool\n        reportgenerator \\\n          -reports:TestResults/*/coverage.cobertura.xml \\\n          -targetdir:coverage-report \\\n          -reporttypes:Html\n\n    - name: Publish coverage report\n      uses: actions/upload-artifact@v4\n      with:\n        name: coverage-report\n        path: coverage-report/\n\n    - name: Publish application\n      run: |\n        dotnet publish ${{ env.MAIN_PROJECT }} \\\n          --configuration Release \\\n          --output $(pwd)/publish \\\n          --no-build\n\n    - name: Upload build artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: build-artifacts\n        path: publish/\n\n  # Security Analysis Job\n  security-analysis:\n    name: Security Analysis\n    runs-on: ubuntu-latest\n    needs: build-and-test\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: ${{ env.DOTNET_VERSION }}\n\n    - name: Run security scan\n      run: |\n        dotnet tool install --global dotnet-security-scan\n        dotnet security-scan --project-path .\n\n    - name: Check for vulnerabilities\n      run: |\n        dotnet tool install --global dotnet-outdated-tool\n        dotnet outdated --project-path . --fail-on-updates\n\n    - name: Run SonarQube analysis\n      uses: sonarqube-quality-gate-action@master\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n      with:\n        args: &gt;\n          -Dsonar.projectKey=myapp\n          -Dsonar.projectName=MyApp\n          -Dsonar.sources=.\n          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}\n\n  # Code Quality Job\n  code-quality:\n    name: Code Quality\n    runs-on: ubuntu-latest\n    needs: build-and-test\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: ${{ env.DOTNET_VERSION }}\n\n    - name: Check code formatting\n      run: |\n        dotnet tool install --global dotnet-format\n        dotnet format --verify-no-changes --verbosity diagnostic\n\n    - name: Run code analysis\n      run: |\n        dotnet tool install --global dotnet-analyzer\n        dotnet analyze --verbosity normal\n\n    - name: Check database migrations\n      run: |\n        dotnet tool install --global dotnet-ef\n        dotnet ef migrations list --project src/MyApp.Infrastructure\n\n  # Deploy to Staging Job\n  deploy-staging:\n    name: Deploy to Staging\n    runs-on: ubuntu-latest\n    needs: [build-and-test, security-analysis, code-quality]\n    if: github.ref == 'refs/heads/main'\n    environment: staging\n\n    steps:\n    - name: Download build artifacts\n      uses: actions/download-artifact@v4\n      with:\n        name: build-artifacts\n\n    - name: Deploy to Azure Web App\n      uses: azure/webapps-deploy@v3\n      with:\n        app-name: 'myapp-staging'\n        package: publish/\n        azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}\n\n    - name: Run smoke tests\n      run: |\n        # Wait for deployment\n        sleep 30\n\n        # Health check\n        curl -f https://myapp-staging.azurewebsites.net/health\n\n        # Basic functionality test\n        curl -f https://myapp-staging.azurewebsites.net/api/version\n\n    - name: Run integration tests\n      run: |\n        dotnet test --filter Category=Integration \\\n          --logger trx \\\n          --results-directory $(pwd)/IntegrationTestResults\n\n    - name: Upload integration test results\n      uses: actions/upload-artifact@v4\n      with:\n        name: integration-test-results\n        path: IntegrationTestResults/\n\n  # Deploy to Production Job\n  deploy-production:\n    name: Deploy to Production\n    runs-on: ubuntu-latest\n    needs: deploy-staging\n    if: github.ref == 'refs/heads/main'\n    environment: production\n\n    steps:\n    - name: Download build artifacts\n      uses: actions/download-artifact@v4\n      with:\n        name: build-artifacts\n\n    - name: Deploy to Azure Web App\n      uses: azure/webapps-deploy@v3\n      with:\n        app-name: 'myapp-production'\n        package: publish/\n        azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}\n\n    - name: Verify deployment\n      run: |\n        # Wait for deployment\n        sleep 30\n\n        # Health check\n        curl -f https://myapp-production.azurewebsites.net/health\n\n        # Performance check\n        curl -w \"@curl-format.txt\" -o /dev/null -s https://myapp-production.azurewebsites.net/api/version\n\n    - name: Run post-deployment tests\n      run: |\n        # Load test\n        dotnet tool install --global NBomber\n        nbomber run --config nbomber.json\n\n    - name: Notify deployment success\n      run: |\n        # Send notification to Slack/Teams\n        curl -X POST -H 'Content-type: application/json' \\\n          --data '{\"text\":\"Production deployment successful! \ud83d\ude80\"}' \\\n          ${{ secrets.SLACK_WEBHOOK_URL }}\n</code></pre>"},{"location":"mid-level/devops/ci-cd-pipelines/#testing-integration","title":"Testing Integration","text":""},{"location":"mid-level/devops/ci-cd-pipelines/#1-automated-testing-pipeline","title":"1. Automated Testing Pipeline","text":"<p>Testing pipeline'lar\u0131 i\u00e7in configuration.</p> <pre><code>public class TestingPipelineConfiguration\n{\n    public static void ConfigureTestingServices(IServiceCollection services, IConfiguration configuration)\n    {\n        // Unit Testing\n        services.AddScoped&lt;IUnitTestRunner, UnitTestRunner&gt;();\n\n        // Integration Testing\n        services.AddScoped&lt;IIntegrationTestRunner, IntegrationTestRunner&gt;();\n\n        // Performance Testing\n        services.AddScoped&lt;IPerformanceTestRunner, PerformanceTestRunner&gt;();\n\n        // Security Testing\n        services.AddScoped&lt;ISecurityTestRunner, SecurityTestRunner&gt;();\n    }\n}\n\npublic interface ITestRunner\n{\n    Task&lt;TestResult&gt; RunTestsAsync(string testType, TestConfiguration config);\n}\n\npublic class UnitTestRunner : ITestRunner\n{\n    private readonly ILogger&lt;UnitTestRunner&gt; _logger;\n\n    public UnitTestRunner(ILogger&lt;UnitTestRunner&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task&lt;TestResult&gt; RunTestsAsync(string testType, TestConfiguration config)\n    {\n        try\n        {\n            _logger.LogInformation(\"Starting unit tests execution\");\n\n            var testResult = new TestResult\n            {\n                TestType = \"Unit\",\n                StartTime = DateTime.UtcNow,\n                Status = TestStatus.Running\n            };\n\n            // Run tests using xUnit or NUnit\n            var process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"dotnet\",\n                    Arguments = $\"test --filter Category=Unit --logger trx --results-directory {config.ResultsDirectory}\",\n                    WorkingDirectory = config.ProjectPath,\n                    RedirectStandardOutput = true,\n                    RedirectStandardError = true,\n                    UseShellExecute = false\n                }\n            };\n\n            process.Start();\n            var output = await process.StandardOutput.ReadToEndAsync();\n            var error = await process.StandardError.ReadToEndAsync();\n            await process.WaitForExitAsync();\n\n            testResult.EndTime = DateTime.UtcNow;\n            testResult.Duration = testResult.EndTime - testResult.StartTime;\n            testResult.ExitCode = process.ExitCode;\n            testResult.Output = output;\n            testResult.Error = error;\n            testResult.Status = process.ExitCode == 0 ? TestStatus.Passed : TestStatus.Failed;\n\n            _logger.LogInformation(\"Unit tests completed with status: {Status}\", testResult.Status);\n            return testResult;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error running unit tests\");\n            return new TestResult\n            {\n                TestType = \"Unit\",\n                Status = TestStatus.Error,\n                Error = ex.Message\n            };\n        }\n    }\n}\n\npublic class IntegrationTestRunner : ITestRunner\n{\n    private readonly ILogger&lt;IntegrationTestRunner&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public IntegrationTestRunner(\n        ILogger&lt;IntegrationTestRunner&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public async Task&lt;TestResult&gt; RunTestsAsync(string testType, TestConfiguration config)\n    {\n        try\n        {\n            _logger.LogInformation(\"Starting integration tests execution\");\n\n            var testResult = new TestResult\n            {\n                TestType = \"Integration\",\n                StartTime = DateTime.UtcNow,\n                Status = TestStatus.Running\n            };\n\n            // Setup test environment\n            await SetupTestEnvironmentAsync();\n\n            // Run integration tests\n            var process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"dotnet\",\n                    Arguments = $\"test --filter Category=Integration --logger trx --results-directory {config.ResultsDirectory}\",\n                    WorkingDirectory = config.ProjectPath,\n                    RedirectStandardOutput = true,\n                    RedirectStandardError = true,\n                    UseShellExecute = false,\n                    EnvironmentVariables = \n                    {\n                        [\"ASPNETCORE_ENVIRONMENT\"] = \"Testing\",\n                        [\"ConnectionStrings__DefaultConnection\"] = config.TestConnectionString\n                    }\n                }\n            };\n\n            process.Start();\n            var output = await process.StandardOutput.ReadToEndAsync();\n            var error = await process.StandardError.ReadToEndAsync();\n            await process.WaitForExitAsync();\n\n            // Cleanup test environment\n            await CleanupTestEnvironmentAsync();\n\n            testResult.EndTime = DateTime.UtcNow;\n            testResult.Duration = testResult.EndTime - testResult.StartTime;\n            testResult.ExitCode = process.ExitCode;\n            testResult.Output = output;\n            testResult.Error = error;\n            testResult.Status = process.ExitCode == 0 ? TestStatus.Passed : TestStatus.Failed;\n\n            _logger.LogInformation(\"Integration tests completed with status: {Status}\", testResult.Status);\n            return testResult;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error running integration tests\");\n            return new TestResult\n            {\n                TestType = \"Integration\",\n                Status = TestStatus.Error,\n                Error = ex.Message\n            };\n        }\n    }\n\n    private async Task SetupTestEnvironmentAsync()\n    {\n        // Setup test database\n        // Setup test services\n        // Setup test data\n        await Task.Delay(1000); // Simulate setup time\n    }\n\n    private async Task CleanupTestEnvironmentAsync()\n    {\n        // Cleanup test data\n        // Cleanup test services\n        await Task.Delay(500); // Simulate cleanup time\n    }\n}\n\npublic class TestResult\n{\n    public string TestType { get; set; }\n    public TestStatus Status { get; set; }\n    public DateTime StartTime { get; set; }\n    public DateTime EndTime { get; set; }\n    public TimeSpan Duration { get; set; }\n    public int ExitCode { get; set; }\n    public string Output { get; set; }\n    public string Error { get; set; }\n}\n\npublic enum TestStatus\n{\n    NotStarted,\n    Running,\n    Passed,\n    Failed,\n    Error\n}\n\npublic class TestConfiguration\n{\n    public string ProjectPath { get; set; }\n    public string ResultsDirectory { get; set; }\n    public string TestConnectionString { get; set; }\n    public int TimeoutMinutes { get; set; } = 30;\n}\n</code></pre>"},{"location":"mid-level/devops/ci-cd-pipelines/#2-test-results-processing","title":"2. Test Results Processing","text":"<p>Test sonu\u00e7lar\u0131n\u0131 i\u015fleyen ve raporlayan servis.</p> <pre><code>public class TestResultsProcessor\n{\n    private readonly ILogger&lt;TestResultsProcessor&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public TestResultsProcessor(\n        ILogger&lt;TestResultsProcessor&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public async Task&lt;TestSummary&gt; ProcessTestResultsAsync(string resultsDirectory)\n    {\n        try\n        {\n            _logger.LogInformation(\"Processing test results from {Directory}\", resultsDirectory);\n\n            var testSummary = new TestSummary\n            {\n                ProcessedAt = DateTime.UtcNow,\n                TotalTests = 0,\n                PassedTests = 0,\n                FailedTests = 0,\n                SkippedTests = 0,\n                TestResults = new List&lt;TestResultDetail&gt;()\n            };\n\n            var trxFiles = Directory.GetFiles(resultsDirectory, \"*.trx\", SearchOption.AllDirectories);\n\n            foreach (var trxFile in trxFiles)\n            {\n                var fileResults = await ProcessTrxFileAsync(trxFile);\n                testSummary.TestResults.AddRange(fileResults);\n\n                testSummary.TotalTests += fileResults.Count;\n                testSummary.PassedTests += fileResults.Count(r =&gt; r.Outcome == \"Passed\");\n                testSummary.FailedTests += fileResults.Count(r =&gt; r.Outcome == \"Failed\");\n                testSummary.SkippedTests += fileResults.Count(r =&gt; r.Outcome == \"NotExecuted\");\n            }\n\n            // Calculate success rate\n            testSummary.SuccessRate = testSummary.TotalTests &gt; 0 \n                ? (double)testSummary.PassedTests / testSummary.TotalTests * 100 \n                : 0;\n\n            _logger.LogInformation(\"Test results processed. Total: {Total}, Passed: {Passed}, Failed: {Failed}, Success Rate: {SuccessRate:F2}%\",\n                testSummary.TotalTests, testSummary.PassedTests, testSummary.FailedTests, testSummary.SuccessRate);\n\n            return testSummary;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error processing test results\");\n            throw;\n        }\n    }\n\n    private async Task&lt;List&lt;TestResultDetail&gt;&gt; ProcessTrxFileAsync(string trxFile)\n    {\n        var results = new List&lt;TestResultDetail&gt;();\n\n        try\n        {\n            var xmlDoc = new XmlDocument();\n            xmlDoc.Load(trxFile);\n\n            var testResults = xmlDoc.SelectNodes(\"//UnitTestResult\");\n\n            foreach (XmlNode testResult in testResults)\n            {\n                var result = new TestResultDetail\n                {\n                    TestName = testResult.Attributes[\"testName\"]?.Value,\n                    Outcome = testResult.Attributes[\"outcome\"]?.Value,\n                    Duration = TimeSpan.Parse(testResult.Attributes[\"duration\"]?.Value ?? \"00:00:00\"),\n                    StartTime = DateTime.Parse(testResult.Attributes[\"startTime\"]?.Value ?? DateTime.UtcNow.ToString()),\n                    EndTime = DateTime.Parse(testResult.Attributes[\"endTime\"]?.Value ?? DateTime.UtcNow.ToString()),\n                    ComputerName = testResult.Attributes[\"computerName\"]?.Value,\n                    TestListId = testResult.Attributes[\"testListId\"]?.Value\n                };\n\n                // Extract error message if test failed\n                if (result.Outcome == \"Failed\")\n                {\n                    var outputNode = testResult.SelectSingleNode(\".//Output\");\n                    if (outputNode != null)\n                    {\n                        var errorInfoNode = outputNode.SelectSingleNode(\".//ErrorInfo\");\n                        if (errorInfoNode != null)\n                        {\n                            var messageNode = errorInfoNode.SelectSingleNode(\".//Message\");\n                            var stackTraceNode = errorInfoNode.SelectSingleNode(\".//StackTrace\");\n\n                            result.ErrorMessage = messageNode?.InnerText;\n                            result.StackTrace = stackTraceNode?.InnerText;\n                        }\n                    }\n                }\n\n                results.Add(result);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error processing TRX file {File}\", trxFile);\n        }\n\n        return results;\n    }\n\n    public async Task GenerateTestReportAsync(TestSummary summary, string outputPath)\n    {\n        try\n        {\n            var report = new StringBuilder();\n\n            report.AppendLine(\"# Test Execution Report\");\n            report.AppendLine($\"Generated: {summary.ProcessedAt:yyyy-MM-dd HH:mm:ss UTC}\");\n            report.AppendLine();\n\n            report.AppendLine(\"## Summary\");\n            report.AppendLine($\"- Total Tests: {summary.TotalTests}\");\n            report.AppendLine($\"- Passed: {summary.PassedTests}\");\n            report.AppendLine($\"- Failed: {summary.FailedTests}\");\n            report.AppendLine($\"- Skipped: {summary.SkippedTests}\");\n            report.AppendLine($\"- Success Rate: {summary.SuccessRate:F2}%\");\n            report.AppendLine();\n\n            if (summary.FailedTests &gt; 0)\n            {\n                report.AppendLine(\"## Failed Tests\");\n                var failedTests = summary.TestResults.Where(r =&gt; r.Outcome == \"Failed\");\n\n                foreach (var test in failedTests)\n                {\n                    report.AppendLine($\"### {test.TestName}\");\n                    report.AppendLine($\"- Duration: {test.Duration}\");\n                    report.AppendLine($\"- Error: {test.ErrorMessage}\");\n                    if (!string.IsNullOrEmpty(test.StackTrace))\n                    {\n                        report.AppendLine($\"- Stack Trace: ```{test.StackTrace}```\");\n                    }\n                    report.AppendLine();\n                }\n            }\n\n            await File.WriteAllTextAsync(outputPath, report.ToString());\n            _logger.LogInformation(\"Test report generated at {Path}\", outputPath);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating test report\");\n            throw;\n        }\n    }\n}\n\npublic class TestSummary\n{\n    public DateTime ProcessedAt { get; set; }\n    public int TotalTests { get; set; }\n    public int PassedTests { get; set; }\n    public int FailedTests { get; set; }\n    public int SkippedTests { get; set; }\n    public double SuccessRate { get; set; }\n    public List&lt;TestResultDetail&gt; TestResults { get; set; } = new List&lt;TestResultDetail&gt;();\n}\n\npublic class TestResultDetail\n{\n    public string TestName { get; set; }\n    public string Outcome { get; set; }\n    public TimeSpan Duration { get; set; }\n    public DateTime StartTime { get; set; }\n    public DateTime EndTime { get; set; }\n    public string ComputerName { get; set; }\n    public string TestListId { get; set; }\n    public string ErrorMessage { get; set; }\n    public string StackTrace { get; set; }\n}\n</code></pre>"},{"location":"mid-level/devops/ci-cd-pipelines/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"mid-level/devops/ci-cd-pipelines/#1-blue-green-deployment","title":"1. Blue-Green Deployment","text":"<p>Blue-green deployment implementasyonu.</p> <pre><code>public class BlueGreenDeploymentService\n{\n    private readonly ILogger&lt;BlueGreenDeploymentService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IAzureWebAppService _azureWebAppService;\n    private readonly ILoadBalancerService _loadBalancerService;\n\n    public BlueGreenDeploymentService(\n        ILogger&lt;BlueGreenDeploymentService&gt; logger,\n        IConfiguration configuration,\n        IAzureWebAppService azureWebAppService,\n        ILoadBalancerService loadBalancerService)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _azureWebAppService = azureWebAppService;\n        _loadBalancerService = loadBalancerService;\n    }\n\n    public async Task&lt;DeploymentResult&gt; DeployAsync(DeploymentRequest request)\n    {\n        try\n        {\n            _logger.LogInformation(\"Starting blue-green deployment for {Application}\", request.ApplicationName);\n\n            var deploymentResult = new DeploymentResult\n            {\n                DeploymentId = Guid.NewGuid().ToString(),\n                StartTime = DateTime.UtcNow,\n                Status = DeploymentStatus.InProgress\n            };\n\n            // Determine current active environment\n            var currentEnvironment = await DetermineCurrentEnvironmentAsync(request.ApplicationName);\n            var targetEnvironment = currentEnvironment == \"blue\" ? \"green\" : \"blue\";\n\n            _logger.LogInformation(\"Current environment: {Current}, Target environment: {Target}\", \n                currentEnvironment, targetEnvironment);\n\n            // Deploy to target environment\n            var deploymentSuccess = await DeployToEnvironmentAsync(request, targetEnvironment);\n            if (!deploymentSuccess)\n            {\n                deploymentResult.Status = DeploymentStatus.Failed;\n                deploymentResult.ErrorMessage = \"Failed to deploy to target environment\";\n                return deploymentResult;\n            }\n\n            // Run health checks on target environment\n            var healthCheckPassed = await RunHealthChecksAsync(request.ApplicationName, targetEnvironment);\n            if (!healthCheckPassed)\n            {\n                deploymentResult.Status = DeploymentStatus.Failed;\n                deploymentResult.ErrorMessage = \"Health checks failed on target environment\";\n                return deploymentResult;\n            }\n\n            // Run smoke tests\n            var smokeTestsPassed = await RunSmokeTestsAsync(request.ApplicationName, targetEnvironment);\n            if (!smokeTestsPassed)\n            {\n                deploymentResult.Status = DeploymentStatus.Failed;\n                deploymentResult.ErrorMessage = \"Smoke tests failed on target environment\";\n                return deploymentResult;\n            }\n\n            // Switch traffic to target environment\n            var trafficSwitchSuccess = await SwitchTrafficAsync(request.ApplicationName, targetEnvironment);\n            if (!trafficSwitchSuccess)\n            {\n                deploymentResult.Status = DeploymentStatus.Failed;\n                deploymentResult.ErrorMessage = \"Failed to switch traffic to target environment\";\n                return deploymentResult;\n            }\n\n            // Monitor target environment\n            var monitoringSuccess = await MonitorEnvironmentAsync(request.ApplicationName, targetEnvironment);\n            if (!monitoringSuccess)\n            {\n                _logger.LogWarning(\"Monitoring detected issues, initiating rollback\");\n                await RollbackDeploymentAsync(request.ApplicationName, currentEnvironment);\n\n                deploymentResult.Status = DeploymentStatus.RolledBack;\n                deploymentResult.ErrorMessage = \"Deployment rolled back due to monitoring issues\";\n                return deploymentResult;\n            }\n\n            // Cleanup old environment (optional)\n            if (request.CleanupOldEnvironment)\n            {\n                await CleanupEnvironmentAsync(request.ApplicationName, currentEnvironment);\n            }\n\n            deploymentResult.Status = DeploymentStatus.Completed;\n            deploymentResult.EndTime = DateTime.UtcNow;\n            deploymentResult.Duration = deploymentResult.EndTime - deploymentResult.StartTime;\n            deploymentResult.ActiveEnvironment = targetEnvironment;\n\n            _logger.LogInformation(\"Blue-green deployment completed successfully. Active environment: {Environment}\", \n                targetEnvironment);\n\n            return deploymentResult;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during blue-green deployment\");\n            return new DeploymentResult\n            {\n                DeploymentId = Guid.NewGuid().ToString(),\n                Status = DeploymentStatus.Failed,\n                ErrorMessage = ex.Message\n            };\n        }\n    }\n\n    private async Task&lt;string&gt; DetermineCurrentEnvironmentAsync(string applicationName)\n    {\n        // Check load balancer configuration to determine active environment\n        var activeEnvironment = await _loadBalancerService.GetActiveEnvironmentAsync(applicationName);\n        return activeEnvironment ?? \"blue\";\n    }\n\n    private async Task&lt;bool&gt; DeployToEnvironmentAsync(DeploymentRequest request, string environment)\n    {\n        try\n        {\n            var slotName = $\"{request.ApplicationName}-{environment}\";\n\n            // Deploy application to target slot\n            var deploymentResult = await _azureWebAppService.DeployAsync(\n                request.ApplicationName, \n                slotName, \n                request.PackagePath);\n\n            return deploymentResult.Success;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deploying to environment {Environment}\", environment);\n            return false;\n        }\n    }\n\n    private async Task&lt;bool&gt; RunHealthChecksAsync(string applicationName, string environment)\n    {\n        try\n        {\n            var slotName = $\"{applicationName}-{environment}\";\n            var healthCheckUrl = $\"https://{slotName}.azurewebsites.net/health\";\n\n            // Run health checks multiple times to ensure stability\n            for (int i = 0; i &lt; 3; i++)\n            {\n                using var client = new HttpClient();\n                var response = await client.GetAsync(healthCheckUrl);\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogWarning(\"Health check failed for environment {Environment}, attempt {Attempt}\", \n                        environment, i + 1);\n                    return false;\n                }\n\n                await Task.Delay(5000); // Wait 5 seconds between checks\n            }\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error running health checks for environment {Environment}\", environment);\n            return false;\n        }\n    }\n\n    private async Task&lt;bool&gt; RunSmokeTestsAsync(string applicationName, string environment)\n    {\n        try\n        {\n            var slotName = $\"{applicationName}-{environment}\";\n            var baseUrl = $\"https://{slotName}.azurewebsites.net\";\n\n            // Run basic functionality tests\n            var smokeTests = new[]\n            {\n                $\"{baseUrl}/api/version\",\n                $\"{baseUrl}/api/health\",\n                $\"{baseUrl}/api/status\"\n            };\n\n            using var client = new HttpClient();\n\n            foreach (var testUrl in smokeTests)\n            {\n                var response = await client.GetAsync(testUrl);\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogWarning(\"Smoke test failed for {Url}\", testUrl);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error running smoke tests for environment {Environment}\", environment);\n            return false;\n        }\n    }\n\n    private async Task&lt;bool&gt; SwitchTrafficAsync(string applicationName, string targetEnvironment)\n    {\n        try\n        {\n            // Update load balancer configuration to route traffic to target environment\n            var switchResult = await _loadBalancerService.SwitchTrafficAsync(applicationName, targetEnvironment);\n            return switchResult.Success;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error switching traffic to environment {Environment}\", targetEnvironment);\n            return false;\n        }\n    }\n\n    private async Task&lt;bool&gt; MonitorEnvironmentAsync(string applicationName, string environment)\n    {\n        try\n        {\n            // Monitor environment for specified duration\n            var monitoringDuration = TimeSpan.FromMinutes(5);\n            var startTime = DateTime.UtcNow;\n\n            while (DateTime.UtcNow - startTime &lt; monitoringDuration)\n            {\n                var healthCheck = await RunHealthChecksAsync(applicationName, environment);\n                if (!healthCheck)\n                {\n                    return false;\n                }\n\n                await Task.Delay(30000); // Check every 30 seconds\n            }\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error monitoring environment {Environment}\", environment);\n            return false;\n        }\n    }\n\n    private async Task RollbackDeploymentAsync(string applicationName, string rollbackEnvironment)\n    {\n        try\n        {\n            _logger.LogInformation(\"Rolling back deployment to environment {Environment}\", rollbackEnvironment);\n\n            // Switch traffic back to previous environment\n            await _loadBalancerService.SwitchTrafficAsync(applicationName, rollbackEnvironment);\n\n            _logger.LogInformation(\"Rollback completed successfully\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during rollback to environment {Environment}\", rollbackEnvironment);\n        }\n    }\n\n    private async Task CleanupEnvironmentAsync(string applicationName, string environment)\n    {\n        try\n        {\n            _logger.LogInformation(\"Cleaning up environment {Environment}\", environment);\n\n            // Stop the old environment to save costs\n            await _azureWebAppService.StopAsync(applicationName, $\"{applicationName}-{environment}\");\n\n            _logger.LogInformation(\"Environment cleanup completed\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error cleaning up environment {Environment}\", environment);\n        }\n    }\n}\n\npublic class DeploymentRequest\n{\n    public string ApplicationName { get; set; }\n    public string PackagePath { get; set; }\n    public bool CleanupOldEnvironment { get; set; } = true;\n    public TimeSpan HealthCheckTimeout { get; set; } = TimeSpan.FromMinutes(5);\n    public int MaxRetries { get; set; } = 3;\n}\n\npublic class DeploymentResult\n{\n    public string DeploymentId { get; set; }\n    public DeploymentStatus Status { get; set; }\n    public DateTime StartTime { get; set; }\n    public DateTime EndTime { get; set; }\n    public TimeSpan Duration { get; set; }\n    public string ActiveEnvironment { get; set; }\n    public string ErrorMessage { get; set; }\n}\n\npublic enum DeploymentStatus\n{\n    NotStarted,\n    InProgress,\n    Completed,\n    Failed,\n    RolledBack\n}\n</code></pre>"},{"location":"mid-level/devops/ci-cd-pipelines/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/devops/ci-cd-pipelines/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>CI/CD nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Continuous Integration/Continuous Deployment, code quality, automated testing, reliable deployment, faster delivery.</p> </li> <li> <p>CI vs CD aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: CI code integration ve testing, CD deployment automation. CI build ve test, CD deploy ve release.</p> </li> <li> <p>Pipeline stages nelerdir?</p> </li> <li> <p>Cevap: Build, Test, Security, Quality, Deploy Staging, Deploy Production, Monitoring.</p> </li> <li> <p>Blue-green deployment nedir?</p> </li> <li> <p>Cevap: Zero-downtime deployment strategy, iki environment, traffic switching, rollback capability.</p> </li> <li> <p>Pipeline security nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap: Secrets management, security scanning, code analysis, access control, audit logging.</li> </ol>"},{"location":"mid-level/devops/ci-cd-pipelines/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Multi-stage pipeline nas\u0131l tasarlan\u0131r?</li> <li> <p>Cevap: Stage dependencies, conditional execution, parallel jobs, artifact sharing, environment management.</p> </li> <li> <p>Test automation pipeline'da nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Unit tests, integration tests, smoke tests, performance tests, test result processing.</p> </li> <li> <p>Deployment rollback nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Health monitoring, automatic rollback, manual rollback, rollback triggers, state management.</p> </li> <li> <p>Pipeline monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Pipeline metrics, failure notifications, performance monitoring, deployment tracking.</p> </li> <li> <p>Pipeline optimization nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Parallel execution, caching, artifact optimization, dependency management, resource utilization.</li> </ol>"},{"location":"mid-level/devops/ci-cd-pipelines/#best-practices","title":"Best Practices","text":"<ol> <li>Pipeline Design</li> <li>Multi-stage pipeline kullan\u0131n</li> <li>Conditional execution implement edin</li> <li>Parallel jobs optimize edin</li> <li> <p>Artifact sharing yap\u0131n</p> </li> <li> <p>Testing Integration</p> </li> <li>Automated testing implement edin</li> <li>Test result processing yap\u0131n</li> <li>Coverage reporting ekleyin</li> <li> <p>Quality gates kurun</p> </li> <li> <p>Security &amp; Quality</p> </li> <li>Security scanning ekleyin</li> <li>Code analysis yap\u0131n</li> <li>Secrets management implement edin</li> <li> <p>Access control sa\u011flay\u0131n</p> </li> <li> <p>Deployment Strategy</p> </li> <li>Blue-green deployment kullan\u0131n</li> <li>Health checks implement edin</li> <li>Rollback capability sa\u011flay\u0131n</li> <li> <p>Monitoring ekleyin</p> </li> <li> <p>Monitoring &amp; Alerting</p> </li> <li>Pipeline metrics toplay\u0131n</li> <li>Failure notifications kurun</li> <li>Performance monitoring yap\u0131n</li> <li>Deployment tracking implement edin</li> </ol>"},{"location":"mid-level/devops/ci-cd-pipelines/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Azure DevOps Documentation</li> <li>GitHub Actions Documentation</li> <li>CI/CD Best Practices</li> <li>Pipeline Design Patterns</li> <li>Deployment Strategies</li> </ul>"},{"location":"mid-level/devops/deployment-strategies/","title":"Deployment Strategies","text":""},{"location":"mid-level/devops/deployment-strategies/#giris","title":"Giri\u015f","text":"<p>Deployment Strategies, uygulamalar\u0131n production environment'a g\u00fcvenli ve etkili bir \u015fekilde deploy edilmesi i\u00e7in kullan\u0131lan yakla\u015f\u0131mlard\u0131r. Mid-level geli\u015ftiriciler i\u00e7in deployment stratejilerini anlamak, zero-downtime deployment, rollback capability ve risk minimization i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, blue-green deployment, rolling deployment, canary deployment ve deployment automation konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/devops/deployment-strategies/#blue-green-deployment","title":"Blue-Green Deployment","text":""},{"location":"mid-level/devops/deployment-strategies/#1-blue-green-deployment-service","title":"1. Blue-Green Deployment Service","text":"<p>Blue-green deployment pattern'ini implement eden servis.</p> <pre><code>public interface IBlueGreenDeploymentService\n{\n    Task&lt;DeploymentResult&gt; DeployAsync(DeploymentRequest request);\n    Task&lt;bool&gt; SwitchTrafficAsync(string deploymentId, TrafficSwitchRequest request);\n    Task&lt;bool&gt; RollbackAsync(string deploymentId);\n    Task&lt;DeploymentStatus&gt; GetDeploymentStatusAsync(string deploymentId);\n}\n\npublic class BlueGreenDeploymentService : IBlueGreenDeploymentService\n{\n    private readonly ILogger&lt;BlueGreenDeploymentService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly ILoadBalancerService _loadBalancerService;\n    private readonly IHealthCheckService _healthCheckService;\n    private readonly IDeploymentRepository _deploymentRepository;\n\n    public BlueGreenDeploymentService(\n        ILogger&lt;BlueGreenDeploymentService&gt; logger,\n        IConfiguration configuration,\n        ILoadBalancerService loadBalancerService,\n        IHealthCheckService healthCheckService,\n        IDeploymentRepository deploymentRepository)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _loadBalancerService = loadBalancerService;\n        _healthCheckService = healthCheckService;\n        _deploymentRepository = deploymentRepository;\n    }\n\n    public async Task&lt;DeploymentResult&gt; DeployAsync(DeploymentRequest request)\n    {\n        try\n        {\n            _logger.LogInformation(\"Starting blue-green deployment for application {ApplicationName}\", \n                request.ApplicationName);\n\n            // Create deployment record\n            var deployment = new Deployment\n            {\n                Id = Guid.NewGuid().ToString(),\n                ApplicationName = request.ApplicationName,\n                Version = request.Version,\n                Environment = request.Environment,\n                Strategy = \"BlueGreen\",\n                Status = DeploymentStatus.InProgress,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            await _deploymentRepository.CreateAsync(deployment);\n\n            // Deploy to inactive environment (Green)\n            var deployResult = await DeployToEnvironmentAsync(request, deployment.Id);\n            if (!deployResult.Success)\n            {\n                deployment.Status = DeploymentStatus.Failed;\n                await _deploymentRepository.UpdateAsync(deployment);\n                return new DeploymentResult { Success = false, Error = deployResult.Error };\n            }\n\n            // Run health checks\n            var healthCheckResult = await RunHealthChecksAsync(request.HealthCheckUrl);\n            if (!healthCheckResult.Success)\n            {\n                _logger.LogWarning(\"Health checks failed for deployment {DeploymentId}\", deployment.Id);\n                deployment.Status = DeploymentStatus.HealthCheckFailed;\n                await _deploymentRepository.UpdateAsync(deployment);\n                return new DeploymentResult { Success = false, Error = \"Health checks failed\" };\n            }\n\n            // Run smoke tests\n            var smokeTestResult = await RunSmokeTestsAsync(request.SmokeTestUrl);\n            if (!smokeTestResult.Success)\n            {\n                _logger.LogWarning(\"Smoke tests failed for deployment {DeploymentId}\", deployment.Id);\n                deployment.Status = DeploymentStatus.SmokeTestFailed;\n                await _deploymentRepository.UpdateAsync(deployment);\n                return new DeploymentResult { Success = false, Error = \"Smoke tests failed\" };\n            }\n\n            deployment.Status = DeploymentStatus.Ready;\n            await _deploymentRepository.UpdateAsync(deployment);\n\n            _logger.LogInformation(\"Blue-green deployment completed successfully for {DeploymentId}\", deployment.Id);\n\n            return new DeploymentResult \n            { \n                Success = true, \n                DeploymentId = deployment.Id,\n                Status = deployment.Status\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during blue-green deployment for {ApplicationName}\", request.ApplicationName);\n            return new DeploymentResult { Success = false, Error = ex.Message };\n        }\n    }\n\n    public async Task&lt;bool&gt; SwitchTrafficAsync(string deploymentId, TrafficSwitchRequest request)\n    {\n        try\n        {\n            var deployment = await _deploymentRepository.GetByIdAsync(deploymentId);\n            if (deployment == null)\n            {\n                _logger.LogError(\"Deployment {DeploymentId} not found\", deploymentId);\n                return false;\n            }\n\n            if (deployment.Status != DeploymentStatus.Ready)\n            {\n                _logger.LogWarning(\"Cannot switch traffic for deployment {DeploymentId} with status {Status}\", \n                    deploymentId, deployment.Status);\n                return false;\n            }\n\n            _logger.LogInformation(\"Switching traffic for deployment {DeploymentId}\", deploymentId);\n\n            // Switch traffic to new environment\n            var switchResult = await _loadBalancerService.SwitchTrafficAsync(\n                request.CurrentEnvironment, \n                request.NewEnvironment, \n                request.Percentage);\n\n            if (switchResult)\n            {\n                deployment.Status = DeploymentStatus.Active;\n                deployment.TrafficSwitchAt = DateTime.UtcNow;\n                await _deploymentRepository.UpdateAsync(deployment);\n\n                _logger.LogInformation(\"Traffic switched successfully for deployment {DeploymentId}\", deploymentId);\n                return true;\n            }\n\n            return false;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error switching traffic for deployment {DeploymentId}\", deploymentId);\n            return false;\n        }\n    }\n\n    public async Task&lt;bool&gt; RollbackAsync(string deploymentId)\n    {\n        try\n        {\n            var deployment = await _deploymentRepository.GetByIdAsync(deploymentId);\n            if (deployment == null)\n            {\n                _logger.LogError(\"Deployment {DeploymentId} not found\", deploymentId);\n                return false;\n            }\n\n            _logger.LogInformation(\"Rolling back deployment {DeploymentId}\", deploymentId);\n\n            // Switch traffic back to previous environment\n            var rollbackResult = await _loadBalancerService.RollbackTrafficAsync(\n                deployment.Environment);\n\n            if (rollbackResult)\n            {\n                deployment.Status = DeploymentStatus.RolledBack;\n                deployment.RollbackAt = DateTime.UtcNow;\n                await _deploymentRepository.UpdateAsync(deployment);\n\n                _logger.LogInformation(\"Rollback completed successfully for deployment {DeploymentId}\", deploymentId);\n                return true;\n            }\n\n            return false;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rolling back deployment {DeploymentId}\", deploymentId);\n            return false;\n        }\n    }\n\n    private async Task&lt;DeploymentResult&gt; DeployToEnvironmentAsync(DeploymentRequest request, string deploymentId)\n    {\n        // Implementation for deploying to target environment\n        await Task.Delay(1000); // Simulate deployment\n        return new DeploymentResult { Success = true };\n    }\n\n    private async Task&lt;HealthCheckResult&gt; RunHealthChecksAsync(string healthCheckUrl)\n    {\n        // Implementation for running health checks\n        await Task.Delay(500); // Simulate health checks\n        return new HealthCheckResult { Success = true };\n    }\n\n    private async Task&lt;SmokeTestResult&gt; RunSmokeTestsAsync(string smokeTestUrl)\n    {\n        // Implementation for running smoke tests\n        await Task.Delay(500); // Simulate smoke tests\n        return new SmokeTestResult { Success = true };\n    }\n}\n\npublic class DeploymentRequest\n{\n    public string ApplicationName { get; set; }\n    public string Version { get; set; }\n    public string Environment { get; set; }\n    public string HealthCheckUrl { get; set; }\n    public string SmokeTestUrl { get; set; }\n}\n\npublic class TrafficSwitchRequest\n{\n    public string CurrentEnvironment { get; set; }\n    public string NewEnvironment { get; set; }\n    public int Percentage { get; set; }\n}\n\npublic class DeploymentResult\n{\n    public bool Success { get; set; }\n    public string DeploymentId { get; set; }\n    public DeploymentStatus Status { get; set; }\n    public string Error { get; set; }\n}\n\npublic class Deployment\n{\n    public string Id { get; set; }\n    public string ApplicationName { get; set; }\n    public string Version { get; set; }\n    public string Environment { get; set; }\n    public string Strategy { get; set; }\n    public DeploymentStatus Status { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime? TrafficSwitchAt { get; set; }\n    public DateTime? RollbackAt { get; set; }\n}\n\npublic enum DeploymentStatus\n{\n    InProgress,\n    Ready,\n    Active,\n    Failed,\n    HealthCheckFailed,\n    SmokeTestFailed,\n    RolledBack\n}\n</code></pre>"},{"location":"mid-level/devops/deployment-strategies/#rolling-deployment","title":"Rolling Deployment","text":""},{"location":"mid-level/devops/deployment-strategies/#1-rolling-deployment-service","title":"1. Rolling Deployment Service","text":"<p>Rolling deployment pattern'ini implement eden servis.</p> <pre><code>public class RollingDeploymentService : IDeploymentService\n{\n    private readonly ILogger&lt;RollingDeploymentService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly ILoadBalancerService _loadBalancerService;\n    private readonly IHealthCheckService _healthCheckService;\n\n    public async Task&lt;DeploymentResult&gt; DeployAsync(DeploymentRequest request)\n    {\n        try\n        {\n            _logger.LogInformation(\"Starting rolling deployment for {ApplicationName}\", request.ApplicationName);\n\n            var instances = await GetApplicationInstancesAsync(request.ApplicationName);\n            var batchSize = request.BatchSize ?? 1;\n            var healthCheckDelay = request.HealthCheckDelay ?? TimeSpan.FromSeconds(30);\n\n            var deployedInstances = new List&lt;string&gt;();\n            var failedInstances = new List&lt;string&gt;();\n\n            // Deploy in batches\n            for (int i = 0; i &lt; instances.Count; i += batchSize)\n            {\n                var batch = instances.Skip(i).Take(batchSize).ToList();\n\n                _logger.LogInformation(\"Deploying batch {BatchNumber} with {InstanceCount} instances\", \n                    (i / batchSize) + 1, batch.Count);\n\n                foreach (var instance in batch)\n                {\n                    try\n                    {\n                        // Remove from load balancer\n                        await _loadBalancerService.RemoveInstanceAsync(instance);\n\n                        // Deploy new version\n                        var deployResult = await DeployToInstanceAsync(instance, request.Version);\n                        if (deployResult.Success)\n                        {\n                            // Run health checks\n                            var healthResult = await RunHealthChecksAsync(instance, healthCheckDelay);\n                            if (healthResult.Success)\n                            {\n                                // Add back to load balancer\n                                await _loadBalancerService.AddInstanceAsync(instance);\n                                deployedInstances.Add(instance);\n\n                                _logger.LogInformation(\"Instance {Instance} deployed successfully\", instance);\n                            }\n                            else\n                            {\n                                failedInstances.Add(instance);\n                                _logger.LogError(\"Health checks failed for instance {Instance}\", instance);\n                            }\n                        }\n                        else\n                        {\n                            failedInstances.Add(instance);\n                            _logger.LogError(\"Deployment failed for instance {Instance}\", instance);\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        failedInstances.Add(instance);\n                        _logger.LogError(ex, \"Error deploying to instance {Instance}\", instance);\n                    }\n                }\n\n                // Wait between batches\n                if (i + batchSize &lt; instances.Count)\n                {\n                    await Task.Delay(request.BatchDelay ?? TimeSpan.FromMinutes(2));\n                }\n            }\n\n            var success = failedInstances.Count == 0;\n            var status = success ? DeploymentStatus.Completed : DeploymentStatus.PartiallyCompleted;\n\n            _logger.LogInformation(\"Rolling deployment completed. Success: {Success}, \" +\n                \"Deployed: {DeployedCount}, Failed: {FailedCount}\", \n                success, deployedInstances.Count, failedInstances.Count);\n\n            return new DeploymentResult\n            {\n                Success = success,\n                Status = status,\n                DeployedInstances = deployedInstances,\n                FailedInstances = failedInstances\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during rolling deployment\");\n            return new DeploymentResult { Success = false, Error = ex.Message };\n        }\n    }\n\n    private async Task&lt;List&lt;string&gt;&gt; GetApplicationInstancesAsync(string applicationName)\n    {\n        // Implementation to get application instances\n        return new List&lt;string&gt; { \"instance1\", \"instance2\", \"instance3\" };\n    }\n\n    private async Task&lt;DeploymentResult&gt; DeployToInstanceAsync(string instance, string version)\n    {\n        // Implementation to deploy to specific instance\n        await Task.Delay(1000);\n        return new DeploymentResult { Success = true };\n    }\n\n    private async Task&lt;HealthCheckResult&gt; RunHealthChecksAsync(string instance, TimeSpan delay)\n    {\n        // Wait for application to start\n        await Task.Delay(delay);\n\n        // Implementation to run health checks\n        return new HealthCheckResult { Success = true };\n    }\n}\n</code></pre>"},{"location":"mid-level/devops/deployment-strategies/#canary-deployment","title":"Canary Deployment","text":""},{"location":"mid-level/devops/deployment-strategies/#1-canary-deployment-service","title":"1. Canary Deployment Service","text":"<p>Canary deployment pattern'ini implement eden servis.</p> <pre><code>public class CanaryDeploymentService : IDeploymentService\n{\n    private readonly ILogger&lt;CanaryDeploymentService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly ILoadBalancerService _loadBalancerService;\n    private readonly IMetricsService _metricsService;\n\n    public async Task&lt;DeploymentResult&gt; DeployAsync(DeploymentRequest request)\n    {\n        try\n        {\n            _logger.LogInformation(\"Starting canary deployment for {ApplicationName}\", request.ApplicationName);\n\n            // Deploy to canary environment\n            var canaryResult = await DeployToCanaryAsync(request);\n            if (!canaryResult.Success)\n            {\n                return canaryResult;\n            }\n\n            // Route small percentage of traffic\n            var initialTrafficPercentage = request.InitialTrafficPercentage ?? 5;\n            await _loadBalancerService.SetTrafficPercentageAsync(\n                request.CanaryEnvironment, initialTrafficPercentage);\n\n            // Monitor canary performance\n            var monitoringResult = await MonitorCanaryAsync(request, initialTrafficPercentage);\n            if (!monitoringResult.Success)\n            {\n                // Rollback canary\n                await RollbackCanaryAsync(request);\n                return new DeploymentResult { Success = false, Error = \"Canary monitoring failed\" };\n            }\n\n            // Gradually increase traffic\n            var trafficSteps = new[] { 10, 25, 50, 75, 100 };\n            foreach (var percentage in trafficSteps)\n            {\n                if (percentage &lt;= initialTrafficPercentage) continue;\n\n                _logger.LogInformation(\"Increasing canary traffic to {Percentage}%\", percentage);\n\n                await _loadBalancerService.SetTrafficPercentageAsync(\n                    request.CanaryEnvironment, percentage);\n\n                // Monitor for specified duration\n                await Task.Delay(request.TrafficStepDelay ?? TimeSpan.FromMinutes(5));\n\n                var stepResult = await MonitorCanaryAsync(request, percentage);\n                if (!stepResult.Success)\n                {\n                    // Rollback to previous percentage\n                    var previousPercentage = trafficSteps.TakeWhile(p =&gt; p &lt; percentage).LastOrDefault();\n                    await _loadBalancerService.SetTrafficPercentageAsync(\n                        request.CanaryEnvironment, previousPercentage);\n\n                    _logger.LogWarning(\"Canary monitoring failed at {Percentage}% traffic\", percentage);\n                    break;\n                }\n            }\n\n            _logger.LogInformation(\"Canary deployment completed successfully\");\n            return new DeploymentResult { Success = true, Status = DeploymentStatus.Completed };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during canary deployment\");\n            return new DeploymentResult { Success = false, Error = ex.Message };\n        }\n    }\n\n    private async Task&lt;DeploymentResult&gt; DeployToCanaryAsync(DeploymentRequest request)\n    {\n        // Implementation to deploy to canary environment\n        await Task.Delay(2000);\n        return new DeploymentResult { Success = true };\n    }\n\n    private async Task&lt;MonitoringResult&gt; MonitorCanaryAsync(DeploymentRequest request, int trafficPercentage)\n    {\n        // Implementation to monitor canary performance\n        await Task.Delay(1000);\n        return new MonitoringResult { Success = true };\n    }\n\n    private async Task RollbackCanaryAsync(DeploymentRequest request)\n    {\n        // Implementation to rollback canary deployment\n        await Task.Delay(1000);\n    }\n}\n\npublic class MonitoringResult\n{\n    public bool Success { get; set; }\n    public Dictionary&lt;string, double&gt; Metrics { get; set; } = new Dictionary&lt;string, double&gt;();\n}\n</code></pre>"},{"location":"mid-level/devops/deployment-strategies/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/devops/deployment-strategies/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Blue-Green Deployment nedir ve avantajlar\u0131 nelerdir?</li> <li> <p>Cevap: \u0130ki environment kullanarak zero-downtime deployment. Avantajlar\u0131: instant rollback, risk minimization, easy testing.</p> </li> <li> <p>Rolling Deployment nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Instance'lar\u0131 batch'ler halinde deploy eder. Her batch deploy edildikten sonra health check yap\u0131l\u0131r.</p> </li> <li> <p>Canary Deployment nedir?</p> </li> <li> <p>Cevap: K\u00fc\u00e7\u00fck trafik y\u00fczdesi ile yeni versiyonu test eder. Gradual traffic increase ile risk minimize edilir.</p> </li> <li> <p>Deployment automation neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Consistency, repeatability, error reduction, faster deployment, rollback capability.</p> </li> <li> <p>Health checks deployment'ta neden kritiktir?</p> </li> <li>Cevap: Deployment success validation, issue detection, automatic rollback triggers.</li> </ol>"},{"location":"mid-level/devops/deployment-strategies/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Blue-green deployment'ta traffic switching nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: Load balancer configuration, health check validation, gradual traffic shift.</p> </li> <li> <p>Rolling deployment'ta batch size nas\u0131l belirlenir?</p> </li> <li> <p>Cevap: Application capacity, risk tolerance, health check duration, rollback time.</p> </li> <li> <p>Canary deployment'ta monitoring metrics nelerdir?</p> </li> <li> <p>Cevap: Error rate, response time, throughput, business metrics, custom KPIs.</p> </li> <li> <p>Deployment rollback nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Automatic triggers, manual triggers, health check failures, metrics thresholds.</p> </li> <li> <p>Deployment strategies aras\u0131nda nas\u0131l se\u00e7im yap\u0131l\u0131r?</p> </li> <li>Cevap: Application type, downtime tolerance, risk tolerance, infrastructure complexity.</li> </ol>"},{"location":"mid-level/devops/deployment-strategies/#best-practices","title":"Best Practices","text":"<ol> <li>Deployment Strategy Selection</li> <li>Application requirements analiz edin</li> <li>Risk tolerance de\u011ferlendirin</li> <li>Infrastructure capabilities g\u00f6z \u00f6n\u00fcnde bulundurun</li> <li> <p>Team expertise de\u011ferlendirin</p> </li> <li> <p>Health Check Implementation</p> </li> <li>Comprehensive health checks implement edin</li> <li>Timeout management yap\u0131n</li> <li>Critical path validation sa\u011flay\u0131n</li> <li> <p>Performance impact minimize edin</p> </li> <li> <p>Monitoring &amp; Alerting</p> </li> <li>Real-time monitoring implement edin</li> <li>Automated alerting kurun</li> <li>Business metrics track edin</li> <li> <p>Performance baselines olu\u015fturun</p> </li> <li> <p>Rollback Strategy</p> </li> <li>Automated rollback triggers implement edin</li> <li>Manual rollback capability sa\u011flay\u0131n</li> <li>Rollback testing yap\u0131n</li> <li> <p>Data consistency validate edin</p> </li> <li> <p>Documentation &amp; Training</p> </li> <li>Deployment procedures document edin</li> <li>Team training sa\u011flay\u0131n</li> <li>Runbook'lar olu\u015fturun</li> <li>Post-deployment reviews yap\u0131n</li> </ol>"},{"location":"mid-level/devops/deployment-strategies/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Blue-Green Deployment</li> <li>Rolling Deployment</li> <li>Canary Deployment</li> <li>Deployment Strategies</li> <li>Zero-Downtime Deployment</li> </ul>"},{"location":"mid-level/devops/docker-containerization/","title":"Docker &amp; Containerization","text":""},{"location":"mid-level/devops/docker-containerization/#giris","title":"Giri\u015f","text":"<p>Docker ve containerization, modern software development ve deployment'da temel teknolojilerdir. Mid-level geli\u015ftiriciler i\u00e7in container teknolojilerini anlamak, scalable ve portable uygulamalar geli\u015ftirmede kritiktir. Bu dosya, Docker fundamentals, container orchestration, best practices ve .NET uygulamalar\u0131 i\u00e7in containerization stratejilerini kapsar.</p>"},{"location":"mid-level/devops/docker-containerization/#docker-fundamentals","title":"Docker Fundamentals","text":""},{"location":"mid-level/devops/docker-containerization/#1-dockerfile-best-practices","title":"1. Dockerfile Best Practices","text":"<p>.NET uygulamalar\u0131 i\u00e7in optimize edilmi\u015f Dockerfile \u00f6rnekleri.</p> <pre><code># Multi-stage build for .NET application\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\n\n# Build stage\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\n\n# Copy csproj files and restore dependencies\nCOPY [\"src/MyApp/MyApp.csproj\", \"src/MyApp/\"]\nCOPY [\"src/MyApp.Core/MyApp.Core.csproj\", \"src/MyApp.Core/\"]\nCOPY [\"src/MyApp.Infrastructure/MyApp.Infrastructure.csproj\", \"src/MyApp.Infrastructure/\"]\nRUN dotnet restore \"src/MyApp/MyApp.csproj\"\n\n# Copy source code and build\nCOPY . .\nWORKDIR \"/src/src/MyApp\"\nRUN dotnet build \"MyApp.csproj\" -c Release -o /app/build\n\n# Publish stage\nFROM build AS publish\nRUN dotnet publish \"MyApp.csproj\" -c Release -o /app/publish /p:UseAppHost=false\n\n# Final stage\nFROM base AS final\nWORKDIR /app\n\n# Install additional tools if needed\nRUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy published app\nCOPY --from=publish /app/publish .\n\n# Create non-root user for security\nRUN adduser --disabled-password --gecos '' appuser &amp;&amp; chown -R appuser /app\nUSER appuser\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost/health || exit 1\n\nENTRYPOINT [\"dotnet\", \"MyApp.dll\"]\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#2-docker-compose-configuration","title":"2. Docker Compose Configuration","text":"<p>Multi-service uygulamalar i\u00e7in Docker Compose yap\u0131land\u0131rmas\u0131.</p> <pre><code>version: '3.8'\n\nservices:\n  # API Service\n  api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: final\n    ports:\n      - \"5000:80\"\n      - \"5001:443\"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - ConnectionStrings__DefaultConnection=Server=db;Database=MyAppDb;User=sa;Password=Your_password123\n      - Redis__ConnectionString=redis:6379\n    depends_on:\n      - db\n      - redis\n    networks:\n      - myapp-network\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\n  # Database Service\n  db:\n    image: mcr.microsoft.com/mssql/server:2022-latest\n    environment:\n      - ACCEPT_EULA=Y\n      - SA_PASSWORD=Your_password123\n      - MSSQL_PID=Developer\n    ports:\n      - \"1433:1433\"\n    volumes:\n      - mssql-data:/var/opt/mssql\n      - ./init-scripts:/docker-entrypoint-initdb.d\n    networks:\n      - myapp-network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Your_password123 -Q 'SELECT 1' || exit 1\"]\n      interval: 10s\n      timeout: 3s\n      retries: 10\n      start_period: 10s\n\n  # Redis Cache Service\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis-data:/data\n    networks:\n      - myapp-network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 3s\n      retries: 5\n\n  # Message Queue Service\n  rabbitmq:\n    image: rabbitmq:3-management-alpine\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n    environment:\n      - RABBITMQ_DEFAULT_USER=admin\n      - RABBITMQ_DEFAULT_PASS=admin123\n    volumes:\n      - rabbitmq-data:/var/lib/rabbitmq\n    networks:\n      - myapp-network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"rabbitmq-diagnostics\", \"ping\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\n  # Monitoring Service\n  prometheus:\n    image: prom/prometheus:latest\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus-data:/prometheus\n    networks:\n      - myapp-network\n    restart: unless-stopped\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=200h'\n      - '--web.enable-lifecycle'\n\n  # Logging Service\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0\n    environment:\n      - discovery.type=single-node\n      - xpack.security.enabled=false\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ports:\n      - \"9200:9200\"\n    volumes:\n      - elasticsearch-data:/usr/share/elasticsearch/data\n    networks:\n      - myapp-network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f http://localhost:9200/_cluster/health || exit 1\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\nvolumes:\n  mssql-data:\n  redis-data:\n  rabbitmq-data:\n  prometheus-data:\n  elasticsearch-data:\n\nnetworks:\n  myapp-network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#container-orchestration","title":"Container Orchestration","text":""},{"location":"mid-level/devops/docker-containerization/#1-docker-swarm-configuration","title":"1. Docker Swarm Configuration","text":"<p>Docker Swarm ile container orchestration.</p> <pre><code>version: '3.8'\n\nservices:\n  api:\n    image: myapp:latest\n    deploy:\n      replicas: 3\n      update_config:\n        parallelism: 1\n        delay: 10s\n        order: start-first\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n        window: 120s\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 512M\n        reservations:\n          cpus: '0.25'\n          memory: 256M\n    ports:\n      - \"5000:80\"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Production\n    networks:\n      - myapp-network\n    secrets:\n      - db_connection_string\n      - redis_connection_string\n\n  db:\n    image: mcr.microsoft.com/mssql/server:2022-latest\n    deploy:\n      replicas: 1\n      placement:\n        constraints:\n          - node.role == manager\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n    environment:\n      - ACCEPT_EULA=Y\n      - SA_PASSWORD_FILE=/run/secrets/db_password\n    volumes:\n      - mssql-data:/var/opt/mssql\n    networks:\n      - myapp-network\n    secrets:\n      - db_password\n\nsecrets:\n  db_connection_string:\n    external: true\n  redis_connection_string:\n    external: true\n  db_password:\n    external: true\n\nvolumes:\n  mssql-data:\n    external: true\n\nnetworks:\n  myapp-network:\n    driver: overlay\n    attachable: true\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#2-kubernetes-deployment","title":"2. Kubernetes Deployment","text":"<p>.NET uygulamalar\u0131 i\u00e7in Kubernetes deployment yap\u0131land\u0131rmas\u0131.</p> <pre><code># Namespace\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: myapp\n  labels:\n    name: myapp\n\n---\n# ConfigMap for application configuration\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: myapp-config\n  namespace: myapp\ndata:\n  appsettings.json: |\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft\": \"Warning\",\n          \"Microsoft.Hosting.Lifetime\": \"Information\"\n        }\n      },\n      \"AllowedHosts\": \"*\",\n      \"ConnectionStrings\": {\n        \"DefaultConnection\": \"Server=myapp-db;Database=MyAppDb;User Id=sa;Password=$(DB_PASSWORD);\"\n      }\n    }\n\n---\n# Secret for sensitive data\napiVersion: v1\nkind: Secret\nmetadata:\n  name: myapp-secrets\n  namespace: myapp\ntype: Opaque\ndata:\n  db-password: U2FQYXNzd29yZDEyMw== # Base64 encoded\n  jwt-secret: SlNlY3JldEtleQ== # Base64 encoded\n\n---\n# Deployment for API\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-api\n  namespace: myapp\n  labels:\n    app: myapp-api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: myapp-api\n  template:\n    metadata:\n      labels:\n        app: myapp-api\n    spec:\n      containers:\n      - name: myapp-api\n        image: myapp:latest\n        ports:\n        - containerPort: 80\n          name: http\n        - containerPort: 443\n          name: https\n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: \"Production\"\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: myapp-secrets\n              key: db-password\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: myapp-secrets\n              key: jwt-secret\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: app-logs\n          mountPath: /app/logs\n      volumes:\n      - name: app-logs\n        emptyDir: {}\n\n---\n# Service for API\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-api-service\n  namespace: myapp\nspec:\n  selector:\n    app: myapp-api\n  ports:\n  - name: http\n    port: 80\n    targetPort: 80\n  - name: https\n    port: 443\n    targetPort: 443\n  type: ClusterIP\n\n---\n# Ingress for external access\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myapp-ingress\n  namespace: myapp\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - myapp.example.com\n    secretName: myapp-tls\n  rules:\n  - host: myapp.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: myapp-api-service\n            port:\n              number: 80\n\n---\n# Horizontal Pod Autoscaler\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: myapp-api-hpa\n  namespace: myapp\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: myapp-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleUp:\n      stabilizationWindowSeconds: 60\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#container-security","title":"Container Security","text":""},{"location":"mid-level/devops/docker-containerization/#1-security-scanning","title":"1. Security Scanning","text":"<p>Container g\u00fcvenlik taramas\u0131 i\u00e7in Dockerfile ve script'ler.</p> <pre><code># Security-focused Dockerfile\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\n\n# Install security updates\nRUN apt-get update &amp;&amp; \\\n    apt-get upgrade -y &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n        curl \\\n        ca-certificates \\\n        &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create non-root user\nRUN groupadd -r appuser &amp;&amp; useradd -r -g appuser appuser\n\nWORKDIR /app\nEXPOSE 80\n\n# Switch to non-root user\nUSER appuser\n\n# Copy application\nCOPY --chown=appuser:appuser --from=build /app/publish .\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost/health || exit 1\n\nENTRYPOINT [\"dotnet\", \"MyApp.dll\"]\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#2-security-scanning-script","title":"2. Security Scanning Script","text":"<pre><code>#!/bin/bash\n\n# Container security scanning script\necho \"Starting container security scan...\"\n\n# Scan for vulnerabilities\necho \"Scanning for vulnerabilities...\"\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n    aquasec/trivy image myapp:latest\n\n# Check for secrets in image\necho \"Checking for secrets...\"\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n    wagoodman/dive myapp:latest\n\n# Run security tests\necho \"Running security tests...\"\ndocker run --rm -v $(pwd):/app \\\n    --workdir /app \\\n    mcr.microsoft.com/dotnet/sdk:8.0 \\\n    dotnet test --filter Category=Security\n\necho \"Security scan completed.\"\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#container-monitoring","title":"Container Monitoring","text":""},{"location":"mid-level/devops/docker-containerization/#1-prometheus-configuration","title":"1. Prometheus Configuration","text":"<pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"alert_rules.yml\"\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n\nscrape_configs:\n  - job_name: 'myapp-api'\n    static_configs:\n      - targets: ['myapp-api-service:80']\n    metrics_path: '/metrics'\n    scrape_interval: 5s\n\n  - job_name: 'database'\n    static_configs:\n      - targets: ['myapp-db:1433']\n\n  - job_name: 'redis'\n    static_configs:\n      - targets: ['redis:6379']\n\n  - job_name: 'rabbitmq'\n    static_configs:\n      - targets: ['rabbitmq:15672']\n    metrics_path: '/metrics'\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#2-net-metrics-configuration","title":"2. .NET Metrics Configuration","text":"<pre><code>public class MetricsConfiguration\n{\n    public static void ConfigureMetrics(IServiceCollection services, IConfiguration configuration)\n    {\n        services.AddMetrics();\n\n        // Configure Prometheus metrics\n        services.AddPrometheusMetrics();\n\n        // Configure custom metrics\n        services.AddSingleton&lt;ICustomMetrics, CustomMetrics&gt;();\n    }\n}\n\npublic class CustomMetrics\n{\n    private readonly Counter _requestCounter;\n    private readonly Histogram _requestDuration;\n    private readonly Gauge _activeConnections;\n\n    public CustomMetrics(IMetricsFactory metricsFactory)\n    {\n        _requestCounter = metricsFactory.CreateCounter(\"http_requests_total\", \"Total HTTP requests\");\n        _requestDuration = metricsFactory.CreateHistogram(\"http_request_duration_seconds\", \"HTTP request duration\");\n        _activeConnections = metricsFactory.CreateGauge(\"active_connections\", \"Active database connections\");\n    }\n\n    public void IncrementRequestCount(string endpoint, string method, int statusCode)\n    {\n        _requestCounter.Increment(1, new KeyValuePair&lt;string, object&gt;(\"endpoint\", endpoint),\n            new KeyValuePair&lt;string, object&gt;(\"method\", method),\n            new KeyValuePair&lt;string, object&gt;(\"status_code\", statusCode));\n    }\n\n    public void RecordRequestDuration(string endpoint, double duration)\n    {\n        _requestDuration.Record(duration, new KeyValuePair&lt;string, object&gt;(\"endpoint\", endpoint));\n    }\n\n    public void SetActiveConnections(int count)\n    {\n        _activeConnections.Set(count);\n    }\n}\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#container-cicd-pipeline","title":"Container CI/CD Pipeline","text":""},{"location":"mid-level/devops/docker-containerization/#1-github-actions-workflow","title":"1. GitHub Actions Workflow","text":"<pre><code>name: Build and Deploy Container\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: '8.0.x'\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build\n      run: dotnet build --no-restore\n\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n\n    - name: Run security scan\n      run: |\n        dotnet tool install --global dotnet-security-scan\n        dotnet security-scan\n\n    - name: Build Docker image\n      run: |\n        docker build -t $IMAGE_NAME:${{ github.sha }} .\n        docker build -t $IMAGE_NAME:latest .\n\n    - name: Run container security scan\n      run: |\n        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n          aquasec/trivy image $IMAGE_NAME:${{ github.sha }}\n\n    - name: Push to Container Registry\n      if: github.ref == 'refs/heads/main'\n      run: |\n        echo ${{ secrets.GITHUB_TOKEN }} | docker login $REGISTRY -u ${{ github.actor }} --password-stdin\n        docker tag $IMAGE_NAME:${{ github.sha }} $REGISTRY/$IMAGE_NAME:${{ github.sha }}\n        docker tag $IMAGE_NAME:latest $REGISTRY/$IMAGE_NAME:latest\n        docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}\n        docker push $REGISTRY/$IMAGE_NAME:latest\n\n  deploy:\n    needs: build-and-test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - name: Deploy to Kubernetes\n      run: |\n        # Deploy to staging first\n        kubectl apply -f k8s/staging/\n\n        # Run smoke tests\n        ./scripts/smoke-tests.sh\n\n        # Deploy to production\n        kubectl apply -f k8s/production/\n\n        # Verify deployment\n        kubectl rollout status deployment/myapp-api -n myapp\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#2-azure-devops-pipeline","title":"2. Azure DevOps Pipeline","text":"<pre><code>trigger:\n  branches:\n    include:\n    - main\n    - develop\n\nvariables:\n  dockerfilePath: '**/Dockerfile'\n  imageRepository: 'myapp'\n  containerRegistry: 'azurecr.io'\n  dockerfileContext: '$(Build.SourcesDirectory)'\n  tag: '$(Build.BuildId)'\n\nstages:\n- stage: Build\n  displayName: Build and Test\n  jobs:\n  - job: Build\n    displayName: Build\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n    - task: UseDotNet@2\n      inputs:\n        version: '8.0.x'\n\n    - script: |\n        dotnet restore\n        dotnet build --no-restore\n        dotnet test --no-build --verbosity normal\n      displayName: 'Build and Test .NET Application'\n\n    - task: Docker@2\n      inputs:\n        containerRegistry: 'Azure Container Registry'\n        repository: '$(imageRepository)'\n        command: 'buildAndPush'\n        Dockerfile: '$(dockerfilePath)'\n        context: '$(dockerfileContext)'\n        tags: |\n          $(tag)\n          latest\n\n    - task: ContainerScan@0\n      inputs:\n        dockerFilePath: '$(dockerfilePath)'\n        dockerContext: '$(dockerfileContext)'\n\n- stage: Deploy\n  displayName: Deploy\n  dependsOn: Build\n  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))\n  jobs:\n  - deployment: Deploy\n    displayName: Deploy to Kubernetes\n    pool:\n      vmImage: 'ubuntu-latest'\n    environment: 'production'\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: KubernetesManifest@0\n            inputs:\n              action: 'deploy'\n              kubernetesServiceConnection: 'myapp-k8s-connection'\n              manifests: |\n                $(Pipeline.Workspace)/manifests/*.yml\n              containers: |\n                $(containerRegistry)/$(imageRepository):$(tag)\n</code></pre>"},{"location":"mid-level/devops/docker-containerization/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/devops/docker-containerization/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Docker nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Containerization platform, uygulamalar\u0131 izole eder, portable yapar, consistent environment sa\u011flar.</p> </li> <li> <p>Container vs Virtual Machine aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Container OS kernel'i payla\u015f\u0131r, daha hafif, h\u0131zl\u0131 startup. VM tam OS \u00e7al\u0131\u015ft\u0131r\u0131r, daha a\u011f\u0131r.</p> </li> <li> <p>Multi-stage build nedir ve neden kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Build ve runtime i\u00e7in farkl\u0131 image'lar, final image boyutunu k\u00fc\u00e7\u00fclt\u00fcr, security art\u0131r\u0131r.</p> </li> <li> <p>Docker Compose vs Kubernetes aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Compose local development i\u00e7in, Kubernetes production orchestration i\u00e7in, scaling ve high availability.</p> </li> <li> <p>Container security best practices nelerdir?</p> </li> <li>Cevap: Non-root user, minimal base image, security scanning, regular updates, secrets management.</li> </ol>"},{"location":"mid-level/devops/docker-containerization/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Dockerfile'da ENTRYPOINT vs CMD aras\u0131ndaki fark nedir?</li> <li> <p>Cevap: ENTRYPOINT executable'\u0131 belirler, CMD default parameters sa\u011flar. ENTRYPOINT override edilemez.</p> </li> <li> <p>Container health check nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: HEALTHCHECK instruction, endpoint'te /health endpoint, liveness/readiness probes.</p> </li> <li> <p>Container networking nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Bridge, host, overlay networks, port mapping, service discovery.</p> </li> <li> <p>Container orchestration'da scaling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Horizontal scaling, auto-scaling, load balancing, resource limits.</p> </li> <li> <p>Container monitoring ve logging nas\u0131l implement edilir?</p> </li> <li>Cevap: Prometheus metrics, centralized logging, health checks, alerting.</li> </ol>"},{"location":"mid-level/devops/docker-containerization/#best-practices","title":"Best Practices","text":"<ol> <li>Dockerfile Optimization</li> <li>Multi-stage build kullan\u0131n</li> <li>Layer caching optimize edin</li> <li>Minimal base image kullan\u0131n</li> <li> <p>Security updates yap\u0131n</p> </li> <li> <p>Container Security</p> </li> <li>Non-root user kullan\u0131n</li> <li>Security scanning implement edin</li> <li>Secrets management yap\u0131n</li> <li> <p>Regular updates yap\u0131n</p> </li> <li> <p>Performance Optimization</p> </li> <li>Resource limits belirleyin</li> <li>Health checks implement edin</li> <li>Monitoring ve logging kurun</li> <li> <p>Auto-scaling yap\u0131n</p> </li> <li> <p>CI/CD Integration</p> </li> <li>Automated testing yap\u0131n</li> <li>Security scanning ekleyin</li> <li>Blue-green deployment yap\u0131n</li> <li> <p>Rollback strategy haz\u0131rlay\u0131n</p> </li> <li> <p>Monitoring &amp; Observability</p> </li> <li>Metrics collection yap\u0131n</li> <li>Centralized logging kurun</li> <li>Alerting implement edin</li> <li>Performance monitoring yap\u0131n</li> </ol>"},{"location":"mid-level/devops/docker-containerization/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Docker Official Documentation</li> <li>Microsoft Container Documentation</li> <li>Kubernetes Documentation</li> <li>Container Security Best Practices</li> <li>Docker Best Practices</li> </ul>"},{"location":"mid-level/devops/environment-management/","title":"Environment Management","text":""},{"location":"mid-level/devops/environment-management/#giris","title":"Giri\u015f","text":"<p>Environment Management, software development lifecycle'\u0131nda farkl\u0131 ortamlar\u0131n (development, staging, production) yap\u0131land\u0131r\u0131lmas\u0131, y\u00f6netimi ve izlenmesi i\u00e7in kritik bir konudur. Mid-level geli\u015ftiriciler i\u00e7in environment management'\u0131 anlamak, g\u00fcvenli ve tutarl\u0131 deployment s\u00fcre\u00e7leri tasarlamada esast\u0131r. Bu dosya, environment configuration, secrets management, infrastructure as code ve environment monitoring konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/devops/environment-management/#environment-configuration","title":"Environment Configuration","text":""},{"location":"mid-level/devops/environment-management/#1-environment-specific-configuration","title":"1. Environment-Specific Configuration","text":"<p>Farkl\u0131 ortamlar i\u00e7in configuration management.</p> <pre><code>public class EnvironmentConfigurationService\n{\n    private readonly ILogger&lt;EnvironmentConfigurationService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IEnvironmentProvider _environmentProvider;\n\n    public EnvironmentConfigurationService(\n        ILogger&lt;EnvironmentConfigurationService&gt; logger,\n        IConfiguration configuration,\n        IEnvironmentProvider environmentProvider)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _environmentProvider = environmentProvider;\n    }\n\n    public async Task&lt;EnvironmentConfig&gt; GetEnvironmentConfigurationAsync(string environmentName = null)\n    {\n        try\n        {\n            var environment = environmentName ?? _environmentProvider.GetCurrentEnvironment();\n            _logger.LogInformation(\"Loading configuration for environment: {Environment}\", environment);\n\n            var config = new EnvironmentConfig\n            {\n                EnvironmentName = environment,\n                LoadedAt = DateTime.UtcNow\n            };\n\n            // Load base configuration\n            config.BaseSettings = await LoadBaseConfigurationAsync();\n\n            // Load environment-specific configuration\n            config.EnvironmentSettings = await LoadEnvironmentSpecificConfigurationAsync(environment);\n\n            // Load secrets\n            config.Secrets = await LoadSecretsAsync(environment);\n\n            // Validate configuration\n            var validationResult = await ValidateConfigurationAsync(config);\n            if (!validationResult.IsValid)\n            {\n                _logger.LogError(\"Configuration validation failed: {Errors}\", \n                    string.Join(\", \", validationResult.Errors));\n                throw new ConfigurationValidationException(\"Configuration validation failed\", validationResult.Errors);\n            }\n\n            _logger.LogInformation(\"Configuration loaded successfully for environment: {Environment}\", environment);\n            return config;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading configuration for environment: {Environment}\", environmentName);\n            throw;\n        }\n    }\n\n    private async Task&lt;Dictionary&lt;string, object&gt;&gt; LoadBaseConfigurationAsync()\n    {\n        var baseSettings = new Dictionary&lt;string, object&gt;();\n\n        // Load common settings that apply to all environments\n        baseSettings[\"ApplicationName\"] = _configuration[\"Application:Name\"];\n        baseSettings[\"Version\"] = _configuration[\"Application:Version\"];\n        baseSettings[\"LogLevel\"] = _configuration[\"Logging:LogLevel:Default\"];\n        baseSettings[\"AllowedHosts\"] = _configuration[\"AllowedHosts\"];\n\n        // Load database connection templates\n        baseSettings[\"DatabaseTemplate\"] = _configuration[\"Database:ConnectionTemplate\"];\n        baseSettings[\"RedisTemplate\"] = _configuration[\"Cache:Redis:ConnectionTemplate\"];\n\n        return baseSettings;\n    }\n\n    private async Task&lt;Dictionary&lt;string, object&gt;&gt; LoadEnvironmentSpecificConfigurationAsync(string environment)\n    {\n        var envSettings = new Dictionary&lt;string, object&gt;();\n\n        // Load environment-specific configuration\n        var envConfig = _configuration.GetSection($\"Environments:{environment}\");\n\n        if (envConfig.Exists())\n        {\n            envSettings[\"DatabaseConnection\"] = envConfig[\"Database:ConnectionString\"];\n            envSettings[\"RedisConnection\"] = envConfig[\"Cache:Redis:ConnectionString\"];\n            envSettings[\"ApiBaseUrl\"] = envConfig[\"Api:BaseUrl\"];\n            envSettings[\"CorsOrigins\"] = envConfig.GetSection(\"Cors:AllowedOrigins\").Get&lt;string[]&gt;();\n            envSettings[\"FeatureFlags\"] = envConfig.GetSection(\"Features\").Get&lt;Dictionary&lt;string, bool&gt;&gt;();\n            envSettings[\"LogLevel\"] = envConfig[\"Logging:LogLevel:Default\"] ?? \"Information\";\n            envSettings[\"EnableSwagger\"] = envConfig.GetValue&lt;bool&gt;(\"EnableSwagger\", false);\n            envSettings[\"EnableDetailedErrors\"] = envConfig.GetValue&lt;bool&gt;(\"EnableDetailedErrors\", false);\n        }\n        else\n        {\n            _logger.LogWarning(\"No specific configuration found for environment: {Environment}\", environment);\n        }\n\n        return envSettings;\n    }\n\n    private async Task&lt;Dictionary&lt;string, string&gt;&gt; LoadSecretsAsync(string environment)\n    {\n        var secrets = new Dictionary&lt;string, string&gt;();\n\n        try\n        {\n            // Load secrets from Azure Key Vault or other secret management service\n            var secretProvider = _configuration.GetSection(\"Secrets:Provider\").Value;\n\n            switch (secretProvider?.ToLowerInvariant())\n            {\n                case \"azurekeyvault\":\n                    secrets = await LoadAzureKeyVaultSecretsAsync(environment);\n                    break;\n                case \"awssecretsmanager\":\n                    secrets = await LoadAwsSecretsAsync(environment);\n                    break;\n                case \"hashicorpvault\":\n                    secrets = await LoadHashiCorpVaultSecretsAsync(environment);\n                    break;\n                default:\n                    _logger.LogWarning(\"No secret provider configured, using configuration secrets\");\n                    secrets = await LoadConfigurationSecretsAsync(environment);\n                    break;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading secrets for environment: {Environment}\", environment);\n            // Fall back to configuration secrets\n            secrets = await LoadConfigurationSecretsAsync(environment);\n        }\n\n        return secrets;\n    }\n\n    private async Task&lt;Dictionary&lt;string, string&gt;&gt; LoadAzureKeyVaultSecretsAsync(string environment)\n    {\n        var secrets = new Dictionary&lt;string, string&gt;();\n\n        try\n        {\n            var keyVaultUrl = _configuration[\"Azure:KeyVault:Url\"];\n            var credential = new DefaultAzureCredential();\n            var client = new SecretClient(new Uri(keyVaultUrl), credential);\n\n            // Load environment-specific secrets\n            var secretNames = new[]\n            {\n                $\"{environment}-db-password\",\n                $\"{environment}-jwt-secret\",\n                $\"{environment}-api-key\",\n                $\"{environment}-redis-password\"\n            };\n\n            foreach (var secretName in secretNames)\n            {\n                try\n                {\n                    var secret = await client.GetSecretAsync(secretName);\n                    secrets[secretName] = secret.Value.Value;\n                }\n                catch (RequestFailedException ex) when (ex.Status == 404)\n                {\n                    _logger.LogDebug(\"Secret {SecretName} not found in Key Vault\", secretName);\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading Azure Key Vault secrets\");\n            throw;\n        }\n\n        return secrets;\n    }\n\n    private async Task&lt;Dictionary&lt;string, string&gt;&gt; LoadConfigurationSecretsAsync(string environment)\n    {\n        var secrets = new Dictionary&lt;string, string&gt;();\n\n        // Load secrets from configuration (not recommended for production)\n        var secretsSection = _configuration.GetSection($\"Secrets:{environment}\");\n\n        if (secretsSection.Exists())\n        {\n            foreach (var secret in secretsSection.GetChildren())\n            {\n                secrets[secret.Key] = secret.Value;\n            }\n        }\n\n        return secrets;\n    }\n\n    private async Task&lt;ConfigurationValidationResult&gt; ValidateConfigurationAsync(EnvironmentConfig config)\n    {\n        var result = new ConfigurationValidationResult();\n\n        try\n        {\n            // Validate required settings\n            var requiredSettings = new[]\n            {\n                \"DatabaseConnection\",\n                \"RedisConnection\",\n                \"ApiBaseUrl\"\n            };\n\n            foreach (var setting in requiredSettings)\n            {\n                if (!config.EnvironmentSettings.ContainsKey(setting) || \n                    string.IsNullOrEmpty(config.EnvironmentSettings[setting]?.ToString()))\n                {\n                    result.AddError(setting, $\"Required setting '{setting}' is missing or empty\");\n                }\n            }\n\n            // Validate database connection\n            if (config.EnvironmentSettings.ContainsKey(\"DatabaseConnection\"))\n            {\n                var connectionString = config.EnvironmentSettings[\"DatabaseConnection\"].ToString();\n                if (!IsValidConnectionString(connectionString))\n                {\n                    result.AddError(\"DatabaseConnection\", \"Invalid database connection string format\");\n                }\n            }\n\n            // Validate CORS origins\n            if (config.EnvironmentSettings.ContainsKey(\"CorsOrigins\"))\n            {\n                var corsOrigins = config.EnvironmentSettings[\"CorsOrigins\"] as string[];\n                if (corsOrigins == null || corsOrigins.Length == 0)\n                {\n                    result.AddError(\"CorsOrigins\", \"CORS origins must be specified\");\n                }\n            }\n\n            // Validate feature flags\n            if (config.EnvironmentSettings.ContainsKey(\"FeatureFlags\"))\n            {\n                var featureFlags = config.EnvironmentSettings[\"FeatureFlags\"] as Dictionary&lt;string, bool&gt;;\n                if (featureFlags == null)\n                {\n                    result.AddError(\"FeatureFlags\", \"Feature flags must be a valid dictionary\");\n                }\n            }\n\n            result.IsValid = !result.Errors.Any();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating configuration\");\n            result.AddError(\"Validation\", $\"Configuration validation error: {ex.Message}\");\n            result.IsValid = false;\n        }\n\n        return result;\n    }\n\n    private bool IsValidConnectionString(string connectionString)\n    {\n        if (string.IsNullOrEmpty(connectionString))\n            return false;\n\n        // Basic validation for SQL Server connection string\n        return connectionString.Contains(\"Server=\") &amp;&amp; \n               connectionString.Contains(\"Database=\") &amp;&amp; \n               connectionString.Contains(\"User Id=\") &amp;&amp; \n               connectionString.Contains(\"Password=\");\n    }\n}\n\npublic class EnvironmentConfig\n{\n    public string EnvironmentName { get; set; }\n    public DateTime LoadedAt { get; set; }\n    public Dictionary&lt;string, object&gt; BaseSettings { get; set; } = new Dictionary&lt;string, object&gt;();\n    public Dictionary&lt;string, object&gt; EnvironmentSettings { get; set; } = new Dictionary&lt;string, object&gt;();\n    public Dictionary&lt;string, string&gt; Secrets { get; set; } = new Dictionary&lt;string, string&gt;();\n\n    public T GetSetting&lt;T&gt;(string key, T defaultValue = default(T))\n    {\n        // Try environment-specific setting first\n        if (EnvironmentSettings.ContainsKey(key))\n        {\n            var value = EnvironmentSettings[key];\n            if (value is T typedValue)\n                return typedValue;\n\n            // Try to convert\n            try\n            {\n                return (T)Convert.ChangeType(value, typeof(T));\n            }\n            catch\n            {\n                // Conversion failed, return default\n            }\n        }\n\n        // Try base setting\n        if (BaseSettings.ContainsKey(key))\n        {\n            var value = BaseSettings[key];\n            if (value is T typedValue)\n                return typedValue;\n\n            // Try to convert\n            try\n            {\n                return (T)Convert.ChangeType(value, typeof(T));\n            }\n            catch\n            {\n                // Conversion failed, return default\n            }\n        }\n\n        return defaultValue;\n    }\n\n    public string GetSecret(string key, string defaultValue = null)\n    {\n        return Secrets.ContainsKey(key) ? Secrets[key] : defaultValue;\n    }\n}\n\npublic class ConfigurationValidationResult\n{\n    public bool IsValid { get; set; }\n    public List&lt;ConfigurationError&gt; Errors { get; } = new List&lt;ConfigurationError&gt;();\n\n    public void AddError(string field, string message)\n    {\n        Errors.Add(new ConfigurationError { Field = field, Message = message });\n    }\n}\n\npublic class ConfigurationError\n{\n    public string Field { get; set; }\n    public string Message { get; set; }\n}\n\npublic class ConfigurationValidationException : Exception\n{\n    public List&lt;ConfigurationError&gt; Errors { get; }\n\n    public ConfigurationValidationException(string message, List&lt;ConfigurationError&gt; errors) \n        : base(message)\n    {\n        Errors = errors;\n    }\n}\n</code></pre>"},{"location":"mid-level/devops/environment-management/#2-environment-provider","title":"2. Environment Provider","text":"<p>Environment detection ve management.</p> <pre><code>public interface IEnvironmentProvider\n{\n    string GetCurrentEnvironment();\n    bool IsDevelopment();\n    bool IsStaging();\n    bool IsProduction();\n    bool IsEnvironment(string environmentName);\n    EnvironmentInfo GetEnvironmentInfo();\n}\n\npublic class EnvironmentProvider : IEnvironmentProvider\n{\n    private readonly IConfiguration _configuration;\n    private readonly IWebHostEnvironment _webHostEnvironment;\n    private readonly ILogger&lt;EnvironmentProvider&gt; _logger;\n\n    public EnvironmentProvider(\n        IConfiguration configuration,\n        IWebHostEnvironment webHostEnvironment,\n        ILogger&lt;EnvironmentProvider&gt; logger)\n    {\n        _configuration = configuration;\n        _webHostEnvironment = webHostEnvironment;\n        _logger = logger;\n    }\n\n    public string GetCurrentEnvironment()\n    {\n        // Priority order: Environment Variable &gt; Configuration &gt; Default\n        var environment = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") ??\n                         _configuration[\"Environment\"] ??\n                         _webHostEnvironment.EnvironmentName ??\n                         \"Development\";\n\n        _logger.LogDebug(\"Current environment detected: {Environment}\", environment);\n        return environment;\n    }\n\n    public bool IsDevelopment()\n    {\n        return IsEnvironment(\"Development\");\n    }\n\n    public bool IsStaging()\n    {\n        return IsEnvironment(\"Staging\");\n    }\n\n    public bool IsProduction()\n    {\n        return IsEnvironment(\"Production\");\n    }\n\n    public bool IsEnvironment(string environmentName)\n    {\n        var currentEnv = GetCurrentEnvironment();\n        return string.Equals(currentEnv, environmentName, StringComparison.OrdinalIgnoreCase);\n    }\n\n    public EnvironmentInfo GetEnvironmentInfo()\n    {\n        var currentEnv = GetCurrentEnvironment();\n\n        return new EnvironmentInfo\n        {\n            Name = currentEnv,\n            IsDevelopment = IsDevelopment(),\n            IsStaging = IsStaging(),\n            IsProduction = IsProduction(),\n            MachineName = Environment.MachineName,\n            ProcessId = Environment.ProcessId,\n            OSVersion = Environment.OSVersion.ToString(),\n            ProcessorCount = Environment.ProcessorCount,\n            WorkingSet = Environment.WorkingSet,\n            Timestamp = DateTime.UtcNow\n        };\n    }\n}\n\npublic class EnvironmentInfo\n{\n    public string Name { get; set; }\n    public bool IsDevelopment { get; set; }\n    public bool IsStaging { get; set; }\n    public bool IsProduction { get; set; }\n    public string MachineName { get; set; }\n    public int ProcessId { get; set; }\n    public string OSVersion { get; set; }\n    public int ProcessorCount { get; set; }\n    public long WorkingSet { get; set; }\n    public DateTime Timestamp { get; set; }\n}\n</code></pre>"},{"location":"mid-level/devops/environment-management/#infrastructure-as-code","title":"Infrastructure as Code","text":""},{"location":"mid-level/devops/environment-management/#1-terraform-configuration","title":"1. Terraform Configuration","text":"<p>Environment infrastructure'\u0131n\u0131 Terraform ile y\u00f6netme.</p> <pre><code># main.tf - Main Terraform configuration\nterraform {\n  required_version = \"&gt;= 1.0\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 3.0\"\n    }\n  }\n\n  backend \"azurerm\" {\n    resource_group_name  = \"terraform-state-rg\"\n    storage_account_name = \"tfstate12345\"\n    container_name       = \"tfstate\"\n    key                  = \"environments.terraform.tfstate\"\n  }\n}\n\n# Variables\nvariable \"environment\" {\n  description = \"Environment name (dev, staging, prod)\"\n  type        = string\n  validation {\n    condition     = contains([\"dev\", \"staging\", \"prod\"], var.environment)\n    error_message = \"Environment must be one of: dev, staging, prod.\"\n  }\n}\n\nvariable \"location\" {\n  description = \"Azure region\"\n  type        = string\n  default     = \"East US\"\n}\n\nvariable \"resource_group_name\" {\n  description = \"Resource group name\"\n  type        = string\n}\n\nvariable \"app_service_plan_sku\" {\n  description = \"App Service Plan SKU\"\n  type        = string\n  default     = \"B1\"\n}\n\nvariable \"database_sku\" {\n  description = \"Database SKU\"\n  type        = string\n  default     = \"Basic\"\n}\n\n# Data sources\ndata \"azurerm_resource_group\" \"main\" {\n  name = var.resource_group_name\n}\n\ndata \"azurerm_client_config\" \"current\" {}\n\n# Resource group\nresource \"azurerm_resource_group\" \"main\" {\n  count    = var.resource_group_name == null ? 1 : 0\n  name     = \"rg-${var.environment}-${random_string.suffix.result}\"\n  location = var.location\n\n  tags = local.common_tags\n}\n\n# Random suffix for unique names\nresource \"random_string\" \"suffix\" {\n  length  = 8\n  special = false\n  upper   = false\n}\n\n# App Service Plan\nresource \"azurerm_service_plan\" \"main\" {\n  name                = \"plan-${var.environment}-${random_string.suffix.result}\"\n  resource_group_name = data.azurerm_resource_group.main.name\n  location           = data.azurerm_resource_group.main.location\n  os_type            = \"Windows\"\n  sku_name           = var.app_service_plan_sku\n\n  tags = local.common_tags\n}\n\n# App Service\nresource \"azurerm_windows_web_app\" \"main\" {\n  name                = \"app-${var.environment}-${random_string.suffix.result}\"\n  resource_group_name = data.azurerm_resource_group.main.name\n  location           = data.azurerm_resource_group.main.location\n  service_plan_id    = azurerm_service_plan.main.id\n\n  site_config {\n    application_stack {\n      dotnet_version = \"v8.0\"\n    }\n\n    application_settings = {\n      \"ASPNETCORE_ENVIRONMENT\" = title(var.environment)\n      \"WEBSITE_RUN_FROM_PACKAGE\" = \"1\"\n    }\n\n    health_check_path = \"/health\"\n    health_check_eviction_time_in_minutes = 5\n  }\n\n  app_settings = local.app_settings\n\n  tags = local.common_tags\n}\n\n# SQL Server\nresource \"azurerm_mssql_server\" \"main\" {\n  name                         = \"sql-${var.environment}-${random_string.suffix.result}\"\n  resource_group_name          = data.azurerm_resource_group.main.name\n  location                    = data.azurerm_resource_group.main.location\n  version                     = \"12.0\"\n  administrator_login          = \"sqladmin\"\n  administrator_login_password = random_password.sql_password.result\n\n  tags = local.common_tags\n}\n\n# SQL Database\nresource \"azurerm_mssql_database\" \"main\" {\n  name           = \"db-${var.environment}\"\n  server_id      = azurerm_mssql_server.main.id\n  sku_name       = var.database_sku\n  collation      = \"SQL_Latin1_General_CP1_CI_AS\"\n\n  tags = local.common_tags\n}\n\n# Redis Cache\nresource \"azurerm_redis_cache\" \"main\" {\n  name                = \"redis-${var.environment}-${random_string.suffix.result}\"\n  resource_group_name = data.azurerm_resource_group.main.name\n  location           = data.azurerm_resource_group.main.location\n  capacity           = 0\n  family             = \"C\"\n  sku_name           = \"Basic\"\n\n  tags = local.common_tags\n}\n\n# Key Vault\nresource \"azurerm_key_vault\" \"main\" {\n  name                        = \"kv-${var.environment}-${random_string.suffix.result}\"\n  resource_group_name         = data.azurerm_resource_group.main.name\n  location                    = data.azurerm_resource_group.main.location\n  enabled_for_disk_encryption = true\n  tenant_id                   = data.azurerm_client_config.current.tenant_id\n  soft_delete_retention_days  = 7\n  purge_protection_enabled    = false\n  sku_name                   = \"standard\"\n\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = data.azurerm_client_config.current.object_id\n\n    secret_permissions = [\n      \"Get\", \"List\", \"Set\", \"Delete\", \"Recover\", \"Backup\", \"Restore\"\n    ]\n\n    key_permissions = [\n      \"Get\", \"List\", \"Create\", \"Delete\", \"Recover\", \"Backup\", \"Restore\"\n    ]\n  }\n\n  tags = local.common_tags\n}\n\n# Random password for SQL Server\nresource \"random_password\" \"sql_password\" {\n  length           = 16\n  special          = true\n  override_special = \"!#$%&amp;*()-_=+[]{}&lt;&gt;:?\"\n}\n\n# Local values\nlocals {\n  common_tags = {\n    Environment = var.environment\n    Project     = \"MyApp\"\n    ManagedBy   = \"Terraform\"\n    CreatedAt   = timestamp()\n  }\n\n  app_settings = {\n    \"ConnectionStrings__DefaultConnection\" = \"Server=${azurerm_mssql_server.main.fully_qualified_domain_name};Database=${azurerm_mssql_database.main.name};User Id=sqladmin;Password=${random_password.sql_password.result};TrustServerCertificate=true\"\n    \"ConnectionStrings__Redis\"            = \"${azurerm_redis_cache.main.hostname}:${azurerm_redis_cache.main.ssl_port},password=${azurerm_redis_cache.main.primary_access_key},ssl=True,abortConnect=False\"\n    \"KeyVault__Url\"                       = azurerm_key_vault.main.vault_uri\n    \"Logging__LogLevel__Default\"          = var.environment == \"prod\" ? \"Warning\" : \"Information\"\n    \"Logging__LogLevel__Microsoft\"        = var.environment == \"prod\" ? \"Warning\" : \"Information\"\n    \"Cors__AllowedOrigins\"                = var.environment == \"prod\" ? \"https://myapp.com\" : \"*\"\n  }\n}\n\n# Outputs\noutput \"app_service_url\" {\n  description = \"App Service URL\"\n  value       = azurerm_windows_web_app.main.default_hostname\n}\n\noutput \"database_connection_string\" {\n  description = \"Database connection string\"\n  value       = \"Server=${azurerm_mssql_server.main.fully_qualified_domain_name};Database=${azurerm_mssql_database.main.name};User Id=sqladmin;Password=${random_password.sql_password.result};TrustServerCertificate=true\"\n  sensitive   = true\n}\n\noutput \"redis_connection_string\" {\n  description = \"Redis connection string\"\n  value       = \"${azurerm_redis_cache.main.hostname}:${azurerm_redis_cache.main.ssl_port},password=${azurerm_redis_cache.main.primary_access_key},ssl=True,abortConnect=False\"\n  sensitive   = true\n}\n\noutput \"key_vault_url\" {\n  description = \"Key Vault URL\"\n  value       = azurerm_key_vault.main.vault_uri\n}\n</code></pre>"},{"location":"mid-level/devops/environment-management/#2-environment-specific-terraform-files","title":"2. Environment-Specific Terraform Files","text":"<pre><code># environments/dev.tfvars\nenvironment = \"dev\"\nlocation = \"East US\"\nresource_group_name = \"rg-myapp-dev\"\napp_service_plan_sku = \"B1\"\ndatabase_sku = \"Basic\"\n\n# environments/staging.tfvars\nenvironment = \"staging\"\nlocation = \"East US\"\nresource_group_name = \"rg-myapp-staging\"\napp_service_plan_sku = \"S1\"\ndatabase_sku = \"Standard\"\n\n# environments/prod.tfvars\nenvironment = \"prod\"\nlocation = \"East US\"\nresource_group_name = \"rg-myapp-prod\"\napp_service_plan_sku = \"P1v2\"\ndatabase_sku = \"Premium\"\n</code></pre>"},{"location":"mid-level/devops/environment-management/#environment-monitoring","title":"Environment Monitoring","text":""},{"location":"mid-level/devops/environment-management/#1-environment-health-monitoring","title":"1. Environment Health Monitoring","text":"<p>Environment sa\u011fl\u0131k durumunu izleyen servis.</p> <pre><code>public class EnvironmentHealthMonitor : BackgroundService\n{\n    private readonly ILogger&lt;EnvironmentHealthMonitor&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IEnvironmentProvider _environmentProvider;\n    private readonly IHealthCheckService _healthCheckService;\n    private readonly IMetricsService _metricsService;\n\n    public EnvironmentHealthMonitor(\n        ILogger&lt;EnvironmentHealthMonitor&gt; logger,\n        IConfiguration configuration,\n        IEnvironmentProvider environmentProvider,\n        IHealthCheckService healthCheckService,\n        IMetricsService metricsService)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _environmentProvider = environmentProvider;\n        _healthCheckService = healthCheckService;\n        _metricsService = metricsService;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            try\n            {\n                await MonitorEnvironmentHealthAsync();\n\n                // Wait for next monitoring cycle\n                var interval = _configuration.GetValue&lt;int&gt;(\"EnvironmentMonitoring:IntervalSeconds\", 60);\n                await Task.Delay(TimeSpan.FromSeconds(interval), stoppingToken);\n            }\n            catch (OperationCanceledException)\n            {\n                // Service is stopping\n                break;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in environment health monitoring\");\n                await Task.Delay(TimeSpan.FromSeconds(30), stoppingToken);\n            }\n        }\n    }\n\n    private async Task MonitorEnvironmentHealthAsync()\n    {\n        var environment = _environmentProvider.GetCurrentEnvironment();\n        var startTime = DateTime.UtcNow;\n\n        _logger.LogDebug(\"Starting environment health monitoring for {Environment}\", environment);\n\n        try\n        {\n            // Run health checks\n            var healthReport = await _healthCheckService.CheckHealthAsync();\n\n            // Record metrics\n            await RecordHealthMetricsAsync(environment, healthReport, startTime);\n\n            // Check for critical issues\n            await CheckForCriticalIssuesAsync(environment, healthReport);\n\n            // Update environment status\n            await UpdateEnvironmentStatusAsync(environment, healthReport);\n\n            _logger.LogDebug(\"Environment health monitoring completed for {Environment}\", environment);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error monitoring environment health for {Environment}\", environment);\n\n            // Record failure metric\n            await _metricsService.RecordCounterAsync(\"environment_health_check_failures\", 1, \n                new Dictionary&lt;string, object&gt; { [\"environment\"] = environment });\n        }\n    }\n\n    private async Task RecordHealthMetricsAsync(string environment, HealthReport healthReport, DateTime startTime)\n    {\n        var duration = DateTime.UtcNow - startTime;\n\n        // Record health check duration\n        await _metricsService.RecordHistogramAsync(\"environment_health_check_duration\", duration.TotalMilliseconds,\n            new Dictionary&lt;string, object&gt; { [\"environment\"] = environment });\n\n        // Record health status\n        var healthyChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Healthy);\n        var unhealthyChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Unhealthy);\n        var degradedChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Degraded);\n\n        await _metricsService.RecordGaugeAsync(\"environment_health_checks_total\", healthReport.Entries.Count,\n            new Dictionary&lt;string, object&gt; { [\"environment\"] = environment });\n        await _metricsService.RecordGaugeAsync(\"environment_health_checks_healthy\", healthyChecks,\n            new Dictionary&lt;string, object&gt; { [\"environment\"] = environment });\n        await _metricsService.RecordGaugeAsync(\"environment_health_checks_unhealthy\", unhealthyChecks,\n            new Dictionary&lt;string, object&gt; { [\"environment\"] = environment });\n        await _metricsService.RecordGaugeAsync(\"environment_health_checks_degraded\", degradedChecks,\n            new Dictionary&lt;string, object&gt; { [\"environment\"] = environment });\n\n        // Record overall health status\n        var overallHealth = healthReport.Status == HealthStatus.Healthy ? 1 : 0;\n        await _metricsService.RecordGaugeAsync(\"environment_overall_health\", overallHealth,\n            new Dictionary&lt;string, object&gt; { [\"environment\"] = environment });\n    }\n\n    private async Task CheckForCriticalIssuesAsync(string environment, HealthReport healthReport)\n    {\n        var criticalIssues = healthReport.Entries\n            .Where(e =&gt; e.Value.Status == HealthStatus.Unhealthy &amp;&amp; \n                       IsCriticalHealthCheck(e.Key))\n            .ToList();\n\n        if (criticalIssues.Any())\n        {\n            _logger.LogWarning(\"Critical health issues detected in environment {Environment}: {Issues}\",\n                environment, string.Join(\", \", criticalIssues.Select(i =&gt; i.Key)));\n\n            // Send alert\n            await SendCriticalIssueAlertAsync(environment, criticalIssues);\n\n            // Record critical issue metric\n            await _metricsService.RecordCounterAsync(\"environment_critical_issues\", criticalIssues.Count,\n                new Dictionary&lt;string, object&gt; { [\"environment\"] = environment });\n        }\n    }\n\n    private bool IsCriticalHealthCheck(string healthCheckName)\n    {\n        var criticalChecks = new[]\n        {\n            \"database\",\n            \"redis\",\n            \"external_api\",\n            \"disk_space\"\n        };\n\n        return criticalChecks.Any(check =&gt; healthCheckName.Contains(check, StringComparison.OrdinalIgnoreCase));\n    }\n\n    private async Task SendCriticalIssueAlertAsync(string environment, List&lt;KeyValuePair&lt;string, HealthReportEntry&gt;&gt; criticalIssues)\n    {\n        try\n        {\n            var alertMessage = new\n            {\n                Environment = environment,\n                Timestamp = DateTime.UtcNow,\n                CriticalIssues = criticalIssues.Select(i =&gt; new\n                {\n                    HealthCheck = i.Key,\n                    Status = i.Value.Status.ToString(),\n                    Description = i.Value.Description,\n                    Duration = i.Value.Duration\n                }).ToArray()\n            };\n\n            // Send to configured alerting service (Slack, Teams, etc.)\n            var webhookUrl = _configuration[\"Alerting:WebhookUrl\"];\n            if (!string.IsNullOrEmpty(webhookUrl))\n            {\n                using var client = new HttpClient();\n                var json = JsonSerializer.Serialize(alertMessage);\n                var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(webhookUrl, content);\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogWarning(\"Failed to send critical issue alert. Status: {Status}\", response.StatusCode);\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending critical issue alert\");\n        }\n    }\n\n    private async Task UpdateEnvironmentStatusAsync(string environment, HealthReport healthReport)\n    {\n        try\n        {\n            var status = new EnvironmentStatus\n            {\n                EnvironmentName = environment,\n                LastChecked = DateTime.UtcNow,\n                OverallStatus = healthReport.Status.ToString(),\n                HealthyChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Healthy),\n                UnhealthyChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Unhealthy),\n                DegradedChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Degraded),\n                TotalChecks = healthReport.Entries.Count,\n                ResponseTime = healthReport.TotalDuration.TotalMilliseconds\n            };\n\n            // Store status in cache or database\n            await StoreEnvironmentStatusAsync(status);\n\n            _logger.LogDebug(\"Environment status updated for {Environment}: {Status}\", \n                environment, status.OverallStatus);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating environment status\");\n        }\n    }\n\n    private async Task StoreEnvironmentStatusAsync(EnvironmentStatus status)\n    {\n        // Implementation to store status in cache or database\n        await Task.CompletedTask;\n    }\n}\n\npublic class EnvironmentStatus\n{\n    public string EnvironmentName { get; set; }\n    public DateTime LastChecked { get; set; }\n    public string OverallStatus { get; set; }\n    public int HealthyChecks { get; set; }\n    public int UnhealthyChecks { get; set; }\n    public int DegradedChecks { get; set; }\n    public int TotalChecks { get; set; }\n    public double ResponseTime { get; set; }\n}\n</code></pre>"},{"location":"mid-level/devops/environment-management/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/devops/environment-management/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Environment Management nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Farkl\u0131 ortamlar\u0131n yap\u0131land\u0131r\u0131lmas\u0131, tutarl\u0131l\u0131k, g\u00fcvenlik, deployment reliability i\u00e7in kritik.</p> </li> <li> <p>Development, Staging, Production ortamlar\u0131 aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Cevap: Development (geli\u015ftirme), Staging (test), Production (canl\u0131). Her biri farkl\u0131 configuration ve security level.</p> </li> <li> <p>Configuration management nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Environment-specific config files, secrets management, configuration validation, centralized configuration.</p> </li> <li> <p>Infrastructure as Code nedir?</p> </li> <li> <p>Cevap: Infrastructure'\u0131 kod ile tan\u0131mlama, version control, automation, consistency, repeatability.</p> </li> <li> <p>Environment monitoring neden \u00f6nemlidir?</p> </li> <li>Cevap: Health tracking, issue detection, performance monitoring, alerting, proactive problem solving.</li> </ol>"},{"location":"mid-level/devops/environment-management/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Environment-specific configuration nas\u0131l implement edilir?</li> <li> <p>Cevap: Configuration providers, environment variables, appsettings files, secrets management.</p> </li> <li> <p>Terraform ile environment management nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Variable files, modules, state management, environment separation, resource tagging.</p> </li> <li> <p>Secrets management nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Key Vault, environment variables, configuration providers, encryption, access control.</p> </li> <li> <p>Environment health monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Health checks, metrics collection, alerting, status tracking, response time monitoring.</p> </li> <li> <p>Environment deployment automation nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: CI/CD pipelines, infrastructure provisioning, configuration management, health validation.</li> </ol>"},{"location":"mid-level/devops/environment-management/#best-practices","title":"Best Practices","text":"<ol> <li>Configuration Management</li> <li>Environment-specific config files kullan\u0131n</li> <li>Secrets management implement edin</li> <li>Configuration validation yap\u0131n</li> <li> <p>Centralized configuration sa\u011flay\u0131n</p> </li> <li> <p>Infrastructure as Code</p> </li> <li>Version control kullan\u0131n</li> <li>Environment separation yap\u0131n</li> <li>Resource tagging implement edin</li> <li> <p>State management optimize edin</p> </li> <li> <p>Security &amp; Compliance</p> </li> <li>Least privilege principle uygulay\u0131n</li> <li>Secrets encryption yap\u0131n</li> <li>Access control implement edin</li> <li> <p>Audit logging sa\u011flay\u0131n</p> </li> <li> <p>Monitoring &amp; Alerting</p> </li> <li>Health checks implement edin</li> <li>Metrics collection yap\u0131n</li> <li>Proactive alerting kurun</li> <li> <p>Performance monitoring sa\u011flay\u0131n</p> </li> <li> <p>Automation &amp; Deployment</p> </li> <li>CI/CD pipelines kullan\u0131n</li> <li>Infrastructure automation yap\u0131n</li> <li>Environment provisioning automate edin</li> <li>Rollback capability sa\u011flay\u0131n</li> </ol>"},{"location":"mid-level/devops/environment-management/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Environment Configuration</li> <li>Terraform Best Practices</li> <li>Infrastructure as Code</li> <li>Environment Management</li> <li>Configuration Management</li> </ul>"},{"location":"mid-level/devops/health-checks/","title":"Health Checks","text":""},{"location":"mid-level/devops/health-checks/#giris","title":"Giri\u015f","text":"<p>Health Checks, modern software systems'de uygulaman\u0131n ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131n sa\u011fl\u0131k durumunu s\u00fcrekli olarak izleyen ve raporlayan mekanizmalard\u0131r. Mid-level geli\u015ftiriciler i\u00e7in health checks implementasyonu, production environment'larda proactive monitoring ve issue detection i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, ASP.NET Core health checks, custom health checks, health check middleware ve health check monitoring konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/devops/health-checks/#aspnet-core-health-checks","title":"ASP.NET Core Health Checks","text":""},{"location":"mid-level/devops/health-checks/#1-basic-health-check-setup","title":"1. Basic Health Check Setup","text":"<p>ASP.NET Core'da health checks'in temel kurulumu.</p> <pre><code>public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        // Add health checks\n        services.AddHealthChecks()\n            .AddCheck(\"self\", () =&gt; HealthCheckResult.Healthy())\n            .AddCheck(\"database\", () =&gt; CheckDatabaseHealth())\n            .AddCheck(\"redis\", () =&gt; CheckRedisHealth())\n            .AddCheck(\"external_api\", () =&gt; CheckExternalApiHealth())\n            .AddCheck(\"disk_space\", () =&gt; CheckDiskSpaceHealth());\n\n        // Add health check UI (optional)\n        services.AddHealthChecksUI(setup =&gt;\n        {\n            setup.SetEvaluationTimeInSeconds(30);\n            setup.MaximumHistoryEntriesPerEndpoint(60);\n        })\n        .AddInMemoryStorage();\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        // Health check endpoint\n        app.UseEndpoints(endpoints =&gt;\n        {\n            endpoints.MapHealthChecks(\"/health\", new HealthCheckOptions\n            {\n                Predicate = _ =&gt; true,\n                ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse,\n                ResultStatusCodes =\n                {\n                    [HealthStatus.Healthy] = StatusCodes.Status200OK,\n                    [HealthStatus.Degraded] = StatusCodes.Status200OK,\n                    [HealthStatus.Unhealthy] = StatusCodes.Status503ServiceUnavailable,\n                },\n                AllowCachingResponses = false\n            });\n\n            // Health check UI\n            endpoints.MapHealthChecksUI(setup =&gt;\n            {\n                setup.UIPath = \"/health-ui\";\n                setup.AddCustomStylesheet(\"./wwwroot/css/health-checks.css\");\n            });\n        });\n    }\n\n    private HealthCheckResult CheckDatabaseHealth()\n    {\n        try\n        {\n            // Implement database health check logic\n            return HealthCheckResult.Healthy(\"Database is accessible\");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy(\"Database health check failed\", ex);\n        }\n    }\n\n    private HealthCheckResult CheckRedisHealth()\n    {\n        try\n        {\n            // Implement Redis health check logic\n            return HealthCheckResult.Healthy(\"Redis is accessible\");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy(\"Redis health check failed\", ex);\n        }\n    }\n\n    private HealthCheckResult CheckExternalApiHealth()\n    {\n        try\n        {\n            // Implement external API health check logic\n            return HealthCheckResult.Healthy(\"External API is accessible\");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy(\"External API health check failed\", ex);\n        }\n    }\n\n    private HealthCheckResult CheckDiskSpaceHealth()\n    {\n        try\n        {\n            var drive = new DriveInfo(Path.GetPathRoot(Environment.CurrentDirectory));\n            var freeSpacePercentage = (double)drive.AvailableFreeSpace / drive.TotalSize * 100;\n\n            if (freeSpacePercentage &gt; 20)\n            {\n                return HealthCheckResult.Healthy($\"Disk space is sufficient: {freeSpacePercentage:F1}% free\");\n            }\n            else if (freeSpacePercentage &gt; 10)\n            {\n                return HealthCheckResult.Degraded($\"Disk space is low: {freeSpacePercentage:F1}% free\");\n            }\n            else\n            {\n                return HealthCheckResult.Unhealthy($\"Disk space is critical: {freeSpacePercentage:F1}% free\");\n            }\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy(\"Disk space health check failed\", ex);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/devops/health-checks/#2-custom-health-check-implementation","title":"2. Custom Health Check Implementation","text":"<p>\u00d6zel health check'ler i\u00e7in interface ve implementation.</p> <pre><code>public interface ICustomHealthCheck\n{\n    string Name { get; }\n    string Description { get; }\n    Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default);\n}\n\npublic abstract class BaseHealthCheck : ICustomHealthCheck\n{\n    public abstract string Name { get; }\n    public abstract string Description { get; }\n\n    protected readonly ILogger Logger;\n    protected readonly IConfiguration Configuration;\n\n    protected BaseHealthCheck(ILogger logger, IConfiguration configuration)\n    {\n        Logger = logger;\n        Configuration = configuration;\n    }\n\n    public abstract Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default);\n\n    protected HealthCheckResult Success(string message = null, IDictionary&lt;string, object&gt; data = null)\n    {\n        return HealthCheckResult.Healthy(message, data);\n    }\n\n    protected HealthCheckResult Warning(string message, IDictionary&lt;string, object&gt; data = null)\n    {\n        return HealthCheckResult.Degraded(message, data);\n    }\n\n    protected HealthCheckResult Failure(string message, Exception exception = null, IDictionary&lt;string, object&gt; data = null)\n    {\n        return HealthCheckResult.Unhealthy(message, exception, data);\n    }\n\n    protected void LogHealthCheckStart()\n    {\n        Logger.LogDebug(\"Starting health check: {HealthCheckName}\", Name);\n    }\n\n    protected void LogHealthCheckSuccess(string message = null)\n    {\n        Logger.LogDebug(\"Health check {HealthCheckName} completed successfully: {Message}\", Name, message);\n    }\n\n    protected void LogHealthCheckWarning(string message)\n    {\n        Logger.LogWarning(\"Health check {HealthCheckName} completed with warning: {Message}\", Name, message);\n    }\n\n    protected void LogHealthCheckFailure(string message, Exception exception = null)\n    {\n        Logger.LogError(exception, \"Health check {HealthCheckName} failed: {Message}\", Name, message);\n    }\n}\n\npublic class DatabaseHealthCheck : BaseHealthCheck\n{\n    public override string Name =&gt; \"database\";\n    public override string Description =&gt; \"Checks if the database is accessible and responding\";\n\n    private readonly IDbConnectionFactory _connectionFactory;\n    private readonly TimeSpan _timeout;\n\n    public DatabaseHealthCheck(\n        ILogger&lt;DatabaseHealthCheck&gt; logger,\n        IConfiguration configuration,\n        IDbConnectionFactory connectionFactory)\n        : base(logger, configuration)\n    {\n        _connectionFactory = connectionFactory;\n        _timeout = TimeSpan.FromSeconds(\n            configuration.GetValue&lt;int&gt;(\"HealthChecks:Database:TimeoutSeconds\", 10));\n    }\n\n    public override async Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\n    {\n        LogHealthCheckStart();\n\n        try\n        {\n            using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);\n            cts.CancelAfter(_timeout);\n\n            using var connection = await _connectionFactory.CreateConnectionAsync();\n            await connection.OpenAsync(cts.Token);\n\n            // Test basic query\n            using var command = connection.CreateCommand();\n            command.CommandText = \"SELECT 1\";\n            command.CommandTimeout = (int)_timeout.TotalSeconds;\n\n            var result = await command.ExecuteScalarAsync(cts.Token);\n\n            if (result != null &amp;&amp; result.ToString() == \"1\")\n            {\n                var data = new Dictionary&lt;string, object&gt;\n                {\n                    [\"connection_string\"] = MaskConnectionString(connection.ConnectionString),\n                    [\"database_type\"] = connection.GetType().Name,\n                    [\"timeout\"] = _timeout.TotalSeconds\n                };\n\n                LogHealthCheckSuccess(\"Database is accessible and responding\");\n                return Success(\"Database is accessible and responding\", data);\n            }\n            else\n            {\n                LogHealthCheckWarning(\"Database query returned unexpected result\");\n                return Warning(\"Database query returned unexpected result\");\n            }\n        }\n        catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)\n        {\n            LogHealthCheckFailure(\"Database health check was cancelled\");\n            return Failure(\"Database health check was cancelled\");\n        }\n        catch (OperationCanceledException)\n        {\n            LogHealthCheckFailure(\"Database health check timed out\");\n            return Failure(\"Database health check timed out\", data: new Dictionary&lt;string, object&gt;\n            {\n                [\"timeout\"] = _timeout.TotalSeconds\n            });\n        }\n        catch (Exception ex)\n        {\n            LogHealthCheckFailure(\"Database health check failed\", ex);\n            return Failure(\"Database health check failed\", ex, new Dictionary&lt;string, object&gt;\n            {\n                [\"error_type\"] = ex.GetType().Name,\n                [\"error_message\"] = ex.Message\n            });\n        }\n    }\n\n    private string MaskConnectionString(string connectionString)\n    {\n        if (string.IsNullOrEmpty(connectionString))\n            return string.Empty;\n\n        // Mask sensitive information in connection string\n        var masked = connectionString;\n\n        // Mask password\n        var passwordMatch = Regex.Match(connectionString, @\"Password=([^;]+)\", RegexOptions.IgnoreCase);\n        if (passwordMatch.Success)\n        {\n            masked = masked.Replace(passwordMatch.Groups[1].Value, \"***\");\n        }\n\n        // Mask user ID\n        var userIdMatch = Regex.Match(connectionString, @\"User Id=([^;]+)\", RegexOptions.IgnoreCase);\n        if (userIdMatch.Success)\n        {\n            masked = masked.Replace(userIdMatch.Groups[1].Value, \"***\");\n        }\n\n        return masked;\n    }\n}\n\npublic class RedisHealthCheck : BaseHealthCheck\n{\n    public override string Name =&gt; \"redis\";\n    public override string Description =&gt; \"Checks if Redis cache is accessible and responding\";\n\n    private readonly IConnectionMultiplexer _redis;\n    private readonly TimeSpan _timeout;\n\n    public RedisHealthCheck(\n        ILogger&lt;RedisHealthCheck&gt; logger,\n        IConfiguration configuration,\n        IConnectionMultiplexer redis)\n        : base(logger, configuration)\n    {\n        _redis = redis;\n        _timeout = TimeSpan.FromSeconds(\n            configuration.GetValue&lt;int&gt;(\"HealthChecks:Redis:TimeoutSeconds\", 5));\n    }\n\n    public override async Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\n    {\n        LogHealthCheckStart();\n\n        try\n        {\n            using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);\n            cts.CancelAfter(_timeout);\n\n            var database = _redis.GetDatabase();\n\n            // Test Redis connection with PING command\n            var pingResult = await database.PingAsync();\n\n            if (pingResult.TotalMilliseconds &gt; 0)\n            {\n                var data = new Dictionary&lt;string, object&gt;\n                {\n                    [\"ping_time_ms\"] = pingResult.TotalMilliseconds,\n                    [\"endpoint_count\"] = _redis.GetEndPoints().Length,\n                    [\"timeout\"] = _timeout.TotalSeconds\n                };\n\n                LogHealthCheckSuccess($\"Redis is accessible (PING: {pingResult.TotalMilliseconds:F2}ms)\");\n                return Success($\"Redis is accessible (PING: {pingResult.TotalMilliseconds:F2}ms)\", data);\n            }\n            else\n            {\n                LogHealthCheckWarning(\"Redis PING returned unexpected result\");\n                return Warning(\"Redis PING returned unexpected result\");\n            }\n        }\n        catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)\n        {\n            LogHealthCheckFailure(\"Redis health check was cancelled\");\n            return Failure(\"Redis health check was cancelled\");\n        }\n        catch (OperationCanceledException)\n        {\n            LogHealthCheckFailure(\"Redis health check timed out\");\n            return Failure(\"Redis health check timed out\", data: new Dictionary&lt;string, object&gt;\n            {\n                [\"timeout\"] = _timeout.TotalSeconds\n            });\n        }\n        catch (Exception ex)\n        {\n            LogHealthCheckFailure(\"Redis health check failed\", ex);\n            return Failure(\"Redis health check failed\", ex, new Dictionary&lt;string, object&gt;\n            {\n                [\"error_type\"] = ex.GetType().Name,\n                [\"error_message\"] = ex.Message\n            });\n        }\n    }\n}\n\npublic class ExternalApiHealthCheck : BaseHealthCheck\n{\n    public override string Name =&gt; \"external_api\";\n    public override string Description =&gt; \"Checks if external API is accessible and responding\";\n\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly string _apiUrl;\n    private readonly TimeSpan _timeout;\n    private readonly int _expectedStatusCode;\n\n    public ExternalApiHealthCheck(\n        ILogger&lt;ExternalApiHealthCheck&gt; logger,\n        IConfiguration configuration,\n        IHttpClientFactory httpClientFactory)\n        : base(logger, configuration)\n    {\n        _httpClientFactory = httpClientFactory;\n        _apiUrl = configuration[\"HealthChecks:ExternalApi:Url\"];\n        _timeout = TimeSpan.FromSeconds(\n            configuration.GetValue&lt;int&gt;(\"HealthChecks:ExternalApi:TimeoutSeconds\", 10));\n        _expectedStatusCode = configuration.GetValue&lt;int&gt;(\"HealthChecks:ExternalApi:ExpectedStatusCode\", 200);\n    }\n\n    public override async Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\n    {\n        LogHealthCheckStart();\n\n        if (string.IsNullOrEmpty(_apiUrl))\n        {\n            LogHealthCheckWarning(\"External API URL not configured\");\n            return Warning(\"External API URL not configured\");\n        }\n\n        try\n        {\n            using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);\n            cts.CancelAfter(_timeout);\n\n            using var client = _httpClientFactory.CreateClient(\"HealthCheck\");\n            client.Timeout = _timeout;\n\n            var stopwatch = Stopwatch.StartNew();\n            var response = await client.GetAsync(_apiUrl, cts.Token);\n            stopwatch.Stop();\n\n            var responseTime = stopwatch.ElapsedMilliseconds;\n\n            if (response.StatusCode == (HttpStatusCode)_expectedStatusCode)\n            {\n                var data = new Dictionary&lt;string, object&gt;\n                {\n                    [\"response_time_ms\"] = responseTime,\n                    [\"status_code\"] = (int)response.StatusCode,\n                    [\"timeout\"] = _timeout.TotalSeconds,\n                    [\"url\"] = _apiUrl\n                };\n\n                LogHealthCheckSuccess($\"External API is accessible (Response time: {responseTime}ms)\");\n                return Success($\"External API is accessible (Response time: {responseTime}ms)\", data);\n            }\n            else\n            {\n                var data = new Dictionary&lt;string, object&gt;\n                {\n                    [\"expected_status_code\"] = _expectedStatusCode,\n                    [\"actual_status_code\"] = (int)response.StatusCode,\n                    [\"response_time_ms\"] = responseTime,\n                    [\"url\"] = _apiUrl\n                };\n\n                LogHealthCheckWarning($\"External API returned unexpected status code: {response.StatusCode}\");\n                return Warning($\"External API returned unexpected status code: {response.StatusCode}\", data);\n            }\n        }\n        catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)\n        {\n            LogHealthCheckFailure(\"External API health check was cancelled\");\n            return Failure(\"External API health check was cancelled\");\n        }\n        catch (OperationCanceledException)\n        {\n            LogHealthCheckFailure(\"External API health check timed out\");\n            return Failure(\"External API health check timed out\", data: new Dictionary&lt;string, object&gt;\n            {\n                [\"timeout\"] = _timeout.TotalSeconds,\n                [\"url\"] = _apiUrl\n            });\n        }\n        catch (Exception ex)\n        {\n            LogHealthCheckFailure(\"External API health check failed\", ex);\n            return Failure(\"External API health check failed\", ex, new Dictionary&lt;string, object&gt;\n            {\n                [\"error_type\"] = ex.GetType().Name,\n                [\"error_message\"] = ex.Message,\n                [\"url\"] = _apiUrl\n            });\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/devops/health-checks/#health-check-middleware","title":"Health Check Middleware","text":""},{"location":"mid-level/devops/health-checks/#1-custom-health-check-middleware","title":"1. Custom Health Check Middleware","text":"<p>Health check'leri \u00f6zelle\u015ftiren middleware.</p> <pre><code>public class HealthCheckMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;HealthCheckMiddleware&gt; _logger;\n    private readonly IHealthCheckService _healthCheckService;\n    private readonly HealthCheckOptions _options;\n\n    public HealthCheckMiddleware(\n        RequestDelegate next,\n        ILogger&lt;HealthCheckMiddleware&gt; logger,\n        IHealthCheckService healthCheckService,\n        IOptions&lt;HealthCheckOptions&gt; options)\n    {\n        _next = next;\n        _logger = logger;\n        _healthCheckService = healthCheckService;\n        _options = options.Value;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.Path.StartsWithSegments(\"/health\"))\n        {\n            await HandleHealthCheckAsync(context);\n            return;\n        }\n\n        await _next(context);\n    }\n\n    private async Task HandleHealthCheckAsync(HttpContext context)\n    {\n        try\n        {\n            var startTime = DateTime.UtcNow;\n            var stopwatch = Stopwatch.StartNew();\n\n            // Run health checks\n            var healthReport = await _healthCheckService.CheckHealthAsync(\n                predicate: _options.Predicate,\n                cancellationToken: context.RequestAborted);\n\n            stopwatch.Stop();\n\n            // Add timing information\n            var responseData = new\n            {\n                status = healthReport.Status.ToString().ToLowerInvariant(),\n                totalDuration = healthReport.TotalDuration.TotalMilliseconds,\n                checks = healthReport.Entries.Select(e =&gt; new\n                {\n                    name = e.Key,\n                    status = e.Value.Status.ToString().ToLowerInvariant(),\n                    description = e.Value.Description,\n                    duration = e.Value.Duration.TotalMilliseconds,\n                    tags = e.Value.Tags,\n                    data = e.Value.Data\n                }),\n                timestamp = startTime,\n                responseTime = stopwatch.ElapsedMilliseconds\n            };\n\n            // Set response status code\n            context.Response.StatusCode = GetStatusCode(healthReport.Status);\n            context.Response.ContentType = \"application/json\";\n\n            // Add custom headers\n            context.Response.Headers.Add(\"X-Health-Check-Timestamp\", startTime.ToString(\"O\"));\n            context.Response.Headers.Add(\"X-Health-Check-Duration\", stopwatch.ElapsedMilliseconds.ToString());\n            context.Response.Headers.Add(\"X-Health-Check-Status\", healthReport.Status.ToString());\n\n            // Write response\n            var json = JsonSerializer.Serialize(responseData, new JsonSerializerOptions\n            {\n                WriteIndented = true,\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            });\n\n            await context.Response.WriteAsync(json, context.RequestAborted);\n\n            // Log health check result\n            LogHealthCheckResult(healthReport, stopwatch.ElapsedMilliseconds);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during health check\");\n\n            context.Response.StatusCode = StatusCodes.Status500InternalServerError;\n            context.Response.ContentType = \"application/json\";\n\n            var errorResponse = new\n            {\n                status = \"error\",\n                message = \"Health check failed\",\n                error = ex.Message,\n                timestamp = DateTime.UtcNow\n            };\n\n            var json = JsonSerializer.Serialize(errorResponse, new JsonSerializerOptions\n            {\n                WriteIndented = true,\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            });\n\n            await context.Response.WriteAsync(json, context.RequestAborted);\n        }\n    }\n\n    private int GetStatusCode(HealthStatus status)\n    {\n        return status switch\n        {\n            HealthStatus.Healthy =&gt; StatusCodes.Status200OK,\n            HealthStatus.Degraded =&gt; StatusCodes.Status200OK,\n            HealthStatus.Unhealthy =&gt; StatusCodes.Status503ServiceUnavailable,\n            _ =&gt; StatusCodes.Status200OK\n        };\n    }\n\n    private void LogHealthCheckResult(HealthReport healthReport, long responseTime)\n    {\n        var healthyCount = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Healthy);\n        var unhealthyCount = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Unhealthy);\n        var degradedCount = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Degraded);\n\n        if (healthReport.Status == HealthStatus.Healthy)\n        {\n            _logger.LogInformation(\"Health check completed successfully. Status: {Status}, \" +\n                \"Healthy: {HealthyCount}, Unhealthy: {UnhealthyCount}, Degraded: {DegradedCount}, \" +\n                \"Total Duration: {TotalDuration}ms, Response Time: {ResponseTime}ms\",\n                healthReport.Status, healthyCount, unhealthyCount, degradedCount,\n                healthReport.TotalDuration.TotalMilliseconds, responseTime);\n        }\n        else if (healthReport.Status == HealthStatus.Degraded)\n        {\n            _logger.LogWarning(\"Health check completed with degraded status. Status: {Status}, \" +\n                \"Healthy: {HealthyCount}, Unhealthy: {UnhealthyCount}, Degraded: {DegradedCount}, \" +\n                \"Total Duration: {TotalDuration}ms, Response Time: {ResponseTime}ms\",\n                healthReport.Status, healthyCount, unhealthyCount, degradedCount,\n                healthReport.TotalDuration.TotalMilliseconds, responseTime);\n        }\n        else\n        {\n            _logger.LogError(\"Health check completed with unhealthy status. Status: {Status}, \" +\n                \"Healthy: {HealthyCount}, Unhealthy: {UnhealthyCount}, Degraded: {DegradedCount}, \" +\n                \"Total Duration: {TotalDuration}ms, Response Time: {ResponseTime}ms\",\n                healthReport.Status, healthyCount, unhealthyCount, degradedCount,\n                healthReport.TotalDuration.TotalMilliseconds, responseTime);\n        }\n    }\n}\n\npublic class HealthCheckOptions\n{\n    public Func&lt;HealthCheckRegistration, bool&gt; Predicate { get; set; } = _ =&gt; true;\n    public bool AllowCachingResponses { get; set; } = false;\n    public TimeSpan CacheExpiration { get; set; } = TimeSpan.FromMinutes(5);\n}\n</code></pre>"},{"location":"mid-level/devops/health-checks/#2-health-check-response-caching","title":"2. Health Check Response Caching","text":"<p>Health check response'lar\u0131n\u0131 cache'leyen middleware.</p> <pre><code>public class HealthCheckCachingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;HealthCheckCachingMiddleware&gt; _logger;\n    private readonly IMemoryCache _cache;\n    private readonly TimeSpan _cacheExpiration;\n\n    public HealthCheckCachingMiddleware(\n        RequestDelegate next,\n        ILogger&lt;HealthCheckCachingMiddleware&gt; logger,\n        IMemoryCache cache,\n        IConfiguration configuration)\n    {\n        _next = next;\n        _logger = logger;\n        _cache = cache;\n        _cacheExpiration = TimeSpan.FromSeconds(\n            configuration.GetValue&lt;int&gt;(\"HealthChecks:Caching:ExpirationSeconds\", 30));\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.Path.StartsWithSegments(\"/health\"))\n        {\n            await HandleCachedHealthCheckAsync(context);\n            return;\n        }\n\n        await _next(context);\n    }\n\n    private async Task HandleCachedHealthCheckAsync(HttpContext context)\n    {\n        var cacheKey = $\"health_check_{context.Request.QueryString}\";\n\n        // Check if we have a cached response\n        if (_cache.TryGetValue(cacheKey, out CachedHealthCheckResponse cachedResponse))\n        {\n            // Check if cache is still valid\n            if (DateTime.UtcNow &lt; cachedResponse.ExpiresAt)\n            {\n                _logger.LogDebug(\"Returning cached health check response. Cache expires at {ExpiresAt}\", \n                    cachedResponse.ExpiresAt);\n\n                context.Response.StatusCode = cachedResponse.StatusCode;\n                context.Response.ContentType = cachedResponse.ContentType;\n\n                foreach (var header in cachedResponse.Headers)\n                {\n                    context.Response.Headers[header.Key] = header.Value;\n                }\n\n                await context.Response.WriteAsync(cachedResponse.Body, context.RequestAborted);\n                return;\n            }\n            else\n            {\n                _logger.LogDebug(\"Cached health check response expired at {ExpiresAt}\", cachedResponse.ExpiresAt);\n                _cache.Remove(cacheKey);\n            }\n        }\n\n        // Capture the response\n        var originalBodyStream = context.Response.Body;\n        using var memoryStream = new MemoryStream();\n        context.Response.Body = memoryStream;\n\n        try\n        {\n            // Call the next middleware\n            await _next(context);\n\n            // Read the response\n            memoryStream.Position = 0;\n            var responseBody = await new StreamReader(memoryStream).ReadToEndAsync();\n\n            // Cache the response if it's successful\n            if (context.Response.StatusCode == StatusCodes.Status200OK || \n                context.Response.StatusCode == StatusCodes.Status503ServiceUnavailable)\n            {\n                var cachedResponse = new CachedHealthCheckResponse\n                {\n                    StatusCode = context.Response.StatusCode,\n                    ContentType = context.Response.ContentType,\n                    Headers = context.Response.Headers.ToDictionary(h =&gt; h.Key, h =&gt; h.Value.ToString()),\n                    Body = responseBody,\n                    ExpiresAt = DateTime.UtcNow.Add(_cacheExpiration)\n                };\n\n                _cache.Set(cacheKey, cachedResponse, _cacheExpiration);\n\n                _logger.LogDebug(\"Cached health check response. Cache expires at {ExpiresAt}\", \n                    cachedResponse.ExpiresAt);\n            }\n\n            // Copy the response back to the original stream\n            memoryStream.Position = 0;\n            await memoryStream.CopyToAsync(originalBodyStream);\n        }\n        finally\n        {\n            context.Response.Body = originalBodyStream;\n        }\n    }\n}\n\npublic class CachedHealthCheckResponse\n{\n    public int StatusCode { get; set; }\n    public string ContentType { get; set; }\n    public Dictionary&lt;string, string&gt; Headers { get; set; } = new Dictionary&lt;string, string&gt;();\n    public string Body { get; set; }\n    public DateTime ExpiresAt { get; set; }\n}\n</code></pre>"},{"location":"mid-level/devops/health-checks/#health-check-monitoring","title":"Health Check Monitoring","text":""},{"location":"mid-level/devops/health-checks/#1-health-check-metrics-collection","title":"1. Health Check Metrics Collection","text":"<p>Health check'lerden metrics toplayan servis.</p> <pre><code>public class HealthCheckMetricsCollector : BackgroundService\n{\n    private readonly ILogger&lt;HealthCheckMetricsCollector&gt; _logger;\n    private readonly IHealthCheckService _healthCheckService;\n    private readonly IMetricsService _metricsService;\n    private readonly IConfiguration _configuration;\n    private readonly Timer _timer;\n\n    public HealthCheckMetricsCollector(\n        ILogger&lt;HealthCheckMetricsCollector&gt; logger,\n        IHealthCheckService healthCheckService,\n        IMetricsService metricsService,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _healthCheckService = healthCheckService;\n        _metricsService = metricsService;\n        _configuration = configuration;\n\n        var interval = _configuration.GetValue&lt;int&gt;(\"HealthChecks:Metrics:CollectionIntervalSeconds\", 60);\n        _timer = new Timer(CollectMetrics, null, TimeSpan.Zero, TimeSpan.FromSeconds(interval));\n    }\n\n    protected override Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        // Service is managed by timer\n        return Task.CompletedTask;\n    }\n\n    private async void CollectMetrics(object state)\n    {\n        try\n        {\n            await CollectHealthCheckMetricsAsync();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error collecting health check metrics\");\n        }\n    }\n\n    private async Task CollectHealthCheckMetricsAsync()\n    {\n        try\n        {\n            var startTime = DateTime.UtcNow;\n            var stopwatch = Stopwatch.StartNew();\n\n            // Run health checks\n            var healthReport = await _healthCheckService.CheckHealthAsync();\n            stopwatch.Stop();\n\n            // Record overall metrics\n            await RecordOverallMetricsAsync(healthReport, stopwatch.ElapsedMilliseconds);\n\n            // Record individual check metrics\n            await RecordIndividualCheckMetricsAsync(healthReport);\n\n            // Record trend metrics\n            await RecordTrendMetricsAsync(healthReport, startTime);\n\n            _logger.LogDebug(\"Health check metrics collected successfully. Duration: {Duration}ms\", \n                stopwatch.ElapsedMilliseconds);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error collecting health check metrics\");\n\n            // Record failure metric\n            await _metricsService.RecordCounterAsync(\"health_check_metrics_collection_failures\", 1);\n        }\n    }\n\n    private async Task RecordOverallMetricsAsync(HealthReport healthReport, long responseTime)\n    {\n        var totalChecks = healthReport.Entries.Count;\n        var healthyChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Healthy);\n        var unhealthyChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Unhealthy);\n        var degradedChecks = healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Degraded);\n\n        // Record counts\n        await _metricsService.RecordGaugeAsync(\"health_checks_total\", totalChecks);\n        await _metricsService.RecordGaugeAsync(\"health_checks_healthy\", healthyChecks);\n        await _metricsService.RecordGaugeAsync(\"health_checks_unhealthy\", unhealthyChecks);\n        await _metricsService.RecordGaugeAsync(\"health_checks_degraded\", degradedChecks);\n\n        // Record percentages\n        var healthyPercentage = totalChecks &gt; 0 ? (double)healthyChecks / totalChecks * 100 : 0;\n        var unhealthyPercentage = totalChecks &gt; 0 ? (double)unhealthyChecks / totalChecks * 100 : 0;\n        var degradedPercentage = totalChecks &gt; 0 ? (double)degradedChecks / totalChecks * 100 : 0;\n\n        await _metricsService.RecordGaugeAsync(\"health_checks_healthy_percentage\", healthyPercentage);\n        await _metricsService.RecordGaugeAsync(\"health_checks_unhealthy_percentage\", unhealthyPercentage);\n        await _metricsService.RecordGaugeAsync(\"health_checks_degraded_percentage\", degradedPercentage);\n\n        // Record overall status\n        var overallStatus = healthReport.Status == HealthStatus.Healthy ? 1 : 0;\n        await _metricsService.RecordGaugeAsync(\"health_checks_overall_status\", overallStatus);\n\n        // Record response time\n        await _metricsService.RecordHistogramAsync(\"health_checks_response_time\", responseTime);\n\n        // Record total duration\n        await _metricsService.RecordHistogramAsync(\"health_checks_total_duration\", \n            healthReport.TotalDuration.TotalMilliseconds);\n    }\n\n    private async Task RecordIndividualCheckMetricsAsync(HealthReport healthReport)\n    {\n        foreach (var entry in healthReport.Entries)\n        {\n            var checkName = entry.Key;\n            var check = entry.Value;\n\n            // Record individual check status\n            var status = check.Status == HealthStatus.Healthy ? 1 : 0;\n            await _metricsService.RecordGaugeAsync(\"health_check_status\", status, \n                new Dictionary&lt;string, object&gt; { [\"check_name\"] = checkName });\n\n            // Record individual check duration\n            await _metricsService.RecordHistogramAsync(\"health_check_duration\", \n                check.Duration.TotalMilliseconds,\n                new Dictionary&lt;string, object&gt; { [\"check_name\"] = checkName });\n\n            // Record individual check tags\n            foreach (var tag in check.Tags)\n            {\n                await _metricsService.RecordGaugeAsync(\"health_check_tag\", 1,\n                    new Dictionary&lt;string, object&gt; \n                    { \n                        [\"check_name\"] = checkName,\n                        [\"tag\"] = tag \n                    });\n            }\n        }\n    }\n\n    private async Task RecordTrendMetricsAsync(HealthReport healthReport, DateTime timestamp)\n    {\n        // Record time-based metrics\n        var hourOfDay = timestamp.Hour;\n        var dayOfWeek = (int)timestamp.DayOfWeek;\n\n        await _metricsService.RecordGaugeAsync(\"health_checks_by_hour\", \n            healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Healthy),\n            new Dictionary&lt;string, object&gt; { [\"hour\"] = hourOfDay });\n\n        await _metricsService.RecordGaugeAsync(\"health_checks_by_day\", \n            healthReport.Entries.Count(e =&gt; e.Value.Status == HealthStatus.Healthy),\n            new Dictionary&lt;string, object&gt; { [\"day\"] = dayOfWeek });\n\n        // Record consecutive failures for critical checks\n        var criticalChecks = healthReport.Entries\n            .Where(e =&gt; IsCriticalHealthCheck(e.Key))\n            .ToList();\n\n        foreach (var check in criticalChecks)\n        {\n            if (check.Value.Status == HealthStatus.Unhealthy)\n            {\n                var failureKey = $\"consecutive_failures_{check.Key}\";\n                var currentFailures = await GetConsecutiveFailuresAsync(failureKey);\n                var newFailures = currentFailures + 1;\n\n                await SetConsecutiveFailuresAsync(failureKey, newFailures);\n\n                await _metricsService.RecordGaugeAsync(\"health_check_consecutive_failures\", newFailures,\n                    new Dictionary&lt;string, object&gt; { [\"check_name\"] = check.Key });\n            }\n            else\n            {\n                // Reset consecutive failures on success\n                var failureKey = $\"consecutive_failures_{check.Key}\";\n                await SetConsecutiveFailuresAsync(failureKey, 0);\n\n                await _metricsService.RecordGaugeAsync(\"health_check_consecutive_failures\", 0,\n                    new Dictionary&lt;string, object&gt; { [\"check_name\"] = check.Key });\n            }\n        }\n    }\n\n    private bool IsCriticalHealthCheck(string checkName)\n    {\n        var criticalChecks = new[]\n        {\n            \"database\",\n            \"redis\",\n            \"external_api\"\n        };\n\n        return criticalChecks.Any(check =&gt; checkName.Contains(check, StringComparison.OrdinalIgnoreCase));\n    }\n\n    private async Task&lt;int&gt; GetConsecutiveFailuresAsync(string key)\n    {\n        // Implementation to get consecutive failures from cache or database\n        return await Task.FromResult(0);\n    }\n\n    private async Task SetConsecutiveFailuresAsync(string key, int value)\n    {\n        // Implementation to set consecutive failures in cache or database\n        await Task.CompletedTask;\n    }\n\n    public override void Dispose()\n    {\n        _timer?.Dispose();\n        base.Dispose();\n    }\n}\n</code></pre>"},{"location":"mid-level/devops/health-checks/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/devops/health-checks/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Health Checks nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Uygulama ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131n sa\u011fl\u0131k durumunu izleyen mekanizmalar. Proactive monitoring, issue detection, load balancer integration i\u00e7in kritik.</p> </li> <li> <p>ASP.NET Core'da health checks nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: <code>AddHealthChecks()</code>, custom health checks, health check endpoints, health check UI.</p> </li> <li> <p>Health check status'lar\u0131 nelerdir?</p> </li> <li> <p>Cevap: Healthy (sa\u011fl\u0131kl\u0131), Unhealthy (sa\u011fl\u0131ks\u0131z), Degraded (bozulmu\u015f).</p> </li> <li> <p>Health check caching neden kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Performance improvement, reduced load on dependencies, faster response times.</p> </li> <li> <p>Health check metrics neden toplan\u0131r?</p> </li> <li>Cevap: Trend analysis, alerting, performance monitoring, capacity planning.</li> </ol>"},{"location":"mid-level/devops/health-checks/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Custom health check nas\u0131l implement edilir?</li> <li> <p>Cevap: <code>IHealthCheck</code> interface implement, custom logic, error handling, timeout management.</p> </li> <li> <p>Health check middleware nas\u0131l \u00f6zelle\u015ftirilir?</p> </li> <li> <p>Cevap: Custom middleware, response formatting, custom headers, logging.</p> </li> <li> <p>Health check response caching nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Memory cache, response capture, cache invalidation, performance optimization.</p> </li> <li> <p>Health check metrics collection nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Background service, metrics aggregation, trend analysis, alerting integration.</p> </li> <li> <p>Health check timeout management nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: CancellationToken, timeout configuration, graceful degradation, error handling.</li> </ol>"},{"location":"mid-level/devops/health-checks/#best-practices","title":"Best Practices","text":"<ol> <li>Health Check Implementation</li> <li>Comprehensive health checks implement edin</li> <li>Timeout management yap\u0131n</li> <li>Error handling implement edin</li> <li> <p>Performance impact minimize edin</p> </li> <li> <p>Health Check Configuration</p> </li> <li>Environment-specific configuration kullan\u0131n</li> <li>Configurable timeouts sa\u011flay\u0131n</li> <li>Health check dependencies minimize edin</li> <li> <p>Graceful degradation implement edin</p> </li> <li> <p>Health Check Monitoring</p> </li> <li>Metrics collection yap\u0131n</li> <li>Trend analysis implement edin</li> <li>Alerting kurun</li> <li> <p>Performance monitoring sa\u011flay\u0131n</p> </li> <li> <p>Health Check Security</p> </li> <li>Authentication implement edin</li> <li>Rate limiting yap\u0131n</li> <li>Sensitive information expose etmeyin</li> <li> <p>Access control sa\u011flay\u0131n</p> </li> <li> <p>Health Check Performance</p> </li> <li>Response caching kullan\u0131n</li> <li>Async operations implement edin</li> <li>Resource usage optimize edin</li> <li>Load testing yap\u0131n</li> </ol>"},{"location":"mid-level/devops/health-checks/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Health Checks</li> <li>Health Check UI</li> <li>Health Check Best Practices</li> <li>Health Check Monitoring</li> <li>Health Check Patterns</li> </ul>"},{"location":"mid-level/entity-framework/","title":"Entity Framework","text":""},{"location":"mid-level/entity-framework/#giris","title":"Giri\u015f","text":"<p>Entity Framework, .NET ekosisteminde object-relational mapping (ORM) sa\u011flayan g\u00fc\u00e7l\u00fc bir framework'tir. Mid-level geli\u015ftiriciler i\u00e7in Entity Framework'\u00fcn advanced \u00f6zelliklerini anlamak, performansl\u0131 ve \u00f6l\u00e7eklenebilir veritaban\u0131 uygulamalar\u0131 geli\u015ftirmek i\u00e7in kritik \u00f6neme sahiptir. Bu b\u00f6l\u00fcm, performance optimization, advanced querying, change tracking, bulk operations, concurrency, raw SQL, interceptors, value objects, complex types, shadow properties, global query filters, database functions, custom migrations ve multiple databases konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/entity-framework/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/entity-framework/#1-performance-optimization","title":"1. Performance Optimization","text":"<p>Entity Framework'te performans optimizasyonu teknikleri, query optimization, lazy loading vs eager loading, ve memory management.</p> <p>\u00d6\u011frenilecekler: - Query optimization strategies - Lazy vs Eager loading - Memory usage optimization - Connection pooling - Query plan analysis</p>"},{"location":"mid-level/entity-framework/#2-advanced-querying","title":"2. Advanced Querying","text":"<p>Complex LINQ queries, raw SQL integration, stored procedures, ve custom query methods.</p> <p>\u00d6\u011frenilecekler: - Complex LINQ operations - Raw SQL execution - Stored procedure calls - Dynamic query building - Query composition</p>"},{"location":"mid-level/entity-framework/#3-change-tracking","title":"3. Change Tracking","text":"<p>Entity state management, change detection, ve change tracking optimization.</p> <p>\u00d6\u011frenilecekler: - Entity states (Added, Modified, Deleted, Unchanged) - Change tracking strategies - Performance optimization - Bulk change operations - Change notification</p>"},{"location":"mid-level/entity-framework/#4-bulk-operations","title":"4. Bulk Operations","text":"<p>Large dataset operations, batch processing, ve bulk insert/update/delete operations.</p> <p>\u00d6\u011frenilecekler: - Bulk insert strategies - Batch processing - Performance optimization - Memory management - Transaction handling</p>"},{"location":"mid-level/entity-framework/#5-concurrency","title":"5. Concurrency","text":"<p>Optimistic ve pessimistic concurrency control, conflict resolution, ve concurrency handling.</p> <p>\u00d6\u011frenilecekler: - Optimistic concurrency - Pessimistic concurrency - Conflict detection - Resolution strategies - Performance implications</p>"},{"location":"mid-level/entity-framework/#6-raw-sql","title":"6. Raw SQL","text":"<p>Native SQL execution, parameterized queries, ve SQL injection prevention.</p> <p>\u00d6\u011frenilecekler: - FromSqlRaw usage - ExecuteSqlRaw - Parameter handling - Security considerations - Performance benefits</p>"},{"location":"mid-level/entity-framework/#7-interceptors","title":"7. Interceptors","text":"<p>Query interception, modification, ve custom behavior injection.</p> <p>\u00d6\u011frenilecekler: - Query interceptors - SaveChanges interceptors - Custom behavior injection - Logging and auditing - Performance monitoring</p>"},{"location":"mid-level/entity-framework/#8-value-objects","title":"8. Value Objects","text":"<p>Immutable value objects, complex types, ve domain modeling.</p> <p>\u00d6\u011frenilecekler: - Value object design - Complex type mapping - Immutability patterns - Domain modeling - Performance considerations</p>"},{"location":"mid-level/entity-framework/#9-complex-types","title":"9. Complex Types","text":"<p>Complex property mapping, nested objects, ve custom type handling.</p> <p>\u00d6\u011frenilecekler: - Complex type configuration - Nested object mapping - Custom type converters - Serialization handling - Performance optimization</p>"},{"location":"mid-level/entity-framework/#10-shadow-properties","title":"10. Shadow Properties","text":"<p>Database-only properties, computed columns, ve metadata management.</p> <p>\u00d6\u011frenilecekler: - Shadow property usage - Computed column mapping - Metadata management - Performance implications - Use case scenarios</p>"},{"location":"mid-level/entity-framework/#11-global-query-filters","title":"11. Global Query Filters","text":"<p>Application-wide query filtering, soft delete, ve multi-tenancy support.</p> <p>\u00d6\u011frenilecekler: - Global filter configuration - Soft delete implementation - Multi-tenancy support - Performance considerations - Filter management</p>"},{"location":"mid-level/entity-framework/#12-database-functions","title":"12. Database Functions","text":"<p>Custom database functions, user-defined functions, ve function mapping.</p> <p>\u00d6\u011frenilecekler: - Database function mapping - Custom function creation - Parameter handling - Return type mapping - Performance optimization</p>"},{"location":"mid-level/entity-framework/#13-custom-migrations","title":"13. Custom Migrations","text":"<p>Advanced migration scenarios, custom migration logic, ve complex schema changes.</p> <p>\u00d6\u011frenilecekler: - Custom migration classes - Complex schema changes - Data migration - Rollback strategies - Testing migrations</p>"},{"location":"mid-level/entity-framework/#14-multiple-databases","title":"14. Multiple Databases","text":"<p>Multi-database scenarios, database switching, ve cross-database operations.</p> <p>\u00d6\u011frenilecekler: - Multi-database configuration - Database switching - Cross-database queries - Transaction management - Performance considerations</p>"},{"location":"mid-level/entity-framework/#15-distributed-transactions","title":"15. Distributed Transactions","text":"<p>Cross-database transactions, distributed transaction coordination, ve consistency management.</p> <p>\u00d6\u011frenilecekler: - Distributed transaction patterns - Two-phase commit - Saga pattern integration - Consistency guarantees - Performance implications</p>"},{"location":"mid-level/entity-framework/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/entity-framework/#1-performance-critical-applications","title":"1. Performance Critical Applications","text":"<ul> <li>High-traffic web applications</li> <li>Data-intensive systems</li> <li>Real-time data processing</li> <li>Enterprise applications</li> </ul>"},{"location":"mid-level/entity-framework/#2-scalability-requirements","title":"2. Scalability Requirements","text":"<ul> <li>Large dataset handling</li> <li>Multi-tenant architectures</li> <li>Distributed systems</li> <li>Cloud-native applications</li> </ul>"},{"location":"mid-level/entity-framework/#3-data-integrity","title":"3. Data Integrity","text":"<ul> <li>Complex business rules</li> <li>Audit trail requirements</li> <li>Compliance requirements</li> <li>Data consistency</li> </ul>"},{"location":"mid-level/entity-framework/#4-developer-productivity","title":"4. Developer Productivity","text":"<ul> <li>Rapid development</li> <li>Code maintainability</li> <li>Testing strategies</li> <li>Deployment automation</li> </ul>"},{"location":"mid-level/entity-framework/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te N+1 problem nedir?</li> <li> <p>Cevap: Multiple database queries, Include statements, eager loading strategies.</p> </li> <li> <p>Change tracking nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Entity state management, change detection, snapshot comparison.</p> </li> <li> <p>Bulk operations ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Large datasets, performance requirements, batch processing.</p> </li> <li> <p>Concurrency conflict nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?</p> </li> <li> <p>Cevap: Optimistic concurrency, conflict detection, resolution strategies.</p> </li> <li> <p>Raw SQL ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Complex queries, performance requirements, stored procedures.</li> </ol>"},{"location":"mid-level/entity-framework/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Query performance nas\u0131l optimize edilir?</li> <li> <p>Cevap: Indexing, query optimization, lazy loading, projection.</p> </li> <li> <p>Global query filters nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: HasQueryFilter, soft delete, multi-tenancy.</p> </li> <li> <p>Custom migrations nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: Migration class inheritance, custom logic, data migration.</p> </li> <li> <p>Multiple databases nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap: DbContext configuration, connection strings, database switching.</p> </li> <li> <p>Distributed transactions nas\u0131l handle edilir?</p> </li> <li>Cevap: Two-phase commit, saga pattern, eventual consistency.</li> </ol>"},{"location":"mid-level/entity-framework/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/entity-framework/#1-performance-optimization_1","title":"1. Performance Optimization","text":"<ul> <li>Use appropriate loading strategies</li> <li>Implement query optimization</li> <li>Monitor performance metrics</li> <li>Use connection pooling</li> <li>Implement caching strategies</li> </ul>"},{"location":"mid-level/entity-framework/#2-data-modeling","title":"2. Data Modeling","text":"<ul> <li>Design efficient entity relationships</li> <li>Use appropriate data types</li> <li>Implement proper indexing</li> <li>Consider denormalization</li> <li>Plan for scalability</li> </ul>"},{"location":"mid-level/entity-framework/#3-query-management","title":"3. Query Management","text":"<ul> <li>Use parameterized queries</li> <li>Implement query caching</li> <li>Monitor query performance</li> <li>Use appropriate LINQ methods</li> <li>Consider raw SQL when needed</li> </ul>"},{"location":"mid-level/entity-framework/#4-transaction-management","title":"4. Transaction Management","text":"<ul> <li>Use appropriate transaction scope</li> <li>Handle concurrency properly</li> <li>Implement rollback strategies</li> <li>Monitor transaction performance</li> <li>Consider distributed transactions</li> </ul>"},{"location":"mid-level/entity-framework/#5-migration-strategy","title":"5. Migration Strategy","text":"<ul> <li>Plan migration sequences</li> <li>Test migrations thoroughly</li> <li>Implement rollback procedures</li> <li>Monitor migration performance</li> <li>Document schema changes</li> </ul>"},{"location":"mid-level/entity-framework/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Entity Framework Core Documentation</li> <li>EF Core Performance</li> <li>EF Core Concurrency</li> <li>EF Core Migrations</li> <li>EF Core Querying</li> <li>EF Core Change Tracking </li> </ul>"},{"location":"mid-level/entity-framework/advanced-querying/","title":"Entity Framework - Advanced Querying","text":""},{"location":"mid-level/entity-framework/advanced-querying/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te ileri seviye sorgulama teknikleri, veritaban\u0131 i\u015flemlerini daha verimli ve esnek bir \u015fekilde ger\u00e7ekle\u015ftirmeyi sa\u011flar. Mid-level geli\u015ftiriciler i\u00e7in bu teknikler kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/entity-framework/advanced-querying/#advanced-queryingin-onemi","title":"Advanced Querying'in \u00d6nemi","text":"<ol> <li>Performans</li> <li>Daha verimli sorgular</li> <li>Daha az veritaban\u0131 y\u00fck\u00fc</li> <li>Daha iyi sorgu planlar\u0131</li> <li> <p>Daha h\u0131zl\u0131 yan\u0131t s\u00fcreleri</p> </li> <li> <p>Esneklik</p> </li> <li>Karma\u015f\u0131k sorgular</li> <li>Dinamik sorgular</li> <li>\u00d6zelle\u015ftirilmi\u015f sorgular</li> <li> <p>Verimli veri filtreleme</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha temiz kod</li> <li>Daha kolay debug</li> <li>Daha iyi test edilebilirlik</li> <li>Daha kolay bak\u0131m</li> </ol>"},{"location":"mid-level/entity-framework/advanced-querying/#advanced-querying-teknikleri","title":"Advanced Querying Teknikleri","text":"<ol> <li> <p>LINQ to Entities <pre><code>// Temel sorgu\nvar blogs = await _context.Blogs\n    .Where(b =&gt; b.Rating &gt; 3)\n    .OrderByDescending(b =&gt; b.CreatedDate)\n    .ToListAsync();\n\n// Include ile ili\u015fkili veriler\nvar blogs = await _context.Blogs\n    .Include(b =&gt; b.Posts)\n        .ThenInclude(p =&gt; p.Comments)\n    .ToListAsync();\n\n// Projection\nvar blogTitles = await _context.Blogs\n    .Select(b =&gt; new BlogDto\n    {\n        Id = b.Id,\n        Title = b.Title,\n        PostCount = b.Posts.Count\n    })\n    .ToListAsync();\n\n// Group by\nvar blogGroups = await _context.Blogs\n    .GroupBy(b =&gt; b.Category)\n    .Select(g =&gt; new\n    {\n        Category = g.Key,\n        Count = g.Count(),\n        AverageRating = g.Average(b =&gt; b.Rating)\n    })\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>Raw SQL Queries <pre><code>// Temel raw SQL\nvar blogs = await _context.Blogs\n    .FromSqlRaw(\"SELECT * FROM Blogs WHERE Rating &gt; {0}\", 3)\n    .ToListAsync();\n\n// Stored procedure\nvar blogs = await _context.Blogs\n    .FromSqlRaw(\"EXEC GetTopRatedBlogs @MinRating = {0}\", 3)\n    .ToListAsync();\n\n// View kullan\u0131m\u0131\nvar blogStats = await _context.BlogStats\n    .FromSqlRaw(\"SELECT * FROM vw_BlogStatistics\")\n    .ToListAsync();\n\n// Parametreli sorgu\nvar blogs = await _context.Blogs\n    .FromSqlInterpolated($\"SELECT * FROM Blogs WHERE Rating &gt; {minRating} AND Category = {category}\")\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>Compiled Queries <pre><code>// Compiled query tan\u0131mlama\nprivate static readonly Func&lt;ApplicationDbContext, int, Task&lt;Blog&gt;&gt; GetBlogById =\n    EF.CompileAsyncQuery((ApplicationDbContext context, int id) =&gt;\n        context.Blogs.FirstOrDefault(b =&gt; b.Id == id));\n\n// Compiled query kullan\u0131m\u0131\nvar blog = await GetBlogById(_context, 1);\n\n// Parametreli compiled query\nprivate static readonly Func&lt;ApplicationDbContext, int, string, Task&lt;Blog&gt;&gt; GetBlogByTitle =\n    EF.CompileAsyncQuery((ApplicationDbContext context, int id, string title) =&gt;\n        context.Blogs.FirstOrDefault(b =&gt; b.Id == id &amp;&amp; b.Title == title));\n</code></pre></p> </li> <li> <p>Dynamic Queries <pre><code>// Dinamik sorgu olu\u015fturma\npublic IQueryable&lt;Blog&gt; GetFilteredBlogs(BlogFilter filter)\n{\n    var query = _context.Blogs.AsQueryable();\n\n    if (filter.Category != null)\n    {\n        query = query.Where(b =&gt; b.Category == filter.Category);\n    }\n\n    if (filter.MinRating.HasValue)\n    {\n        query = query.Where(b =&gt; b.Rating &gt;= filter.MinRating.Value);\n    }\n\n    if (filter.StartDate.HasValue)\n    {\n        query = query.Where(b =&gt; b.CreatedDate &gt;= filter.StartDate.Value);\n    }\n\n    return query;\n}\n\n// Expression kullan\u0131m\u0131\npublic IQueryable&lt;Blog&gt; GetFilteredBlogs(Expression&lt;Func&lt;Blog, bool&gt;&gt; filter)\n{\n    return _context.Blogs.Where(filter);\n}\n</code></pre></p> </li> <li> <p>Complex Queries <pre><code>// Subquery\nvar blogs = await _context.Blogs\n    .Where(b =&gt; b.Posts.Any(p =&gt; p.Comments.Count &gt; 10))\n    .ToListAsync();\n\n// Join\nvar blogPosts = await _context.Blogs\n    .Join(_context.Posts,\n        b =&gt; b.Id,\n        p =&gt; p.BlogId,\n        (b, p) =&gt; new { Blog = b, Post = p })\n    .ToListAsync();\n\n// Union\nvar allContent = await _context.Blogs\n    .Select(b =&gt; new { Type = \"Blog\", Title = b.Title })\n    .Union(_context.Posts.Select(p =&gt; new { Type = \"Post\", Title = p.Title }))\n    .ToListAsync();\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/advanced-querying/#best-practices","title":"Best Practices","text":"<ol> <li>Query Tasar\u0131m\u0131</li> <li>Eager loading kullan\u0131m\u0131</li> <li>Projection kullan\u0131m\u0131</li> <li>Compiled query kullan\u0131m\u0131</li> <li>Batch processing</li> <li> <p>Pagination</p> </li> <li> <p>Performans</p> </li> <li>Index kullan\u0131m\u0131</li> <li>Query optimizasyonu</li> <li>Caching stratejileri</li> <li>Batch processing</li> <li> <p>Resource y\u00f6netimi</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>SQL injection \u00f6nleme</li> <li>Parametre kullan\u0131m\u0131</li> <li>Input validation</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod organizasyonu</li> <li>Documentation</li> <li>Testing</li> <li>Version control</li> <li>Error handling</li> </ol>"},{"location":"mid-level/entity-framework/advanced-querying/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/advanced-querying/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te LINQ to Entities nedir?</li> <li> <p>Cevap: LINQ to Entities, Entity Framework'te veritaban\u0131 sorgular\u0131n\u0131 nesne y\u00f6nelimli bir \u015fekilde yazmay\u0131 sa\u011flayan bir teknolojidir.</p> </li> <li> <p>Entity Framework'te raw SQL sorgular\u0131 ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Karma\u015f\u0131k sorgular, stored procedure'ler, view'lar veya performans gerektiren durumlarda kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te compiled query nedir?</p> </li> <li> <p>Cevap: Compiled query, sorgunun bir kez derlenip tekrar tekrar kullan\u0131lmas\u0131n\u0131 sa\u011flayan bir optimizasyon tekni\u011fidir.</p> </li> <li> <p>Entity Framework'te dynamic query nedir?</p> </li> <li> <p>Cevap: Runtime'da olu\u015fturulan ve de\u011fi\u015fen sorgulard\u0131r. Expression'lar veya IQueryable kullan\u0131larak olu\u015fturulur.</p> </li> <li> <p>Entity Framework'te complex query nedir?</p> </li> <li>Cevap: Subquery, join, union gibi karma\u015f\u0131k veritaban\u0131 i\u015flemlerini i\u00e7eren sorgulard\u0131r.</li> </ol>"},{"location":"mid-level/entity-framework/advanced-querying/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>LINQ to Entities ile nas\u0131l karma\u015f\u0131k sorgu yaz\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>var blogs = await _context.Blogs\n    .Include(b =&gt; b.Posts)\n        .ThenInclude(p =&gt; p.Comments)\n    .Where(b =&gt; b.Rating &gt; 3)\n    .GroupBy(b =&gt; b.Category)\n    .Select(g =&gt; new\n    {\n        Category = g.Key,\n        Count = g.Count(),\n        AverageRating = g.Average(b =&gt; b.Rating)\n    })\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>Raw SQL sorgular\u0131 nas\u0131l yaz\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>var blogs = await _context.Blogs\n    .FromSqlRaw(\"SELECT * FROM Blogs WHERE Rating &gt; {0}\", 3)\n    .ToListAsync();\n\nvar blogs = await _context.Blogs\n    .FromSqlInterpolated($\"SELECT * FROM Blogs WHERE Rating &gt; {minRating}\")\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>Compiled query nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>private static readonly Func&lt;ApplicationDbContext, int, Task&lt;Blog&gt;&gt; GetBlogById =\n    EF.CompileAsyncQuery((ApplicationDbContext context, int id) =&gt;\n        context.Blogs.FirstOrDefault(b =&gt; b.Id == id));\n\nvar blog = await GetBlogById(_context, 1);\n</code></pre></p> </li> <li> <p>Dynamic query nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public IQueryable&lt;Blog&gt; GetFilteredBlogs(BlogFilter filter)\n{\n    var query = _context.Blogs.AsQueryable();\n\n    if (filter.Category != null)\n    {\n        query = query.Where(b =&gt; b.Category == filter.Category);\n    }\n\n    if (filter.MinRating.HasValue)\n    {\n        query = query.Where(b =&gt; b.Rating &gt;= filter.MinRating.Value);\n    }\n\n    return query;\n}\n</code></pre></p> </li> <li> <p>Complex query nas\u0131l yaz\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>var blogs = await _context.Blogs\n    .Where(b =&gt; b.Posts.Any(p =&gt; p.Comments.Count &gt; 10))\n    .Join(_context.Posts,\n        b =&gt; b.Id,\n        p =&gt; p.BlogId,\n        (b, p) =&gt; new { Blog = b, Post = p })\n    .ToListAsync();\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/advanced-querying/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te query plan cache nas\u0131l y\u00f6netilir?</li> <li> <p>Cevap:</p> <ul> <li>Query plan cache stratejileri</li> <li>Plan cache invalidation</li> <li>Plan cache monitoring</li> <li>Plan cache optimization</li> <li>Plan cache troubleshooting</li> </ul> </li> <li> <p>Entity Framework'te query performans\u0131 nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Index kullan\u0131m\u0131</li> <li>Query optimizasyonu</li> <li>Caching stratejileri</li> <li>Batch processing</li> <li>Resource y\u00f6netimi</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde query y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Query routing</li> <li>Load balancing</li> <li>Data partitioning</li> <li>Replication</li> <li>Consistency</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda query y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Optimistic concurrency</li> <li>Pessimistic concurrency</li> <li>Retry mekanizmalar\u0131</li> <li>Queue y\u00f6netimi</li> <li>Batch processing</li> </ul> </li> <li> <p>Entity Framework'te query monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Query logging</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/bulk-operations/","title":"Entity Framework - Bulk Operations","text":""},{"location":"mid-level/entity-framework/bulk-operations/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Bulk Operations (Toplu \u0130\u015flemler), b\u00fcy\u00fck veri setleri \u00fczerinde verimli bir \u015fekilde toplu ekleme, g\u00fcncelleme ve silme i\u015flemleri yapmay\u0131 sa\u011flayan tekniklerdir. Mid-level geli\u015ftiriciler i\u00e7in bu tekniklerin anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/entity-framework/bulk-operations/#bulk-operationsn-onemi","title":"Bulk Operations'\u0131n \u00d6nemi","text":"<ol> <li>Performans</li> <li>Daha h\u0131zl\u0131 i\u015flem s\u00fcreleri</li> <li>Daha az veritaban\u0131 y\u00fck\u00fc</li> <li>Daha az network trafi\u011fi</li> <li> <p>Daha iyi kaynak kullan\u0131m\u0131</p> </li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li>B\u00fcy\u00fck veri setleriyle \u00e7al\u0131\u015fma</li> <li>Y\u00fcksek hacimli i\u015flemler</li> <li>Batch processing</li> <li> <p>Paralel i\u015flemler</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod</li> <li>Daha kolay debug</li> <li>Daha iyi test edilebilirlik</li> <li>Daha kolay bak\u0131m</li> </ol>"},{"location":"mid-level/entity-framework/bulk-operations/#bulk-operations-teknikleri","title":"Bulk Operations Teknikleri","text":"<ol> <li> <p>Bulk Insert <pre><code>// Temel bulk insert\nvar blogs = new List&lt;Blog&gt;();\nfor (int i = 0; i &lt; 1000; i++)\n{\n    blogs.Add(new Blog { Title = $\"Blog {i}\" });\n}\n\n// 1. Y\u00f6ntem: AddRange\n_context.Blogs.AddRange(blogs);\nawait _context.SaveChangesAsync();\n\n// 2. Y\u00f6ntem: BulkExtensions\nawait _context.BulkInsertAsync(blogs);\n\n// 3. Y\u00f6ntem: ExecuteSqlRaw\nvar sql = \"INSERT INTO Blogs (Title) VALUES (@p0)\";\nvar parameters = blogs.Select(b =&gt; new SqlParameter(\"@p0\", b.Title)).ToArray();\nawait _context.Database.ExecuteSqlRawAsync(sql, parameters);\n</code></pre></p> </li> <li> <p>Bulk Update <pre><code>// Temel bulk update\nvar blogs = await _context.Blogs.ToListAsync();\nforeach (var blog in blogs)\n{\n    blog.Rating += 1;\n}\n\n// 1. Y\u00f6ntem: UpdateRange\n_context.Blogs.UpdateRange(blogs);\nawait _context.SaveChangesAsync();\n\n// 2. Y\u00f6ntem: BulkExtensions\nawait _context.BulkUpdateAsync(blogs);\n\n// 3. Y\u00f6ntem: ExecuteSqlRaw\nvar sql = \"UPDATE Blogs SET Rating = Rating + 1\";\nawait _context.Database.ExecuteSqlRawAsync(sql);\n</code></pre></p> </li> <li> <p>Bulk Delete <pre><code>// Temel bulk delete\nvar blogs = await _context.Blogs\n    .Where(b =&gt; b.Rating &lt; 3)\n    .ToListAsync();\n\n// 1. Y\u00f6ntem: RemoveRange\n_context.Blogs.RemoveRange(blogs);\nawait _context.SaveChangesAsync();\n\n// 2. Y\u00f6ntem: BulkExtensions\nawait _context.BulkDeleteAsync(blogs);\n\n// 3. Y\u00f6ntem: ExecuteSqlRaw\nvar sql = \"DELETE FROM Blogs WHERE Rating &lt; 3\";\nawait _context.Database.ExecuteSqlRawAsync(sql);\n</code></pre></p> </li> <li> <p>Batch Processing <pre><code>// Batch i\u015fleme\npublic async Task ProcessInBatches&lt;T&gt;(List&lt;T&gt; items, int batchSize, Func&lt;List&lt;T&gt;, Task&gt; processBatch)\n{\n    for (int i = 0; i &lt; items.Count; i += batchSize)\n    {\n        var batch = items.Skip(i).Take(batchSize).ToList();\n        await processBatch(batch);\n    }\n}\n\n// Kullan\u0131m\u0131\nvar blogs = new List&lt;Blog&gt;();\n// ... blogs doldurulur\n\nawait ProcessInBatches(blogs, 100, async batch =&gt;\n{\n    _context.Blogs.AddRange(batch);\n    await _context.SaveChangesAsync();\n});\n</code></pre></p> </li> <li> <p>Bulk Operations Optimizasyonu <pre><code>// Change tracking optimizasyonu\n_context.ChangeTracker.AutoDetectChangesEnabled = false;\ntry\n{\n    // Bulk i\u015flemler\n    await _context.SaveChangesAsync();\n}\nfinally\n{\n    _context.ChangeTracker.AutoDetectChangesEnabled = true;\n}\n\n// Transaction optimizasyonu\nusing var transaction = await _context.Database.BeginTransactionAsync();\ntry\n{\n    // Bulk i\u015flemler\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n    throw;\n}\n\n// Batch size optimizasyonu\nvar batchSize = 1000; // Veritaban\u0131 ve network kapasitesine g\u00f6re ayarlan\u0131r\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/bulk-operations/#best-practices","title":"Best Practices","text":"<ol> <li>Bulk Operations Tasar\u0131m\u0131</li> <li>Uygun batch size se\u00e7imi</li> <li>Transaction y\u00f6netimi</li> <li>Error handling</li> <li> <p>Retry mekanizmalar\u0131</p> </li> <li> <p>Performans</p> </li> <li>Batch size optimizasyonu</li> <li>Change tracking optimizasyonu</li> <li>Index kullan\u0131m\u0131</li> <li> <p>Resource y\u00f6netimi</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>SQL injection \u00f6nleme</li> <li>Parametre kullan\u0131m\u0131</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod organizasyonu</li> <li>Documentation</li> <li>Testing</li> <li>Monitoring</li> </ol>"},{"location":"mid-level/entity-framework/bulk-operations/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/bulk-operations/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Bulk Operations nedir?</li> <li> <p>Cevap: Bulk Operations, b\u00fcy\u00fck veri setleri \u00fczerinde verimli bir \u015fekilde toplu ekleme, g\u00fcncelleme ve silme i\u015flemleri yapmay\u0131 sa\u011flayan tekniklerdir.</p> </li> <li> <p>Entity Framework'te bulk insert nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: AddRange, BulkExtensions veya ExecuteSqlRaw kullan\u0131larak yap\u0131labilir.</p> </li> <li> <p>Entity Framework'te bulk update nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: UpdateRange, BulkExtensions veya ExecuteSqlRaw kullan\u0131larak yap\u0131labilir.</p> </li> <li> <p>Entity Framework'te bulk delete nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: RemoveRange, BulkExtensions veya ExecuteSqlRaw kullan\u0131larak yap\u0131labilir.</p> </li> <li> <p>Entity Framework'te batch processing nedir?</p> </li> <li>Cevap: B\u00fcy\u00fck veri setlerini daha k\u00fc\u00e7\u00fck par\u00e7alara b\u00f6lerek i\u015fleme tekni\u011fidir.</li> </ol>"},{"location":"mid-level/entity-framework/bulk-operations/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Bulk insert nas\u0131l optimize edilir?</li> <li> <p>Cevap: <pre><code>_context.ChangeTracker.AutoDetectChangesEnabled = false;\ntry\n{\n    _context.Blogs.AddRange(blogs);\n    await _context.SaveChangesAsync();\n}\nfinally\n{\n    _context.ChangeTracker.AutoDetectChangesEnabled = true;\n}\n</code></pre></p> </li> <li> <p>Batch processing nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>public async Task ProcessInBatches&lt;T&gt;(List&lt;T&gt; items, int batchSize, Func&lt;List&lt;T&gt;, Task&gt; processBatch)\n{\n    for (int i = 0; i &lt; items.Count; i += batchSize)\n    {\n        var batch = items.Skip(i).Take(batchSize).ToList();\n        await processBatch(batch);\n    }\n}\n</code></pre></p> </li> <li> <p>Transaction y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>using var transaction = await _context.Database.BeginTransactionAsync();\ntry\n{\n    // Bulk i\u015flemler\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n    throw;\n}\n</code></pre></p> </li> <li> <p>Bulk operations'da error handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>try\n{\n    // Bulk i\u015flemler\n}\ncatch (DbUpdateException ex)\n{\n    // Hata y\u00f6netimi\n}\ncatch (Exception ex)\n{\n    // Genel hata y\u00f6netimi\n}\n</code></pre></p> </li> <li> <p>Bulk operations'da retry mekanizmas\u0131 nas\u0131l implemente edilir?</p> </li> <li>Cevap: <pre><code>public async Task RetryBulkOperation&lt;T&gt;(Func&lt;Task&gt; operation, int maxRetries = 3)\n{\n    for (int i = 0; i &lt; maxRetries; i++)\n    {\n        try\n        {\n            await operation();\n            return;\n        }\n        catch (Exception ex)\n        {\n            if (i == maxRetries - 1) throw;\n            await Task.Delay(1000 * (i + 1));\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/bulk-operations/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te bulk operations performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Batch size optimizasyonu</li> <li>Change tracking optimizasyonu</li> <li>Index kullan\u0131m\u0131</li> <li>Resource y\u00f6netimi</li> <li>Parallel processing</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde bulk operations nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Distributed transactions</li> <li>Data partitioning</li> <li>Replication</li> <li>Consistency</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda bulk operations nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Optimistic concurrency</li> <li>Pessimistic concurrency</li> <li>Retry mekanizmalar\u0131</li> <li>Queue y\u00f6netimi</li> <li>Batch processing</li> </ul> </li> <li> <p>Entity Framework'te bulk operations monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> <li>Logging</li> </ul> </li> <li> <p>Entity Framework'te custom bulk operations stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom batch processing</li> <li>Custom error handling</li> <li>Custom retry mekanizmalar\u0131</li> <li>Custom monitoring</li> <li>Custom optimization </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/change-tracking/","title":"Entity Framework - Change Tracking","text":""},{"location":"mid-level/entity-framework/change-tracking/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Change Tracking (De\u011fi\u015fiklik \u0130zleme), veritaban\u0131 nesnelerindeki de\u011fi\u015fiklikleri otomatik olarak takip eden ve y\u00f6neten bir mekanizmad\u0131r. Mid-level geli\u015ftiriciler i\u00e7in bu mekanizman\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/entity-framework/change-tracking/#change-trackingin-onemi","title":"Change Tracking'in \u00d6nemi","text":"<ol> <li>Veri Tutarl\u0131l\u0131\u011f\u0131</li> <li>Otomatik de\u011fi\u015fiklik takibi</li> <li>Veri b\u00fct\u00fcnl\u00fc\u011f\u00fc korumas\u0131</li> <li>\u0130li\u015fkisel veri y\u00f6netimi</li> <li> <p>Transaction y\u00f6netimi</p> </li> <li> <p>Performans</p> </li> <li>Optimize edilmi\u015f g\u00fcncellemeler</li> <li>Gereksiz sorgular\u0131n \u00f6nlenmesi</li> <li>Batch i\u015flem deste\u011fi</li> <li> <p>Bellek kullan\u0131m\u0131 optimizasyonu</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod</li> <li>Daha kolay debug</li> <li>Daha iyi test edilebilirlik</li> <li>Daha kolay bak\u0131m</li> </ol>"},{"location":"mid-level/entity-framework/change-tracking/#change-tracking-ozellikleri","title":"Change Tracking \u00d6zellikleri","text":"<ol> <li> <p>Entity States <pre><code>// Entity durumlar\u0131\nvar blog = new Blog { Title = \"Yeni Blog\" };\nvar state = _context.Entry(blog).State; // Detached\n\n_context.Blogs.Add(blog);\nstate = _context.Entry(blog).State; // Added\n\nawait _context.SaveChangesAsync();\nstate = _context.Entry(blog).State; // Unchanged\n\nblog.Title = \"G\u00fcncellenmi\u015f Blog\";\nstate = _context.Entry(blog).State; // Modified\n\n_context.Blogs.Remove(blog);\nstate = _context.Entry(blog).State; // Deleted\n</code></pre></p> </li> <li> <p>Change Detection <pre><code>// De\u011fi\u015fiklik tespiti\nvar blog = await _context.Blogs.FindAsync(1);\nvar originalValues = _context.Entry(blog).OriginalValues;\nvar currentValues = _context.Entry(blog).CurrentValues;\n\n// De\u011fi\u015fiklik kontrol\u00fc\nvar hasChanges = _context.ChangeTracker.HasChanges();\n\n// De\u011fi\u015fen entity'ler\nvar modifiedEntities = _context.ChangeTracker\n    .Entries()\n    .Where(e =&gt; e.State == EntityState.Modified)\n    .ToList();\n\n// De\u011fi\u015fen property'ler\nvar modifiedProperties = _context.Entry(blog)\n    .Properties\n    .Where(p =&gt; p.IsModified)\n    .ToList();\n</code></pre></p> </li> <li> <p>Change Tracking Modlar\u0131 <pre><code>// Change tracking modlar\u0131\n// 1. Snapshot Change Tracking\nvar options = new DbContextOptionsBuilder()\n    .UseSqlServer(connectionString)\n    .UseChangeTrackingStrategy(ChangeTrackingStrategy.Snapshot)\n    .Options;\n\n// 2. ChangedNotifications Change Tracking\nvar options = new DbContextOptionsBuilder()\n    .UseSqlServer(connectionString)\n    .UseChangeTrackingStrategy(ChangeTrackingStrategy.ChangedNotifications)\n    .Options;\n\n// 3. Change Tracking'i devre d\u0131\u015f\u0131 b\u0131rakma\nvar blog = await _context.Blogs\n    .AsNoTracking()\n    .FirstOrDefaultAsync(b =&gt; b.Id == 1);\n</code></pre></p> </li> <li> <p>Bulk Operations <pre><code>// Toplu g\u00fcncelleme\nvar blogs = await _context.Blogs.ToListAsync();\nforeach (var blog in blogs)\n{\n    blog.Rating += 1;\n}\n\n// Change tracking'i ge\u00e7ici olarak devre d\u0131\u015f\u0131 b\u0131rakma\n_context.ChangeTracker.AutoDetectChangesEnabled = false;\ntry\n{\n    // Toplu i\u015flemler\n    foreach (var blog in blogs)\n    {\n        _context.Blogs.Update(blog);\n    }\n    await _context.SaveChangesAsync();\n}\nfinally\n{\n    _context.ChangeTracker.AutoDetectChangesEnabled = true;\n}\n</code></pre></p> </li> <li> <p>Custom Change Tracking <pre><code>// \u00d6zel change tracking\npublic class BlogChangeTracker : IEntityChangeTracker\n{\n    public void TrackChanges(DbContext context)\n    {\n        var entries = context.ChangeTracker.Entries();\n        foreach (var entry in entries)\n        {\n            if (entry.State == EntityState.Modified)\n            {\n                var blog = entry.Entity as Blog;\n                if (blog != null)\n                {\n                    blog.LastModified = DateTime.UtcNow;\n                    blog.ModifiedBy = \"System\";\n                }\n            }\n        }\n    }\n}\n\n// Kullan\u0131m\u0131\nvar changeTracker = new BlogChangeTracker();\nchangeTracker.TrackChanges(_context);\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/change-tracking/#best-practices","title":"Best Practices","text":"<ol> <li>Change Tracking Tasar\u0131m\u0131</li> <li>Uygun tracking modu se\u00e7imi</li> <li>Gereksiz tracking'den ka\u00e7\u0131nma</li> <li>Batch i\u015flemlerde optimizasyon</li> <li> <p>Bellek kullan\u0131m\u0131 y\u00f6netimi</p> </li> <li> <p>Performans</p> </li> <li>AutoDetectChanges optimizasyonu</li> <li>Batch i\u015flem stratejileri</li> <li>Bellek y\u00f6netimi</li> <li> <p>Query optimizasyonu</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>De\u011fi\u015fiklik do\u011frulama</li> <li>Audit logging</li> <li>Concurrency kontrol\u00fc</li> <li> <p>Transaction y\u00f6netimi</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod organizasyonu</li> <li>Documentation</li> <li>Testing</li> <li>Error handling</li> </ol>"},{"location":"mid-level/entity-framework/change-tracking/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/change-tracking/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Change Tracking nedir?</li> <li> <p>Cevap: Change Tracking, veritaban\u0131 nesnelerindeki de\u011fi\u015fiklikleri otomatik olarak takip eden ve y\u00f6neten bir mekanizmad\u0131r.</p> </li> <li> <p>Entity Framework'te entity state'ler nelerdir?</p> </li> <li> <p>Cevap: Detached, Added, Unchanged, Modified ve Deleted state'leri vard\u0131r.</p> </li> <li> <p>Entity Framework'te change tracking modlar\u0131 nelerdir?</p> </li> <li> <p>Cevap: Snapshot ve ChangedNotifications modlar\u0131 vard\u0131r.</p> </li> <li> <p>Entity Framework'te change tracking nas\u0131l devre d\u0131\u015f\u0131 b\u0131rak\u0131l\u0131r?</p> </li> <li> <p>Cevap: AsNoTracking() metodu veya AutoDetectChangesEnabled = false ile devre d\u0131\u015f\u0131 b\u0131rak\u0131labilir.</p> </li> <li> <p>Entity Framework'te de\u011fi\u015fiklikler nas\u0131l tespit edilir?</p> </li> <li>Cevap: ChangeTracker.Entries() veya Entry(entity).Properties ile tespit edilir.</li> </ol>"},{"location":"mid-level/entity-framework/change-tracking/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Entity state'leri nas\u0131l kontrol edilir?</li> <li> <p>Cevap: <pre><code>var state = _context.Entry(entity).State;\nvar states = _context.ChangeTracker.Entries()\n    .Select(e =&gt; new { Entity = e.Entity, State = e.State })\n    .ToList();\n</code></pre></p> </li> <li> <p>De\u011fi\u015fiklikleri nas\u0131l izlenir?</p> </li> <li> <p>Cevap: <pre><code>var originalValues = _context.Entry(entity).OriginalValues;\nvar currentValues = _context.Entry(entity).CurrentValues;\nvar modifiedProperties = _context.Entry(entity)\n    .Properties\n    .Where(p =&gt; p.IsModified)\n    .ToList();\n</code></pre></p> </li> <li> <p>Change tracking modu nas\u0131l de\u011fi\u015ftirilir?</p> </li> <li> <p>Cevap: <pre><code>var options = new DbContextOptionsBuilder()\n    .UseSqlServer(connectionString)\n    .UseChangeTrackingStrategy(ChangeTrackingStrategy.Snapshot)\n    .Options;\n</code></pre></p> </li> <li> <p>Toplu i\u015flemlerde change tracking nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: <pre><code>_context.ChangeTracker.AutoDetectChangesEnabled = false;\ntry\n{\n    // Toplu i\u015flemler\n    await _context.SaveChangesAsync();\n}\nfinally\n{\n    _context.ChangeTracker.AutoDetectChangesEnabled = true;\n}\n</code></pre></p> </li> <li> <p>\u00d6zel change tracking nas\u0131l implemente edilir?</p> </li> <li>Cevap: <pre><code>public class CustomChangeTracker : IEntityChangeTracker\n{\n    public void TrackChanges(DbContext context)\n    {\n        var entries = context.ChangeTracker.Entries();\n        foreach (var entry in entries)\n        {\n            if (entry.State == EntityState.Modified)\n            {\n                // \u00d6zel i\u015flemler\n            }\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/change-tracking/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te change tracking performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>AutoDetectChanges optimizasyonu</li> <li>Batch i\u015flem stratejileri</li> <li>Bellek y\u00f6netimi</li> <li>Query optimizasyonu</li> <li>Index kullan\u0131m\u0131</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde change tracking nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Change tracking stratejileri</li> <li>Replication</li> <li>Consistency</li> <li>Conflict resolution</li> <li>Transaction y\u00f6netimi</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda change tracking nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Optimistic concurrency</li> <li>Pessimistic concurrency</li> <li>Retry mekanizmalar\u0131</li> <li>Queue y\u00f6netimi</li> <li>Batch processing</li> </ul> </li> <li> <p>Entity Framework'te change tracking monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Change tracking logging</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> </ul> </li> <li> <p>Entity Framework'te custom change tracking stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>IEntityChangeTracker implementasyonu</li> <li>Custom state management</li> <li>Custom change detection</li> <li>Custom validation</li> <li>Custom persistence </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/complex-types/","title":"Entity Framework - Complex Types","text":""},{"location":"mid-level/entity-framework/complex-types/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Complex Types (Karma\u015f\u0131k Tipler), bir entity'nin i\u00e7inde yer alan ve kendi ba\u015f\u0131na bir entity olmayan, ancak birden fazla \u00f6zellik i\u00e7eren yap\u0131lard\u0131r. Mid-level geli\u015ftiriciler i\u00e7in bu kavram\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 \u00f6nemlidir.</p>"},{"location":"mid-level/entity-framework/complex-types/#complex-typesn-onemi","title":"Complex Types'\u0131n \u00d6nemi","text":"<ol> <li>Domain Model</li> <li>Daha iyi organizasyon</li> <li>Daha iyi encapsulation</li> <li>Daha iyi okunabilirlik</li> <li> <p>Daha iyi bak\u0131m</p> </li> <li> <p>Veri Yap\u0131s\u0131</p> </li> <li>Daha iyi veri organizasyonu</li> <li>Daha iyi veri b\u00fct\u00fcnl\u00fc\u011f\u00fc</li> <li>Daha iyi veri eri\u015fimi</li> <li> <p>Daha iyi veri y\u00f6netimi</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod tekrar\u0131</li> <li>Daha kolay test edilebilirlik</li> <li>Daha iyi mod\u00fclerlik</li> <li>Daha kolay geni\u015fletilebilirlik</li> </ol>"},{"location":"mid-level/entity-framework/complex-types/#complex-types-ozellikleri","title":"Complex Types \u00d6zellikleri","text":"<ol> <li> <p>Temel Complex Type <pre><code>public class Address\n{\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string State { get; set; }\n    public string ZipCode { get; set; }\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public Address BillingAddress { get; set; }\n    public Address ShippingAddress { get; set; }\n}\n</code></pre></p> </li> <li> <p>Complex Type Konfig\u00fcrasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Customer&gt;(entity =&gt;\n    {\n        entity.OwnsOne(c =&gt; c.BillingAddress, address =&gt;\n        {\n            address.Property(a =&gt; a.Street).HasColumnName(\"BillingStreet\");\n            address.Property(a =&gt; a.City).HasColumnName(\"BillingCity\");\n            address.Property(a =&gt; a.State).HasColumnName(\"BillingState\");\n            address.Property(a =&gt; a.ZipCode).HasColumnName(\"BillingZipCode\");\n        });\n\n        entity.OwnsOne(c =&gt; c.ShippingAddress, address =&gt;\n        {\n            address.Property(a =&gt; a.Street).HasColumnName(\"ShippingStreet\");\n            address.Property(a =&gt; a.City).HasColumnName(\"ShippingCity\");\n            address.Property(a =&gt; a.State).HasColumnName(\"ShippingState\");\n            address.Property(a =&gt; a.ZipCode).HasColumnName(\"ShippingZipCode\");\n        });\n    });\n}\n</code></pre></p> </li> <li> <p>Complex Type Validasyonu <pre><code>public class Address\n{\n    private string _street;\n    private string _city;\n    private string _state;\n    private string _zipCode;\n\n    public string Street\n    {\n        get =&gt; _street;\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                throw new ArgumentException(\"Street cannot be empty\");\n            _street = value;\n        }\n    }\n\n    public string City\n    {\n        get =&gt; _city;\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                throw new ArgumentException(\"City cannot be empty\");\n            _city = value;\n        }\n    }\n\n    public string State\n    {\n        get =&gt; _state;\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                throw new ArgumentException(\"State cannot be empty\");\n            _state = value;\n        }\n    }\n\n    public string ZipCode\n    {\n        get =&gt; _zipCode;\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                throw new ArgumentException(\"ZipCode cannot be empty\");\n            _zipCode = value;\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/complex-types/#complex-types-kullanm","title":"Complex Types Kullan\u0131m\u0131","text":"<ol> <li> <p>Entity \u0130\u00e7inde Kullan\u0131m <pre><code>public class Order\n{\n    public int Id { get; set; }\n    public DateTime OrderDate { get; set; }\n    public Address ShippingAddress { get; set; }\n    public Address BillingAddress { get; set; }\n    public List&lt;OrderItem&gt; Items { get; set; }\n}\n\npublic class OrderItem\n{\n    public int Id { get; set; }\n    public int OrderId { get; set; }\n    public string ProductName { get; set; }\n    public decimal Price { get; set; }\n    public int Quantity { get; set; }\n}\n</code></pre></p> </li> <li> <p>DbContext Konfig\u00fcrasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Order&gt;(entity =&gt;\n    {\n        entity.OwnsOne(o =&gt; o.ShippingAddress, address =&gt;\n        {\n            address.Property(a =&gt; a.Street).HasColumnName(\"ShippingStreet\");\n            address.Property(a =&gt; a.City).HasColumnName(\"ShippingCity\");\n            address.Property(a =&gt; a.State).HasColumnName(\"ShippingState\");\n            address.Property(a =&gt; a.ZipCode).HasColumnName(\"ShippingZipCode\");\n        });\n\n        entity.OwnsOne(o =&gt; o.BillingAddress, address =&gt;\n        {\n            address.Property(a =&gt; a.Street).HasColumnName(\"BillingStreet\");\n            address.Property(a =&gt; a.City).HasColumnName(\"BillingCity\");\n            address.Property(a =&gt; a.State).HasColumnName(\"BillingState\");\n            address.Property(a =&gt; a.ZipCode).HasColumnName(\"BillingZipCode\");\n        });\n\n        entity.HasMany(o =&gt; o.Items)\n            .WithOne()\n            .HasForeignKey(i =&gt; i.OrderId);\n    });\n}\n</code></pre></p> </li> <li> <p>Complex Type D\u00f6n\u00fc\u015f\u00fcmleri <pre><code>// Complex Type to String\npublic static class AddressExtensions\n{\n    public static string ToString(this Address address)\n    {\n        return $\"{address.Street}, {address.City}, {address.State} {address.ZipCode}\";\n    }\n}\n\n// String to Complex Type\npublic static class AddressParser\n{\n    public static Address Parse(string addressString)\n    {\n        var parts = addressString.Split(',');\n        if (parts.Length != 3)\n            throw new ArgumentException(\"Invalid address format\");\n\n        var cityStateZip = parts[2].Trim().Split(' ');\n        if (cityStateZip.Length != 3)\n            throw new ArgumentException(\"Invalid address format\");\n\n        return new Address\n        {\n            Street = parts[0].Trim(),\n            City = parts[1].Trim(),\n            State = cityStateZip[0],\n            ZipCode = cityStateZip[2]\n        };\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/complex-types/#best-practices","title":"Best Practices","text":"<ol> <li>Complex Type Tasar\u0131m\u0131</li> <li>Single Responsibility</li> <li>Immutability</li> <li>Validation</li> <li> <p>Business logic</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation</li> <li>Data integrity</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Performans</p> </li> <li>Memory usage</li> <li>Query optimization</li> <li>Lazy loading</li> <li> <p>Caching</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Code organization</li> <li>Documentation</li> <li>Testing</li> <li>Versioning</li> </ol>"},{"location":"mid-level/entity-framework/complex-types/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/complex-types/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Complex Type nedir?</li> <li> <p>Cevap: Complex Type, bir entity'nin i\u00e7inde yer alan ve kendi ba\u015f\u0131na bir entity olmayan, ancak birden fazla \u00f6zellik i\u00e7eren yap\u0131lard\u0131r.</p> </li> <li> <p>Entity Framework'te Complex Type ve Entity aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Entity'lerin kendi tablolar\u0131 vard\u0131r ve kimlikleri vard\u0131r, Complex Type'lar\u0131n kendi tablolar\u0131 yoktur ve entity'lerin i\u00e7inde yer al\u0131rlar.</p> </li> <li> <p>Entity Framework'te Complex Type nas\u0131l konfig\u00fcre edilir?</p> </li> <li> <p>Cevap: DbContext.OnModelCreating metodunda OwnsOne metodu kullan\u0131larak konfig\u00fcre edilir.</p> </li> <li> <p>Entity Framework'te Complex Type ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Bir entity'nin i\u00e7inde yer alan ve kendi ba\u015f\u0131na bir entity olmayan, ancak birden fazla \u00f6zellik i\u00e7eren yap\u0131lar i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Complex Type performans\u0131 nas\u0131l etkiler?</p> </li> <li>Cevap: Memory kullan\u0131m\u0131n\u0131 art\u0131rabilir ancak veri organizasyonunu ve kod kalitesini art\u0131r\u0131r.</li> </ol>"},{"location":"mid-level/entity-framework/complex-types/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Temel Complex Type nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>public class Address\n{\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string State { get; set; }\n    public string ZipCode { get; set; }\n}\n</code></pre></p> </li> <li> <p>Complex Type DbContext'te nas\u0131l konfig\u00fcre edilir?</p> </li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Customer&gt;(entity =&gt;\n    {\n        entity.OwnsOne(c =&gt; c.Address, address =&gt;\n        {\n            address.Property(a =&gt; a.Street).HasColumnName(\"Street\");\n            address.Property(a =&gt; a.City).HasColumnName(\"City\");\n            address.Property(a =&gt; a.State).HasColumnName(\"State\");\n            address.Property(a =&gt; a.ZipCode).HasColumnName(\"ZipCode\");\n        });\n    });\n}\n</code></pre></p> </li> <li> <p>Complex Type validasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class Address\n{\n    private string _street;\n    private string _city;\n    private string _state;\n    private string _zipCode;\n\n    public string Street\n    {\n        get =&gt; _street;\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                throw new ArgumentException(\"Street cannot be empty\");\n            _street = value;\n        }\n    }\n\n    // Di\u011fer property'ler i\u00e7in benzer validasyonlar\n}\n</code></pre></p> </li> <li> <p>Complex Type equality nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class Address\n{\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string State { get; set; }\n    public string ZipCode { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        if (obj is Address other)\n        {\n            return Street == other.Street &amp;&amp;\n                   City == other.City &amp;&amp;\n                   State == other.State &amp;&amp;\n                   ZipCode == other.ZipCode;\n        }\n        return false;\n    }\n\n    public override int GetHashCode()\n    {\n        return HashCode.Combine(Street, City, State, ZipCode);\n    }\n}\n</code></pre></p> </li> <li> <p>Complex Type d\u00f6n\u00fc\u015f\u00fcmleri nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public static class AddressExtensions\n{\n    public static string ToString(this Address address)\n    {\n        return $\"{address.Street}, {address.City}, {address.State} {address.ZipCode}\";\n    }\n}\n\npublic static class AddressParser\n{\n    public static Address Parse(string addressString)\n    {\n        var parts = addressString.Split(',');\n        if (parts.Length != 3)\n            throw new ArgumentException(\"Invalid address format\");\n\n        var cityStateZip = parts[2].Trim().Split(' ');\n        if (cityStateZip.Length != 3)\n            throw new ArgumentException(\"Invalid address format\");\n\n        return new Address\n        {\n            Street = parts[0].Trim(),\n            City = parts[1].Trim(),\n            State = cityStateZip[0],\n            ZipCode = cityStateZip[2]\n        };\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/complex-types/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Complex Type performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Memory kullan\u0131m\u0131 optimizasyonu</li> <li>Query optimizasyonu</li> <li>Lazy loading</li> <li>Caching stratejileri</li> <li>Index kullan\u0131m\u0131</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Complex Type nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Serialization</li> <li>Versioning</li> <li>Migration</li> <li>Consistency</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Complex Type nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Immutability</li> <li>Thread safety</li> <li>Atomic operations</li> <li>Versioning</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te Complex Type monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Memory profiling</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> </ul> </li> <li> <p>Entity Framework'te custom Complex Type stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom equality</li> <li>Custom validation</li> <li>Custom serialization</li> <li>Custom conversion</li> <li>Custom optimization </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/concurrency/","title":"Entity Framework - Concurrency","text":""},{"location":"mid-level/entity-framework/concurrency/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Concurrency (E\u015fzamanl\u0131l\u0131k), ayn\u0131 veri \u00fczerinde birden fazla kullan\u0131c\u0131n\u0131n veya i\u015flemin e\u015fzamanl\u0131 olarak \u00e7al\u0131\u015fmas\u0131n\u0131 y\u00f6netmeyi sa\u011flayan bir mekanizmad\u0131r. Mid-level geli\u015ftiriciler i\u00e7in bu mekanizman\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/entity-framework/concurrency/#concurrencynin-onemi","title":"Concurrency'nin \u00d6nemi","text":"<ol> <li>Veri Tutarl\u0131l\u0131\u011f\u0131</li> <li>Veri \u00e7ak\u0131\u015fmalar\u0131n\u0131 \u00f6nleme</li> <li>Veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc koruma</li> <li>\u0130li\u015fkisel veri y\u00f6netimi</li> <li> <p>Transaction y\u00f6netimi</p> </li> <li> <p>Performans</p> </li> <li>E\u015fzamanl\u0131 i\u015flem deste\u011fi</li> <li>Kaynak kullan\u0131m\u0131 optimizasyonu</li> <li>Sistem yan\u0131t s\u00fcreleri</li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod</li> <li>Daha kolay debug</li> <li>Daha iyi test edilebilirlik</li> <li>Daha kolay bak\u0131m</li> </ol>"},{"location":"mid-level/entity-framework/concurrency/#concurrency-teknikleri","title":"Concurrency Teknikleri","text":"<ol> <li> <p>Optimistic Concurrency <pre><code>// Timestamp/RowVersion ile\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    [Timestamp]\n    public byte[] RowVersion { get; set; }\n}\n\n// Concurrency token ile\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    [ConcurrencyCheck]\n    public string ConcurrencyToken { get; set; }\n}\n\n// Kullan\u0131m\u0131\ntry\n{\n    var blog = await _context.Blogs.FindAsync(1);\n    blog.Title = \"G\u00fcncellenmi\u015f Blog\";\n    await _context.SaveChangesAsync();\n}\ncatch (DbUpdateConcurrencyException ex)\n{\n    // Concurrency \u00e7ak\u0131\u015fmas\u0131 y\u00f6netimi\n    var entry = ex.Entries.Single();\n    var databaseValues = await entry.GetDatabaseValuesAsync();\n    var clientValues = entry.CurrentValues;\n\n    // \u00c7ak\u0131\u015fma \u00e7\u00f6z\u00fcm\u00fc\n    entry.OriginalValues.SetValues(databaseValues);\n    // veya\n    entry.CurrentValues.SetValues(databaseValues);\n}\n</code></pre></p> </li> <li> <p>Pessimistic Concurrency <pre><code>// Transaction ile\nusing var transaction = await _context.Database.BeginTransactionAsync(\n    IsolationLevel.Serializable);\ntry\n{\n    var blog = await _context.Blogs\n        .FromSqlRaw(\"SELECT * FROM Blogs WITH (UPDLOCK) WHERE Id = {0}\", 1)\n        .FirstOrDefaultAsync();\n\n    blog.Title = \"G\u00fcncellenmi\u015f Blog\";\n    await _context.SaveChangesAsync();\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n    throw;\n}\n\n// Stored procedure ile\nvar blog = await _context.Blogs\n    .FromSqlRaw(\"EXEC GetBlogWithLock @Id = {0}\", 1)\n    .FirstOrDefaultAsync();\n</code></pre></p> </li> <li> <p>Concurrency Resolution <pre><code>// Client wins\npublic async Task UpdateBlogClientWins(Blog blog)\n{\n    try\n    {\n        await _context.SaveChangesAsync();\n    }\n    catch (DbUpdateConcurrencyException ex)\n    {\n        var entry = ex.Entries.Single();\n        entry.OriginalValues.SetValues(await entry.GetDatabaseValuesAsync());\n        await _context.SaveChangesAsync();\n    }\n}\n\n// Store wins\npublic async Task UpdateBlogStoreWins(Blog blog)\n{\n    try\n    {\n        await _context.SaveChangesAsync();\n    }\n    catch (DbUpdateConcurrencyException ex)\n    {\n        var entry = ex.Entries.Single();\n        var databaseValues = await entry.GetDatabaseValuesAsync();\n        entry.CurrentValues.SetValues(databaseValues);\n        await _context.SaveChangesAsync();\n    }\n}\n\n// Merge\npublic async Task UpdateBlogMerge(Blog blog)\n{\n    try\n    {\n        await _context.SaveChangesAsync();\n    }\n    catch (DbUpdateConcurrencyException ex)\n    {\n        var entry = ex.Entries.Single();\n        var databaseValues = await entry.GetDatabaseValuesAsync();\n        var clientValues = entry.CurrentValues;\n\n        // \u00d6zel merge mant\u0131\u011f\u0131\n        foreach (var property in clientValues.Properties)\n        {\n            var databaseValue = databaseValues[property];\n            var clientValue = clientValues[property];\n\n            if (clientValue != databaseValue)\n            {\n                // Merge stratejisi\n                clientValues[property] = MergeValues(clientValue, databaseValue);\n            }\n        }\n\n        await _context.SaveChangesAsync();\n    }\n}\n</code></pre></p> </li> <li> <p>Custom Concurrency <pre><code>// \u00d6zel concurrency kontrol\u00fc\npublic class BlogConcurrencyHandler : IConcurrencyHandler&lt;Blog&gt;\n{\n    public async Task HandleConcurrencyAsync(\n        DbContext context,\n        Blog entity,\n        DbUpdateConcurrencyException ex)\n    {\n        var entry = ex.Entries.Single();\n        var databaseValues = await entry.GetDatabaseValuesAsync();\n\n        // \u00d6zel concurrency stratejisi\n        if (ShouldOverride(databaseValues, entity))\n        {\n            entry.OriginalValues.SetValues(databaseValues);\n            await context.SaveChangesAsync();\n        }\n        else\n        {\n            throw new ConcurrencyException(\"Concurrency \u00e7ak\u0131\u015fmas\u0131\");\n        }\n    }\n}\n\n// Kullan\u0131m\u0131\ntry\n{\n    await _context.SaveChangesAsync();\n}\ncatch (DbUpdateConcurrencyException ex)\n{\n    var handler = new BlogConcurrencyHandler();\n    await handler.HandleConcurrencyAsync(_context, blog, ex);\n}\n</code></pre></p> </li> <li> <p>Concurrency Monitoring <pre><code>// Concurrency izleme\npublic class ConcurrencyMonitor\n{\n    private readonly DbContext _context;\n\n    public ConcurrencyMonitor(DbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task MonitorConcurrencyAsync()\n    {\n        var concurrencyConflicts = _context.ChangeTracker\n            .Entries()\n            .Where(e =&gt; e.State == EntityState.Modified)\n            .Select(e =&gt; new\n            {\n                Entity = e.Entity,\n                OriginalValues = e.OriginalValues,\n                CurrentValues = e.CurrentValues\n            })\n            .ToList();\n\n        // Concurrency izleme i\u015flemleri\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/concurrency/#best-practices","title":"Best Practices","text":"<ol> <li>Concurrency Tasar\u0131m\u0131</li> <li>Uygun concurrency stratejisi se\u00e7imi</li> <li>Concurrency token y\u00f6netimi</li> <li>Transaction y\u00f6netimi</li> <li> <p>Error handling</p> </li> <li> <p>Performans</p> </li> <li>Concurrency optimizasyonu</li> <li>Lock stratejileri</li> <li>Resource y\u00f6netimi</li> <li> <p>Query optimizasyonu</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Concurrency do\u011frulama</li> <li>Access control</li> <li>Audit logging</li> <li> <p>Data validation</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod organizasyonu</li> <li>Documentation</li> <li>Testing</li> <li>Monitoring</li> </ol>"},{"location":"mid-level/entity-framework/concurrency/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/concurrency/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te concurrency nedir?</li> <li> <p>Cevap: Concurrency, ayn\u0131 veri \u00fczerinde birden fazla kullan\u0131c\u0131n\u0131n veya i\u015flemin e\u015fzamanl\u0131 olarak \u00e7al\u0131\u015fmas\u0131n\u0131 y\u00f6netmeyi sa\u011flayan bir mekanizmad\u0131r.</p> </li> <li> <p>Entity Framework'te optimistic concurrency nedir?</p> </li> <li> <p>Cevap: Optimistic concurrency, veri \u00fczerinde kilit tutmadan, de\u011fi\u015fikliklerin kaydedilmesi s\u0131ras\u0131nda \u00e7ak\u0131\u015fma kontrol\u00fc yapan bir stratejidir.</p> </li> <li> <p>Entity Framework'te pessimistic concurrency nedir?</p> </li> <li> <p>Cevap: Pessimistic concurrency, veri \u00fczerinde kilit tutarak, di\u011fer i\u015flemlerin eri\u015fimini engelleyen bir stratejidir.</p> </li> <li> <p>Entity Framework'te concurrency token nedir?</p> </li> <li> <p>Cevap: Concurrency token, veri de\u011fi\u015fikliklerini takip etmek i\u00e7in kullan\u0131lan bir aland\u0131r.</p> </li> <li> <p>Entity Framework'te concurrency \u00e7ak\u0131\u015fmas\u0131 nas\u0131l y\u00f6netilir?</p> </li> <li>Cevap: DbUpdateConcurrencyException yakalanarak ve uygun strateji uygulanarak y\u00f6netilir.</li> </ol>"},{"location":"mid-level/entity-framework/concurrency/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Optimistic concurrency nas\u0131l implemente edilir?</li> <li> <p>Cevap: <pre><code>public class Blog\n{\n    [Timestamp]\n    public byte[] RowVersion { get; set; }\n}\n\ntry\n{\n    await _context.SaveChangesAsync();\n}\ncatch (DbUpdateConcurrencyException ex)\n{\n    var entry = ex.Entries.Single();\n    entry.OriginalValues.SetValues(await entry.GetDatabaseValuesAsync());\n    await _context.SaveChangesAsync();\n}\n</code></pre></p> </li> <li> <p>Pessimistic concurrency nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>using var transaction = await _context.Database.BeginTransactionAsync(\n    IsolationLevel.Serializable);\ntry\n{\n    var blog = await _context.Blogs\n        .FromSqlRaw(\"SELECT * FROM Blogs WITH (UPDLOCK) WHERE Id = {0}\", 1)\n        .FirstOrDefaultAsync();\n\n    await _context.SaveChangesAsync();\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n    throw;\n}\n</code></pre></p> </li> <li> <p>Concurrency resolution stratejileri nelerdir?</p> </li> <li> <p>Cevap: <pre><code>// Client wins\nentry.OriginalValues.SetValues(await entry.GetDatabaseValuesAsync());\n\n// Store wins\nentry.CurrentValues.SetValues(await entry.GetDatabaseValuesAsync());\n\n// Merge\nforeach (var property in clientValues.Properties)\n{\n    // Merge stratejisi\n}\n</code></pre></p> </li> <li> <p>Custom concurrency nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>public class CustomConcurrencyHandler : IConcurrencyHandler&lt;Blog&gt;\n{\n    public async Task HandleConcurrencyAsync(\n        DbContext context,\n        Blog entity,\n        DbUpdateConcurrencyException ex)\n    {\n        // \u00d6zel concurrency stratejisi\n    }\n}\n</code></pre></p> </li> <li> <p>Concurrency monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>var concurrencyConflicts = _context.ChangeTracker\n    .Entries()\n    .Where(e =&gt; e.State == EntityState.Modified)\n    .Select(e =&gt; new\n    {\n        Entity = e.Entity,\n        OriginalValues = e.OriginalValues,\n        CurrentValues = e.CurrentValues\n    })\n    .ToList();\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/concurrency/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te concurrency performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Concurrency stratejisi optimizasyonu</li> <li>Lock stratejileri</li> <li>Resource y\u00f6netimi</li> <li>Query optimizasyonu</li> <li>Caching stratejileri</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde concurrency nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Distributed transactions</li> <li>Data partitioning</li> <li>Replication</li> <li>Consistency</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Optimistic concurrency</li> <li>Pessimistic concurrency</li> <li>Retry mekanizmalar\u0131</li> <li>Queue y\u00f6netimi</li> <li>Batch processing</li> </ul> </li> <li> <p>Entity Framework'te concurrency monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Concurrency metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> <li>Logging</li> </ul> </li> <li> <p>Entity Framework'te custom concurrency stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>IConcurrencyHandler implementasyonu</li> <li>Custom resolution stratejileri</li> <li>Custom monitoring</li> <li>Custom validation</li> <li>Custom persistence </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/custom-migrations/","title":"Entity Framework - Custom Migrations","text":""},{"location":"mid-level/entity-framework/custom-migrations/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Custom Migrations (\u00d6zel Migrasyonlar), veritaban\u0131 \u015femas\u0131n\u0131 \u00f6zelle\u015ftirmek ve veri d\u00f6n\u00fc\u015f\u00fcmlerini y\u00f6netmek i\u00e7in kullan\u0131lan geli\u015fmi\u015f bir \u00f6zelliktir. Mid-level geli\u015ftiriciler i\u00e7in bu kavram\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 \u00f6nemlidir.</p>"},{"location":"mid-level/entity-framework/custom-migrations/#custom-migrationsn-onemi","title":"Custom Migrations'\u0131n \u00d6nemi","text":"<ol> <li>Veri Y\u00f6netimi</li> <li>Veritaban\u0131 \u015femas\u0131n\u0131 \u00f6zelle\u015ftirme</li> <li>Veri d\u00f6n\u00fc\u015f\u00fcmlerini y\u00f6netme</li> <li>Daha iyi veri b\u00fct\u00fcnl\u00fc\u011f\u00fc</li> <li> <p>Daha iyi veri eri\u015fimi</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha kolay \u015fema y\u00f6netimi</li> <li>Daha kolay veri d\u00f6n\u00fc\u015f\u00fcm\u00fc</li> <li>Daha iyi mod\u00fclerlik</li> <li> <p>Daha kolay geni\u015fletilebilirlik</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc koruma</li> <li>Veri d\u00f6n\u00fc\u015f\u00fcmlerini g\u00fcvenli yapma</li> <li>Rollback stratejileri</li> <li>G\u00fcvenlik kontrolleri</li> </ol>"},{"location":"mid-level/entity-framework/custom-migrations/#custom-migrations-ozellikleri","title":"Custom Migrations \u00d6zellikleri","text":"<ol> <li> <p>Temel Custom Migration <pre><code>public partial class AddUserFullName : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.AddColumn&lt;string&gt;(\n            name: \"FullName\",\n            table: \"Users\",\n            nullable: true);\n\n        migrationBuilder.Sql(\n            @\"UPDATE Users \n              SET FullName = FirstName + ' ' + LastName\");\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropColumn(\n            name: \"FullName\",\n            table: \"Users\");\n    }\n}\n</code></pre></p> </li> <li> <p>Custom Migration Kullan\u0131m\u0131 <pre><code>public class UserService\n{\n    private readonly DbContext _context;\n\n    public UserService(DbContext context)\n    {\n        _context = context;\n    }\n\n    public void UpdateUserFullName(int userId, string fullName)\n    {\n        var user = _context.Users.Find(userId);\n        if (user != null)\n        {\n            user.FullName = fullName;\n            _context.SaveChanges();\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Custom Migration Validasyonu <pre><code>public partial class AddUserFullName : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.AddColumn&lt;string&gt;(\n            name: \"FullName\",\n            table: \"Users\",\n            maxLength: 100,\n            nullable: false,\n            defaultValue: \"\");\n\n        migrationBuilder.Sql(\n            @\"UPDATE Users \n              SET FullName = FirstName + ' ' + LastName\n              WHERE FullName IS NULL\");\n\n        migrationBuilder.CreateIndex(\n            name: \"IX_Users_FullName\",\n            table: \"Users\",\n            column: \"FullName\");\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropIndex(\n            name: \"IX_Users_FullName\",\n            table: \"Users\");\n\n        migrationBuilder.DropColumn(\n            name: \"FullName\",\n            table: \"Users\");\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/custom-migrations/#custom-migrations-kullanm","title":"Custom Migrations Kullan\u0131m\u0131","text":"<ol> <li> <p>Entity \u0130\u00e7inde Kullan\u0131m <pre><code>public class User\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string FullName { get; set; }\n}\n\npublic class UserService\n{\n    private readonly DbContext _context;\n\n    public UserService(DbContext context)\n    {\n        _context = context;\n    }\n\n    public void UpdateUserFullName(int userId, string fullName)\n    {\n        var user = _context.Users.Find(userId);\n        if (user != null)\n        {\n            user.FullName = fullName;\n            _context.SaveChanges();\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>DbContext Konfig\u00fcrasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;User&gt;(entity =&gt;\n    {\n        entity.Property(e =&gt; e.FullName)\n            .IsRequired()\n            .HasMaxLength(100);\n\n        entity.HasIndex(e =&gt; e.FullName);\n    });\n}\n</code></pre></p> </li> <li> <p>Custom Migration D\u00f6n\u00fc\u015f\u00fcmleri <pre><code>public static class UserExtensions\n{\n    public static void UpdateFullName(this User user)\n    {\n        user.FullName = $\"{user.FirstName} {user.LastName}\";\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/custom-migrations/#best-practices","title":"Best Practices","text":"<ol> <li>Custom Migration Tasar\u0131m\u0131</li> <li>Single Responsibility</li> <li>Immutability</li> <li>Validation</li> <li> <p>Business logic</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Data integrity</li> <li>Rollback stratejileri</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Performans</p> </li> <li>Batch processing</li> <li>Index kullan\u0131m\u0131</li> <li>Transaction y\u00f6netimi</li> <li> <p>Timeout y\u00f6netimi</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Code organization</li> <li>Documentation</li> <li>Testing</li> <li>Versioning</li> </ol>"},{"location":"mid-level/entity-framework/custom-migrations/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/custom-migrations/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Custom Migration nedir?</li> <li> <p>Cevap: Custom Migration, veritaban\u0131 \u015femas\u0131n\u0131 \u00f6zelle\u015ftirmek ve veri d\u00f6n\u00fc\u015f\u00fcmlerini y\u00f6netmek i\u00e7in kullan\u0131lan geli\u015fmi\u015f bir \u00f6zelliktir.</p> </li> <li> <p>Entity Framework'te Custom Migration ve Normal Migration aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Normal Migration'lar otomatik olarak olu\u015fturulur, Custom Migration'lar geli\u015ftirici taraf\u0131ndan \u00f6zelle\u015ftirilir.</p> </li> <li> <p>Entity Framework'te Custom Migration nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: Migration s\u0131n\u0131f\u0131 olu\u015fturularak ve Up/Down metodlar\u0131 override edilerek olu\u015fturulur.</p> </li> <li> <p>Entity Framework'te Custom Migration ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Veritaban\u0131 \u015femas\u0131n\u0131 \u00f6zelle\u015ftirmek, veri d\u00f6n\u00fc\u015f\u00fcmlerini y\u00f6netmek veya \u00f6zel i\u015flemler yapmak i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Custom Migration performans\u0131 nas\u0131l etkiler?</p> </li> <li>Cevap: Veritaban\u0131 i\u015flemlerini etkileyebilir ancak veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc sa\u011flamay\u0131 kolayla\u015ft\u0131r\u0131r.</li> </ol>"},{"location":"mid-level/entity-framework/custom-migrations/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Temel Custom Migration nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>public partial class AddUserFullName : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.AddColumn&lt;string&gt;(\n            name: \"FullName\",\n            table: \"Users\",\n            nullable: true);\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropColumn(\n            name: \"FullName\",\n            table: \"Users\");\n    }\n}\n</code></pre></p> </li> <li> <p>Custom Migration nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public void UpdateUserFullName(int userId, string fullName)\n{\n    var user = _context.Users.Find(userId);\n    if (user != null)\n    {\n        user.FullName = fullName;\n        _context.SaveChanges();\n    }\n}\n</code></pre></p> </li> <li> <p>Custom Migration validasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>protected override void Up(MigrationBuilder migrationBuilder)\n{\n    migrationBuilder.AddColumn&lt;string&gt;(\n        name: \"FullName\",\n        table: \"Users\",\n        maxLength: 100,\n        nullable: false,\n        defaultValue: \"\");\n\n    migrationBuilder.CreateIndex(\n        name: \"IX_Users_FullName\",\n        table: \"Users\",\n        column: \"FullName\");\n}\n</code></pre></p> </li> <li> <p>Custom Migration nas\u0131l \u00f6zelle\u015ftirilir?</p> </li> <li> <p>Cevap: <pre><code>public static class UserExtensions\n{\n    public static void UpdateFullName(this User user)\n    {\n        user.FullName = $\"{user.FirstName} {user.LastName}\";\n    }\n}\n</code></pre></p> </li> <li> <p>Custom Migration nas\u0131l test edilir?</p> </li> <li>Cevap: <pre><code>[Test]\npublic void AddUserFullName_ShouldAddFullNameColumn()\n{\n    var migration = new AddUserFullName();\n    var migrationBuilder = new MigrationBuilder(\"Test\");\n\n    migration.Up(migrationBuilder);\n\n    Assert.IsTrue(migrationBuilder.Operations.Any(o =&gt; \n        o is AddColumnOperation operation &amp;&amp; \n        operation.Name == \"FullName\"));\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/custom-migrations/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Custom Migration performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Batch processing</li> <li>Index kullan\u0131m\u0131</li> <li>Transaction y\u00f6netimi</li> <li>Timeout y\u00f6netimi</li> <li>Resource kullan\u0131m\u0131</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Custom Migration nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Consistency</li> <li>Replication</li> <li>Sharding</li> <li>Partitioning</li> <li>Caching</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Custom Migration nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Locking stratejileri</li> <li>Transaction isolation</li> <li>Deadlock \u00f6nleme</li> <li>Retry mekanizmalar\u0131</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te Custom Migration monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> <li>Logging</li> </ul> </li> <li> <p>Entity Framework'te custom Custom Migration stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom migration handling</li> <li>Custom validation</li> <li>Custom optimization</li> <li>Custom rollback</li> <li>Custom testing </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/database-functions/","title":"Entity Framework - Database Functions","text":""},{"location":"mid-level/entity-framework/database-functions/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Database Functions (Veritaban\u0131 Fonksiyonlar\u0131), veritaban\u0131 seviyesinde \u00e7al\u0131\u015fan ve LINQ sorgular\u0131nda kullan\u0131labilen fonksiyonlard\u0131r. Mid-level geli\u015ftiriciler i\u00e7in bu kavram\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 \u00f6nemlidir.</p>"},{"location":"mid-level/entity-framework/database-functions/#database-functionsn-onemi","title":"Database Functions'\u0131n \u00d6nemi","text":"<ol> <li>Veri Y\u00f6netimi</li> <li>Veritaban\u0131 seviyesinde i\u015flem yapma</li> <li>Daha iyi veri organizasyonu</li> <li>Daha iyi veri b\u00fct\u00fcnl\u00fc\u011f\u00fc</li> <li> <p>Daha iyi veri eri\u015fimi</p> </li> <li> <p>Performans</p> </li> <li>Veritaban\u0131 seviyesinde optimizasyon</li> <li>Daha az veri transferi</li> <li>Daha h\u0131zl\u0131 sorgular</li> <li> <p>Daha iyi kaynak kullan\u0131m\u0131</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod tekrar\u0131</li> <li>Daha kolay test edilebilirlik</li> <li>Daha iyi mod\u00fclerlik</li> <li>Daha kolay geni\u015fletilebilirlik</li> </ol>"},{"location":"mid-level/entity-framework/database-functions/#database-functions-ozellikleri","title":"Database Functions \u00d6zellikleri","text":"<ol> <li> <p>Temel Database Function <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.HasDbFunction(typeof(MyDbContext)\n        .GetMethod(nameof(CalculateAge), new[] { typeof(DateTime) }))\n        .HasName(\"CalculateAge\");\n\n    modelBuilder.HasDbFunction(typeof(MyDbContext)\n        .GetMethod(nameof(FormatDate), new[] { typeof(DateTime), typeof(string) }))\n        .HasName(\"FormatDate\");\n}\n\npublic static int CalculateAge(DateTime birthDate)\n{\n    throw new NotSupportedException();\n}\n\npublic static string FormatDate(DateTime date, string format)\n{\n    throw new NotSupportedException();\n}\n</code></pre></p> </li> <li> <p>Database Function Kullan\u0131m\u0131 <pre><code>public class UserService\n{\n    private readonly DbContext _context;\n\n    public UserService(DbContext context)\n    {\n        _context = context;\n    }\n\n    public List&lt;User&gt; GetUsersByAge(int age)\n    {\n        return _context.Users\n            .Where(u =&gt; MyDbContext.CalculateAge(u.BirthDate) == age)\n            .ToList();\n    }\n\n    public List&lt;User&gt; GetUsersWithFormattedBirthDate(string format)\n    {\n        return _context.Users\n            .Select(u =&gt; new\n            {\n                u.Id,\n                u.Name,\n                FormattedBirthDate = MyDbContext.FormatDate(u.BirthDate, format)\n            })\n            .ToList();\n    }\n}\n</code></pre></p> </li> <li> <p>Database Function Validasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.HasDbFunction(typeof(MyDbContext)\n        .GetMethod(nameof(CalculateAge), new[] { typeof(DateTime) }))\n        .HasName(\"CalculateAge\")\n        .HasParameter(\"birthDate\")\n        .HasStoreType(\"date\");\n\n    modelBuilder.HasDbFunction(typeof(MyDbContext)\n        .GetMethod(nameof(FormatDate), new[] { typeof(DateTime), typeof(string) }))\n        .HasName(\"FormatDate\")\n        .HasParameter(\"date\")\n        .HasStoreType(\"datetime\")\n        .HasParameter(\"format\")\n        .HasStoreType(\"nvarchar(50)\");\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/database-functions/#database-functions-kullanm","title":"Database Functions Kullan\u0131m\u0131","text":"<ol> <li> <p>Entity \u0130\u00e7inde Kullan\u0131m <pre><code>public class User\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public DateTime BirthDate { get; set; }\n}\n\npublic class UserService\n{\n    private readonly DbContext _context;\n\n    public UserService(DbContext context)\n    {\n        _context = context;\n    }\n\n    public List&lt;User&gt; GetUsersByAge(int age)\n    {\n        return _context.Users\n            .Where(u =&gt; MyDbContext.CalculateAge(u.BirthDate) == age)\n            .ToList();\n    }\n\n    public List&lt;User&gt; GetUsersWithFormattedBirthDate(string format)\n    {\n        return _context.Users\n            .Select(u =&gt; new\n            {\n                u.Id,\n                u.Name,\n                FormattedBirthDate = MyDbContext.FormatDate(u.BirthDate, format)\n            })\n            .ToList();\n    }\n}\n</code></pre></p> </li> <li> <p>DbContext Konfig\u00fcrasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.HasDbFunction(typeof(MyDbContext)\n        .GetMethod(nameof(CalculateAge), new[] { typeof(DateTime) }))\n        .HasName(\"CalculateAge\")\n        .HasParameter(\"birthDate\")\n        .HasStoreType(\"date\");\n\n    modelBuilder.HasDbFunction(typeof(MyDbContext)\n        .GetMethod(nameof(FormatDate), new[] { typeof(DateTime), typeof(string) }))\n        .HasName(\"FormatDate\")\n        .HasParameter(\"date\")\n        .HasStoreType(\"datetime\")\n        .HasParameter(\"format\")\n        .HasStoreType(\"nvarchar(50)\");\n}\n</code></pre></p> </li> <li> <p>Database Function D\u00f6n\u00fc\u015f\u00fcmleri <pre><code>public static class UserExtensions\n{\n    public static IQueryable&lt;User&gt; FilterByAge(this IQueryable&lt;User&gt; query, int age)\n    {\n        return query.Where(u =&gt; MyDbContext.CalculateAge(u.BirthDate) == age);\n    }\n\n    public static IQueryable&lt;User&gt; FormatBirthDate(this IQueryable&lt;User&gt; query, string format)\n    {\n        return query.Select(u =&gt; new\n        {\n            u.Id,\n            u.Name,\n            FormattedBirthDate = MyDbContext.FormatDate(u.BirthDate, format)\n        });\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/database-functions/#best-practices","title":"Best Practices","text":"<ol> <li>Database Function Tasar\u0131m\u0131</li> <li>Single Responsibility</li> <li>Immutability</li> <li>Validation</li> <li> <p>Business logic</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation</li> <li>Data integrity</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Performans</p> </li> <li>Query optimization</li> <li>Index kullan\u0131m\u0131</li> <li>Caching</li> <li> <p>Lazy loading</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Code organization</li> <li>Documentation</li> <li>Testing</li> <li>Versioning</li> </ol>"},{"location":"mid-level/entity-framework/database-functions/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/database-functions/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Database Function nedir?</li> <li> <p>Cevap: Database Function, veritaban\u0131 seviyesinde \u00e7al\u0131\u015fan ve LINQ sorgular\u0131nda kullan\u0131labilen fonksiyonlard\u0131r.</p> </li> <li> <p>Entity Framework'te Database Function ve Normal Function aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Normal Function'lar uygulama seviyesinde \u00e7al\u0131\u015f\u0131r, Database Function'lar veritaban\u0131 seviyesinde \u00e7al\u0131\u015f\u0131r.</p> </li> <li> <p>Entity Framework'te Database Function nas\u0131l konfig\u00fcre edilir?</p> </li> <li> <p>Cevap: DbContext.OnModelCreating metodunda HasDbFunction metodu kullan\u0131larak konfig\u00fcre edilir.</p> </li> <li> <p>Entity Framework'te Database Function ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Veritaban\u0131 seviyesinde i\u015flem yapmak, performans\u0131 art\u0131rmak veya veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc sa\u011flamak i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Database Function performans\u0131 nas\u0131l etkiler?</p> </li> <li>Cevap: Veritaban\u0131 seviyesinde \u00e7al\u0131\u015ft\u0131\u011f\u0131 i\u00e7in performans\u0131 art\u0131rabilir ancak veritaban\u0131 y\u00fck\u00fcn\u00fc de art\u0131rabilir.</li> </ol>"},{"location":"mid-level/entity-framework/database-functions/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Temel Database Function nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.HasDbFunction(typeof(MyDbContext)\n        .GetMethod(nameof(CalculateAge), new[] { typeof(DateTime) }))\n        .HasName(\"CalculateAge\");\n}\n\npublic static int CalculateAge(DateTime birthDate)\n{\n    throw new NotSupportedException();\n}\n</code></pre></p> </li> <li> <p>Database Function nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public List&lt;User&gt; GetUsersByAge(int age)\n{\n    return _context.Users\n        .Where(u =&gt; MyDbContext.CalculateAge(u.BirthDate) == age)\n        .ToList();\n}\n</code></pre></p> </li> <li> <p>Database Function validasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.HasDbFunction(typeof(MyDbContext)\n        .GetMethod(nameof(CalculateAge), new[] { typeof(DateTime) }))\n        .HasName(\"CalculateAge\")\n        .HasParameter(\"birthDate\")\n        .HasStoreType(\"date\");\n}\n</code></pre></p> </li> <li> <p>Database Function nas\u0131l \u00f6zelle\u015ftirilir?</p> </li> <li> <p>Cevap: <pre><code>public static class UserExtensions\n{\n    public static IQueryable&lt;User&gt; FilterByAge(this IQueryable&lt;User&gt; query, int age)\n    {\n        return query.Where(u =&gt; MyDbContext.CalculateAge(u.BirthDate) == age);\n    }\n}\n</code></pre></p> </li> <li> <p>Database Function nas\u0131l test edilir?</p> </li> <li>Cevap: <pre><code>[Test]\npublic void CalculateAge_ShouldReturnCorrectAge()\n{\n    var birthDate = new DateTime(1990, 1, 1);\n    var expectedAge = DateTime.Now.Year - birthDate.Year;\n    var actualAge = MyDbContext.CalculateAge(birthDate);\n    Assert.AreEqual(expectedAge, actualAge);\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/database-functions/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Database Function performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Query optimizasyonu</li> <li>Index kullan\u0131m\u0131</li> <li>Caching stratejileri</li> <li>Lazy loading</li> <li>Materialization optimizasyonu</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Database Function nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Consistency</li> <li>Replication</li> <li>Sharding</li> <li>Partitioning</li> <li>Caching</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Database Function nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Thread safety</li> <li>Atomic operations</li> <li>Locking stratejileri</li> <li>Isolation levels</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te Database Function monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Query profiling</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> </ul> </li> <li> <p>Entity Framework'te custom Database Function stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom function handling</li> <li>Custom validation</li> <li>Custom optimization</li> <li>Custom caching</li> <li>Custom materialization </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/global-query-filters/","title":"Entity Framework - Global Query Filters","text":""},{"location":"mid-level/entity-framework/global-query-filters/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Global Query Filters (K\u00fcresel Sorgu Filtreleri), t\u00fcm sorgulara otomatik olarak uygulanan filtrelerdir. Mid-level geli\u015ftiriciler i\u00e7in bu kavram\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 \u00f6nemlidir.</p>"},{"location":"mid-level/entity-framework/global-query-filters/#global-query-filtersn-onemi","title":"Global Query Filters'\u0131n \u00d6nemi","text":"<ol> <li>Veri Y\u00f6netimi</li> <li>T\u00fcm sorgulara otomatik filtre uygulama</li> <li>Daha iyi veri organizasyonu</li> <li>Daha iyi veri b\u00fct\u00fcnl\u00fc\u011f\u00fc</li> <li> <p>Daha iyi veri eri\u015fimi</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Veri eri\u015fimini kontrol etme</li> <li>Hassas verileri filtreleme</li> <li>Yetkilendirme</li> <li> <p>G\u00fcvenlik kontrolleri</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod tekrar\u0131</li> <li>Daha kolay test edilebilirlik</li> <li>Daha iyi mod\u00fclerlik</li> <li>Daha kolay geni\u015fletilebilirlik</li> </ol>"},{"location":"mid-level/entity-framework/global-query-filters/#global-query-filters-ozellikleri","title":"Global Query Filters \u00d6zellikleri","text":"<ol> <li> <p>Temel Global Query Filter <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;()\n        .HasQueryFilter(b =&gt; !b.IsDeleted);\n\n    modelBuilder.Entity&lt;Post&gt;()\n        .HasQueryFilter(p =&gt; p.IsPublished);\n}\n</code></pre></p> </li> <li> <p>Global Query Filter Kullan\u0131m\u0131 <pre><code>public class BlogService\n{\n    private readonly DbContext _context;\n\n    public BlogService(DbContext context)\n    {\n        _context = context;\n    }\n\n    public List&lt;Blog&gt; GetActiveBlogs()\n    {\n        return _context.Blogs.ToList();\n    }\n\n    public List&lt;Blog&gt; GetInactiveBlogs()\n    {\n        return _context.Blogs.IgnoreQueryFilters().ToList();\n    }\n}\n</code></pre></p> </li> <li> <p>Global Query Filter Validasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;(entity =&gt;\n    {\n        entity.HasQueryFilter(b =&gt; !b.IsDeleted);\n        entity.Property(b =&gt; b.IsDeleted).IsRequired();\n    });\n\n    modelBuilder.Entity&lt;Post&gt;(entity =&gt;\n    {\n        entity.HasQueryFilter(p =&gt; p.IsPublished);\n        entity.Property(p =&gt; p.IsPublished).IsRequired();\n    });\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/global-query-filters/#global-query-filters-kullanm","title":"Global Query Filters Kullan\u0131m\u0131","text":"<ol> <li> <p>Entity \u0130\u00e7inde Kullan\u0131m <pre><code>public class Blog\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public bool IsDeleted { get; set; }\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public bool IsPublished { get; set; }\n}\n\npublic class BlogService\n{\n    private readonly DbContext _context;\n\n    public BlogService(DbContext context)\n    {\n        _context = context;\n    }\n\n    public List&lt;Blog&gt; GetActiveBlogs()\n    {\n        return _context.Blogs.ToList();\n    }\n\n    public List&lt;Blog&gt; GetAllBlogs()\n    {\n        return _context.Blogs.IgnoreQueryFilters().ToList();\n    }\n}\n</code></pre></p> </li> <li> <p>DbContext Konfig\u00fcrasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;(entity =&gt;\n    {\n        entity.HasQueryFilter(b =&gt; !b.IsDeleted);\n        entity.Property(b =&gt; b.IsDeleted).IsRequired();\n    });\n\n    modelBuilder.Entity&lt;Post&gt;(entity =&gt;\n    {\n        entity.HasQueryFilter(p =&gt; p.IsPublished);\n        entity.Property(p =&gt; p.IsPublished).IsRequired();\n    });\n}\n</code></pre></p> </li> <li> <p>Global Query Filter D\u00f6n\u00fc\u015f\u00fcmleri <pre><code>public static class BlogExtensions\n{\n    public static IQueryable&lt;Blog&gt; FilterByStatus(this IQueryable&lt;Blog&gt; query, bool includeDeleted)\n    {\n        if (includeDeleted)\n        {\n            return query.IgnoreQueryFilters();\n        }\n        return query;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/global-query-filters/#best-practices","title":"Best Practices","text":"<ol> <li>Global Query Filter Tasar\u0131m\u0131</li> <li>Single Responsibility</li> <li>Immutability</li> <li>Validation</li> <li> <p>Business logic</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation</li> <li>Data integrity</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Performans</p> </li> <li>Query optimization</li> <li>Index kullan\u0131m\u0131</li> <li>Caching</li> <li> <p>Lazy loading</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Code organization</li> <li>Documentation</li> <li>Testing</li> <li>Versioning</li> </ol>"},{"location":"mid-level/entity-framework/global-query-filters/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/global-query-filters/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Global Query Filter nedir?</li> <li> <p>Cevap: Global Query Filter, t\u00fcm sorgulara otomatik olarak uygulanan filtrelerdir.</p> </li> <li> <p>Entity Framework'te Global Query Filter ve Normal Filter aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Normal Filter'lar her sorgu i\u00e7in ayr\u0131 ayr\u0131 uygulan\u0131r, Global Query Filter'lar t\u00fcm sorgulara otomatik olarak uygulan\u0131r.</p> </li> <li> <p>Entity Framework'te Global Query Filter nas\u0131l konfig\u00fcre edilir?</p> </li> <li> <p>Cevap: DbContext.OnModelCreating metodunda HasQueryFilter metodu kullan\u0131larak konfig\u00fcre edilir.</p> </li> <li> <p>Entity Framework'te Global Query Filter ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: T\u00fcm sorgulara otomatik filtre uygulamak, veri eri\u015fimini kontrol etmek veya hassas verileri filtrelemek i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Global Query Filter performans\u0131 nas\u0131l etkiler?</p> </li> <li>Cevap: Query optimizasyonunu etkileyebilir ancak veri eri\u015fimini kontrol etmeyi kolayla\u015ft\u0131r\u0131r.</li> </ol>"},{"location":"mid-level/entity-framework/global-query-filters/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Temel Global Query Filter nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;()\n        .HasQueryFilter(b =&gt; !b.IsDeleted);\n}\n</code></pre></p> </li> <li> <p>Global Query Filter nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public List&lt;Blog&gt; GetActiveBlogs()\n{\n    return _context.Blogs.ToList();\n}\n\npublic List&lt;Blog&gt; GetAllBlogs()\n{\n    return _context.Blogs.IgnoreQueryFilters().ToList();\n}\n</code></pre></p> </li> <li> <p>Global Query Filter validasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;(entity =&gt;\n    {\n        entity.HasQueryFilter(b =&gt; !b.IsDeleted);\n        entity.Property(b =&gt; b.IsDeleted).IsRequired();\n    });\n}\n</code></pre></p> </li> <li> <p>Global Query Filter nas\u0131l devre d\u0131\u015f\u0131 b\u0131rak\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public List&lt;Blog&gt; GetAllBlogs()\n{\n    return _context.Blogs.IgnoreQueryFilters().ToList();\n}\n</code></pre></p> </li> <li> <p>Global Query Filter nas\u0131l \u00f6zelle\u015ftirilir?</p> </li> <li>Cevap: <pre><code>public static class BlogExtensions\n{\n    public static IQueryable&lt;Blog&gt; FilterByStatus(this IQueryable&lt;Blog&gt; query, bool includeDeleted)\n    {\n        if (includeDeleted)\n        {\n            return query.IgnoreQueryFilters();\n        }\n        return query;\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/global-query-filters/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Global Query Filter performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Query optimizasyonu</li> <li>Index kullan\u0131m\u0131</li> <li>Caching stratejileri</li> <li>Lazy loading</li> <li>Materialization optimizasyonu</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Global Query Filter nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Consistency</li> <li>Replication</li> <li>Sharding</li> <li>Partitioning</li> <li>Caching</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Global Query Filter nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Thread safety</li> <li>Atomic operations</li> <li>Locking stratejileri</li> <li>Isolation levels</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te Global Query Filter monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Query profiling</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> </ul> </li> <li> <p>Entity Framework'te custom Global Query Filter stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom filter handling</li> <li>Custom validation</li> <li>Custom optimization</li> <li>Custom caching</li> <li>Custom materialization </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/interceptors/","title":"Entity Framework - Interceptors","text":""},{"location":"mid-level/entity-framework/interceptors/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Interceptors (Kesiciler), veritaban\u0131 i\u015flemleri s\u0131ras\u0131nda belirli noktalarda m\u00fcdahale etmeyi sa\u011flayan g\u00fc\u00e7l\u00fc bir \u00f6zelliktir. Mid-level geli\u015ftiriciler i\u00e7in bu \u00f6zelli\u011fin anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 \u00f6nemlidir.</p>"},{"location":"mid-level/entity-framework/interceptors/#interceptorsn-onemi","title":"Interceptors'\u0131n \u00d6nemi","text":"<ol> <li>Esneklik</li> <li>\u0130\u015flem \u00f6ncesi/sonras\u0131 m\u00fcdahale</li> <li>\u00d6zel i\u015f mant\u0131\u011f\u0131 ekleme</li> <li>Davran\u0131\u015f de\u011fi\u015ftirme</li> <li> <p>Geni\u015fletilebilirlik</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Veri do\u011frulama</li> <li>Yetkilendirme</li> <li>Audit logging</li> <li> <p>G\u00fcvenlik kontrolleri</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Merkezi kontrol</li> <li>Kod tekrar\u0131n\u0131 \u00f6nleme</li> <li>Kolay test edilebilirlik</li> <li>Mod\u00fcler yap\u0131</li> </ol>"},{"location":"mid-level/entity-framework/interceptors/#interceptor-tipleri","title":"Interceptor Tipleri","text":"<ol> <li> <p>Command Interceptor <pre><code>public class CustomCommandInterceptor : DbCommandInterceptor\n{\n    public override InterceptionResult&lt;DbDataReader&gt; ReaderExecuting(\n        DbCommand command,\n        CommandEventData eventData,\n        InterceptionResult&lt;DbDataReader&gt; result)\n    {\n        // Command \u00f6ncesi i\u015flemler\n        LogCommand(command);\n        return result;\n    }\n\n    public override ValueTask&lt;InterceptionResult&lt;DbDataReader&gt;&gt; ReaderExecutingAsync(\n        DbCommand command,\n        CommandEventData eventData,\n        InterceptionResult&lt;DbDataReader&gt; result,\n        CancellationToken cancellationToken = default)\n    {\n        // Async command \u00f6ncesi i\u015flemler\n        LogCommand(command);\n        return new ValueTask&lt;InterceptionResult&lt;DbDataReader&gt;&gt;(result);\n    }\n}\n</code></pre></p> </li> <li> <p>Connection Interceptor <pre><code>public class CustomConnectionInterceptor : DbConnectionInterceptor\n{\n    public override InterceptionResult ConnectionOpening(\n        DbConnection connection,\n        ConnectionEventData eventData,\n        InterceptionResult result)\n    {\n        // Connection \u00f6ncesi i\u015flemler\n        LogConnection(connection);\n        return result;\n    }\n\n    public override ValueTask&lt;InterceptionResult&gt; ConnectionOpeningAsync(\n        DbConnection connection,\n        ConnectionEventData eventData,\n        InterceptionResult result,\n        CancellationToken cancellationToken = default)\n    {\n        // Async connection \u00f6ncesi i\u015flemler\n        LogConnection(connection);\n        return new ValueTask&lt;InterceptionResult&gt;(result);\n    }\n}\n</code></pre></p> </li> <li> <p>Transaction Interceptor <pre><code>public class CustomTransactionInterceptor : DbTransactionInterceptor\n{\n    public override InterceptionResult TransactionStarting(\n        DbConnection connection,\n        TransactionStartingEventData eventData,\n        InterceptionResult result)\n    {\n        // Transaction ba\u015flang\u0131c\u0131 i\u015flemleri\n        LogTransactionStart();\n        return result;\n    }\n\n    public override ValueTask&lt;InterceptionResult&gt; TransactionStartingAsync(\n        DbConnection connection,\n        TransactionStartingEventData eventData,\n        InterceptionResult result,\n        CancellationToken cancellationToken = default)\n    {\n        // Async transaction ba\u015flang\u0131c\u0131 i\u015flemleri\n        LogTransactionStart();\n        return new ValueTask&lt;InterceptionResult&gt;(result);\n    }\n}\n</code></pre></p> </li> <li> <p>SaveChanges Interceptor <pre><code>public class CustomSaveChangesInterceptor : SaveChangesInterceptor\n{\n    public override InterceptionResult&lt;int&gt; SavingChanges(\n        DbContextEventData eventData,\n        InterceptionResult&lt;int&gt; result)\n    {\n        // SaveChanges \u00f6ncesi i\u015flemler\n        ValidateChanges(eventData.Context);\n        return result;\n    }\n\n    public override ValueTask&lt;InterceptionResult&lt;int&gt;&gt; SavingChangesAsync(\n        DbContextEventData eventData,\n        InterceptionResult&lt;int&gt; result,\n        CancellationToken cancellationToken = default)\n    {\n        // Async SaveChanges \u00f6ncesi i\u015flemler\n        ValidateChanges(eventData.Context);\n        return new ValueTask&lt;InterceptionResult&lt;int&gt;&gt;(result);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/interceptors/#interceptor-kullanm","title":"Interceptor Kullan\u0131m\u0131","text":"<ol> <li> <p>DbContext Konfig\u00fcrasyonu <pre><code>protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .AddInterceptors(new CustomCommandInterceptor())\n        .AddInterceptors(new CustomConnectionInterceptor())\n        .AddInterceptors(new CustomTransactionInterceptor())\n        .AddInterceptors(new CustomSaveChangesInterceptor());\n}\n</code></pre></p> </li> <li> <p>Dependency Injection ile Kullan\u0131m <pre><code>services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n{\n    options\n        .AddInterceptors(new CustomCommandInterceptor())\n        .AddInterceptors(new CustomConnectionInterceptor())\n        .AddInterceptors(new CustomTransactionInterceptor())\n        .AddInterceptors(new CustomSaveChangesInterceptor());\n});\n</code></pre></p> </li> <li> <p>\u00d6zel Interceptor \u00d6rnekleri <pre><code>// Audit Logging Interceptor\npublic class AuditLoggingInterceptor : SaveChangesInterceptor\n{\n    public override InterceptionResult&lt;int&gt; SavingChanges(\n        DbContextEventData eventData,\n        InterceptionResult&lt;int&gt; result)\n    {\n        var entries = eventData.Context.ChangeTracker.Entries();\n        foreach (var entry in entries)\n        {\n            if (entry.State == EntityState.Added || \n                entry.State == EntityState.Modified || \n                entry.State == EntityState.Deleted)\n            {\n                LogAudit(entry);\n            }\n        }\n        return result;\n    }\n}\n\n// Soft Delete Interceptor\npublic class SoftDeleteInterceptor : SaveChangesInterceptor\n{\n    public override InterceptionResult&lt;int&gt; SavingChanges(\n        DbContextEventData eventData,\n        InterceptionResult&lt;int&gt; result)\n    {\n        var entries = eventData.Context.ChangeTracker.Entries()\n            .Where(e =&gt; e.State == EntityState.Deleted);\n\n        foreach (var entry in entries)\n        {\n            if (entry.Entity is ISoftDelete softDelete)\n            {\n                softDelete.IsDeleted = true;\n                entry.State = EntityState.Modified;\n            }\n        }\n        return result;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/interceptors/#best-practices","title":"Best Practices","text":"<ol> <li>Interceptor Tasar\u0131m\u0131</li> <li>Single Responsibility</li> <li>Dependency Injection</li> <li>Error handling</li> <li> <p>Performance</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation</li> <li>Authorization</li> <li>Audit logging</li> <li> <p>Security checks</p> </li> <li> <p>Performans</p> </li> <li>Minimal m\u00fcdahale</li> <li>Async operations</li> <li>Resource y\u00f6netimi</li> <li> <p>Caching</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod organizasyonu</li> <li>Documentation</li> <li>Testing</li> <li>Monitoring</li> </ol>"},{"location":"mid-level/entity-framework/interceptors/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/interceptors/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Interceptor nedir?</li> <li> <p>Cevap: Interceptor, veritaban\u0131 i\u015flemleri s\u0131ras\u0131nda belirli noktalarda m\u00fcdahale etmeyi sa\u011flayan bir \u00f6zelliktir.</p> </li> <li> <p>Entity Framework'te ka\u00e7 \u00e7e\u015fit Interceptor vard\u0131r?</p> </li> <li> <p>Cevap: Command Interceptor, Connection Interceptor, Transaction Interceptor ve SaveChanges Interceptor.</p> </li> <li> <p>Entity Framework'te Interceptor nas\u0131l kaydedilir?</p> </li> <li> <p>Cevap: DbContext.OnConfiguring metodunda veya Dependency Injection ile AddInterceptors metodu kullan\u0131larak.</p> </li> <li> <p>Entity Framework'te Interceptor ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Audit logging, soft delete, validation, authorization gibi cross-cutting concerns'ler i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Interceptor performans\u0131 nas\u0131l etkiler?</p> </li> <li>Cevap: Her i\u015flem i\u00e7in ek y\u00fck getirir, bu nedenle dikkatli kullan\u0131lmal\u0131d\u0131r.</li> </ol>"},{"location":"mid-level/entity-framework/interceptors/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Command Interceptor nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>public class CustomCommandInterceptor : DbCommandInterceptor\n{\n    public override InterceptionResult&lt;DbDataReader&gt; ReaderExecuting(\n        DbCommand command,\n        CommandEventData eventData,\n        InterceptionResult&lt;DbDataReader&gt; result)\n    {\n        LogCommand(command);\n        return result;\n    }\n}\n</code></pre></p> </li> <li> <p>SaveChanges Interceptor nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class CustomSaveChangesInterceptor : SaveChangesInterceptor\n{\n    public override InterceptionResult&lt;int&gt; SavingChanges(\n        DbContextEventData eventData,\n        InterceptionResult&lt;int&gt; result)\n    {\n        ValidateChanges(eventData.Context);\n        return result;\n    }\n}\n</code></pre></p> </li> <li> <p>Soft Delete Interceptor nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class SoftDeleteInterceptor : SaveChangesInterceptor\n{\n    public override InterceptionResult&lt;int&gt; SavingChanges(\n        DbContextEventData eventData,\n        InterceptionResult&lt;int&gt; result)\n    {\n        var entries = eventData.Context.ChangeTracker.Entries()\n            .Where(e =&gt; e.State == EntityState.Deleted);\n\n        foreach (var entry in entries)\n        {\n            if (entry.Entity is ISoftDelete softDelete)\n            {\n                softDelete.IsDeleted = true;\n                entry.State = EntityState.Modified;\n            }\n        }\n        return result;\n    }\n}\n</code></pre></p> </li> <li> <p>Audit Logging Interceptor nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class AuditLoggingInterceptor : SaveChangesInterceptor\n{\n    public override InterceptionResult&lt;int&gt; SavingChanges(\n        DbContextEventData eventData,\n        InterceptionResult&lt;int&gt; result)\n    {\n        var entries = eventData.Context.ChangeTracker.Entries();\n        foreach (var entry in entries)\n        {\n            if (entry.State == EntityState.Added || \n                entry.State == EntityState.Modified || \n                entry.State == EntityState.Deleted)\n            {\n                LogAudit(entry);\n            }\n        }\n        return result;\n    }\n}\n</code></pre></p> </li> <li> <p>Interceptor'lar nas\u0131l test edilir?</p> </li> <li>Cevap: <pre><code>[Test]\npublic void TestCommandInterceptor()\n{\n    var interceptor = new CustomCommandInterceptor();\n    var command = new Mock&lt;DbCommand&gt;();\n    var eventData = new CommandEventData(null, null, null);\n    var result = new InterceptionResult&lt;DbDataReader&gt;();\n\n    var actual = interceptor.ReaderExecuting(command.Object, eventData, result);\n    Assert.That(actual, Is.EqualTo(result));\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/interceptors/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Interceptor performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Minimal m\u00fcdahale</li> <li>Async operations</li> <li>Resource y\u00f6netimi</li> <li>Caching stratejileri</li> <li>Conditional execution</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Interceptor nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Distributed transactions</li> <li>Event sourcing</li> <li>Message queues</li> <li>Consistency</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Interceptor nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Optimistic concurrency</li> <li>Pessimistic concurrency</li> <li>Retry mekanizmalar\u0131</li> <li>Queue y\u00f6netimi</li> <li>Batch processing</li> </ul> </li> <li> <p>Entity Framework'te Interceptor monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> <li>Logging</li> </ul> </li> <li> <p>Entity Framework'te custom Interceptor stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom event handling</li> <li>Custom validation</li> <li>Custom logging</li> <li>Custom monitoring</li> <li>Custom optimization </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/multiple-databases/","title":"Entity Framework - Multiple Databases","text":""},{"location":"mid-level/entity-framework/multiple-databases/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Multiple Databases (\u00c7oklu Veritabanlar\u0131), farkl\u0131 veritabanlar\u0131n\u0131 ayn\u0131 uygulamada y\u00f6netmek i\u00e7in kullan\u0131lan geli\u015fmi\u015f bir \u00f6zelliktir. Mid-level geli\u015ftiriciler i\u00e7in bu kavram\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 \u00f6nemlidir.</p>"},{"location":"mid-level/entity-framework/multiple-databases/#multiple-databasesn-onemi","title":"Multiple Databases'\u0131n \u00d6nemi","text":"<ol> <li>Veri Y\u00f6netimi</li> <li>Farkl\u0131 veritabanlar\u0131n\u0131 y\u00f6netme</li> <li>Veri b\u00f6l\u00fcmleme</li> <li>Daha iyi veri organizasyonu</li> <li> <p>Daha iyi veri eri\u015fimi</p> </li> <li> <p>Performans</p> </li> <li>Y\u00fck dengeleme</li> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Daha h\u0131zl\u0131 sorgular</li> <li> <p>Daha iyi kaynak kullan\u0131m\u0131</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Veri izolasyonu</li> <li>Eri\u015fim kontrol\u00fc</li> <li>G\u00fcvenlik kontrolleri</li> <li>Audit logging</li> </ol>"},{"location":"mid-level/entity-framework/multiple-databases/#multiple-databases-ozellikleri","title":"Multiple Databases \u00d6zellikleri","text":"<ol> <li> <p>Temel Multiple Database Konfig\u00fcrasyonu <pre><code>public class MainDbContext : DbContext\n{\n    public MainDbContext(DbContextOptions&lt;MainDbContext&gt; options)\n        : base(options)\n    {\n    }\n\n    public DbSet&lt;User&gt; Users { get; set; }\n    public DbSet&lt;Order&gt; Orders { get; set; }\n}\n\npublic class LogDbContext : DbContext\n{\n    public LogDbContext(DbContextOptions&lt;LogDbContext&gt; options)\n        : base(options)\n    {\n    }\n\n    public DbSet&lt;Log&gt; Logs { get; set; }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddDbContext&lt;MainDbContext&gt;(options =&gt;\n            options.UseSqlServer(Configuration.GetConnectionString(\"MainDb\")));\n\n        services.AddDbContext&lt;LogDbContext&gt;(options =&gt;\n            options.UseSqlServer(Configuration.GetConnectionString(\"LogDb\")));\n    }\n}\n</code></pre></p> </li> <li> <p>Multiple Database Kullan\u0131m\u0131 <pre><code>public class UserService\n{\n    private readonly MainDbContext _mainContext;\n    private readonly LogDbContext _logContext;\n\n    public UserService(MainDbContext mainContext, LogDbContext logContext)\n    {\n        _mainContext = mainContext;\n        _logContext = logContext;\n    }\n\n    public async Task CreateUser(User user)\n    {\n        await _mainContext.Users.AddAsync(user);\n        await _mainContext.SaveChangesAsync();\n\n        await _logContext.Logs.AddAsync(new Log\n        {\n            Message = $\"User created: {user.Id}\",\n            CreatedAt = DateTime.UtcNow\n        });\n        await _logContext.SaveChangesAsync();\n    }\n}\n</code></pre></p> </li> <li> <p>Multiple Database Validasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;User&gt;(entity =&gt;\n    {\n        entity.HasKey(e =&gt; e.Id);\n        entity.Property(e =&gt; e.Name).IsRequired().HasMaxLength(100);\n        entity.Property(e =&gt; e.Email).IsRequired().HasMaxLength(100);\n    });\n\n    modelBuilder.Entity&lt;Log&gt;(entity =&gt;\n    {\n        entity.HasKey(e =&gt; e.Id);\n        entity.Property(e =&gt; e.Message).IsRequired();\n        entity.Property(e =&gt; e.CreatedAt).IsRequired();\n    });\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/multiple-databases/#multiple-databases-kullanm","title":"Multiple Databases Kullan\u0131m\u0131","text":"<ol> <li> <p>Entity \u0130\u00e7inde Kullan\u0131m <pre><code>public class User\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class Log\n{\n    public int Id { get; set; }\n    public string Message { get; set; }\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class UserService\n{\n    private readonly MainDbContext _mainContext;\n    private readonly LogDbContext _logContext;\n\n    public UserService(MainDbContext mainContext, LogDbContext logContext)\n    {\n        _mainContext = mainContext;\n        _logContext = logContext;\n    }\n\n    public async Task CreateUser(User user)\n    {\n        await _mainContext.Users.AddAsync(user);\n        await _mainContext.SaveChangesAsync();\n\n        await _logContext.Logs.AddAsync(new Log\n        {\n            Message = $\"User created: {user.Id}\",\n            CreatedAt = DateTime.UtcNow\n        });\n        await _logContext.SaveChangesAsync();\n    }\n}\n</code></pre></p> </li> <li> <p>DbContext Konfig\u00fcrasyonu <pre><code>public class MainDbContext : DbContext\n{\n    public MainDbContext(DbContextOptions&lt;MainDbContext&gt; options)\n        : base(options)\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity&lt;User&gt;(entity =&gt;\n        {\n            entity.HasKey(e =&gt; e.Id);\n            entity.Property(e =&gt; e.Name).IsRequired().HasMaxLength(100);\n            entity.Property(e =&gt; e.Email).IsRequired().HasMaxLength(100);\n        });\n    }\n\n    public DbSet&lt;User&gt; Users { get; set; }\n}\n\npublic class LogDbContext : DbContext\n{\n    public LogDbContext(DbContextOptions&lt;LogDbContext&gt; options)\n        : base(options)\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity&lt;Log&gt;(entity =&gt;\n        {\n            entity.HasKey(e =&gt; e.Id);\n            entity.Property(e =&gt; e.Message).IsRequired();\n            entity.Property(e =&gt; e.CreatedAt).IsRequired();\n        });\n    }\n\n    public DbSet&lt;Log&gt; Logs { get; set; }\n}\n</code></pre></p> </li> <li> <p>Multiple Database D\u00f6n\u00fc\u015f\u00fcmleri <pre><code>public static class UserExtensions\n{\n    public static async Task LogUserCreation(this User user, LogDbContext context)\n    {\n        await context.Logs.AddAsync(new Log\n        {\n            Message = $\"User created: {user.Id}\",\n            CreatedAt = DateTime.UtcNow\n        });\n        await context.SaveChangesAsync();\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/multiple-databases/#best-practices","title":"Best Practices","text":"<ol> <li>Multiple Database Tasar\u0131m\u0131</li> <li>Single Responsibility</li> <li>Immutability</li> <li>Validation</li> <li> <p>Business logic</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Data integrity</li> <li>Access control</li> <li>Audit logging</li> <li> <p>Encryption</p> </li> <li> <p>Performans</p> </li> <li>Connection pooling</li> <li>Query optimization</li> <li>Caching</li> <li> <p>Lazy loading</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Code organization</li> <li>Documentation</li> <li>Testing</li> <li>Versioning</li> </ol>"},{"location":"mid-level/entity-framework/multiple-databases/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/multiple-databases/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Multiple Database nedir?</li> <li> <p>Cevap: Multiple Database, farkl\u0131 veritabanlar\u0131n\u0131 ayn\u0131 uygulamada y\u00f6netmek i\u00e7in kullan\u0131lan geli\u015fmi\u015f bir \u00f6zelliktir.</p> </li> <li> <p>Entity Framework'te Multiple Database ve Single Database aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Single Database'de t\u00fcm veriler tek bir veritaban\u0131nda tutulur, Multiple Database'de farkl\u0131 veritabanlar\u0131 kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Multiple Database nas\u0131l konfig\u00fcre edilir?</p> </li> <li> <p>Cevap: Farkl\u0131 DbContext s\u0131n\u0131flar\u0131 olu\u015fturularak ve her biri i\u00e7in ayr\u0131 connection string tan\u0131mlanarak konfig\u00fcre edilir.</p> </li> <li> <p>Entity Framework'te Multiple Database ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Farkl\u0131 veritabanlar\u0131 kullanmak, veri b\u00f6l\u00fcmleme yapmak veya performans\u0131 art\u0131rmak i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Multiple Database performans\u0131 nas\u0131l etkiler?</p> </li> <li>Cevap: Y\u00fck dengeleme ve \u00f6l\u00e7eklenebilirlik sa\u011flayabilir ancak connection y\u00f6netimi gerektirir.</li> </ol>"},{"location":"mid-level/entity-framework/multiple-databases/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Temel Multiple Database nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>public class MainDbContext : DbContext\n{\n    public MainDbContext(DbContextOptions&lt;MainDbContext&gt; options)\n        : base(options)\n    {\n    }\n\n    public DbSet&lt;User&gt; Users { get; set; }\n}\n\npublic class LogDbContext : DbContext\n{\n    public LogDbContext(DbContextOptions&lt;LogDbContext&gt; options)\n        : base(options)\n    {\n    }\n\n    public DbSet&lt;Log&gt; Logs { get; set; }\n}\n</code></pre></p> </li> <li> <p>Multiple Database nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class UserService\n{\n    private readonly MainDbContext _mainContext;\n    private readonly LogDbContext _logContext;\n\n    public UserService(MainDbContext mainContext, LogDbContext logContext)\n    {\n        _mainContext = mainContext;\n        _logContext = logContext;\n    }\n\n    public async Task CreateUser(User user)\n    {\n        await _mainContext.Users.AddAsync(user);\n        await _mainContext.SaveChangesAsync();\n\n        await _logContext.Logs.AddAsync(new Log\n        {\n            Message = $\"User created: {user.Id}\",\n            CreatedAt = DateTime.UtcNow\n        });\n        await _logContext.SaveChangesAsync();\n    }\n}\n</code></pre></p> </li> <li> <p>Multiple Database validasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;User&gt;(entity =&gt;\n    {\n        entity.HasKey(e =&gt; e.Id);\n        entity.Property(e =&gt; e.Name).IsRequired().HasMaxLength(100);\n    });\n}\n</code></pre></p> </li> <li> <p>Multiple Database nas\u0131l \u00f6zelle\u015ftirilir?</p> </li> <li> <p>Cevap: <pre><code>public static class UserExtensions\n{\n    public static async Task LogUserCreation(this User user, LogDbContext context)\n    {\n        await context.Logs.AddAsync(new Log\n        {\n            Message = $\"User created: {user.Id}\",\n            CreatedAt = DateTime.UtcNow\n        });\n        await context.SaveChangesAsync();\n    }\n}\n</code></pre></p> </li> <li> <p>Multiple Database nas\u0131l test edilir?</p> </li> <li>Cevap: <pre><code>[Test]\npublic async Task CreateUser_ShouldCreateUserAndLog()\n{\n    var mainOptions = new DbContextOptionsBuilder&lt;MainDbContext&gt;()\n        .UseInMemoryDatabase(\"MainDb\")\n        .Options;\n\n    var logOptions = new DbContextOptionsBuilder&lt;LogDbContext&gt;()\n        .UseInMemoryDatabase(\"LogDb\")\n        .Options;\n\n    using (var mainContext = new MainDbContext(mainOptions))\n    using (var logContext = new LogDbContext(logOptions))\n    {\n        var service = new UserService(mainContext, logContext);\n        var user = new User { Name = \"Test User\" };\n\n        await service.CreateUser(user);\n\n        Assert.IsTrue(mainContext.Users.Any(u =&gt; u.Name == \"Test User\"));\n        Assert.IsTrue(logContext.Logs.Any(l =&gt; l.Message.Contains(\"User created\")));\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/multiple-databases/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Multiple Database performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Connection pooling</li> <li>Query optimizasyonu</li> <li>Caching stratejileri</li> <li>Lazy loading</li> <li>Materialization optimizasyonu</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Multiple Database nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Consistency</li> <li>Replication</li> <li>Sharding</li> <li>Partitioning</li> <li>Caching</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Multiple Database nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Locking stratejileri</li> <li>Transaction isolation</li> <li>Deadlock \u00f6nleme</li> <li>Retry mekanizmalar\u0131</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te Multiple Database monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> <li>Logging</li> </ul> </li> <li> <p>Entity Framework'te custom Multiple Database stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom connection handling</li> <li>Custom validation</li> <li>Custom optimization</li> <li>Custom caching</li> <li>Custom materialization </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/performance-optimization/","title":"Entity Framework - Performance Optimization","text":""},{"location":"mid-level/entity-framework/performance-optimization/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te performans optimizasyonu, uygulaman\u0131n veritaban\u0131 i\u015flemlerini daha h\u0131zl\u0131 ve verimli bir \u015fekilde ger\u00e7ekle\u015ftirmesini sa\u011flar. Mid-level geli\u015ftiriciler i\u00e7in performans optimizasyonu kritik bir konudur.</p>"},{"location":"mid-level/entity-framework/performance-optimization/#performance-optimizationun-onemi","title":"Performance Optimization'un \u00d6nemi","text":"<ol> <li>Uygulama Performans\u0131</li> <li>Daha h\u0131zl\u0131 sorgu yan\u0131t s\u00fcreleri</li> <li>Daha az kaynak kullan\u0131m\u0131</li> <li>Daha iyi kullan\u0131c\u0131 deneyimi</li> <li> <p>Daha y\u00fcksek \u00f6l\u00e7eklenebilirlik</p> </li> <li> <p>Veritaban\u0131 Y\u00fck\u00fc</p> </li> <li>Daha az veritaban\u0131 y\u00fck\u00fc</li> <li>Daha verimli sorgu planlar\u0131</li> <li>Daha az network trafi\u011fi</li> <li> <p>Daha iyi kaynak y\u00f6netimi</p> </li> <li> <p>Maliyet Optimizasyonu</p> </li> <li>Daha az donan\u0131m gereksinimi</li> <li>Daha d\u00fc\u015f\u00fck i\u015flem maliyetleri</li> <li>Daha verimli kaynak kullan\u0131m\u0131</li> <li>Daha iyi ROI</li> </ol>"},{"location":"mid-level/entity-framework/performance-optimization/#performance-optimization-stratejileri","title":"Performance Optimization Stratejileri","text":"<ol> <li> <p>Query Optimizasyonu <pre><code>// K\u00f6t\u00fc \u00f6rnek: N+1 problemi\nvar blogs = await _context.Blogs.ToListAsync();\nforeach (var blog in blogs)\n{\n    var posts = await _context.Posts.Where(p =&gt; p.BlogId == blog.Id).ToListAsync();\n}\n\n// \u0130yi \u00f6rnek: Eager loading\nvar blogs = await _context.Blogs\n    .Include(b =&gt; b.Posts)\n    .ToListAsync();\n\n// \u0130yi \u00f6rnek: Projection\nvar blogTitles = await _context.Blogs\n    .Select(b =&gt; new { b.Id, b.Title })\n    .ToListAsync();\n\n// \u0130yi \u00f6rnek: Compiled query\nprivate static readonly Func&lt;ApplicationDbContext, int, Task&lt;Blog&gt;&gt; GetBlogById =\n    EF.CompileAsyncQuery((ApplicationDbContext context, int id) =&gt;\n        context.Blogs.FirstOrDefault(b =&gt; b.Id == id));\n</code></pre></p> </li> <li> <p>Change Tracking Optimizasyonu <pre><code>// K\u00f6t\u00fc \u00f6rnek: Gereksiz change tracking\nvar blogs = await _context.Blogs.AsTracking().ToListAsync();\n\n// \u0130yi \u00f6rnek: No tracking\nvar blogs = await _context.Blogs.AsNoTracking().ToListAsync();\n\n// \u0130yi \u00f6rnek: Selective tracking\nvar blog = await _context.Blogs\n    .AsNoTracking()\n    .FirstOrDefaultAsync(b =&gt; b.Id == id);\n_context.Entry(blog).State = EntityState.Modified;\n</code></pre></p> </li> <li> <p>Bulk Operasyonlar <pre><code>// K\u00f6t\u00fc \u00f6rnek: Tek tek ekleme\nforeach (var entity in entities)\n{\n    await _context.AddAsync(entity);\n    await _context.SaveChangesAsync();\n}\n\n// \u0130yi \u00f6rnek: Bulk insert\nawait _context.BulkInsertAsync(entities);\n\n// \u0130yi \u00f6rnek: Batch processing\nvar batchSize = 100;\nfor (var i = 0; i &lt; entities.Count; i += batchSize)\n{\n    var batch = entities.Skip(i).Take(batchSize);\n    await _context.BulkInsertAsync(batch);\n}\n</code></pre></p> </li> <li> <p>Caching Stratejileri <pre><code>// Memory cache kullan\u0131m\u0131\npublic class CachedRepository&lt;T&gt; where T : class\n{\n    private readonly IMemoryCache _cache;\n    private readonly ApplicationDbContext _context;\n    private readonly string _cacheKey;\n\n    public CachedRepository(IMemoryCache cache, ApplicationDbContext context)\n    {\n        _cache = cache;\n        _context = context;\n        _cacheKey = typeof(T).Name;\n    }\n\n    public async Task&lt;T&gt; GetByIdAsync(int id)\n    {\n        var cacheKey = $\"{_cacheKey}-{id}\";\n        return await _cache.GetOrCreateAsync(cacheKey, async entry =&gt;\n        {\n            entry.SetAbsoluteExpiration(TimeSpan.FromMinutes(5));\n            return await _context.Set&lt;T&gt;().FindAsync(id);\n        });\n    }\n}\n\n// Distributed cache kullan\u0131m\u0131\npublic class DistributedCachedRepository&lt;T&gt; where T : class\n{\n    private readonly IDistributedCache _cache;\n    private readonly ApplicationDbContext _context;\n    private readonly string _cacheKey;\n\n    public DistributedCachedRepository(IDistributedCache cache, ApplicationDbContext context)\n    {\n        _cache = cache;\n        _context = context;\n        _cacheKey = typeof(T).Name;\n    }\n\n    public async Task&lt;T&gt; GetByIdAsync(int id)\n    {\n        var cacheKey = $\"{_cacheKey}-{id}\";\n        var cachedData = await _cache.GetStringAsync(cacheKey);\n\n        if (cachedData != null)\n        {\n            return JsonSerializer.Deserialize&lt;T&gt;(cachedData);\n        }\n\n        var data = await _context.Set&lt;T&gt;().FindAsync(id);\n        await _cache.SetStringAsync(cacheKey, JsonSerializer.Serialize(data), new DistributedCacheEntryOptions\n        {\n            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5)\n        });\n\n        return data;\n    }\n}\n</code></pre></p> </li> <li> <p>Index Y\u00f6netimi <pre><code>// Index tan\u0131mlama\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;()\n        .HasIndex(b =&gt; b.Title)\n        .IsUnique();\n\n    modelBuilder.Entity&lt;Post&gt;()\n        .HasIndex(p =&gt; new { p.BlogId, p.PublishedDate })\n        .IncludeProperties(p =&gt; new { p.Title, p.Content });\n}\n\n// Index kullan\u0131m\u0131\nvar blogs = await _context.Blogs\n    .Where(b =&gt; b.Title.StartsWith(\"A\"))\n    .OrderBy(b =&gt; b.Title)\n    .ToListAsync();\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/performance-optimization/#performance-monitoring","title":"Performance Monitoring","text":"<ol> <li> <p>Query Logging <pre><code>protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .UseSqlServer(connectionString)\n        .EnableSensitiveDataLogging()\n        .LogTo(Console.WriteLine, LogLevel.Information);\n}\n</code></pre></p> </li> <li> <p>Performance Metrics <pre><code>public class PerformanceMonitor\n{\n    private readonly Stopwatch _stopwatch = new Stopwatch();\n\n    public async Task&lt;T&gt; MeasureQuery&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; query)\n    {\n        _stopwatch.Start();\n        var result = await query();\n        _stopwatch.Stop();\n\n        Console.WriteLine($\"Query executed in {_stopwatch.ElapsedMilliseconds}ms\");\n        _stopwatch.Reset();\n\n        return result;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/performance-optimization/#best-practices","title":"Best Practices","text":"<ol> <li>Query Tasar\u0131m\u0131</li> <li>Eager loading kullan\u0131m\u0131</li> <li>Projection kullan\u0131m\u0131</li> <li>Compiled query kullan\u0131m\u0131</li> <li>Batch processing</li> <li> <p>Pagination</p> </li> <li> <p>Change Tracking</p> </li> <li>No tracking kullan\u0131m\u0131</li> <li>Selective tracking</li> <li>Bulk operasyonlar</li> <li>Batch updates</li> <li> <p>Optimistic concurrency</p> </li> <li> <p>Caching</p> </li> <li>Memory cache</li> <li>Distributed cache</li> <li>Cache invalidation</li> <li>Cache duration</li> <li> <p>Cache size</p> </li> <li> <p>Indexing</p> </li> <li>Index tasar\u0131m\u0131</li> <li>Index maintenance</li> <li>Index fragmentation</li> <li>Index statistics</li> <li>Query plan analysis</li> </ol>"},{"location":"mid-level/entity-framework/performance-optimization/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/performance-optimization/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te N+1 problemi nedir ve nas\u0131l \u00e7\u00f6z\u00fcl\u00fcr?</li> <li> <p>Cevap: N+1 problemi, bir ana sorgu ve her bir kay\u0131t i\u00e7in ayr\u0131 bir sorgu yap\u0131lmas\u0131 durumudur. Eager loading, projection veya compiled query kullan\u0131larak \u00e7\u00f6z\u00fclebilir.</p> </li> <li> <p>Entity Framework'te change tracking nedir ve nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Change tracking, entity'lerdeki de\u011fi\u015fikliklerin takip edilmesi s\u00fcrecidir. AsNoTracking() kullanarak veya selective tracking ile optimize edilebilir.</p> </li> <li> <p>Entity Framework'te bulk operasyonlar nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Bulk operasyonlar, toplu veri i\u015flemleri i\u00e7in kullan\u0131l\u0131r. BulkInsert, BulkUpdate, BulkDelete gibi metodlar veya batch processing ile yap\u0131labilir.</p> </li> <li> <p>Entity Framework'te caching stratejileri nelerdir?</p> </li> <li> <p>Cevap: Memory cache, distributed cache, query result caching gibi stratejiler kullan\u0131labilir.</p> </li> <li> <p>Entity Framework'te index y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: OnModelCreating metodunda HasIndex kullan\u0131larak veya migration'lar ile yap\u0131labilir.</li> </ol>"},{"location":"mid-level/entity-framework/performance-optimization/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Query optimizasyonu i\u00e7in hangi stratejileri kullan\u0131rs\u0131n\u0131z?</li> <li> <p>Cevap: <pre><code>// Eager loading\nvar blogs = await _context.Blogs\n    .Include(b =&gt; b.Posts)\n    .ToListAsync();\n\n// Projection\nvar blogTitles = await _context.Blogs\n    .Select(b =&gt; new { b.Id, b.Title })\n    .ToListAsync();\n\n// Compiled query\nprivate static readonly Func&lt;ApplicationDbContext, int, Task&lt;Blog&gt;&gt; GetBlogById =\n    EF.CompileAsyncQuery((ApplicationDbContext context, int id) =&gt;\n        context.Blogs.FirstOrDefault(b =&gt; b.Id == id));\n</code></pre></p> </li> <li> <p>Change tracking optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>// No tracking\nvar blogs = await _context.Blogs.AsNoTracking().ToListAsync();\n\n// Selective tracking\nvar blog = await _context.Blogs\n    .AsNoTracking()\n    .FirstOrDefaultAsync(b =&gt; b.Id == id);\n_context.Entry(blog).State = EntityState.Modified;\n</code></pre></p> </li> <li> <p>Bulk operasyonlar nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>// Bulk insert\nawait _context.BulkInsertAsync(entities);\n\n// Batch processing\nvar batchSize = 100;\nfor (var i = 0; i &lt; entities.Count; i += batchSize)\n{\n    var batch = entities.Skip(i).Take(batchSize);\n    await _context.BulkInsertAsync(batch);\n}\n</code></pre></p> </li> <li> <p>Caching nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>public class CachedRepository&lt;T&gt; where T : class\n{\n    private readonly IMemoryCache _cache;\n    private readonly ApplicationDbContext _context;\n\n    public async Task&lt;T&gt; GetByIdAsync(int id)\n    {\n        var cacheKey = $\"{typeof(T).Name}-{id}\";\n        return await _cache.GetOrCreateAsync(cacheKey, async entry =&gt;\n        {\n            entry.SetAbsoluteExpiration(TimeSpan.FromMinutes(5));\n            return await _context.Set&lt;T&gt;().FindAsync(id);\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>Index y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;()\n        .HasIndex(b =&gt; b.Title)\n        .IsUnique();\n\n    modelBuilder.Entity&lt;Post&gt;()\n        .HasIndex(p =&gt; new { p.BlogId, p.PublishedDate })\n        .IncludeProperties(p =&gt; new { p.Title, p.Content });\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/performance-optimization/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te query plan cache nas\u0131l y\u00f6netilir?</li> <li> <p>Cevap:</p> <ul> <li>Query plan cache stratejileri</li> <li>Plan cache invalidation</li> <li>Plan cache monitoring</li> <li>Plan cache optimization</li> <li>Plan cache troubleshooting</li> </ul> </li> <li> <p>Entity Framework'te memory leak nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Change tracking y\u00f6netimi</li> <li>Connection pooling</li> <li>Resource cleanup</li> <li>Memory profiling</li> <li>Garbage collection</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde performans nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Caching stratejileri</li> <li>Query routing</li> <li>Load balancing</li> <li>Data partitioning</li> <li>Replication</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda performans nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Optimistic concurrency</li> <li>Pessimistic concurrency</li> <li>Retry mekanizmalar\u0131</li> <li>Queue y\u00f6netimi</li> <li>Batch processing</li> </ul> </li> <li> <p>Entity Framework'te monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Query logging</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/raw-sql/","title":"Entity Framework - Raw SQL","text":""},{"location":"mid-level/entity-framework/raw-sql/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Raw SQL (Ham SQL), LINQ sorgular\u0131 yerine do\u011frudan SQL sorgular\u0131 yazmay\u0131 ve \u00e7al\u0131\u015ft\u0131rmay\u0131 sa\u011flayan bir \u00f6zelliktir. Mid-level geli\u015ftiriciler i\u00e7in bu \u00f6zelli\u011fin anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/entity-framework/raw-sql/#raw-sqlin-onemi","title":"Raw SQL'in \u00d6nemi","text":"<ol> <li>Performans</li> <li>Daha h\u0131zl\u0131 sorgu \u00e7al\u0131\u015ft\u0131rma</li> <li>Daha az kaynak kullan\u0131m\u0131</li> <li>Daha iyi sorgu optimizasyonu</li> <li> <p>Karma\u015f\u0131k sorgular i\u00e7in uygunluk</p> </li> <li> <p>Esneklik</p> </li> <li>\u00d6zel SQL \u00f6zellikleri kullan\u0131m\u0131</li> <li>Stored procedure'ler</li> <li>View'lar</li> <li> <p>Database-specific \u00f6zellikler</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod</li> <li>Daha kolay debug</li> <li>Daha iyi test edilebilirlik</li> <li>Daha kolay bak\u0131m</li> </ol>"},{"location":"mid-level/entity-framework/raw-sql/#raw-sql-teknikleri","title":"Raw SQL Teknikleri","text":"<ol> <li> <p>FromSqlRaw <pre><code>// Temel sorgu\nvar blogs = await _context.Blogs\n    .FromSqlRaw(\"SELECT * FROM Blogs WHERE Rating &gt; {0}\", 3)\n    .ToListAsync();\n\n// Parametreli sorgu\nvar blogs = await _context.Blogs\n    .FromSqlRaw(\"SELECT * FROM Blogs WHERE Rating &gt; {0} AND Category = {1}\", 3, \"Technology\")\n    .ToListAsync();\n\n// Stored procedure\nvar blogs = await _context.Blogs\n    .FromSqlRaw(\"EXEC GetTopRatedBlogs @MinRating = {0}\", 3)\n    .ToListAsync();\n\n// View kullan\u0131m\u0131\nvar blogStats = await _context.BlogStats\n    .FromSqlRaw(\"SELECT * FROM vw_BlogStatistics\")\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>FromSqlInterpolated <pre><code>// String interpolation ile\nvar minRating = 3;\nvar category = \"Technology\";\nvar blogs = await _context.Blogs\n    .FromSqlInterpolated($\"SELECT * FROM Blogs WHERE Rating &gt; {minRating} AND Category = {category}\")\n    .ToListAsync();\n\n// Parametreli stored procedure\nvar blogs = await _context.Blogs\n    .FromSqlInterpolated($\"EXEC GetTopRatedBlogs @MinRating = {minRating}\")\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>ExecuteSqlRaw <pre><code>// Temel sorgu\nawait _context.Database.ExecuteSqlRawAsync(\n    \"UPDATE Blogs SET Rating = Rating + 1 WHERE Category = {0}\", \"Technology\");\n\n// Parametreli sorgu\nawait _context.Database.ExecuteSqlRawAsync(\n    \"UPDATE Blogs SET Rating = Rating + 1 WHERE Category = {0} AND Rating &lt; {1}\", \n    \"Technology\", 5);\n\n// Stored procedure\nawait _context.Database.ExecuteSqlRawAsync(\n    \"EXEC UpdateBlogRatings @Category = {0}, @Increment = {1}\", \n    \"Technology\", 1);\n</code></pre></p> </li> <li> <p>ExecuteSqlInterpolated <pre><code>// String interpolation ile\nvar category = \"Technology\";\nvar increment = 1;\nawait _context.Database.ExecuteSqlInterpolatedAsync(\n    $\"UPDATE Blogs SET Rating = Rating + {increment} WHERE Category = {category}\");\n\n// Parametreli stored procedure\nawait _context.Database.ExecuteSqlInterpolatedAsync(\n    $\"EXEC UpdateBlogRatings @Category = {category}, @Increment = {increment}\");\n</code></pre></p> </li> <li> <p>Raw SQL ile LINQ <pre><code>// Raw SQL + LINQ\nvar blogs = await _context.Blogs\n    .FromSqlRaw(\"SELECT * FROM Blogs WHERE Rating &gt; {0}\", 3)\n    .Where(b =&gt; b.Category == \"Technology\")\n    .OrderByDescending(b =&gt; b.CreatedDate)\n    .ToListAsync();\n\n// Raw SQL + Include\nvar blogs = await _context.Blogs\n    .FromSqlRaw(\"SELECT * FROM Blogs WHERE Rating &gt; {0}\", 3)\n    .Include(b =&gt; b.Posts)\n    .ToListAsync();\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/raw-sql/#best-practices","title":"Best Practices","text":"<ol> <li>Raw SQL Tasar\u0131m\u0131</li> <li>SQL injection \u00f6nleme</li> <li>Parametre kullan\u0131m\u0131</li> <li>Query optimizasyonu</li> <li> <p>Error handling</p> </li> <li> <p>Performans</p> </li> <li>Query optimizasyonu</li> <li>Index kullan\u0131m\u0131</li> <li>Batch processing</li> <li> <p>Resource y\u00f6netimi</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>SQL injection \u00f6nleme</li> <li>Parametre kullan\u0131m\u0131</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Kod organizasyonu</li> <li>Documentation</li> <li>Testing</li> <li>Monitoring</li> </ol>"},{"location":"mid-level/entity-framework/raw-sql/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/raw-sql/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Raw SQL nedir?</li> <li> <p>Cevap: Raw SQL, LINQ sorgular\u0131 yerine do\u011frudan SQL sorgular\u0131 yazmay\u0131 ve \u00e7al\u0131\u015ft\u0131rmay\u0131 sa\u011flayan bir \u00f6zelliktir.</p> </li> <li> <p>Entity Framework'te FromSqlRaw nedir?</p> </li> <li> <p>Cevap: FromSqlRaw, entity'leri d\u00f6nd\u00fcren SQL sorgular\u0131n\u0131 \u00e7al\u0131\u015ft\u0131rmak i\u00e7in kullan\u0131lan bir metottur.</p> </li> <li> <p>Entity Framework'te ExecuteSqlRaw nedir?</p> </li> <li> <p>Cevap: ExecuteSqlRaw, sonu\u00e7 d\u00f6nd\u00fcrmeyen SQL sorgular\u0131n\u0131 \u00e7al\u0131\u015ft\u0131rmak i\u00e7in kullan\u0131lan bir metottur.</p> </li> <li> <p>Entity Framework'te SQL injection nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Parametre kullan\u0131m\u0131 ve FromSqlInterpolated/ExecuteSqlInterpolated kullan\u0131larak \u00f6nlenir.</p> </li> <li> <p>Entity Framework'te Raw SQL ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Karma\u015f\u0131k sorgular, stored procedure'ler, view'lar veya performans gerektiren durumlarda kullan\u0131l\u0131r.</li> </ol>"},{"location":"mid-level/entity-framework/raw-sql/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>FromSqlRaw nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>var blogs = await _context.Blogs\n    .FromSqlRaw(\"SELECT * FROM Blogs WHERE Rating &gt; {0}\", 3)\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>FromSqlInterpolated nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>var minRating = 3;\nvar blogs = await _context.Blogs\n    .FromSqlInterpolated($\"SELECT * FROM Blogs WHERE Rating &gt; {minRating}\")\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>ExecuteSqlRaw nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>await _context.Database.ExecuteSqlRawAsync(\n    \"UPDATE Blogs SET Rating = Rating + 1 WHERE Category = {0}\", \"Technology\");\n</code></pre></p> </li> <li> <p>Raw SQL ile LINQ nas\u0131l birle\u015ftirilir?</p> </li> <li> <p>Cevap: <pre><code>var blogs = await _context.Blogs\n    .FromSqlRaw(\"SELECT * FROM Blogs WHERE Rating &gt; {0}\", 3)\n    .Where(b =&gt; b.Category == \"Technology\")\n    .OrderByDescending(b =&gt; b.CreatedDate)\n    .ToListAsync();\n</code></pre></p> </li> <li> <p>Stored procedure nas\u0131l \u00e7a\u011fr\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>var blogs = await _context.Blogs\n    .FromSqlRaw(\"EXEC GetTopRatedBlogs @MinRating = {0}\", 3)\n    .ToListAsync();\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/raw-sql/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Raw SQL performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Query optimizasyonu</li> <li>Index kullan\u0131m\u0131</li> <li>Batch processing</li> <li>Resource y\u00f6netimi</li> <li>Caching stratejileri</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Raw SQL nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Distributed transactions</li> <li>Data partitioning</li> <li>Replication</li> <li>Consistency</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Raw SQL nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Optimistic concurrency</li> <li>Pessimistic concurrency</li> <li>Retry mekanizmalar\u0131</li> <li>Queue y\u00f6netimi</li> <li>Batch processing</li> </ul> </li> <li> <p>Entity Framework'te Raw SQL monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Query logging</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> </ul> </li> <li> <p>Entity Framework'te custom Raw SQL stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom SQL builder</li> <li>Custom parameter handling</li> <li>Custom error handling</li> <li>Custom monitoring</li> <li>Custom optimization </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/shadow-properties/","title":"Entity Framework - Shadow Properties","text":""},{"location":"mid-level/entity-framework/shadow-properties/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Shadow Properties (G\u00f6lge \u00d6zellikler), entity s\u0131n\u0131f\u0131nda tan\u0131mlanmayan ancak veritaban\u0131nda bulunan \u00f6zelliklerdir. Mid-level geli\u015ftiriciler i\u00e7in bu kavram\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 \u00f6nemlidir.</p>"},{"location":"mid-level/entity-framework/shadow-properties/#shadow-propertiesn-onemi","title":"Shadow Properties'\u0131n \u00d6nemi","text":"<ol> <li>Veri Y\u00f6netimi</li> <li>Veritaban\u0131 kolonlar\u0131n\u0131 entity'den gizleme</li> <li>Daha iyi veri organizasyonu</li> <li>Daha iyi veri b\u00fct\u00fcnl\u00fc\u011f\u00fc</li> <li> <p>Daha iyi veri eri\u015fimi</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Hassas verileri gizleme</li> <li>Veri eri\u015fimini kontrol etme</li> <li>Audit logging</li> <li> <p>G\u00fcvenlik kontrolleri</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod tekrar\u0131</li> <li>Daha kolay test edilebilirlik</li> <li>Daha iyi mod\u00fclerlik</li> <li>Daha kolay geni\u015fletilebilirlik</li> </ol>"},{"location":"mid-level/entity-framework/shadow-properties/#shadow-properties-ozellikleri","title":"Shadow Properties \u00d6zellikleri","text":"<ol> <li> <p>Temel Shadow Property <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;()\n        .Property&lt;DateTime&gt;(\"CreatedDate\")\n        .HasDefaultValueSql(\"GETDATE()\");\n\n    modelBuilder.Entity&lt;Blog&gt;()\n        .Property&lt;DateTime&gt;(\"LastModifiedDate\")\n        .HasDefaultValueSql(\"GETDATE()\");\n}\n</code></pre></p> </li> <li> <p>Shadow Property Kullan\u0131m\u0131 <pre><code>public class BlogService\n{\n    private readonly DbContext _context;\n\n    public BlogService(DbContext context)\n    {\n        _context = context;\n    }\n\n    public void UpdateBlog(int id, string title)\n    {\n        var blog = _context.Blogs.Find(id);\n        if (blog != null)\n        {\n            blog.Title = title;\n            _context.Entry(blog).Property(\"LastModifiedDate\").CurrentValue = DateTime.UtcNow;\n            _context.SaveChanges();\n        }\n    }\n\n    public DateTime GetBlogCreatedDate(int id)\n    {\n        var blog = _context.Blogs.Find(id);\n        return _context.Entry(blog).Property(\"CreatedDate\").CurrentValue;\n    }\n}\n</code></pre></p> </li> <li> <p>Shadow Property Validasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;()\n        .Property&lt;DateTime&gt;(\"CreatedDate\")\n        .IsRequired()\n        .HasDefaultValueSql(\"GETDATE()\");\n\n    modelBuilder.Entity&lt;Blog&gt;()\n        .Property&lt;DateTime&gt;(\"LastModifiedDate\")\n        .IsRequired()\n        .HasDefaultValueSql(\"GETDATE()\");\n\n    modelBuilder.Entity&lt;Blog&gt;()\n        .Property&lt;string&gt;(\"CreatedBy\")\n        .IsRequired()\n        .HasMaxLength(50);\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/shadow-properties/#shadow-properties-kullanm","title":"Shadow Properties Kullan\u0131m\u0131","text":"<ol> <li> <p>Entity \u0130\u00e7inde Kullan\u0131m <pre><code>public class Blog\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n}\n\npublic class BlogService\n{\n    private readonly DbContext _context;\n\n    public BlogService(DbContext context)\n    {\n        _context = context;\n    }\n\n    public void CreateBlog(string title, string content, string createdBy)\n    {\n        var blog = new Blog\n        {\n            Title = title,\n            Content = content\n        };\n\n        _context.Add(blog);\n        _context.Entry(blog).Property(\"CreatedBy\").CurrentValue = createdBy;\n        _context.SaveChanges();\n    }\n\n    public void UpdateBlog(int id, string title)\n    {\n        var blog = _context.Blogs.Find(id);\n        if (blog != null)\n        {\n            blog.Title = title;\n            _context.Entry(blog).Property(\"LastModifiedDate\").CurrentValue = DateTime.UtcNow;\n            _context.SaveChanges();\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>DbContext Konfig\u00fcrasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;(entity =&gt;\n    {\n        entity.Property&lt;DateTime&gt;(\"CreatedDate\")\n            .IsRequired()\n            .HasDefaultValueSql(\"GETDATE()\");\n\n        entity.Property&lt;DateTime&gt;(\"LastModifiedDate\")\n            .IsRequired()\n            .HasDefaultValueSql(\"GETDATE()\");\n\n        entity.Property&lt;string&gt;(\"CreatedBy\")\n            .IsRequired()\n            .HasMaxLength(50);\n\n        entity.Property&lt;string&gt;(\"LastModifiedBy\")\n            .IsRequired()\n            .HasMaxLength(50);\n    });\n}\n</code></pre></p> </li> <li> <p>Shadow Property D\u00f6n\u00fc\u015f\u00fcmleri <pre><code>public static class BlogExtensions\n{\n    public static BlogDto ToDto(this Blog blog, DbContext context)\n    {\n        return new BlogDto\n        {\n            Id = blog.Id,\n            Title = blog.Title,\n            Content = blog.Content,\n            CreatedDate = context.Entry(blog).Property&lt;DateTime&gt;(\"CreatedDate\").CurrentValue,\n            CreatedBy = context.Entry(blog).Property&lt;string&gt;(\"CreatedBy\").CurrentValue,\n            LastModifiedDate = context.Entry(blog).Property&lt;DateTime&gt;(\"LastModifiedDate\").CurrentValue,\n            LastModifiedBy = context.Entry(blog).Property&lt;string&gt;(\"LastModifiedBy\").CurrentValue\n        };\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/shadow-properties/#best-practices","title":"Best Practices","text":"<ol> <li>Shadow Property Tasar\u0131m\u0131</li> <li>Single Responsibility</li> <li>Immutability</li> <li>Validation</li> <li> <p>Business logic</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation</li> <li>Data integrity</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Performans</p> </li> <li>Memory usage</li> <li>Query optimization</li> <li>Lazy loading</li> <li> <p>Caching</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Code organization</li> <li>Documentation</li> <li>Testing</li> <li>Versioning</li> </ol>"},{"location":"mid-level/entity-framework/shadow-properties/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/shadow-properties/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Shadow Property nedir?</li> <li> <p>Cevap: Shadow Property, entity s\u0131n\u0131f\u0131nda tan\u0131mlanmayan ancak veritaban\u0131nda bulunan \u00f6zelliklerdir.</p> </li> <li> <p>Entity Framework'te Shadow Property ve Normal Property aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Normal Property'ler entity s\u0131n\u0131f\u0131nda tan\u0131mlan\u0131r ve do\u011frudan eri\u015filebilir, Shadow Property'ler entity s\u0131n\u0131f\u0131nda tan\u0131mlanmaz ve DbContext \u00fczerinden eri\u015filir.</p> </li> <li> <p>Entity Framework'te Shadow Property nas\u0131l konfig\u00fcre edilir?</p> </li> <li> <p>Cevap: DbContext.OnModelCreating metodunda Property metodu kullan\u0131larak konfig\u00fcre edilir. <li> <p>Entity Framework'te Shadow Property ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Veritaban\u0131 kolonlar\u0131n\u0131 entity'den gizlemek, hassas verileri gizlemek veya audit logging i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Shadow Property performans\u0131 nas\u0131l etkiler?</p> </li> <li>Cevap: Memory kullan\u0131m\u0131n\u0131 azaltabilir ancak eri\u015fim i\u00e7in ek kod gerektirir.</li>"},{"location":"mid-level/entity-framework/shadow-properties/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Temel Shadow Property nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;()\n        .Property&lt;DateTime&gt;(\"CreatedDate\")\n        .HasDefaultValueSql(\"GETDATE()\");\n}\n</code></pre></p> </li> <li> <p>Shadow Property nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public void UpdateBlog(int id, string title)\n{\n    var blog = _context.Blogs.Find(id);\n    if (blog != null)\n    {\n        blog.Title = title;\n        _context.Entry(blog).Property(\"LastModifiedDate\").CurrentValue = DateTime.UtcNow;\n        _context.SaveChanges();\n    }\n}\n</code></pre></p> </li> <li> <p>Shadow Property validasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Blog&gt;()\n        .Property&lt;string&gt;(\"CreatedBy\")\n        .IsRequired()\n        .HasMaxLength(50);\n}\n</code></pre></p> </li> <li> <p>Shadow Property de\u011feri nas\u0131l okunur?</p> </li> <li> <p>Cevap: <pre><code>public DateTime GetBlogCreatedDate(int id)\n{\n    var blog = _context.Blogs.Find(id);\n    return _context.Entry(blog).Property(\"CreatedDate\").CurrentValue;\n}\n</code></pre></p> </li> <li> <p>Shadow Property de\u011feri nas\u0131l g\u00fcncellenir?</p> </li> <li>Cevap: <pre><code>public void UpdateBlog(int id, string title)\n{\n    var blog = _context.Blogs.Find(id);\n    if (blog != null)\n    {\n        blog.Title = title;\n        _context.Entry(blog).Property(\"LastModifiedDate\").CurrentValue = DateTime.UtcNow;\n        _context.SaveChanges();\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/shadow-properties/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Shadow Property performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Memory kullan\u0131m\u0131 optimizasyonu</li> <li>Query optimizasyonu</li> <li>Lazy loading</li> <li>Caching stratejileri</li> <li>Index kullan\u0131m\u0131</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Shadow Property nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Serialization</li> <li>Versioning</li> <li>Migration</li> <li>Consistency</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Shadow Property nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Immutability</li> <li>Thread safety</li> <li>Atomic operations</li> <li>Versioning</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te Shadow Property monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Memory profiling</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> </ul> </li> <li> <p>Entity Framework'te custom Shadow Property stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom property handling</li> <li>Custom validation</li> <li>Custom serialization</li> <li>Custom conversion</li> <li>Custom optimization </li> </ul> </li> </ol>"},{"location":"mid-level/entity-framework/value-objects/","title":"Entity Framework - Value Objects","text":""},{"location":"mid-level/entity-framework/value-objects/#giris","title":"Giri\u015f","text":"<p>Entity Framework'te Value Objects (De\u011fer Nesneleri), kimlikleri olmayan ve de\u011fi\u015fmez (immutable) olan nesnelerdir. Mid-level geli\u015ftiriciler i\u00e7in bu kavram\u0131n anla\u015f\u0131lmas\u0131 ve etkin kullan\u0131m\u0131 \u00f6nemlidir.</p>"},{"location":"mid-level/entity-framework/value-objects/#value-objectsn-onemi","title":"Value Objects'\u0131n \u00d6nemi","text":"<ol> <li>Domain Model</li> <li>Zengin domain model</li> <li>Daha iyi encapsulation</li> <li>Daha iyi validasyon</li> <li> <p>Daha iyi business logic</p> </li> <li> <p>Veri B\u00fct\u00fcnl\u00fc\u011f\u00fc</p> </li> <li>Immutability</li> <li>Validation</li> <li>Consistency</li> <li> <p>Integrity</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Daha az kod tekrar\u0131</li> <li>Daha kolay test edilebilirlik</li> <li>Daha iyi okunabilirlik</li> <li>Daha kolay bak\u0131m</li> </ol>"},{"location":"mid-level/entity-framework/value-objects/#value-objects-ozellikleri","title":"Value Objects \u00d6zellikleri","text":"<ol> <li> <p>Temel Value Object <pre><code>public class Address : ValueObject\n{\n    public string Street { get; }\n    public string City { get; }\n    public string State { get; }\n    public string ZipCode { get; }\n\n    public Address(string street, string city, string state, string zipCode)\n    {\n        Street = street;\n        City = city;\n        State = state;\n        ZipCode = zipCode;\n    }\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return Street;\n        yield return City;\n        yield return State;\n        yield return ZipCode;\n    }\n}\n</code></pre></p> </li> <li> <p>Money Value Object <pre><code>public class Money : ValueObject\n{\n    public decimal Amount { get; }\n    public string Currency { get; }\n\n    public Money(decimal amount, string currency)\n    {\n        if (amount &lt; 0)\n            throw new ArgumentException(\"Amount cannot be negative\");\n\n        if (string.IsNullOrEmpty(currency))\n            throw new ArgumentException(\"Currency cannot be empty\");\n\n        Amount = amount;\n        Currency = currency;\n    }\n\n    public Money Add(Money other)\n    {\n        if (Currency != other.Currency)\n            throw new InvalidOperationException(\"Cannot add money with different currencies\");\n\n        return new Money(Amount + other.Amount, Currency);\n    }\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return Amount;\n        yield return Currency;\n    }\n}\n</code></pre></p> </li> <li> <p>Complex Value Object <pre><code>public class FullName : ValueObject\n{\n    public string FirstName { get; }\n    public string LastName { get; }\n\n    public FullName(string firstName, string lastName)\n    {\n        if (string.IsNullOrEmpty(firstName))\n            throw new ArgumentException(\"First name cannot be empty\");\n\n        if (string.IsNullOrEmpty(lastName))\n            throw new ArgumentException(\"Last name cannot be empty\");\n\n        FirstName = firstName;\n        LastName = lastName;\n    }\n\n    public string GetFullName() =&gt; $\"{FirstName} {LastName}\";\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return FirstName;\n        yield return LastName;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/value-objects/#value-objects-kullanm","title":"Value Objects Kullan\u0131m\u0131","text":"<ol> <li> <p>Entity \u0130\u00e7inde Kullan\u0131m <pre><code>public class Customer : Entity\n{\n    public FullName Name { get; private set; }\n    public Address Address { get; private set; }\n    public Money Balance { get; private set; }\n\n    public Customer(FullName name, Address address, Money balance)\n    {\n        Name = name;\n        Address = address;\n        Balance = balance;\n    }\n\n    public void UpdateAddress(Address newAddress)\n    {\n        Address = newAddress;\n    }\n\n    public void AddMoney(Money amount)\n    {\n        Balance = Balance.Add(amount);\n    }\n}\n</code></pre></p> </li> <li> <p>DbContext Konfig\u00fcrasyonu <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Customer&gt;(entity =&gt;\n    {\n        entity.OwnsOne(c =&gt; c.Name, name =&gt;\n        {\n            name.Property(n =&gt; n.FirstName).HasColumnName(\"FirstName\");\n            name.Property(n =&gt; n.LastName).HasColumnName(\"LastName\");\n        });\n\n        entity.OwnsOne(c =&gt; c.Address, address =&gt;\n        {\n            address.Property(a =&gt; a.Street).HasColumnName(\"Street\");\n            address.Property(a =&gt; a.City).HasColumnName(\"City\");\n            address.Property(a =&gt; a.State).HasColumnName(\"State\");\n            address.Property(a =&gt; a.ZipCode).HasColumnName(\"ZipCode\");\n        });\n\n        entity.OwnsOne(c =&gt; c.Balance, money =&gt;\n        {\n            money.Property(m =&gt; m.Amount).HasColumnName(\"BalanceAmount\");\n            money.Property(m =&gt; m.Currency).HasColumnName(\"BalanceCurrency\");\n        });\n    });\n}\n</code></pre></p> </li> <li> <p>Value Object D\u00f6n\u00fc\u015f\u00fcmleri <pre><code>// Value Object to String\npublic static class AddressExtensions\n{\n    public static string ToString(this Address address)\n    {\n        return $\"{address.Street}, {address.City}, {address.State} {address.ZipCode}\";\n    }\n}\n\n// String to Value Object\npublic static class AddressParser\n{\n    public static Address Parse(string addressString)\n    {\n        var parts = addressString.Split(',');\n        if (parts.Length != 3)\n            throw new ArgumentException(\"Invalid address format\");\n\n        var cityStateZip = parts[2].Trim().Split(' ');\n        if (cityStateZip.Length != 3)\n            throw new ArgumentException(\"Invalid address format\");\n\n        return new Address(\n            parts[0].Trim(),\n            parts[1].Trim(),\n            cityStateZip[0],\n            cityStateZip[2]);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/entity-framework/value-objects/#best-practices","title":"Best Practices","text":"<ol> <li>Value Object Tasar\u0131m\u0131</li> <li>Immutability</li> <li>Validation</li> <li>Equality</li> <li> <p>Business logic</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Input validation</li> <li>Data integrity</li> <li>Access control</li> <li> <p>Audit logging</p> </li> <li> <p>Performans</p> </li> <li>Memory usage</li> <li>Equality comparison</li> <li>Serialization</li> <li> <p>Caching</p> </li> <li> <p>Bak\u0131m</p> </li> <li>Code organization</li> <li>Documentation</li> <li>Testing</li> <li>Versioning</li> </ol>"},{"location":"mid-level/entity-framework/value-objects/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/entity-framework/value-objects/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Entity Framework'te Value Object nedir?</li> <li> <p>Cevap: Value Object, kimli\u011fi olmayan ve de\u011fi\u015fmez (immutable) olan bir nesnedir.</p> </li> <li> <p>Entity Framework'te Value Object ve Entity aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Entity'lerin kimlikleri vard\u0131r ve de\u011fi\u015febilir, Value Object'lerin kimlikleri yoktur ve de\u011fi\u015fmezdir.</p> </li> <li> <p>Entity Framework'te Value Object nas\u0131l konfig\u00fcre edilir?</p> </li> <li> <p>Cevap: DbContext.OnModelCreating metodunda OwnsOne metodu kullan\u0131larak konfig\u00fcre edilir.</p> </li> <li> <p>Entity Framework'te Value Object ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: De\u011ferlerin bir b\u00fct\u00fcn olarak ele al\u0131nmas\u0131 gerekti\u011finde ve de\u011fi\u015fmezlik gerekti\u011finde kullan\u0131l\u0131r.</p> </li> <li> <p>Entity Framework'te Value Object performans\u0131 nas\u0131l etkiler?</p> </li> <li>Cevap: Memory kullan\u0131m\u0131n\u0131 art\u0131rabilir ancak domain modeli zenginle\u015ftirir ve kod kalitesini art\u0131r\u0131r.</li> </ol>"},{"location":"mid-level/entity-framework/value-objects/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Temel Value Object nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>public class Address : ValueObject\n{\n    public string Street { get; }\n    public string City { get; }\n    public string State { get; }\n    public string ZipCode { get; }\n\n    public Address(string street, string city, string state, string zipCode)\n    {\n        Street = street;\n        City = city;\n        State = state;\n        ZipCode = zipCode;\n    }\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return Street;\n        yield return City;\n        yield return State;\n        yield return ZipCode;\n    }\n}\n</code></pre></p> </li> <li> <p>Money Value Object nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public class Money : ValueObject\n{\n    public decimal Amount { get; }\n    public string Currency { get; }\n\n    public Money(decimal amount, string currency)\n    {\n        if (amount &lt; 0)\n            throw new ArgumentException(\"Amount cannot be negative\");\n\n        if (string.IsNullOrEmpty(currency))\n            throw new ArgumentException(\"Currency cannot be empty\");\n\n        Amount = amount;\n        Currency = currency;\n    }\n\n    public Money Add(Money other)\n    {\n        if (Currency != other.Currency)\n            throw new InvalidOperationException(\"Cannot add money with different currencies\");\n\n        return new Money(Amount + other.Amount, Currency);\n    }\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return Amount;\n        yield return Currency;\n    }\n}\n</code></pre></p> </li> <li> <p>Value Object DbContext'te nas\u0131l konfig\u00fcre edilir?</p> </li> <li> <p>Cevap: <pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Customer&gt;(entity =&gt;\n    {\n        entity.OwnsOne(c =&gt; c.Address, address =&gt;\n        {\n            address.Property(a =&gt; a.Street).HasColumnName(\"Street\");\n            address.Property(a =&gt; a.City).HasColumnName(\"City\");\n            address.Property(a =&gt; a.State).HasColumnName(\"State\");\n            address.Property(a =&gt; a.ZipCode).HasColumnName(\"ZipCode\");\n        });\n    });\n}\n</code></pre></p> </li> <li> <p>Value Object equality nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: <pre><code>protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n{\n    yield return Street;\n    yield return City;\n    yield return State;\n    yield return ZipCode;\n}\n</code></pre></p> </li> <li> <p>Value Object validation nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public Address(string street, string city, string state, string zipCode)\n{\n    if (string.IsNullOrEmpty(street))\n        throw new ArgumentException(\"Street cannot be empty\");\n\n    if (string.IsNullOrEmpty(city))\n        throw new ArgumentException(\"City cannot be empty\");\n\n    if (string.IsNullOrEmpty(state))\n        throw new ArgumentException(\"State cannot be empty\");\n\n    if (string.IsNullOrEmpty(zipCode))\n        throw new ArgumentException(\"ZipCode cannot be empty\");\n\n    Street = street;\n    City = city;\n    State = state;\n    ZipCode = zipCode;\n}\n</code></pre></li> </ol>"},{"location":"mid-level/entity-framework/value-objects/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Entity Framework'te Value Object performans\u0131 nas\u0131l optimize edilir?</li> <li> <p>Cevap:</p> <ul> <li>Memory kullan\u0131m\u0131 optimizasyonu</li> <li>Equality comparison optimizasyonu</li> <li>Serialization optimizasyonu</li> <li>Caching stratejileri</li> <li>Lazy loading</li> </ul> </li> <li> <p>Entity Framework'te distributed sistemlerde Value Object nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Serialization</li> <li>Versioning</li> <li>Migration</li> <li>Consistency</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te high concurrency senaryolar\u0131nda Value Object nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Immutability</li> <li>Thread safety</li> <li>Atomic operations</li> <li>Versioning</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Entity Framework'te Value Object monitoring ve profiling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Memory profiling</li> <li>Performance metrics</li> <li>Resource monitoring</li> <li>Profiling tools</li> <li>Health checks</li> </ul> </li> <li> <p>Entity Framework'te custom Value Object stratejileri nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Custom equality</li> <li>Custom validation</li> <li>Custom serialization</li> <li>Custom conversion</li> <li>Custom optimization </li> </ul> </li> </ol>"},{"location":"mid-level/interview-examples/interview-1/","title":"M\u00fclakat \u00d6rne\u011fi 1","text":""},{"location":"mid-level/interview-examples/interview-1/#1-asyncawait-kullanrken-deadlocku-nasl-onlersiniz","title":"1. Async/Await kullan\u0131rken deadlock'u nas\u0131l \u00f6nlersiniz?","text":"<p>Cevap: <code>.ConfigureAwait(false)</code> kullanarak, <code>Task.Result</code> veya <code>Task.Wait()</code> yerine <code>await</code> kullanarak ve async metotlar\u0131 do\u011fru \u015fekilde zincirleyerek. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#2-expression-trees-kullanarak-dinamik-sorgular-nasl-olusturulur","title":"2. Expression Trees kullanarak dinamik sorgular nas\u0131l olu\u015fturulur?","text":"<p>Cevap: <code>Expression&lt;T&gt;</code> kullanarak, LINQ sorgular\u0131n\u0131 runtime'da olu\u015fturarak ve <code>IQueryable</code> ile \u00e7al\u0131\u015farak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#3-repository-pattern-ve-unit-of-work-patterni-birlikte-nasl-kullanrsnz","title":"3. Repository Pattern ve Unit of Work Pattern'i birlikte nas\u0131l kullan\u0131rs\u0131n\u0131z?","text":"<p>Cevap: Repository'ler veri eri\u015fimini soyutlarken, Unit of Work transaction y\u00f6netimini ve de\u011fi\u015fikliklerin toplu kaydedilmesini sa\u011flar. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#4-solid-prensiplerini-bir-projede-nasl-uygularsnz","title":"4. SOLID prensiplerini bir projede nas\u0131l uygulars\u0131n\u0131z?","text":"<p>Cevap: Her prensibi (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) projenin farkl\u0131 katmanlar\u0131nda uygulayarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#5-clean-architectureda-domain-layern-sorumluluklar-nelerdir","title":"5. Clean Architecture'da Domain Layer'\u0131n sorumluluklar\u0131 nelerdir?","text":"<p>Cevap: \u0130\u015f mant\u0131\u011f\u0131n\u0131, entity'leri, value object'leri ve domain event'leri i\u00e7erir, d\u0131\u015f ba\u011f\u0131ml\u0131l\u0131klardan ba\u011f\u0131ms\u0131zd\u0131r. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#6-microserviceler-aras-iletisimde-hangi-patternleri-kullanrsnz","title":"6. Microservice'ler aras\u0131 ileti\u015fimde hangi pattern'leri kullan\u0131rs\u0131n\u0131z?","text":"<p>Cevap: REST API, gRPC, Message Queue (RabbitMQ, Kafka) ve Event-Driven Architecture. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#7-api-gatewayin-avantajlar-ve-dezavantajlar-nelerdir","title":"7. API Gateway'in avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?","text":"<p>Cevap: Merkezi y\u00f6netim, rate limiting, authentication gibi avantajlar\u0131 varken, single point of failure olma riski gibi dezavantajlar\u0131 vard\u0131r. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#8-circuit-breaker-patterni-nasl-implemente-edilir","title":"8. Circuit Breaker pattern'i nas\u0131l implemente edilir?","text":"<p>Cevap: Polly gibi k\u00fct\u00fcphaneler kullan\u0131larak, hata durumlar\u0131nda servisi izole ederek ve fallback mekanizmalar\u0131 sa\u011flayarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#9-event-sourcing-patterni-hangi-senaryolarda-kullanlr","title":"9. Event Sourcing pattern'i hangi senaryolarda kullan\u0131l\u0131r?","text":"<p>Cevap: Audit trail gerektiren, state de\u011fi\u015fikliklerinin izlenmesi gereken ve CQRS ile birlikte kullan\u0131lan sistemlerde. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#10-distributed-caching-stratejileri-nelerdir","title":"10. Distributed caching stratejileri nelerdir?","text":"<p>Cevap: Redis gibi distributed cache sistemleri, cache invalidation stratejileri ve cache-aside pattern. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#11-entity-framework-coreda-performans-optimizasyonu-nasl-yaplr","title":"11. Entity Framework Core'da performans optimizasyonu nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Eager/Lazy loading stratejileri, AsNoTracking kullan\u0131m\u0131, raw SQL sorgular\u0131 ve index optimizasyonlar\u0131. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#12-memory-leakleri-nasl-tespit-ve-onlersiniz","title":"12. Memory leak'leri nas\u0131l tespit ve \u00f6nlersiniz?","text":"<p>Cevap: Profiling ara\u00e7lar\u0131 kullanarak, IDisposable pattern'i uygulayarak ve weak reference'lar\u0131 kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#13-async-programmingde-best-practiceler-nelerdir","title":"13. Async programming'de best practice'ler nelerdir?","text":"<p>Cevap: Async void kullanmaktan ka\u00e7\u0131nma, cancellation token kullanma ve proper exception handling. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#14-application-profiling-nasl-yaplr","title":"14. Application profiling nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Visual Studio Profiler, dotTrace, dotMemory gibi ara\u00e7lar kullan\u0131larak ve performance counter'lar izlenerek. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#15-distributed-locking-mekanizmalar-nelerdir","title":"15. Distributed locking mekanizmalar\u0131 nelerdir?","text":"<p>Cevap: Redis RedLock, ZooKeeper ve database-based locking gibi \u00e7\u00f6z\u00fcmler. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#16-reflection-kullanmnda-dikkat-edilmesi-gerekenler-nelerdir","title":"16. Reflection kullan\u0131m\u0131nda dikkat edilmesi gerekenler nelerdir?","text":"<p>Cevap: Performance overhead, type safety ve security riskleri. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#17-custom-attributes-nasl-olusturulur-ve-kullanlr","title":"17. Custom attributes nas\u0131l olu\u015fturulur ve kullan\u0131l\u0131r?","text":"<p>Cevap: Attribute s\u0131n\u0131flar\u0131 tan\u0131mlanarak ve reflection ile bu attribute'lar okunarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#18-linqda-advanced-sorgular-nasl-yazlr","title":"18. LINQ'da advanced sorgular nas\u0131l yaz\u0131l\u0131r?","text":"<p>Cevap: GroupJoin, GroupBy, SelectMany gibi operat\u00f6rler ve custom extension method'lar kullan\u0131larak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#19-creational-design-patternler-hangi-durumlarda-kullanlr","title":"19. Creational design pattern'ler hangi durumlarda kullan\u0131l\u0131r?","text":"<p>Cevap: Factory Method, Abstract Factory, Builder, Singleton ve Prototype pattern'leri uygun senaryolarda. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"mid-level/interview-examples/interview-1/#20-behavioral-design-patternler-hangi-durumlarda-kullanlr","title":"20. Behavioral design pattern'ler hangi durumlarda kullan\u0131l\u0131r?","text":"<p>Cevap: Observer, Strategy, Command, State ve Chain of Responsibility pattern'leri uygun senaryolarda. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n </p>"},{"location":"mid-level/logging-monitoring/","title":"Logging ve Monitoring","text":""},{"location":"mid-level/logging-monitoring/#giris","title":"Giri\u015f","text":"<p>Logging ve monitoring, modern .NET uygulamalar\u0131nda observability, debugging, performance tracking ve operational excellence i\u00e7in kritik \u00f6neme sahiptir. Mid-level geli\u015ftiriciler i\u00e7in comprehensive logging strategies, monitoring solutions ve observability tools'lar\u0131 anlamak, production-ready uygulamalar geli\u015ftirmek ve maintain etmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, Serilog/ELK Stack, Application Insights, OpenTelemetry, log aggregation ve performance monitoring konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/logging-monitoring/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/logging-monitoring/#1-serilogelk-stack","title":"1. Serilog/ELK Stack","text":"<p>Structured logging with Serilog, ELK Stack integration, ve centralized log management.</p> <p>\u00d6\u011frenilecekler: - Serilog configuration - Structured logging - ELK Stack setup - Log enrichment - Log correlation</p>"},{"location":"mid-level/logging-monitoring/#2-application-insights","title":"2. Application Insights","text":"<p>Azure Application Insights integration, application performance monitoring, ve telemetry collection.</p> <p>\u00d6\u011frenilecekler: - Application Insights setup - Custom telemetry - Performance monitoring - Dependency tracking - User analytics</p>"},{"location":"mid-level/logging-monitoring/#3-opentelemetry","title":"3. OpenTelemetry","text":"<p>Open-source observability framework, distributed tracing, ve metrics collection.</p> <p>\u00d6\u011frenilecekler: - OpenTelemetry setup - Distributed tracing - Metrics collection - Log correlation - Vendor agnostic approach</p>"},{"location":"mid-level/logging-monitoring/#4-log-aggregation","title":"4. Log Aggregation","text":"<p>Centralized log collection, log processing, ve log analysis.</p> <p>\u00d6\u011frenilecekler: - Log aggregation strategies - Log processing pipelines - Log storage optimization - Log search and analysis - Log retention policies</p>"},{"location":"mid-level/logging-monitoring/#5-performance-monitoring","title":"5. Performance Monitoring","text":"<p>Application performance monitoring, performance metrics, ve performance optimization.</p> <p>\u00d6\u011frenilecekler: - Performance metrics collection - Performance bottlenecks identification - Performance optimization strategies - Performance testing - Capacity planning</p>"},{"location":"mid-level/logging-monitoring/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/logging-monitoring/#1-operational-excellence","title":"1. Operational Excellence","text":"<ul> <li>Proactive issue detection</li> <li>Faster incident response</li> <li>Better debugging capabilities</li> <li>Improved system reliability</li> </ul>"},{"location":"mid-level/logging-monitoring/#2-performance-optimization","title":"2. Performance Optimization","text":"<ul> <li>Performance bottleneck identification</li> <li>Resource utilization monitoring</li> <li>Scalability planning</li> <li>User experience improvement</li> </ul>"},{"location":"mid-level/logging-monitoring/#3-business-intelligence","title":"3. Business Intelligence","text":"<ul> <li>User behavior analysis</li> <li>Business metrics tracking</li> <li>Decision making support</li> <li>ROI measurement</li> </ul>"},{"location":"mid-level/logging-monitoring/#4-compliance-security","title":"4. Compliance &amp; Security","text":"<ul> <li>Audit trail requirements</li> <li>Security monitoring</li> <li>Compliance reporting</li> <li>Incident investigation</li> </ul>"},{"location":"mid-level/logging-monitoring/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/logging-monitoring/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Logging nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Application behavior tracking, debugging, monitoring, compliance requirements.</p> </li> <li> <p>Structured logging nedir?</p> </li> <li> <p>Cevap: Machine-readable log format, JSON logging, log parsing, log analysis.</p> </li> <li> <p>ELK Stack nedir?</p> </li> <li> <p>Cevap: Elasticsearch, Logstash, Kibana, centralized logging, log analysis.</p> </li> <li> <p>Application Insights nedir?</p> </li> <li> <p>Cevap: Azure monitoring service, APM, telemetry collection, performance monitoring.</p> </li> <li> <p>OpenTelemetry nedir?</p> </li> <li>Cevap: Open-source observability, vendor agnostic, distributed tracing, metrics.</li> </ol>"},{"location":"mid-level/logging-monitoring/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Serilog nas\u0131l configure edilir?</li> <li> <p>Cevap: Sinks configuration, enrichers, filters, structured logging.</p> </li> <li> <p>Distributed tracing nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Correlation IDs, span creation, trace propagation, context injection.</p> </li> <li> <p>Log aggregation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Centralized collection, processing pipelines, storage optimization.</p> </li> <li> <p>Performance monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Metrics collection, bottleneck identification, optimization strategies.</p> </li> <li> <p>Custom telemetry nas\u0131l eklenir?</p> </li> <li>Cevap: Custom events, custom metrics, custom dimensions, telemetry API.</li> </ol>"},{"location":"mid-level/logging-monitoring/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/logging-monitoring/#1-logging-strategy","title":"1. Logging Strategy","text":"<ul> <li>Use structured logging</li> <li>Implement log levels appropriately</li> <li>Add correlation IDs</li> <li>Include context information</li> <li>Plan log retention</li> </ul>"},{"location":"mid-level/logging-monitoring/#2-monitoring-setup","title":"2. Monitoring Setup","text":"<ul> <li>Define key metrics</li> <li>Set up alerting</li> <li>Implement health checks</li> <li>Monitor dependencies</li> <li>Track business metrics</li> </ul>"},{"location":"mid-level/logging-monitoring/#3-performance-optimization","title":"3. Performance Optimization","text":"<ul> <li>Minimize logging overhead</li> <li>Use async logging</li> <li>Implement log buffering</li> <li>Optimize log storage</li> <li>Monitor logging performance</li> </ul>"},{"location":"mid-level/logging-monitoring/#4-security-compliance","title":"4. Security &amp; Compliance","text":"<ul> <li>Secure log transmission</li> <li>Implement access control</li> <li>Handle sensitive data</li> <li>Meet compliance requirements</li> <li>Audit log access</li> </ul>"},{"location":"mid-level/logging-monitoring/#5-operational-excellence","title":"5. Operational Excellence","text":"<ul> <li>Set up proactive monitoring</li> <li>Implement automated alerting</li> <li>Create runbooks</li> <li>Plan incident response</li> <li>Continuous improvement</li> </ul>"},{"location":"mid-level/logging-monitoring/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Serilog Documentation</li> <li>ELK Stack Guide</li> <li>Application Insights</li> <li>OpenTelemetry</li> <li>ASP.NET Core Logging</li> <li>Performance Monitoring </li> </ul>"},{"location":"mid-level/logging-monitoring/application-insights/","title":"Application Insights","text":""},{"location":"mid-level/logging-monitoring/application-insights/#giris","title":"Giri\u015f","text":"<p>Application Insights, Microsoft'un bulut tabanl\u0131 bir uygulama performans y\u00f6netimi (APM) ve izleme hizmetidir. .NET uygulamalar\u0131nda performans izleme, hata tespiti ve kullan\u0131c\u0131 davran\u0131\u015f\u0131 analizi i\u00e7in kullan\u0131l\u0131r. Azure ekosistemiyle tam entegrasyon sa\u011flar.</p>"},{"location":"mid-level/logging-monitoring/application-insights/#application-insightsn-onemi","title":"Application Insights'\u0131n \u00d6nemi","text":"<ol> <li>Performans \u0130zleme</li> <li>Uygulama yan\u0131t s\u00fcreleri</li> <li>Ba\u011f\u0131ml\u0131l\u0131k performans\u0131</li> <li>Kaynak kullan\u0131m\u0131</li> <li> <p>Exception tracking</p> </li> <li> <p>Kullan\u0131labilirlik</p> </li> <li>Uptime monitoring</li> <li>Web testleri</li> <li>Alerting</li> <li> <p>SLA takibi</p> </li> <li> <p>Kullan\u0131c\u0131 Analizi</p> </li> <li>Kullan\u0131c\u0131 davran\u0131\u015flar\u0131</li> <li>Kullan\u0131m istatistikleri</li> <li>Conversion analizi</li> <li>Kullan\u0131c\u0131 segmentasyonu</li> </ol>"},{"location":"mid-level/logging-monitoring/application-insights/#application-insights-kullanm","title":"Application Insights Kullan\u0131m\u0131","text":"<ol> <li> <p>Temel Kurulum <pre><code>// NuGet paketleri:\n// Microsoft.ApplicationInsights.AspNetCore\n// Microsoft.ApplicationInsights.PerfCounterCollector\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddApplicationInsightsTelemetry(Configuration);\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseApplicationInsightsRequestTelemetry();\n        app.UseApplicationInsightsExceptionTelemetry();\n    }\n}\n</code></pre></p> </li> <li> <p>\u00d6zel Telemetri <pre><code>public class TelemetryService\n{\n    private readonly TelemetryClient _telemetryClient;\n\n    public TelemetryService(TelemetryClient telemetryClient)\n    {\n        _telemetryClient = telemetryClient;\n    }\n\n    public void TrackCustomEvent(string eventName, IDictionary&lt;string, string&gt; properties = null)\n    {\n        _telemetryClient.TrackEvent(eventName, properties);\n    }\n\n    public void TrackMetric(string metricName, double value)\n    {\n        _telemetryClient.TrackMetric(metricName, value);\n    }\n\n    public void TrackDependency(string dependencyType, string target, string dependencyName, \n        DateTimeOffset startTime, TimeSpan duration, bool success)\n    {\n        _telemetryClient.TrackDependency(dependencyType, target, dependencyName, \n            startTime, duration, success);\n    }\n}\n</code></pre></p> </li> <li> <p>Exception Tracking <pre><code>public class ExceptionHandlingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly TelemetryClient _telemetryClient;\n\n    public ExceptionHandlingMiddleware(RequestDelegate next, TelemetryClient telemetryClient)\n    {\n        _next = next;\n        _telemetryClient = telemetryClient;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            _telemetryClient.TrackException(ex);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Performance Tracking <pre><code>public class PerformanceTracker\n{\n    private readonly TelemetryClient _telemetryClient;\n\n    public PerformanceTracker(TelemetryClient telemetryClient)\n    {\n        _telemetryClient = telemetryClient;\n    }\n\n    public async Task&lt;T&gt; TrackOperationAsync&lt;T&gt;(string operationName, Func&lt;Task&lt;T&gt;&gt; operation)\n    {\n        var startTime = DateTimeOffset.UtcNow;\n        var timer = System.Diagnostics.Stopwatch.StartNew();\n\n        try\n        {\n            var result = await operation();\n            timer.Stop();\n\n            _telemetryClient.TrackDependency(\"Custom\", operationName, \n                startTime, timer.Elapsed, true);\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            timer.Stop();\n            _telemetryClient.TrackDependency(\"Custom\", operationName, \n                startTime, timer.Elapsed, false);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/logging-monitoring/application-insights/#application-insights-best-practices","title":"Application Insights Best Practices","text":"<ol> <li>Telemetri Tasar\u0131m\u0131</li> <li>Anlaml\u0131 event isimleri</li> <li>\u00d6l\u00e7\u00fclebilir metrikler</li> <li>Context bilgileri</li> <li> <p>Sampling stratejileri</p> </li> <li> <p>Performans</p> </li> <li>Telemetri hacmi y\u00f6netimi</li> <li>Sampling kullan\u0131m\u0131</li> <li>Batch i\u015flemler</li> <li> <p>Async operasyonlar</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Hassas veri filtreleme</li> <li>PII veri y\u00f6netimi</li> <li>Eri\u015fim kontrol\u00fc</li> <li> <p>Data retention</p> </li> <li> <p>Monitoring</p> </li> <li>Alert kurallar\u0131</li> <li>Dashboard tasar\u0131m\u0131</li> <li>Metric aggregation</li> <li>Trend analizi</li> </ol>"},{"location":"mid-level/logging-monitoring/application-insights/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/logging-monitoring/application-insights/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Application Insights nedir ve ne i\u00e7in kullan\u0131l\u0131r?</li> <li> <p>Cevap: Application Insights, Microsoft'un bulut tabanl\u0131 bir APM ve izleme hizmetidir. Performans izleme, hata tespiti ve kullan\u0131c\u0131 davran\u0131\u015f\u0131 analizi i\u00e7in kullan\u0131l\u0131r.</p> </li> <li> <p>Application Insights'\u0131n temel \u00f6zellikleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Performans izleme</li> <li>Exception tracking</li> <li>Kullan\u0131c\u0131 analizi</li> <li>Uptime monitoring</li> <li>Alerting</li> </ul> </li> <li> <p>Application Insights'\u0131n avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Azure entegrasyonu</li> <li>Zengin telemetri</li> <li>G\u00fc\u00e7l\u00fc analiz</li> <li>Kolay kurulum</li> <li>\u00d6l\u00e7eklenebilirlik</li> </ul> </li> <li> <p>Telemetri nedir?</p> </li> <li> <p>Cevap: Telemetri, uygulama davran\u0131\u015f\u0131 ve performans\u0131 hakk\u0131nda toplanan verilerdir. Event, metric, dependency ve exception gibi farkl\u0131 t\u00fcrleri vard\u0131r.</p> </li> <li> <p>Sampling nedir?</p> </li> <li>Cevap: Sampling, telemetri verilerinin belirli bir y\u00fczdesini toplama i\u015flemidir. Performans ve maliyet optimizasyonu i\u00e7in kullan\u0131l\u0131r.</li> </ol>"},{"location":"mid-level/logging-monitoring/application-insights/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Application Insights nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddApplicationInsightsTelemetry(Configuration);\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseApplicationInsightsRequestTelemetry();\n        app.UseApplicationInsightsExceptionTelemetry();\n    }\n}\n</code></pre></p> </li> <li> <p>\u00d6zel telemetri nas\u0131l g\u00f6nderilir?</p> </li> <li> <p>Cevap: <pre><code>public class TelemetryService\n{\n    private readonly TelemetryClient _telemetryClient;\n\n    public TelemetryService(TelemetryClient telemetryClient)\n    {\n        _telemetryClient = telemetryClient;\n    }\n\n    public void TrackCustomEvent(string eventName, IDictionary&lt;string, string&gt; properties = null)\n    {\n        _telemetryClient.TrackEvent(eventName, properties);\n    }\n\n    public void TrackMetric(string metricName, double value)\n    {\n        _telemetryClient.TrackMetric(metricName, value);\n    }\n}\n</code></pre></p> </li> <li> <p>Exception tracking nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class ExceptionHandlingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly TelemetryClient _telemetryClient;\n\n    public ExceptionHandlingMiddleware(RequestDelegate next, TelemetryClient telemetryClient)\n    {\n        _next = next;\n        _telemetryClient = telemetryClient;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            _telemetryClient.TrackException(ex);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Performance tracking nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class PerformanceTracker\n{\n    private readonly TelemetryClient _telemetryClient;\n\n    public PerformanceTracker(TelemetryClient telemetryClient)\n    {\n        _telemetryClient = telemetryClient;\n    }\n\n    public async Task&lt;T&gt; TrackOperationAsync&lt;T&gt;(string operationName, Func&lt;Task&lt;T&gt;&gt; operation)\n    {\n        var startTime = DateTimeOffset.UtcNow;\n        var timer = System.Diagnostics.Stopwatch.StartNew();\n\n        try\n        {\n            var result = await operation();\n            timer.Stop();\n\n            _telemetryClient.TrackDependency(\"Custom\", operationName, \n                startTime, timer.Elapsed, true);\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            timer.Stop();\n            _telemetryClient.TrackDependency(\"Custom\", operationName, \n                startTime, timer.Elapsed, false);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Sampling nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddApplicationInsightsTelemetry(options =&gt;\n    {\n        options.EnableAdaptiveSampling = true;\n        options.EnableQuickPulseMetricStream = true;\n    });\n}\n</code></pre></li> </ol>"},{"location":"mid-level/logging-monitoring/application-insights/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Application Insights performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Sampling stratejileri</li> <li>Telemetri hacmi y\u00f6netimi</li> <li>Batch i\u015flemler</li> <li>Async operasyonlar</li> <li>Cache kullan\u0131m\u0131</li> </ul> </li> <li> <p>Application Insights g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Hassas veri filtreleme</li> <li>PII veri y\u00f6netimi</li> <li>Eri\u015fim kontrol\u00fc</li> <li>Data retention</li> <li>Audit logging</li> </ul> </li> <li> <p>Application Insights monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Alert kurallar\u0131</li> <li>Dashboard tasar\u0131m\u0131</li> <li>Metric aggregation</li> <li>Trend analizi</li> <li>Notification kanallar\u0131</li> </ul> </li> <li> <p>Application Insights ile log aggregation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Log entegrasyonu</li> <li>Log analizi</li> <li>Log enrichment</li> <li>Log rotasyonu</li> <li>Log ar\u015fivleme</li> </ul> </li> <li> <p>Application Insights ile distributed tracing nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Correlation ID</li> <li>Operation context</li> <li>Dependency tracking</li> <li>End-to-end tracing</li> <li>Performance analysis </li> </ul> </li> </ol>"},{"location":"mid-level/logging-monitoring/log-aggregation/","title":"Log Aggregation","text":""},{"location":"mid-level/logging-monitoring/log-aggregation/#giris","title":"Giri\u015f","text":"<p>Log Aggregation (Log Toplama), da\u011f\u0131t\u0131k sistemlerde loglar\u0131n merkezi bir noktada toplanmas\u0131, depolanmas\u0131 ve analiz edilmesi s\u00fcrecidir. Modern uygulamalarda, \u00f6zellikle mikroservis mimarilerinde, loglar\u0131n etkili bir \u015fekilde y\u00f6netilmesi i\u00e7in kritik bir bile\u015fendir.</p>"},{"location":"mid-level/logging-monitoring/log-aggregation/#log-aggregationn-onemi","title":"Log Aggregation'\u0131n \u00d6nemi","text":"<ol> <li>Merkezi Y\u00f6netim</li> <li>T\u00fcm loglar\u0131n tek noktada toplanmas\u0131</li> <li>Kolay eri\u015fim ve analiz</li> <li>Tutarl\u0131 log format\u0131</li> <li> <p>Merkezi yap\u0131land\u0131rma</p> </li> <li> <p>Performans ve \u00d6l\u00e7eklenebilirlik</p> </li> <li>Da\u011f\u0131t\u0131k log toplama</li> <li>Y\u00fck dengeleme</li> <li>Buffer y\u00f6netimi</li> <li> <p>Batch i\u015flemler</p> </li> <li> <p>Analiz ve \u0130zleme</p> </li> <li>Ger\u00e7ek zamanl\u0131 analiz</li> <li>Trend analizi</li> <li>Anomali tespiti</li> <li>Alerting</li> </ol>"},{"location":"mid-level/logging-monitoring/log-aggregation/#log-aggregation-araclar","title":"Log Aggregation Ara\u00e7lar\u0131","text":"<ol> <li>ELK Stack (Elasticsearch, Logstash, Kibana)</li> <li>Elasticsearch: Log depolama ve arama</li> <li>Logstash: Log toplama ve i\u015fleme</li> <li> <p>Kibana: G\u00f6rselle\u015ftirme ve analiz</p> </li> <li> <p>Fluentd</p> </li> <li>Hafif ve esnek</li> <li>Zengin plugin ekosistemi</li> <li>Y\u00fcksek performans</li> <li> <p>Kolay yap\u0131land\u0131rma</p> </li> <li> <p>Graylog</p> </li> <li>Ger\u00e7ek zamanl\u0131 analiz</li> <li>Alerting</li> <li>Role-based eri\u015fim</li> <li>Dashboard \u00f6zellikleri</li> </ol>"},{"location":"mid-level/logging-monitoring/log-aggregation/#log-aggregation-kullanm","title":"Log Aggregation Kullan\u0131m\u0131","text":"<ol> <li> <p>ELK Stack Kurulumu <pre><code>// NuGet paketleri:\n// Serilog\n// Serilog.Sinks.Elasticsearch\n// Serilog.Sinks.Console\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        Log.Logger = new LoggerConfiguration()\n            .MinimumLevel.Information()\n            .WriteTo.Console()\n            .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(\"http://localhost:9200\"))\n            {\n                AutoRegisterTemplate = true,\n                IndexFormat = \"myapp-logs-{0:yyyy.MM.dd}\"\n            })\n            .CreateLogger();\n\n        services.AddLogging(builder =&gt; builder.AddSerilog());\n    }\n}\n</code></pre></p> </li> <li> <p>Fluentd Entegrasyonu <pre><code>public class FluentdLogger\n{\n    private readonly ILogger _logger;\n\n    public FluentdLogger(ILogger&lt;FluentdLogger&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogInformation(string message, object data = null)\n    {\n        _logger.LogInformation(\"{Message} {@Data}\", message, data);\n    }\n\n    public void LogError(Exception ex, string message, object data = null)\n    {\n        _logger.LogError(ex, \"{Message} {@Data}\", message, data);\n    }\n}\n</code></pre></p> </li> <li> <p>Graylog Entegrasyonu <pre><code>public class GraylogLogger\n{\n    private readonly ILogger _logger;\n\n    public GraylogLogger(ILogger&lt;GraylogLogger&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogWithContext(string message, string correlationId, object data = null)\n    {\n        using (_logger.BeginScope(new Dictionary&lt;string, object&gt;\n        {\n            [\"CorrelationId\"] = correlationId,\n            [\"Data\"] = data\n        }))\n        {\n            _logger.LogInformation(message);\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Log Enrichment <pre><code>public class LogEnricher\n{\n    private readonly ILogger _logger;\n\n    public LogEnricher(ILogger&lt;LogEnricher&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogWithEnrichment(string message, HttpContext context)\n    {\n        var enrichedData = new\n        {\n            RequestPath = context.Request.Path,\n            UserAgent = context.Request.Headers[\"User-Agent\"],\n            ClientIp = context.Connection.RemoteIpAddress,\n            UserId = context.User?.FindFirst(\"sub\")?.Value\n        };\n\n        _logger.LogInformation(\"{Message} {@EnrichedData}\", message, enrichedData);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/logging-monitoring/log-aggregation/#log-aggregation-best-practices","title":"Log Aggregation Best Practices","text":"<ol> <li>Log Tasar\u0131m\u0131</li> <li>Yap\u0131land\u0131r\u0131lm\u0131\u015f loglar</li> <li>Anlaml\u0131 log seviyeleri</li> <li>Context bilgileri</li> <li> <p>Unique identifier'lar</p> </li> <li> <p>Performans</p> </li> <li>Asenkron loglama</li> <li>Batch i\u015flemler</li> <li>Buffer y\u00f6netimi</li> <li> <p>Sampling stratejileri</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Hassas veri filtreleme</li> <li>PII veri y\u00f6netimi</li> <li>Eri\u015fim kontrol\u00fc</li> <li> <p>Log rotasyonu</p> </li> <li> <p>Monitoring</p> </li> <li>Log hacmi takibi</li> <li>Error rate monitoring</li> <li>Performance metrics</li> <li>Alert kurallar\u0131</li> </ol>"},{"location":"mid-level/logging-monitoring/log-aggregation/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/logging-monitoring/log-aggregation/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Log Aggregation nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Log Aggregation, da\u011f\u0131t\u0131k sistemlerde loglar\u0131n merkezi bir noktada toplanmas\u0131, depolanmas\u0131 ve analiz edilmesi s\u00fcrecidir. \u00d6zellikle mikroservis mimarilerinde loglar\u0131n etkili y\u00f6netimi i\u00e7in kritiktir.</p> </li> <li> <p>Pop\u00fcler Log Aggregation ara\u00e7lar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>ELK Stack (Elasticsearch, Logstash, Kibana)</li> <li>Fluentd</li> <li>Graylog</li> <li>Splunk</li> <li>Datadog</li> </ul> </li> <li> <p>Log Aggregation'\u0131n temel bile\u015fenleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Log toplama</li> <li>Log depolama</li> <li>Log analizi</li> <li>G\u00f6rselle\u015ftirme</li> <li>Alerting</li> </ul> </li> <li> <p>Yap\u0131land\u0131r\u0131lm\u0131\u015f loglama nedir?</p> </li> <li> <p>Cevap: Yap\u0131land\u0131r\u0131lm\u0131\u015f loglama, loglar\u0131n belirli bir formatta (genellikle JSON) yaz\u0131lmas\u0131d\u0131r. Bu, loglar\u0131n daha kolay analiz edilmesini ve i\u015flenmesini sa\u011flar.</p> </li> <li> <p>Log rotasyonu nedir?</p> </li> <li>Cevap: Log rotasyonu, log dosyalar\u0131n\u0131n belirli bir boyuta veya s\u00fcreye ula\u015ft\u0131\u011f\u0131nda ar\u015fivlenmesi ve yeni dosyalar\u0131n olu\u015fturulmas\u0131 i\u015flemidir.</li> </ol>"},{"location":"mid-level/logging-monitoring/log-aggregation/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>ELK Stack nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        Log.Logger = new LoggerConfiguration()\n            .MinimumLevel.Information()\n            .WriteTo.Console()\n            .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(\"http://localhost:9200\"))\n            {\n                AutoRegisterTemplate = true,\n                IndexFormat = \"myapp-logs-{0:yyyy.MM.dd}\"\n            })\n            .CreateLogger();\n\n        services.AddLogging(builder =&gt; builder.AddSerilog());\n    }\n}\n</code></pre></p> </li> <li> <p>Log enrichment nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class LogEnricher\n{\n    private readonly ILogger _logger;\n\n    public LogEnricher(ILogger&lt;LogEnricher&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogWithEnrichment(string message, HttpContext context)\n    {\n        var enrichedData = new\n        {\n            RequestPath = context.Request.Path,\n            UserAgent = context.Request.Headers[\"User-Agent\"],\n            ClientIp = context.Connection.RemoteIpAddress,\n            UserId = context.User?.FindFirst(\"sub\")?.Value\n        };\n\n        _logger.LogInformation(\"{Message} {@EnrichedData}\", message, enrichedData);\n    }\n}\n</code></pre></p> </li> <li> <p>Asenkron loglama nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class AsyncLogger\n{\n    private readonly ILogger _logger;\n    private readonly Channel&lt;string&gt; _logChannel;\n\n    public AsyncLogger(ILogger&lt;AsyncLogger&gt; logger)\n    {\n        _logger = logger;\n        _logChannel = Channel.CreateUnbounded&lt;string&gt;();\n        StartProcessing();\n    }\n\n    private async void StartProcessing()\n    {\n        await foreach (var message in _logChannel.Reader.ReadAllAsync())\n        {\n            _logger.LogInformation(message);\n        }\n    }\n\n    public async Task LogAsync(string message)\n    {\n        await _logChannel.Writer.WriteAsync(message);\n    }\n}\n</code></pre></p> </li> <li> <p>Log sampling nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class SampledLogger\n{\n    private readonly ILogger _logger;\n    private readonly Random _random;\n    private readonly double _samplingRate;\n\n    public SampledLogger(ILogger&lt;SampledLogger&gt; logger, double samplingRate = 0.1)\n    {\n        _logger = logger;\n        _random = new Random();\n        _samplingRate = samplingRate;\n    }\n\n    public void LogWithSampling(string message)\n    {\n        if (_random.NextDouble() &lt; _samplingRate)\n        {\n            _logger.LogInformation(message);\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Log rotasyonu nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class RotatingLogger\n{\n    private readonly ILogger _logger;\n\n    public RotatingLogger(ILogger&lt;RotatingLogger&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void ConfigureLogRotation(string logPath, long maxSize, int maxFiles)\n    {\n        Log.Logger = new LoggerConfiguration()\n            .WriteTo.File(logPath,\n                rollingInterval: RollingInterval.Day,\n                rollOnFileSizeLimit: true,\n                fileSizeLimitBytes: maxSize,\n                retainedFileCountLimit: maxFiles)\n            .CreateLogger();\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/logging-monitoring/log-aggregation/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Log Aggregation performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Asenkron loglama</li> <li>Batch i\u015flemler</li> <li>Buffer y\u00f6netimi</li> <li>Sampling stratejileri</li> <li>Compression</li> </ul> </li> <li> <p>Log Aggregation g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Hassas veri filtreleme</li> <li>PII veri y\u00f6netimi</li> <li>Eri\u015fim kontrol\u00fc</li> <li>Log rotasyonu</li> <li>Audit logging</li> </ul> </li> <li> <p>Log Aggregation monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Log hacmi takibi</li> <li>Error rate monitoring</li> <li>Performance metrics</li> <li>Alert kurallar\u0131</li> <li>Dashboard tasar\u0131m\u0131</li> </ul> </li> <li> <p>Log Aggregation ile distributed tracing nas\u0131l entegre edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Correlation ID</li> <li>Context propagation</li> <li>Span ve trace y\u00f6netimi</li> <li>End-to-end tracing</li> <li>Performance analysis</li> </ul> </li> <li> <p>Log Aggregation ile log analizi nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Pattern recognition</li> <li>Anomali tespiti</li> <li>Trend analizi</li> <li>Machine learning</li> <li>Predictive analytics </li> </ul> </li> </ol>"},{"location":"mid-level/logging-monitoring/opentelemetry/","title":"OpenTelemetry","text":""},{"location":"mid-level/logging-monitoring/opentelemetry/#giris","title":"Giri\u015f","text":"<p>OpenTelemetry, modern uygulamalar i\u00e7in a\u00e7\u0131k kaynakl\u0131 bir g\u00f6zlemlenebilirlik (observability) \u00e7er\u00e7evesidir. Telemetri verilerinin (metrikler, izler ve loglar) toplanmas\u0131, i\u015flenmesi ve aktar\u0131lmas\u0131 i\u00e7in standart bir API ve SDK sa\u011flar. .NET uygulamalar\u0131nda da\u011f\u0131t\u0131k izleme, metrik toplama ve log y\u00f6netimi i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"mid-level/logging-monitoring/opentelemetry/#opentelemetrynin-onemi","title":"OpenTelemetry'nin \u00d6nemi","text":"<ol> <li>Standartla\u015ft\u0131rma</li> <li>Tek bir API</li> <li>Farkl\u0131 sa\u011flay\u0131c\u0131larla uyumluluk</li> <li>Dil ba\u011f\u0131ms\u0131z yakla\u015f\u0131m</li> <li> <p>Topluluk deste\u011fi</p> </li> <li> <p>Esneklik</p> </li> <li>\u00d6zelle\u015ftirilebilir yap\u0131</li> <li>Farkl\u0131 export se\u00e7enekleri</li> <li>Zengin enstr\u00fcmantasyon</li> <li> <p>Mod\u00fcler mimari</p> </li> <li> <p>Da\u011f\u0131t\u0131k \u0130zleme</p> </li> <li>End-to-end tracing</li> <li>Context propagation</li> <li>Span ve trace y\u00f6netimi</li> <li>Correlation</li> </ol>"},{"location":"mid-level/logging-monitoring/opentelemetry/#opentelemetry-kullanm","title":"OpenTelemetry Kullan\u0131m\u0131","text":"<ol> <li> <p>Temel Kurulum <pre><code>// NuGet paketleri:\n// OpenTelemetry.Extensions.Hosting\n// OpenTelemetry.Instrumentation.AspNetCore\n// OpenTelemetry.Exporter.Console\n// OpenTelemetry.Exporter.OpenTelemetryProtocol\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddOpenTelemetry()\n            .WithTracing(builder =&gt; builder\n                .AddAspNetCoreInstrumentation()\n                .AddHttpClientInstrumentation()\n                .AddConsoleExporter())\n            .WithMetrics(builder =&gt; builder\n                .AddAspNetCoreInstrumentation()\n                .AddConsoleExporter());\n    }\n}\n</code></pre></p> </li> <li> <p>\u00d6zel Telemetri <pre><code>public class TelemetryService\n{\n    private readonly Tracer _tracer;\n    private readonly Meter _meter;\n\n    public TelemetryService(TracerProvider tracerProvider, MeterProvider meterProvider)\n    {\n        _tracer = tracerProvider.GetTracer(\"MyApp\");\n        _meter = meterProvider.GetMeter(\"MyApp\");\n    }\n\n    public async Task TrackOperationAsync(string operationName, Func&lt;Task&gt; operation)\n    {\n        using var span = _tracer.StartActiveSpan(operationName);\n        try\n        {\n            await operation();\n            span.SetStatus(Status.Ok);\n        }\n        catch (Exception ex)\n        {\n            span.SetStatus(Status.Error);\n            span.RecordException(ex);\n            throw;\n        }\n    }\n\n    public void TrackMetric(string metricName, double value)\n    {\n        var counter = _meter.CreateCounter&lt;double&gt;(metricName);\n        counter.Add(value);\n    }\n}\n</code></pre></p> </li> <li> <p>Da\u011f\u0131t\u0131k \u0130zleme <pre><code>public class DistributedTracingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly Tracer _tracer;\n\n    public DistributedTracingMiddleware(RequestDelegate next, TracerProvider tracerProvider)\n    {\n        _next = next;\n        _tracer = tracerProvider.GetTracer(\"MyApp\");\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        using var span = _tracer.StartActiveSpan(\"HTTP Request\");\n        try\n        {\n            span.SetAttribute(\"http.method\", context.Request.Method);\n            span.SetAttribute(\"http.url\", context.Request.Path);\n\n            await _next(context);\n\n            span.SetAttribute(\"http.status_code\", context.Response.StatusCode);\n            span.SetStatus(Status.Ok);\n        }\n        catch (Exception ex)\n        {\n            span.SetStatus(Status.Error);\n            span.RecordException(ex);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Metrik Toplama <pre><code>public class MetricsCollector\n{\n    private readonly Meter _meter;\n    private readonly Counter&lt;double&gt; _requestCounter;\n    private readonly Histogram&lt;double&gt; _responseTimeHistogram;\n\n    public MetricsCollector(MeterProvider meterProvider)\n    {\n        _meter = meterProvider.GetMeter(\"MyApp\");\n        _requestCounter = _meter.CreateCounter&lt;double&gt;(\"http_requests_total\");\n        _responseTimeHistogram = _meter.CreateHistogram&lt;double&gt;(\"http_response_time_seconds\");\n    }\n\n    public void TrackRequest(string path, double duration)\n    {\n        _requestCounter.Add(1, new KeyValuePair&lt;string, object&gt;(\"path\", path));\n        _responseTimeHistogram.Record(duration, new KeyValuePair&lt;string, object&gt;(\"path\", path));\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/logging-monitoring/opentelemetry/#opentelemetry-best-practices","title":"OpenTelemetry Best Practices","text":"<ol> <li>\u0130zleme Tasar\u0131m\u0131</li> <li>Anlaml\u0131 span isimleri</li> <li>Do\u011fru attribute kullan\u0131m\u0131</li> <li>Context propagation</li> <li> <p>Sampling stratejileri</p> </li> <li> <p>Performans</p> </li> <li>Span say\u0131s\u0131 optimizasyonu</li> <li>Batch i\u015flemler</li> <li>Async operasyonlar</li> <li> <p>Buffer y\u00f6netimi</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Hassas veri filtreleme</li> <li>PII veri y\u00f6netimi</li> <li>Eri\u015fim kontrol\u00fc</li> <li> <p>Data retention</p> </li> <li> <p>Monitoring</p> </li> <li>Alert kurallar\u0131</li> <li>Dashboard tasar\u0131m\u0131</li> <li>Metric aggregation</li> <li>Trend analizi</li> </ol>"},{"location":"mid-level/logging-monitoring/opentelemetry/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/logging-monitoring/opentelemetry/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>OpenTelemetry nedir ve ne i\u00e7in kullan\u0131l\u0131r?</li> <li> <p>Cevap: OpenTelemetry, modern uygulamalar i\u00e7in a\u00e7\u0131k kaynakl\u0131 bir g\u00f6zlemlenebilirlik \u00e7er\u00e7evesidir. Telemetri verilerinin toplanmas\u0131, i\u015flenmesi ve aktar\u0131lmas\u0131 i\u00e7in standart bir API ve SDK sa\u011flar.</p> </li> <li> <p>OpenTelemetry'nin temel \u00f6zellikleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Da\u011f\u0131t\u0131k izleme</li> <li>Metrik toplama</li> <li>Log y\u00f6netimi</li> <li>Context propagation</li> <li>Sampling</li> </ul> </li> <li> <p>OpenTelemetry'nin avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Standartla\u015ft\u0131rma</li> <li>Esneklik</li> <li>Topluluk deste\u011fi</li> <li>Dil ba\u011f\u0131ms\u0131zl\u0131k</li> <li>Zengin enstr\u00fcmantasyon</li> </ul> </li> <li> <p>Span ve Trace nedir?</p> </li> <li> <p>Cevap: Span, bir i\u015flemin ba\u015flang\u0131c\u0131 ve biti\u015fi aras\u0131ndaki s\u00fcreyi temsil eder. Trace ise bir iste\u011fin t\u00fcm ya\u015fam d\u00f6ng\u00fcs\u00fcn\u00fc kapsayan span'lerin toplam\u0131d\u0131r.</p> </li> <li> <p>Context Propagation nedir?</p> </li> <li>Cevap: Context Propagation, da\u011f\u0131t\u0131k sistemlerde trace bilgisinin servisler aras\u0131nda ta\u015f\u0131nmas\u0131 s\u00fcrecidir. Genellikle HTTP header'lar\u0131 veya mesaj kuyruklar\u0131 \u00fczerinden yap\u0131l\u0131r.</li> </ol>"},{"location":"mid-level/logging-monitoring/opentelemetry/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>OpenTelemetry nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddOpenTelemetry()\n            .WithTracing(builder =&gt; builder\n                .AddAspNetCoreInstrumentation()\n                .AddHttpClientInstrumentation()\n                .AddConsoleExporter())\n            .WithMetrics(builder =&gt; builder\n                .AddAspNetCoreInstrumentation()\n                .AddConsoleExporter());\n    }\n}\n</code></pre></p> </li> <li> <p>\u00d6zel telemetri nas\u0131l g\u00f6nderilir?</p> </li> <li> <p>Cevap: <pre><code>public class TelemetryService\n{\n    private readonly Tracer _tracer;\n    private readonly Meter _meter;\n\n    public TelemetryService(TracerProvider tracerProvider, MeterProvider meterProvider)\n    {\n        _tracer = tracerProvider.GetTracer(\"MyApp\");\n        _meter = meterProvider.GetMeter(\"MyApp\");\n    }\n\n    public async Task TrackOperationAsync(string operationName, Func&lt;Task&gt; operation)\n    {\n        using var span = _tracer.StartActiveSpan(operationName);\n        try\n        {\n            await operation();\n            span.SetStatus(Status.Ok);\n        }\n        catch (Exception ex)\n        {\n            span.SetStatus(Status.Error);\n            span.RecordException(ex);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Da\u011f\u0131t\u0131k izleme nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class DistributedTracingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly Tracer _tracer;\n\n    public DistributedTracingMiddleware(RequestDelegate next, TracerProvider tracerProvider)\n    {\n        _next = next;\n        _tracer = tracerProvider.GetTracer(\"MyApp\");\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        using var span = _tracer.StartActiveSpan(\"HTTP Request\");\n        try\n        {\n            span.SetAttribute(\"http.method\", context.Request.Method);\n            span.SetAttribute(\"http.url\", context.Request.Path);\n\n            await _next(context);\n\n            span.SetAttribute(\"http.status_code\", context.Response.StatusCode);\n            span.SetStatus(Status.Ok);\n        }\n        catch (Exception ex)\n        {\n            span.SetStatus(Status.Error);\n            span.RecordException(ex);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Metrik toplama nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class MetricsCollector\n{\n    private readonly Meter _meter;\n    private readonly Counter&lt;double&gt; _requestCounter;\n    private readonly Histogram&lt;double&gt; _responseTimeHistogram;\n\n    public MetricsCollector(MeterProvider meterProvider)\n    {\n        _meter = meterProvider.GetMeter(\"MyApp\");\n        _requestCounter = _meter.CreateCounter&lt;double&gt;(\"http_requests_total\");\n        _responseTimeHistogram = _meter.CreateHistogram&lt;double&gt;(\"http_response_time_seconds\");\n    }\n\n    public void TrackRequest(string path, double duration)\n    {\n        _requestCounter.Add(1, new KeyValuePair&lt;string, object&gt;(\"path\", path));\n        _responseTimeHistogram.Record(duration, new KeyValuePair&lt;string, object&gt;(\"path\", path));\n    }\n}\n</code></pre></p> </li> <li> <p>Sampling nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddOpenTelemetry()\n        .WithTracing(builder =&gt; builder\n            .SetSampler(new ParentBasedSampler(new TraceIdRatioBasedSampler(0.1)))\n            .AddAspNetCoreInstrumentation()\n            .AddConsoleExporter());\n}\n</code></pre></li> </ol>"},{"location":"mid-level/logging-monitoring/opentelemetry/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>OpenTelemetry performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Sampling stratejileri</li> <li>Span say\u0131s\u0131 optimizasyonu</li> <li>Batch i\u015flemler</li> <li>Async operasyonlar</li> <li>Buffer y\u00f6netimi</li> </ul> </li> <li> <p>OpenTelemetry g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Hassas veri filtreleme</li> <li>PII veri y\u00f6netimi</li> <li>Eri\u015fim kontrol\u00fc</li> <li>Data retention</li> <li>Audit logging</li> </ul> </li> <li> <p>OpenTelemetry monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Alert kurallar\u0131</li> <li>Dashboard tasar\u0131m\u0131</li> <li>Metric aggregation</li> <li>Trend analizi</li> <li>Notification kanallar\u0131</li> </ul> </li> <li> <p>OpenTelemetry ile log aggregation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Log entegrasyonu</li> <li>Log analizi</li> <li>Log enrichment</li> <li>Log rotasyonu</li> <li>Log ar\u015fivleme</li> </ul> </li> <li> <p>OpenTelemetry ile distributed tracing nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Context propagation</li> <li>Span ve trace y\u00f6netimi</li> <li>Correlation</li> <li>End-to-end tracing</li> <li>Performance analysis </li> </ul> </li> </ol>"},{"location":"mid-level/logging-monitoring/performance-monitoring/","title":"Performance Monitoring","text":""},{"location":"mid-level/logging-monitoring/performance-monitoring/#giris","title":"Giri\u015f","text":"<p>Performance Monitoring (Performans \u0130zleme), uygulaman\u0131n performans metriklerinin s\u00fcrekli olarak izlenmesi ve analiz edilmesi s\u00fcrecidir. .NET uygulamalar\u0131nda performans sorunlar\u0131n\u0131n tespiti, optimizasyon ve kapasite planlamas\u0131 i\u00e7in kritik bir bile\u015fendir.</p>"},{"location":"mid-level/logging-monitoring/performance-monitoring/#performance-monitoringn-onemi","title":"Performance Monitoring'\u0131n \u00d6nemi","text":"<ol> <li>Performans Optimizasyonu</li> <li>Bottleneck tespiti</li> <li>Kaynak kullan\u0131m\u0131 analizi</li> <li>Response time takibi</li> <li> <p>Throughput \u00f6l\u00e7\u00fcm\u00fc</p> </li> <li> <p>Kullan\u0131c\u0131 Deneyimi</p> </li> <li>Uygulama yan\u0131t s\u00fcreleri</li> <li>Sayfa y\u00fckleme s\u00fcreleri</li> <li>API latency</li> <li> <p>Error rate</p> </li> <li> <p>Sistem Sa\u011fl\u0131\u011f\u0131</p> </li> <li>CPU kullan\u0131m\u0131</li> <li>Memory kullan\u0131m\u0131</li> <li>Disk I/O</li> <li>Network trafi\u011fi</li> </ol>"},{"location":"mid-level/logging-monitoring/performance-monitoring/#performance-monitoring-araclar","title":"Performance Monitoring Ara\u00e7lar\u0131","text":"<ol> <li>Application Insights</li> <li>Performans metrikleri</li> <li>Dependency tracking</li> <li>Exception monitoring</li> <li> <p>Custom telemetri</p> </li> <li> <p>Prometheus + Grafana</p> </li> <li>Time series veritaban\u0131</li> <li>Zengin metrik toplama</li> <li>G\u00fc\u00e7l\u00fc g\u00f6rselle\u015ftirme</li> <li> <p>Alerting</p> </li> <li> <p>New Relic</p> </li> <li>APM (Application Performance Monitoring)</li> <li>Distributed tracing</li> <li>Real-time monitoring</li> <li>Custom dashboards</li> </ol>"},{"location":"mid-level/logging-monitoring/performance-monitoring/#performance-monitoring-kullanm","title":"Performance Monitoring Kullan\u0131m\u0131","text":"<ol> <li> <p>Application Insights Entegrasyonu <pre><code>// NuGet paketleri:\n// Microsoft.ApplicationInsights.AspNetCore\n// Microsoft.ApplicationInsights.PerfCounterCollector\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddApplicationInsightsTelemetry(Configuration);\n        services.AddApplicationInsightsTelemetryProcessor&lt;CustomTelemetryProcessor&gt;();\n    }\n}\n\npublic class CustomTelemetryProcessor : ITelemetryProcessor\n{\n    private readonly ITelemetryProcessor _next;\n\n    public CustomTelemetryProcessor(ITelemetryProcessor next)\n    {\n        _next = next;\n    }\n\n    public void Process(ITelemetry item)\n    {\n        if (item is RequestTelemetry request)\n        {\n            request.Properties[\"CustomProperty\"] = \"Value\";\n        }\n        _next.Process(item);\n    }\n}\n</code></pre></p> </li> <li> <p>Prometheus Entegrasyonu <pre><code>// NuGet paketleri:\n// prometheus-net\n// prometheus-net.AspNetCore\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddPrometheusMetrics();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMetricServer();\n        app.UseHttpMetrics();\n    }\n}\n\npublic class PerformanceMetrics\n{\n    private readonly Counter _requestCounter;\n    private readonly Histogram _responseTimeHistogram;\n\n    public PerformanceMetrics()\n    {\n        _requestCounter = Metrics.CreateCounter(\"http_requests_total\", \"Total HTTP requests\");\n        _responseTimeHistogram = Metrics.CreateHistogram(\"http_response_time_seconds\", \"HTTP response time\");\n    }\n\n    public void TrackRequest(string path, double duration)\n    {\n        _requestCounter.Inc();\n        _responseTimeHistogram.Observe(duration, new[] { path });\n    }\n}\n</code></pre></p> </li> <li> <p>Custom Performance Monitoring <pre><code>public class PerformanceMonitor\n{\n    private readonly ILogger _logger;\n    private readonly Stopwatch _stopwatch;\n\n    public PerformanceMonitor(ILogger&lt;PerformanceMonitor&gt; logger)\n    {\n        _logger = logger;\n        _stopwatch = new Stopwatch();\n    }\n\n    public async Task&lt;T&gt; MonitorOperationAsync&lt;T&gt;(string operationName, Func&lt;Task&lt;T&gt;&gt; operation)\n    {\n        _stopwatch.Restart();\n        try\n        {\n            var result = await operation();\n            _stopwatch.Stop();\n\n            _logger.LogInformation(\"Operation {OperationName} completed in {Duration}ms\", \n                operationName, _stopwatch.ElapsedMilliseconds);\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _stopwatch.Stop();\n            _logger.LogError(ex, \"Operation {OperationName} failed after {Duration}ms\", \n                operationName, _stopwatch.ElapsedMilliseconds);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Resource Monitoring <pre><code>public class ResourceMonitor\n{\n    private readonly ILogger _logger;\n    private readonly PerformanceCounter _cpuCounter;\n    private readonly PerformanceCounter _memoryCounter;\n\n    public ResourceMonitor(ILogger&lt;ResourceMonitor&gt; logger)\n    {\n        _logger = logger;\n        _cpuCounter = new PerformanceCounter(\"Processor\", \"% Processor Time\", \"_Total\");\n        _memoryCounter = new PerformanceCounter(\"Memory\", \"Available MBytes\");\n    }\n\n    public void LogResourceUsage()\n    {\n        var cpuUsage = _cpuCounter.NextValue();\n        var availableMemory = _memoryCounter.NextValue();\n\n        _logger.LogInformation(\"CPU Usage: {CpuUsage}%, Available Memory: {AvailableMemory}MB\", \n            cpuUsage, availableMemory);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/logging-monitoring/performance-monitoring/#performance-monitoring-best-practices","title":"Performance Monitoring Best Practices","text":"<ol> <li>Metrik Tasar\u0131m\u0131</li> <li>Anlaml\u0131 metrik isimleri</li> <li>Do\u011fru metrik t\u00fcrleri</li> <li>Context bilgileri</li> <li> <p>Sampling stratejileri</p> </li> <li> <p>Performans</p> </li> <li>Hafif metrik toplama</li> <li>Batch i\u015flemler</li> <li>Async operasyonlar</li> <li> <p>Buffer y\u00f6netimi</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Hassas veri filtreleme</li> <li>Eri\u015fim kontrol\u00fc</li> <li>Data retention</li> <li> <p>Audit logging</p> </li> <li> <p>Monitoring</p> </li> <li>Alert kurallar\u0131</li> <li>Dashboard tasar\u0131m\u0131</li> <li>Trend analizi</li> <li>Capacity planning</li> </ol>"},{"location":"mid-level/logging-monitoring/performance-monitoring/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/logging-monitoring/performance-monitoring/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Performance Monitoring nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Performance Monitoring, uygulaman\u0131n performans metriklerinin s\u00fcrekli olarak izlenmesi ve analiz edilmesi s\u00fcrecidir. Performans sorunlar\u0131n\u0131n tespiti, optimizasyon ve kapasite planlamas\u0131 i\u00e7in kritiktir.</p> </li> <li> <p>Pop\u00fcler Performance Monitoring ara\u00e7lar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Application Insights</li> <li>Prometheus + Grafana</li> <li>New Relic</li> <li>Datadog</li> <li>Dynatrace</li> </ul> </li> <li> <p>Performance Monitoring'\u0131n temel bile\u015fenleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Metrik toplama</li> <li>Veri depolama</li> <li>G\u00f6rselle\u015ftirme</li> <li>Alerting</li> <li>Analiz</li> </ul> </li> <li> <p>APM nedir?</p> </li> <li> <p>Cevap: APM (Application Performance Monitoring), uygulama performans\u0131n\u0131n end-to-end izlenmesi ve y\u00f6netilmesi i\u00e7in kullan\u0131lan ara\u00e7lar ve teknikler b\u00fct\u00fcn\u00fcd\u00fcr.</p> </li> <li> <p>Bottleneck nedir?</p> </li> <li>Cevap: Bottleneck, sistemin performans\u0131n\u0131 s\u0131n\u0131rlayan ve darbo\u011faz olu\u015fturan bile\u015fen veya kaynakt\u0131r.</li> </ol>"},{"location":"mid-level/logging-monitoring/performance-monitoring/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Application Insights nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddApplicationInsightsTelemetry(Configuration);\n        services.AddApplicationInsightsTelemetryProcessor&lt;CustomTelemetryProcessor&gt;();\n    }\n}\n</code></pre></p> </li> <li> <p>Prometheus metrikleri nas\u0131l tan\u0131mlan\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class PerformanceMetrics\n{\n    private readonly Counter _requestCounter;\n    private readonly Histogram _responseTimeHistogram;\n\n    public PerformanceMetrics()\n    {\n        _requestCounter = Metrics.CreateCounter(\"http_requests_total\", \"Total HTTP requests\");\n        _responseTimeHistogram = Metrics.CreateHistogram(\"http_response_time_seconds\", \"HTTP response time\");\n    }\n\n    public void TrackRequest(string path, double duration)\n    {\n        _requestCounter.Inc();\n        _responseTimeHistogram.Observe(duration, new[] { path });\n    }\n}\n</code></pre></p> </li> <li> <p>Custom performance monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class PerformanceMonitor\n{\n    private readonly ILogger _logger;\n    private readonly Stopwatch _stopwatch;\n\n    public PerformanceMonitor(ILogger&lt;PerformanceMonitor&gt; logger)\n    {\n        _logger = logger;\n        _stopwatch = new Stopwatch();\n    }\n\n    public async Task&lt;T&gt; MonitorOperationAsync&lt;T&gt;(string operationName, Func&lt;Task&lt;T&gt;&gt; operation)\n    {\n        _stopwatch.Restart();\n        try\n        {\n            var result = await operation();\n            _stopwatch.Stop();\n\n            _logger.LogInformation(\"Operation {OperationName} completed in {Duration}ms\", \n                operationName, _stopwatch.ElapsedMilliseconds);\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _stopwatch.Stop();\n            _logger.LogError(ex, \"Operation {OperationName} failed after {Duration}ms\", \n                operationName, _stopwatch.ElapsedMilliseconds);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Resource monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class ResourceMonitor\n{\n    private readonly ILogger _logger;\n    private readonly PerformanceCounter _cpuCounter;\n    private readonly PerformanceCounter _memoryCounter;\n\n    public ResourceMonitor(ILogger&lt;ResourceMonitor&gt; logger)\n    {\n        _logger = logger;\n        _cpuCounter = new PerformanceCounter(\"Processor\", \"% Processor Time\", \"_Total\");\n        _memoryCounter = new PerformanceCounter(\"Memory\", \"Available MBytes\");\n    }\n\n    public void LogResourceUsage()\n    {\n        var cpuUsage = _cpuCounter.NextValue();\n        var availableMemory = _memoryCounter.NextValue();\n\n        _logger.LogInformation(\"CPU Usage: {CpuUsage}%, Available Memory: {AvailableMemory}MB\", \n            cpuUsage, availableMemory);\n    }\n}\n</code></pre></p> </li> <li> <p>Performance alerting nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class PerformanceAlert\n{\n    private readonly ILogger _logger;\n    private readonly double _threshold;\n\n    public PerformanceAlert(ILogger&lt;PerformanceAlert&gt; logger, double threshold)\n    {\n        _logger = logger;\n        _threshold = threshold;\n    }\n\n    public void CheckPerformance(double metricValue, string metricName)\n    {\n        if (metricValue &gt; _threshold)\n        {\n            _logger.LogWarning(\"Performance alert: {MetricName} exceeded threshold. Value: {Value}\", \n                metricName, metricValue);\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/logging-monitoring/performance-monitoring/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Performance Monitoring performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Hafif metrik toplama</li> <li>Batch i\u015flemler</li> <li>Async operasyonlar</li> <li>Buffer y\u00f6netimi</li> <li>Sampling stratejileri</li> </ul> </li> <li> <p>Performance Monitoring g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Hassas veri filtreleme</li> <li>Eri\u015fim kontrol\u00fc</li> <li>Data retention</li> <li>Audit logging</li> <li>Encryption</li> </ul> </li> <li> <p>Performance Monitoring ile capacity planning nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Trend analizi</li> <li>Resource utilization</li> <li>Growth projection</li> <li>Scaling strategies</li> <li>Cost optimization</li> </ul> </li> <li> <p>Performance Monitoring ile distributed tracing nas\u0131l entegre edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Correlation ID</li> <li>Context propagation</li> <li>Span ve trace y\u00f6netimi</li> <li>End-to-end tracing</li> <li>Performance analysis</li> </ul> </li> <li> <p>Performance Monitoring ile anomaly detection nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Statistical analysis</li> <li>Machine learning</li> <li>Pattern recognition</li> <li>Threshold optimization</li> <li>Alert management </li> </ul> </li> </ol>"},{"location":"mid-level/logging-monitoring/serilog-elk/","title":"Serilog/ELK Stack","text":""},{"location":"mid-level/logging-monitoring/serilog-elk/#giris","title":"Giri\u015f","text":"<p>Serilog, .NET uygulamalar\u0131 i\u00e7in yap\u0131land\u0131r\u0131labilir ve geni\u015fletilebilir bir logging framework'\u00fcd\u00fcr. ELK Stack (Elasticsearch, Logstash, Kibana) ise log y\u00f6netimi ve analizi i\u00e7in kullan\u0131lan a\u00e7\u0131k kaynakl\u0131 bir \u00e7\u00f6z\u00fcm paketidir. Bu iki teknoloji birlikte kullan\u0131ld\u0131\u011f\u0131nda, uygulama loglar\u0131n\u0131n toplanmas\u0131, i\u015flenmesi, depolanmas\u0131 ve g\u00f6rselle\u015ftirilmesi i\u00e7in g\u00fc\u00e7l\u00fc bir altyap\u0131 sa\u011flar.</p>"},{"location":"mid-level/logging-monitoring/serilog-elk/#serilogelk-stackin-onemi","title":"Serilog/ELK Stack'in \u00d6nemi","text":"<ol> <li>Merkezi Log Y\u00f6netimi</li> <li>T\u00fcm loglar\u0131n tek bir yerde toplanmas\u0131</li> <li>Kolay eri\u015fim ve analiz</li> <li> <p>Ger\u00e7ek zamanl\u0131 izleme</p> </li> <li> <p>Geli\u015fmi\u015f Analiz</p> </li> <li>Yap\u0131land\u0131r\u0131lm\u0131\u015f log verileri</li> <li>G\u00fc\u00e7l\u00fc arama yetenekleri</li> <li> <p>\u00d6zelle\u015ftirilebilir dashboardlar</p> </li> <li> <p>\u00d6l\u00e7eklenebilirlik</p> </li> <li>Y\u00fcksek hacimli log y\u00f6netimi</li> <li>Da\u011f\u0131t\u0131k mimari</li> <li>Y\u00fck dengeleme</li> </ol>"},{"location":"mid-level/logging-monitoring/serilog-elk/#serilog-kullanm","title":"Serilog Kullan\u0131m\u0131","text":"<ol> <li> <p>Temel Kurulum <pre><code>// NuGet paketleri:\n// Serilog\n// Serilog.Sinks.Console\n// Serilog.Sinks.File\n// Serilog.Sinks.Elasticsearch\n\npublic static class SerilogConfiguration\n{\n    public static IHostBuilder UseSerilog(this IHostBuilder hostBuilder)\n    {\n        return hostBuilder.UseSerilog((context, services, configuration) =&gt; configuration\n            .ReadFrom.Configuration(context.Configuration)\n            .ReadFrom.Services(services)\n            .Enrich.FromLogContext()\n            .WriteTo.Console()\n            .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n            .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(\"http://localhost:9200\"))\n            {\n                AutoRegisterTemplate = true,\n                IndexFormat = \"logstash-{0:yyyy.MM.dd}\",\n                NumberOfShards = 2,\n                NumberOfReplicas = 1\n            }));\n    }\n}\n</code></pre></p> </li> <li> <p>Yap\u0131land\u0131r\u0131lm\u0131\u015f Logging <pre><code>public class LoggingService\n{\n    private readonly ILogger&lt;LoggingService&gt; _logger;\n\n    public LoggingService(ILogger&lt;LoggingService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogUserAction(string userId, string action, object details)\n    {\n        _logger.LogInformation(\"User {UserId} performed {Action} with details {@Details}\", \n            userId, action, details);\n    }\n\n    public void LogError(Exception ex, string context)\n    {\n        _logger.LogError(ex, \"Error occurred in {Context}\", context);\n    }\n\n    public void LogPerformance(string operation, TimeSpan duration)\n    {\n        _logger.LogInformation(\"Operation {Operation} completed in {Duration}ms\", \n            operation, duration.TotalMilliseconds);\n    }\n}\n</code></pre></p> </li> <li> <p>Log Enrichment <pre><code>public static class LogEnricher\n{\n    public static ILogger EnrichWithContext(this ILogger logger, string correlationId)\n    {\n        return logger.ForContext(\"CorrelationId\", correlationId);\n    }\n\n    public static ILogger EnrichWithEnvironment(this ILogger logger)\n    {\n        return logger\n            .ForContext(\"Environment\", Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"))\n            .ForContext(\"MachineName\", Environment.MachineName);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/logging-monitoring/serilog-elk/#elk-stack-kurulumu","title":"ELK Stack Kurulumu","text":"<ol> <li> <p>Elasticsearch Yap\u0131land\u0131rmas\u0131 <pre><code># elasticsearch.yml\ncluster.name: logging-cluster\nnode.name: node-1\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ndiscovery.type: single-node\n</code></pre></p> </li> <li> <p>Logstash Yap\u0131land\u0131rmas\u0131 <pre><code># logstash.conf\ninput {\n  tcp {\n    port =&gt; 5000\n    codec =&gt; json\n  }\n}\n\nfilter {\n  json {\n    source =&gt; \"message\"\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [\"http://localhost:9200\"]\n    index =&gt; \"logstash-%{+YYYY.MM.dd}\"\n  }\n}\n</code></pre></p> </li> <li> <p>Kibana Yap\u0131land\u0131rmas\u0131 <pre><code># kibana.yml\nserver.port: 5601\nserver.host: \"0.0.0.0\"\nelasticsearch.hosts: [\"http://localhost:9200\"]\n</code></pre></p> </li> </ol>"},{"location":"mid-level/logging-monitoring/serilog-elk/#best-practices","title":"Best Practices","text":"<ol> <li>Log Tasar\u0131m\u0131</li> <li>Yap\u0131land\u0131r\u0131lm\u0131\u015f log format\u0131</li> <li>Anlaml\u0131 log seviyeleri</li> <li>Context bilgileri</li> <li> <p>Performans metrikleri</p> </li> <li> <p>Performans</p> </li> <li>Asenkron logging</li> <li>Batch i\u015flemler</li> <li>Buffer y\u00f6netimi</li> <li> <p>Rate limiting</p> </li> <li> <p>G\u00fcvenlik</p> </li> <li>Hassas veri filtreleme</li> <li>Log rotasyonu</li> <li>Eri\u015fim kontrol\u00fc</li> <li> <p>Audit logging</p> </li> <li> <p>Monitoring</p> </li> <li>Log kalitesi</li> <li>Sistem performans\u0131</li> <li>Hata oranlar\u0131</li> <li>Alerting</li> </ol>"},{"location":"mid-level/logging-monitoring/serilog-elk/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/logging-monitoring/serilog-elk/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Serilog nedir ve ne i\u00e7in kullan\u0131l\u0131r?</li> <li> <p>Cevap: Serilog, .NET uygulamalar\u0131 i\u00e7in yap\u0131land\u0131r\u0131labilir ve geni\u015fletilebilir bir logging framework'\u00fcd\u00fcr. Yap\u0131land\u0131r\u0131lm\u0131\u015f loglama, \u00e7oklu output deste\u011fi ve zengin enrichment \u00f6zellikleri sunar.</p> </li> <li> <p>ELK Stack'in bile\u015fenleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Elasticsearch: Log depolama ve arama</li> <li>Logstash: Log toplama ve i\u015fleme</li> <li>Kibana: Log g\u00f6rselle\u015ftirme ve analiz</li> </ul> </li> <li> <p>Serilog'un avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Yap\u0131land\u0131r\u0131labilir yap\u0131</li> <li>Zengin sink deste\u011fi</li> <li>Performans optimizasyonu</li> <li>Kolay entegrasyon</li> </ul> </li> <li> <p>Log enrichment nedir?</p> </li> <li> <p>Cevap: Log enrichment, log kay\u0131tlar\u0131na ek bilgiler ekleme i\u015flemidir. Context bilgileri, ortam de\u011fi\u015fkenleri, performans metrikleri gibi ek bilgiler log kay\u0131tlar\u0131na zenginlik katar.</p> </li> <li> <p>Log rotasyonu nedir?</p> </li> <li>Cevap: Log rotasyonu, log dosyalar\u0131n\u0131n belirli bir boyuta veya s\u00fcreye ula\u015ft\u0131\u011f\u0131nda yeni dosyalara aktar\u0131lmas\u0131 i\u015flemidir. Disk alan\u0131 y\u00f6netimi ve performans i\u00e7in \u00f6nemlidir.</li> </ol>"},{"location":"mid-level/logging-monitoring/serilog-elk/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Serilog nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public static class SerilogConfiguration\n{\n    public static IHostBuilder UseSerilog(this IHostBuilder hostBuilder)\n    {\n        return hostBuilder.UseSerilog((context, services, configuration) =&gt; configuration\n            .ReadFrom.Configuration(context.Configuration)\n            .ReadFrom.Services(services)\n            .Enrich.FromLogContext()\n            .WriteTo.Console()\n            .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n            .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(\"http://localhost:9200\"))\n            {\n                AutoRegisterTemplate = true,\n                IndexFormat = \"logstash-{0:yyyy.MM.dd}\",\n                NumberOfShards = 2,\n                NumberOfReplicas = 1\n            }));\n    }\n}\n</code></pre></p> </li> <li> <p>Yap\u0131land\u0131r\u0131lm\u0131\u015f loglama nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class LoggingService\n{\n    private readonly ILogger&lt;LoggingService&gt; _logger;\n\n    public LoggingService(ILogger&lt;LoggingService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogUserAction(string userId, string action, object details)\n    {\n        _logger.LogInformation(\"User {UserId} performed {Action} with details {@Details}\", \n            userId, action, details);\n    }\n\n    public void LogError(Exception ex, string context)\n    {\n        _logger.LogError(ex, \"Error occurred in {Context}\", context);\n    }\n}\n</code></pre></p> </li> <li> <p>Log enrichment nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public static class LogEnricher\n{\n    public static ILogger EnrichWithContext(this ILogger logger, string correlationId)\n    {\n        return logger.ForContext(\"CorrelationId\", correlationId);\n    }\n\n    public static ILogger EnrichWithEnvironment(this ILogger logger)\n    {\n        return logger\n            .ForContext(\"Environment\", Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"))\n            .ForContext(\"MachineName\", Environment.MachineName);\n    }\n}\n</code></pre></p> </li> <li> <p>Logstash pipeline nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>input {\n  tcp {\n    port =&gt; 5000\n    codec =&gt; json\n  }\n}\n\nfilter {\n  json {\n    source =&gt; \"message\"\n  }\n  mutate {\n    add_field =&gt; { \"application\" =&gt; \"myapp\" }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [\"http://localhost:9200\"]\n    index =&gt; \"logstash-%{+YYYY.MM.dd}\"\n  }\n}\n</code></pre></p> </li> <li> <p>Kibana dashboard nas\u0131l olu\u015fturulur?</p> </li> <li>Cevap:<ul> <li>Index pattern tan\u0131mlama</li> <li>Visualization olu\u015fturma</li> <li>Dashboard tasarlama</li> <li>Alert kurallar\u0131 belirleme</li> </ul> </li> </ol>"},{"location":"mid-level/logging-monitoring/serilog-elk/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Serilog performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Asenkron logging</li> <li>Batch i\u015flemler</li> <li>Buffer y\u00f6netimi</li> <li>Rate limiting</li> <li>Sink optimizasyonu</li> </ul> </li> <li> <p>ELK Stack \u00f6l\u00e7eklendirme stratejileri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Cluster yap\u0131land\u0131rmas\u0131</li> <li>Shard y\u00f6netimi</li> <li>Replica da\u011f\u0131t\u0131m\u0131</li> <li>Load balancing</li> <li>Cache stratejileri</li> </ul> </li> <li> <p>Log g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Hassas veri filtreleme</li> <li>Eri\u015fim kontrol\u00fc</li> <li>SSL/TLS</li> <li>Audit logging</li> <li>Compliance</li> </ul> </li> <li> <p>Log analizi ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Anomali tespiti</li> <li>Pattern matching</li> <li>Threshold monitoring</li> <li>Alert kurallar\u0131</li> <li>Notification kanallar\u0131</li> </ul> </li> <li> <p>Log y\u00f6netimi ve ar\u015fivleme stratejileri nelerdir?</p> </li> <li>Cevap:<ul> <li>Retention politikalar\u0131</li> <li>Cold storage</li> <li>Index lifecycle</li> <li>Backup stratejileri</li> <li>Compliance gereksinimleri </li> </ul> </li> </ol>"},{"location":"mid-level/message-queue/","title":"Message Queue","text":""},{"location":"mid-level/message-queue/#giris","title":"Giri\u015f","text":"<p>Message Queue sistemleri, modern .NET uygulamalar\u0131nda asynchronous communication, decoupling, scalability ve reliability i\u00e7in kritik \u00f6neme sahiptir. Mid-level geli\u015ftiriciler i\u00e7in message queue teknolojilerini anlamak, distributed systems, microservices architecture ve event-driven programming konular\u0131nda uzmanla\u015fmak, enterprise-level uygulamalar geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, RabbitMQ ve Apache Kafka konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/message-queue/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/message-queue/#1-rabbitmq","title":"1. RabbitMQ","text":"<p>Advanced message queuing protocol (AMQP), message routing, ve RabbitMQ integration.</p> <p>\u00d6\u011frenilecekler: - RabbitMQ setup - Message routing - Exchange types - Queue management - Message persistence</p>"},{"location":"mid-level/message-queue/#2-apache-kafka","title":"2. Apache Kafka","text":"<p>Distributed streaming platform, event streaming, ve Kafka integration.</p> <p>\u00d6\u011frenilecekler: - Kafka setup - Topic management - Partition strategy - Consumer groups - Stream processing</p>"},{"location":"mid-level/message-queue/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/message-queue/#1-system-decoupling","title":"1. System Decoupling","text":"<ul> <li>Loose coupling between services</li> <li>Independent service development</li> <li>Technology agnostic communication</li> <li>Service isolation</li> </ul>"},{"location":"mid-level/message-queue/#2-scalability","title":"2. Scalability","text":"<ul> <li>Horizontal scaling</li> <li>Load distribution</li> <li>Performance optimization</li> <li>Resource utilization</li> </ul>"},{"location":"mid-level/message-queue/#3-reliability","title":"3. Reliability","text":"<ul> <li>Message persistence</li> <li>Fault tolerance</li> <li>Message delivery guarantees</li> <li>Error handling</li> </ul>"},{"location":"mid-level/message-queue/#4-asynchronous-processing","title":"4. Asynchronous Processing","text":"<ul> <li>Non-blocking operations</li> <li>Background processing</li> <li>Event-driven architecture</li> <li>Real-time processing</li> </ul>"},{"location":"mid-level/message-queue/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/message-queue/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Message Queue nedir?</li> <li> <p>Cevap: Asynchronous communication, message storage, service decoupling.</p> </li> <li> <p>RabbitMQ nedir?</p> </li> <li> <p>Cevap: AMQP message broker, message routing, exchange types.</p> </li> <li> <p>Apache Kafka nedir?</p> </li> <li> <p>Cevap: Distributed streaming platform, event streaming, real-time processing.</p> </li> <li> <p>Message Queue ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Service decoupling, asynchronous processing, load balancing.</p> </li> <li> <p>AMQP nedir?</p> </li> <li>Cevap: Advanced Message Queuing Protocol, message routing, exchange types.</li> </ol>"},{"location":"mid-level/message-queue/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>RabbitMQ exchange types nelerdir?</li> <li> <p>Cevap: Direct, Fanout, Topic, Headers exchange types.</p> </li> <li> <p>Kafka partition strategy nas\u0131l belirlenir?</p> </li> <li> <p>Cevap: Key-based partitioning, round-robin, custom partitioning.</p> </li> <li> <p>Message persistence nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: Message acknowledgment, persistent messages, disk storage.</p> </li> <li> <p>Consumer groups nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Load balancing, parallel processing, offset management.</p> </li> <li> <p>Message ordering nas\u0131l garanti edilir?</p> </li> <li>Cevap: Single partition, key-based routing, sequential processing.</li> </ol>"},{"location":"mid-level/message-queue/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/message-queue/#1-message-design","title":"1. Message Design","text":"<ul> <li>Design clear message contracts</li> <li>Use appropriate message formats</li> <li>Implement message validation</li> <li>Plan for message evolution</li> <li>Handle backward compatibility</li> </ul>"},{"location":"mid-level/message-queue/#2-queue-management","title":"2. Queue Management","text":"<ul> <li>Implement proper queue naming</li> <li>Set appropriate TTL values</li> <li>Plan for queue cleanup</li> <li>Monitor queue performance</li> <li>Implement dead letter queues</li> </ul>"},{"location":"mid-level/message-queue/#3-error-handling","title":"3. Error Handling","text":"<ul> <li>Implement retry mechanisms</li> <li>Handle poison messages</li> <li>Implement circuit breakers</li> <li>Monitor error rates</li> <li>Plan for failure scenarios</li> </ul>"},{"location":"mid-level/message-queue/#4-performance-optimization","title":"4. Performance Optimization","text":"<ul> <li>Optimize message size</li> <li>Use appropriate batching</li> <li>Implement connection pooling</li> <li>Monitor throughput</li> <li>Plan for scaling</li> </ul>"},{"location":"mid-level/message-queue/#5-monitoring-maintenance","title":"5. Monitoring &amp; Maintenance","text":"<ul> <li>Monitor queue health</li> <li>Track message throughput</li> <li>Monitor consumer lag</li> <li>Implement alerting</li> <li>Plan for maintenance</li> </ul>"},{"location":"mid-level/message-queue/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>RabbitMQ Documentation</li> <li>Apache Kafka Documentation</li> <li>AMQP Protocol</li> <li>Message Queue Patterns</li> <li>Event-Driven Architecture</li> <li>.NET Message Queue </li> </ul>"},{"location":"mid-level/message-queue/kafka/","title":"Apache Kafka","text":""},{"location":"mid-level/message-queue/kafka/#giris","title":"Giri\u015f","text":"<p>Apache Kafka, y\u00fcksek performansl\u0131, da\u011f\u0131t\u0131k bir event streaming platformudur. B\u00fcy\u00fck veri i\u015fleme, ger\u00e7ek zamanl\u0131 veri ak\u0131\u015f\u0131 ve event-driven mimariler i\u00e7in ideal bir \u00e7\u00f6z\u00fcmd\u00fcr.</p>"},{"location":"mid-level/message-queue/kafka/#kafka-temel-kavramlar","title":"Kafka Temel Kavramlar","text":"<ol> <li>Topic</li> <li>Mesajlar\u0131n kategorize edildi\u011fi yap\u0131</li> <li>Partition'lara b\u00f6l\u00fcn\u00fcr</li> <li> <p>Replication ile \u00e7o\u011falt\u0131l\u0131r</p> </li> <li> <p>Partition</p> </li> <li>Topic'in par\u00e7alara b\u00f6l\u00fcnmesi</li> <li>Paralel i\u015fleme sa\u011flar</li> <li> <p>S\u0131ral\u0131 mesaj garantisi</p> </li> <li> <p>Producer</p> </li> <li>Mesaj \u00fcreten uygulama</li> <li>Partition se\u00e7imi</li> <li> <p>Mesaj g\u00f6nderim stratejileri</p> </li> <li> <p>Consumer</p> </li> <li>Mesaj t\u00fcketen uygulama</li> <li>Consumer gruplar\u0131</li> <li>Offset y\u00f6netimi</li> </ol>"},{"location":"mid-level/message-queue/kafka/#kafka-mimarisi","title":"Kafka Mimarisi","text":"<ol> <li>Broker</li> <li>Kafka sunucusu</li> <li>Topic ve partition y\u00f6netimi</li> <li> <p>Replication koordinasyonu</p> </li> <li> <p>Zookeeper</p> </li> <li>Cluster koordinasyonu</li> <li>Broker y\u00f6netimi</li> <li> <p>Topic yap\u0131land\u0131rmas\u0131</p> </li> <li> <p>Cluster</p> </li> <li>Birden fazla broker</li> <li>Y\u00fcksek eri\u015filebilirlik</li> <li>Veri replikasyonu</li> </ol>"},{"location":"mid-level/message-queue/kafka/#nette-kafka-kullanm","title":".NET'te Kafka Kullan\u0131m\u0131","text":""},{"location":"mid-level/message-queue/kafka/#temel-kurulum","title":"Temel Kurulum","text":"<pre><code>// NuGet paketleri\nInstall-Package Confluent.Kafka\n</code></pre>"},{"location":"mid-level/message-queue/kafka/#producer-ornegi","title":"Producer \u00d6rne\u011fi","text":"<pre><code>public class KafkaProducer\n{\n    private readonly IProducer&lt;Null, string&gt; _producer;\n\n    public KafkaProducer(string bootstrapServers)\n    {\n        var config = new ProducerConfig\n        {\n            BootstrapServers = bootstrapServers\n        };\n\n        _producer = new ProducerBuilder&lt;Null, string&gt;(config).Build();\n    }\n\n    public async Task ProduceAsync(string topic, string message)\n    {\n        try\n        {\n            var result = await _producer.ProduceAsync(topic, new Message&lt;Null, string&gt; { Value = message });\n            Console.WriteLine($\"Delivered to {result.TopicPartitionOffset}\");\n        }\n        catch (ProduceException&lt;Null, string&gt; e)\n        {\n            Console.WriteLine($\"Delivery failed: {e.Error.Reason}\");\n        }\n    }\n\n    public void Dispose()\n    {\n        _producer?.Dispose();\n    }\n}\n</code></pre>"},{"location":"mid-level/message-queue/kafka/#consumer-ornegi","title":"Consumer \u00d6rne\u011fi","text":"<pre><code>public class KafkaConsumer\n{\n    private readonly IConsumer&lt;Ignore, string&gt; _consumer;\n\n    public KafkaConsumer(string bootstrapServers, string groupId)\n    {\n        var config = new ConsumerConfig\n        {\n            BootstrapServers = bootstrapServers,\n            GroupId = groupId,\n            AutoOffsetReset = AutoOffsetReset.Earliest\n        };\n\n        _consumer = new ConsumerBuilder&lt;Ignore, string&gt;(config).Build();\n    }\n\n    public void StartConsuming(string topic, Action&lt;string&gt; messageHandler)\n    {\n        _consumer.Subscribe(topic);\n\n        try\n        {\n            while (true)\n            {\n                var result = _consumer.Consume();\n                messageHandler(result.Message.Value);\n            }\n        }\n        catch (OperationCanceledException)\n        {\n            _consumer.Close();\n        }\n    }\n\n    public void Dispose()\n    {\n        _consumer?.Dispose();\n    }\n}\n</code></pre>"},{"location":"mid-level/message-queue/kafka/#kafka-best-practices","title":"Kafka Best Practices","text":"<ol> <li>Topic Tasar\u0131m\u0131</li> <li>Anlaml\u0131 isimlendirme</li> <li>Partition say\u0131s\u0131</li> <li>Replication fakt\u00f6r\u00fc</li> <li> <p>Retention politikas\u0131</p> </li> <li> <p>Producer Yap\u0131land\u0131rmas\u0131</p> </li> <li>Batch size</li> <li>Compression</li> <li>Retry politikas\u0131</li> <li> <p>Timeout ayarlar\u0131</p> </li> <li> <p>Consumer Yap\u0131land\u0131rmas\u0131</p> </li> <li>Consumer gruplar\u0131</li> <li>Offset y\u00f6netimi</li> <li>Commit stratejisi</li> <li> <p>Poll interval</p> </li> <li> <p>Cluster Yap\u0131land\u0131rmas\u0131</p> </li> <li>Broker say\u0131s\u0131</li> <li>Replication fakt\u00f6r\u00fc</li> <li>Network ayarlar\u0131</li> <li>Disk yap\u0131land\u0131rmas\u0131</li> </ol>"},{"location":"mid-level/message-queue/kafka/#kafka-monitoring","title":"Kafka Monitoring","text":"<ol> <li>JMX Metrikleri</li> <li>Broker metrikleri</li> <li>Topic metrikleri</li> <li>Consumer metrikleri</li> <li> <p>Producer metrikleri</p> </li> <li> <p>Prometheus Integration</p> </li> <li>Metrik toplama</li> <li>Alerting</li> <li> <p>Grafana dashboards</p> </li> <li> <p>Logging</p> </li> <li>Broker logs</li> <li>Producer logs</li> <li>Consumer logs</li> <li>Error logs</li> </ol>"},{"location":"mid-level/message-queue/kafka/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/message-queue/kafka/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Kafka nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: Kafka, y\u00fcksek performansl\u0131, da\u011f\u0131t\u0131k bir event streaming platformudur. Topic'ler \u00fczerinden mesajlar\u0131n partition'lara b\u00f6l\u00fcnerek i\u015flenmesini sa\u011flar.</p> </li> <li> <p>Kafka'da partition ve replication nedir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Partition: Topic'in par\u00e7alara b\u00f6l\u00fcnmesi</li> <li>Replication: Partition'lar\u0131n kopyalanmas\u0131</li> <li>Leader/Follower yap\u0131s\u0131</li> <li>ISR (In-Sync Replicas)</li> </ul> </li> <li> <p>Kafka'da consumer gruplar\u0131 nedir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Paralel i\u015fleme</li> <li>Y\u00fck dengeleme</li> <li>Offset y\u00f6netimi</li> <li>Consumer rebalancing</li> </ul> </li> <li> <p>Kafka'da mesaj garantisi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>ACK mekanizmas\u0131</li> <li>ISR yap\u0131land\u0131rmas\u0131</li> <li>Producer retry</li> <li>Consumer commit</li> </ul> </li> <li> <p>Kafka'da y\u00fck dengeleme nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Partition da\u011f\u0131l\u0131m\u0131</li> <li>Consumer gruplar\u0131</li> <li>Replication</li> <li>Load balancing</li> </ul> </li> </ol>"},{"location":"mid-level/message-queue/kafka/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Kafka'da producer yap\u0131land\u0131rmas\u0131 nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class ConfiguredProducer\n{\n    private readonly IProducer&lt;Null, string&gt; _producer;\n\n    public ConfiguredProducer(string bootstrapServers)\n    {\n        var config = new ProducerConfig\n        {\n            BootstrapServers = bootstrapServers,\n            Acks = Acks.All,\n            MessageSendMaxRetries = 3,\n            RetryBackoffMs = 1000,\n            CompressionType = CompressionType.Snappy,\n            BatchSize = 16384,\n            LingerMs = 5\n        };\n\n        _producer = new ProducerBuilder&lt;Null, string&gt;(config).Build();\n    }\n}\n</code></pre></p> </li> <li> <p>Kafka'da consumer yap\u0131land\u0131rmas\u0131 nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class ConfiguredConsumer\n{\n    private readonly IConsumer&lt;Ignore, string&gt; _consumer;\n\n    public ConfiguredConsumer(string bootstrapServers, string groupId)\n    {\n        var config = new ConsumerConfig\n        {\n            BootstrapServers = bootstrapServers,\n            GroupId = groupId,\n            AutoOffsetReset = AutoOffsetReset.Earliest,\n            EnableAutoCommit = false,\n            MaxPollIntervalMs = 300000,\n            SessionTimeoutMs = 10000,\n            HeartbeatIntervalMs = 3000\n        };\n\n        _consumer = new ConsumerBuilder&lt;Ignore, string&gt;(config).Build();\n    }\n}\n</code></pre></p> </li> <li> <p>Kafka'da transaction nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class TransactionalProducer\n{\n    private readonly IProducer&lt;string, string&gt; _producer;\n\n    public TransactionalProducer(string bootstrapServers)\n    {\n        var config = new ProducerConfig\n        {\n            BootstrapServers = bootstrapServers,\n            TransactionalId = \"my-transactional-id\"\n        };\n\n        _producer = new ProducerBuilder&lt;string, string&gt;(config).Build();\n        _producer.InitTransactions(TimeSpan.FromSeconds(10));\n    }\n\n    public async Task ProduceTransactionally(string topic, string key, string value)\n    {\n        _producer.BeginTransaction();\n        try\n        {\n            await _producer.ProduceAsync(topic, new Message&lt;string, string&gt;\n            {\n                Key = key,\n                Value = value\n            });\n            _producer.CommitTransaction();\n        }\n        catch\n        {\n            _producer.AbortTransaction();\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Kafka'da consumer offset y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class OffsetManagedConsumer\n{\n    private readonly IConsumer&lt;Ignore, string&gt; _consumer;\n\n    public OffsetManagedConsumer(string bootstrapServers, string groupId)\n    {\n        var config = new ConsumerConfig\n        {\n            BootstrapServers = bootstrapServers,\n            GroupId = groupId,\n            EnableAutoCommit = false\n        };\n\n        _consumer = new ConsumerBuilder&lt;Ignore, string&gt;(config).Build();\n    }\n\n    public void ProcessMessages(string topic)\n    {\n        _consumer.Subscribe(topic);\n\n        try\n        {\n            while (true)\n            {\n                var result = _consumer.Consume();\n                try\n                {\n                    // Process message\n                    _consumer.Commit(result);\n                }\n                catch\n                {\n                    // Handle error without committing offset\n                }\n            }\n        }\n        finally\n        {\n            _consumer.Close();\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Kafka'da topic yap\u0131land\u0131rmas\u0131 nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: <pre><code>public class TopicConfigurator\n{\n    private readonly AdminClientConfig _config;\n\n    public TopicConfigurator(string bootstrapServers)\n    {\n        _config = new AdminClientConfig\n        {\n            BootstrapServers = bootstrapServers\n        };\n    }\n\n    public async Task CreateTopic(string topicName, int numPartitions, short replicationFactor)\n    {\n        using var adminClient = new AdminClientBuilder(_config).Build();\n\n        await adminClient.CreateTopicsAsync(new[]\n        {\n            new TopicSpecification\n            {\n                Name = topicName,\n                NumPartitions = numPartitions,\n                ReplicationFactor = replicationFactor,\n                Configs = new Dictionary&lt;string, string&gt;\n                {\n                    { \"retention.ms\", \"604800000\" },\n                    { \"cleanup.policy\", \"delete\" }\n                }\n            }\n        });\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/message-queue/kafka/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Kafka'da cluster yap\u0131land\u0131rmas\u0131 nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Broker yap\u0131land\u0131rmas\u0131</li> <li>Zookeeper yap\u0131land\u0131rmas\u0131</li> <li>Network ayarlar\u0131</li> <li>Disk yap\u0131land\u0131rmas\u0131</li> <li>Replication stratejisi</li> </ul> </li> <li> <p>Kafka'da high availability nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Replication</li> <li>ISR yap\u0131land\u0131rmas\u0131</li> <li>Broker da\u011f\u0131l\u0131m\u0131</li> <li>Network redundancy</li> <li>Failover stratejisi</li> </ul> </li> <li> <p>Kafka'da performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Partition say\u0131s\u0131</li> <li>Replication fakt\u00f6r\u00fc</li> <li>Producer batch size</li> <li>Consumer poll interval</li> <li>Disk I/O optimizasyonu</li> </ul> </li> <li> <p>Kafka'da monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>JMX metrikleri</li> <li>Prometheus integration</li> <li>Custom metrics</li> <li>Alert rules</li> <li>Dashboard creation</li> </ul> </li> <li> <p>Kafka'da g\u00fcvenlik nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap:<ul> <li>SSL/TLS</li> <li>SASL authentication</li> <li>ACL yap\u0131land\u0131rmas\u0131</li> <li>Network security</li> <li>Encryption </li> </ul> </li> </ol>"},{"location":"mid-level/message-queue/rabbitmq/","title":"RabbitMQ","text":""},{"location":"mid-level/message-queue/rabbitmq/#giris","title":"Giri\u015f","text":"<p>RabbitMQ, a\u00e7\u0131k kaynakl\u0131 bir message broker'd\u0131r. AMQP (Advanced Message Queuing Protocol) protokol\u00fcn\u00fc kullan\u0131r ve .NET uygulamalar\u0131yla kolay entegrasyon sa\u011flar.</p>"},{"location":"mid-level/message-queue/rabbitmq/#rabbitmq-temel-kavramlar","title":"RabbitMQ Temel Kavramlar","text":"<ol> <li>Exchange</li> <li>Mesajlar\u0131n g\u00f6nderildi\u011fi ilk nokta</li> <li>Farkl\u0131 tipleri vard\u0131r</li> <li> <p>Routing kurallar\u0131n\u0131 belirler</p> </li> <li> <p>Queue</p> </li> <li>Mesajlar\u0131n depoland\u0131\u011f\u0131 yer</li> <li>Consumer'lar\u0131n ba\u011fland\u0131\u011f\u0131 nokta</li> <li> <p>\u00d6zellikleri yap\u0131land\u0131r\u0131labilir</p> </li> <li> <p>Binding</p> </li> <li>Exchange ve Queue aras\u0131ndaki ba\u011flant\u0131</li> <li>Routing key ile y\u00f6nlendirme</li> <li>Farkl\u0131 binding tipleri</li> </ol>"},{"location":"mid-level/message-queue/rabbitmq/#exchange-tipleri","title":"Exchange Tipleri","text":"<ol> <li>Direct Exchange</li> <li>Routing key tam e\u015fle\u015fme</li> <li>Tek bir queue'ya y\u00f6nlendirme</li> <li> <p>Basit routing senaryolar\u0131</p> </li> <li> <p>Fanout Exchange</p> </li> <li>T\u00fcm ba\u011fl\u0131 queue'lara g\u00f6nderim</li> <li>Routing key kullan\u0131lmaz</li> <li> <p>Broadcast senaryolar\u0131</p> </li> <li> <p>Topic Exchange</p> </li> <li>Pattern matching ile routing</li> <li>Wildcard kullan\u0131m\u0131</li> <li> <p>Kompleks routing senaryolar\u0131</p> </li> <li> <p>Headers Exchange</p> </li> <li>Header de\u011ferlerine g\u00f6re routing</li> <li>Routing key kullan\u0131lmaz</li> <li>\u00d6zel routing senaryolar\u0131</li> </ol>"},{"location":"mid-level/message-queue/rabbitmq/#nette-rabbitmq-kullanm","title":".NET'te RabbitMQ Kullan\u0131m\u0131","text":""},{"location":"mid-level/message-queue/rabbitmq/#temel-kurulum","title":"Temel Kurulum","text":"<pre><code>// NuGet paketleri\nInstall-Package RabbitMQ.Client\n</code></pre>"},{"location":"mid-level/message-queue/rabbitmq/#connection-factory","title":"Connection Factory","text":"<pre><code>var factory = new ConnectionFactory\n{\n    HostName = \"localhost\",\n    UserName = \"guest\",\n    Password = \"guest\",\n    Port = 5672\n};\n</code></pre>"},{"location":"mid-level/message-queue/rabbitmq/#producer-ornegi","title":"Producer \u00d6rne\u011fi","text":"<pre><code>public class RabbitMQProducer\n{\n    private readonly IConnection _connection;\n    private readonly IModel _channel;\n\n    public RabbitMQProducer(string hostName)\n    {\n        var factory = new ConnectionFactory { HostName = hostName };\n        _connection = factory.CreateConnection();\n        _channel = _connection.CreateModel();\n    }\n\n    public void PublishMessage(string exchange, string routingKey, string message)\n    {\n        var body = Encoding.UTF8.GetBytes(message);\n        _channel.BasicPublish(exchange: exchange,\n                            routingKey: routingKey,\n                            basicProperties: null,\n                            body: body);\n    }\n\n    public void Dispose()\n    {\n        _channel?.Dispose();\n        _connection?.Dispose();\n    }\n}\n</code></pre>"},{"location":"mid-level/message-queue/rabbitmq/#consumer-ornegi","title":"Consumer \u00d6rne\u011fi","text":"<pre><code>public class RabbitMQConsumer\n{\n    private readonly IConnection _connection;\n    private readonly IModel _channel;\n\n    public RabbitMQConsumer(string hostName)\n    {\n        var factory = new ConnectionFactory { HostName = hostName };\n        _connection = factory.CreateConnection();\n        _channel = _connection.CreateModel();\n    }\n\n    public void StartConsuming(string queueName, Action&lt;string&gt; messageHandler)\n    {\n        var consumer = new EventingBasicConsumer(_channel);\n        consumer.Received += (model, ea) =&gt;\n        {\n            var body = ea.Body.ToArray();\n            var message = Encoding.UTF8.GetString(body);\n            messageHandler(message);\n            _channel.BasicAck(ea.DeliveryTag, false);\n        };\n\n        _channel.BasicConsume(queue: queueName,\n                            autoAck: false,\n                            consumer: consumer);\n    }\n\n    public void Dispose()\n    {\n        _channel?.Dispose();\n        _connection?.Dispose();\n    }\n}\n</code></pre>"},{"location":"mid-level/message-queue/rabbitmq/#rabbitmq-best-practices","title":"RabbitMQ Best Practices","text":"<ol> <li>Connection Y\u00f6netimi</li> <li>Connection pooling</li> <li>Connection recovery</li> <li>Heartbeat ayarlar\u0131</li> <li> <p>Timeout y\u00f6netimi</p> </li> <li> <p>Channel Y\u00f6netimi</p> </li> <li>Channel pooling</li> <li>Channel recovery</li> <li>Channel limitleri</li> <li> <p>Channel multiplexing</p> </li> <li> <p>Queue Yap\u0131land\u0131rmas\u0131</p> </li> <li>Durable queues</li> <li>Exclusive queues</li> <li>Auto-delete queues</li> <li> <p>Queue limits</p> </li> <li> <p>Mesaj Y\u00f6netimi</p> </li> <li>Message persistence</li> <li>Message TTL</li> <li>Message priority</li> <li>Message batching</li> </ol>"},{"location":"mid-level/message-queue/rabbitmq/#rabbitmq-monitoring","title":"RabbitMQ Monitoring","text":"<ol> <li>Management UI</li> <li>Queue durumu</li> <li>Connection durumu</li> <li>Channel durumu</li> <li> <p>Message rates</p> </li> <li> <p>Prometheus Integration</p> </li> <li>Metrik toplama</li> <li>Alerting</li> <li> <p>Grafana dashboards</p> </li> <li> <p>Logging</p> </li> <li>Connection logs</li> <li>Channel logs</li> <li>Message logs</li> <li>Error logs</li> </ol>"},{"location":"mid-level/message-queue/rabbitmq/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/message-queue/rabbitmq/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>RabbitMQ nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: RabbitMQ, a\u00e7\u0131k kaynakl\u0131 bir message broker'd\u0131r. AMQP protokol\u00fcn\u00fc kullan\u0131r ve mesajlar\u0131n exchange'ler \u00fczerinden queue'lara y\u00f6nlendirilmesini sa\u011flar.</p> </li> <li> <p>RabbitMQ'da exchange tipleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Direct Exchange</li> <li>Fanout Exchange</li> <li>Topic Exchange</li> <li>Headers Exchange</li> </ul> </li> <li> <p>RabbitMQ'da mesaj garantisi nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Publisher confirms</li> <li>Consumer acknowledgments</li> <li>Message persistence</li> <li>Dead letter exchanges</li> </ul> </li> <li> <p>RabbitMQ'da y\u00fck dengeleme nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Work queue pattern</li> <li>Consumer prefetch</li> <li>Queue length limits</li> <li>Message priority</li> </ul> </li> <li> <p>RabbitMQ'da hata y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Dead letter exchanges</li> <li>Retry mechanisms</li> <li>Error queues</li> <li>Error handling strategies</li> </ul> </li> </ol>"},{"location":"mid-level/message-queue/rabbitmq/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>RabbitMQ'da connection ve channel y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class RabbitMQConnectionManager\n{\n    private readonly ConnectionFactory _factory;\n    private IConnection _connection;\n    private readonly ConcurrentDictionary&lt;string, IModel&gt; _channels;\n\n    public RabbitMQConnectionManager(string hostName)\n    {\n        _factory = new ConnectionFactory { HostName = hostName };\n        _channels = new ConcurrentDictionary&lt;string, IModel&gt;();\n    }\n\n    public IModel GetChannel(string channelName)\n    {\n        return _channels.GetOrAdd(channelName, _ =&gt;\n        {\n            if (_connection == null || !_connection.IsOpen)\n            {\n                _connection = _factory.CreateConnection();\n            }\n            return _connection.CreateModel();\n        });\n    }\n}\n</code></pre></p> </li> <li> <p>RabbitMQ'da publisher confirms nas\u0131l implemente edilir?</p> </li> <li> <p>Cevap: <pre><code>public class ConfirmedPublisher\n{\n    private readonly IModel _channel;\n\n    public ConfirmedPublisher(IModel channel)\n    {\n        _channel = channel;\n        _channel.ConfirmSelect();\n    }\n\n    public async Task PublishWithConfirmation(string exchange, string routingKey, string message)\n    {\n        var body = Encoding.UTF8.GetBytes(message);\n        _channel.BasicPublish(exchange, routingKey, null, body);\n\n        if (!_channel.WaitForConfirms(TimeSpan.FromSeconds(5)))\n        {\n            throw new Exception(\"Message was not confirmed\");\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>RabbitMQ'da consumer prefetch nas\u0131l ayarlan\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class PrefetchConsumer\n{\n    private readonly IModel _channel;\n\n    public PrefetchConsumer(IModel channel, ushort prefetchCount)\n    {\n        _channel = channel;\n        _channel.BasicQos(0, prefetchCount, false);\n    }\n\n    public void StartConsuming(string queueName)\n    {\n        var consumer = new EventingBasicConsumer(_channel);\n        consumer.Received += (model, ea) =&gt;\n        {\n            // Process message\n            _channel.BasicAck(ea.DeliveryTag, false);\n        };\n\n        _channel.BasicConsume(queueName, false, consumer);\n    }\n}\n</code></pre></p> </li> <li> <p>RabbitMQ'da dead letter exchange nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class DeadLetterSetup\n{\n    private readonly IModel _channel;\n\n    public DeadLetterSetup(IModel channel)\n    {\n        _channel = channel;\n    }\n\n    public void SetupDeadLetter(string queueName)\n    {\n        var args = new Dictionary&lt;string, object&gt;\n        {\n            { \"x-dead-letter-exchange\", \"dlx\" },\n            { \"x-dead-letter-routing-key\", queueName }\n        };\n\n        _channel.QueueDeclare(queueName, true, false, false, args);\n        _channel.ExchangeDeclare(\"dlx\", ExchangeType.Direct);\n        _channel.QueueDeclare($\"dlq.{queueName}\", true, false, false);\n        _channel.QueueBind($\"dlq.{queueName}\", \"dlx\", queueName);\n    }\n}\n</code></pre></p> </li> <li> <p>RabbitMQ'da message TTL nas\u0131l ayarlan\u0131r?</p> </li> <li>Cevap: <pre><code>public class MessageTTLSetup\n{\n    private readonly IModel _channel;\n\n    public MessageTTLSetup(IModel channel)\n    {\n        _channel = channel;\n    }\n\n    public void SetupQueueWithTTL(string queueName, int ttlMilliseconds)\n    {\n        var args = new Dictionary&lt;string, object&gt;\n        {\n            { \"x-message-ttl\", ttlMilliseconds }\n        };\n\n        _channel.QueueDeclare(queueName, true, false, false, args);\n    }\n\n    public void PublishMessageWithTTL(string exchange, string routingKey, string message, int ttlMilliseconds)\n    {\n        var properties = _channel.CreateBasicProperties();\n        properties.Expiration = ttlMilliseconds.ToString();\n\n        var body = Encoding.UTF8.GetBytes(message);\n        _channel.BasicPublish(exchange, routingKey, properties, body);\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/message-queue/rabbitmq/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>RabbitMQ'da cluster yap\u0131land\u0131rmas\u0131 nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Node discovery</li> <li>Cluster formation</li> <li>Queue mirroring</li> <li>Network partition handling</li> <li>Cluster monitoring</li> </ul> </li> <li> <p>RabbitMQ'da high availability nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Queue mirroring</li> <li>Publisher confirms</li> <li>Consumer acknowledgments</li> <li>Connection recovery</li> <li>Network redundancy</li> </ul> </li> <li> <p>RabbitMQ'da performans optimizasyonu nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Connection pooling</li> <li>Channel multiplexing</li> <li>Message batching</li> <li>Queue optimization</li> <li>Resource management</li> </ul> </li> <li> <p>RabbitMQ'da monitoring ve alerting nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Management API</li> <li>Prometheus integration</li> <li>Custom metrics</li> <li>Alert rules</li> <li>Dashboard creation</li> </ul> </li> <li> <p>RabbitMQ'da g\u00fcvenlik nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap:<ul> <li>SSL/TLS</li> <li>Authentication</li> <li>Authorization</li> <li>Network security</li> <li>Access control </li> </ul> </li> </ol>"},{"location":"mid-level/microservices/","title":"Microservices","text":""},{"location":"mid-level/microservices/#giris","title":"Giri\u015f","text":"<p>Microservices, modern software architecture'da scalability, maintainability ve team autonomy i\u00e7in kritik \u00f6neme sahip bir architectural style'd\u0131r. Mid-level geli\u015ftiriciler i\u00e7in microservices'i anlamak, distributed systems, service communication ve cloud-native applications geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, service communication, API gateway, service discovery, circuit breaker ve event sourcing konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/microservices/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/microservices/#1-service-communication","title":"1. Service Communication","text":"<p>Inter-service communication patterns, synchronous vs asynchronous communication.</p> <p>\u00d6\u011frenilecekler: - REST API communication - Message-based communication - gRPC communication - Communication patterns - Service contracts</p>"},{"location":"mid-level/microservices/#2-api-gateway","title":"2. API Gateway","text":"<p>Centralized API management, routing, ve cross-cutting concerns.</p> <p>\u00d6\u011frenilecekler: - API gateway design - Routing strategies - Authentication/Authorization - Rate limiting - Request/Response transformation</p>"},{"location":"mid-level/microservices/#3-service-discovery","title":"3. Service Discovery","text":"<p>Service registration, service discovery, ve load balancing.</p> <p>\u00d6\u011frenilecekler: - Service registration - Service discovery - Health checking - Load balancing - Service mesh</p>"},{"location":"mid-level/microservices/#4-circuit-breaker","title":"4. Circuit Breaker","text":"<p>Fault tolerance, resilience patterns, ve error handling.</p> <p>\u00d6\u011frenilecekler: - Circuit breaker pattern - Fault tolerance - Resilience strategies - Error handling - Fallback mechanisms</p>"},{"location":"mid-level/microservices/#5-event-sourcing","title":"5. Event Sourcing","text":"<p>Event-driven architecture, event storage, ve event replay.</p> <p>\u00d6\u011frenilecekler: - Event sourcing pattern - Event store - Event replay - Event versioning - Event migration</p>"},{"location":"mid-level/microservices/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/microservices/#1-scalability","title":"1. Scalability","text":"<ul> <li>Independent scaling</li> <li>Resource optimization</li> <li>Load distribution</li> <li>Performance improvement</li> </ul>"},{"location":"mid-level/microservices/#2-maintainability","title":"2. Maintainability","text":"<ul> <li>Independent deployment</li> <li>Technology diversity</li> <li>Team autonomy</li> <li>Faster development</li> </ul>"},{"location":"mid-level/microservices/#3-resilience","title":"3. Resilience","text":"<ul> <li>Fault isolation</li> <li>Service independence</li> <li>Better error handling</li> <li>Improved availability</li> </ul>"},{"location":"mid-level/microservices/#4-team-productivity","title":"4. Team Productivity","text":"<ul> <li>Parallel development</li> <li>Independent teams</li> <li>Technology choice</li> <li>Faster delivery</li> </ul>"},{"location":"mid-level/microservices/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/microservices/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Microservices nedir?</li> <li> <p>Cevap: Small, independent services, single responsibility, independent deployment.</p> </li> <li> <p>Service communication nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: REST APIs, message queues, gRPC, event-driven communication.</p> </li> <li> <p>API Gateway nedir?</p> </li> <li> <p>Cevap: Centralized API management, routing, cross-cutting concerns.</p> </li> <li> <p>Service discovery nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Service registration, health checking, load balancing.</p> </li> <li> <p>Circuit breaker nedir?</p> </li> <li>Cevap: Fault tolerance pattern, failure detection, fallback mechanisms.</li> </ol>"},{"location":"mid-level/microservices/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Microservices data consistency nas\u0131l sa\u011flan\u0131r?</li> <li> <p>Cevap: Saga pattern, eventual consistency, distributed transactions.</p> </li> <li> <p>Service mesh nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Sidecar proxies, service-to-service communication, traffic management.</p> </li> <li> <p>Event sourcing nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: Event store, event replay, event versioning, migration strategies.</p> </li> <li> <p>API versioning nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: URL versioning, header versioning, content negotiation.</p> </li> <li> <p>Distributed tracing nas\u0131l implement edilir?</p> </li> <li>Cevap: Correlation IDs, span propagation, trace visualization.</li> </ol>"},{"location":"mid-level/microservices/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/microservices/#1-service-design","title":"1. Service Design","text":"<ul> <li>Single responsibility</li> <li>Loose coupling</li> <li>High cohesion</li> <li>Clear boundaries</li> <li>Independent deployment</li> </ul>"},{"location":"mid-level/microservices/#2-communication-patterns","title":"2. Communication Patterns","text":"<ul> <li>RESTful APIs</li> <li>Message queues</li> <li>Event-driven architecture</li> <li>Service contracts</li> <li>API versioning</li> </ul>"},{"location":"mid-level/microservices/#3-data-management","title":"3. Data Management","text":"<ul> <li>Database per service</li> <li>Eventual consistency</li> <li>Saga pattern</li> <li>CQRS pattern</li> <li>Data migration</li> </ul>"},{"location":"mid-level/microservices/#4-monitoring-observability","title":"4. Monitoring &amp; Observability","text":"<ul> <li>Distributed tracing</li> <li>Centralized logging</li> <li>Health checks</li> <li>Metrics collection</li> <li>Alerting</li> </ul>"},{"location":"mid-level/microservices/#5-security-resilience","title":"5. Security &amp; Resilience","text":"<ul> <li>Authentication/Authorization</li> <li>Circuit breaker</li> <li>Retry policies</li> <li>Timeout handling</li> <li>Fallback mechanisms</li> </ul>"},{"location":"mid-level/microservices/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microservices Architecture</li> <li>Service Communication</li> <li>API Gateway Pattern</li> <li>Circuit Breaker Pattern</li> <li>Event Sourcing Pattern</li> <li>Microservices Best Practices </li> </ul>"},{"location":"mid-level/microservices/api-gateway/","title":"API Gateway","text":""},{"location":"mid-level/microservices/api-gateway/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>API Gateway, mikroservis mimarisinde t\u00fcm istemci isteklerinin tek giri\u015f noktas\u0131 olarak hizmet veren bir bile\u015fendir. \u0130stekleri ilgili mikroservislere y\u00f6nlendirir ve merkezi olarak y\u00f6netilen i\u015flevler sa\u011flar.</p>"},{"location":"mid-level/microservices/api-gateway/#temel-ozellikler","title":"Temel \u00d6zellikler","text":""},{"location":"mid-level/microservices/api-gateway/#1-yonlendirme-ve-yuk-dengeleme","title":"1. Y\u00f6nlendirme ve Y\u00fck Dengeleme","text":"<pre><code>// Ocelot Configuration\n{\n  \"Routes\": [\n    {\n      \"DownstreamPathTemplate\": \"/api/orders/{everything}\",\n      \"DownstreamScheme\": \"http\",\n      \"DownstreamHostAndPorts\": [\n        {\n          \"Host\": \"orderservice\",\n          \"Port\": 80\n        }\n      ],\n      \"UpstreamPathTemplate\": \"/orders/{everything}\",\n      \"UpstreamHttpMethod\": [ \"GET\", \"POST\", \"PUT\", \"DELETE\" ],\n      \"LoadBalancerOptions\": {\n        \"Type\": \"RoundRobin\"\n      }\n    },\n    {\n      \"DownstreamPathTemplate\": \"/api/payments/{everything}\",\n      \"DownstreamScheme\": \"http\",\n      \"DownstreamHostAndPorts\": [\n        {\n          \"Host\": \"paymentservice\",\n          \"Port\": 80\n        }\n      ],\n      \"UpstreamPathTemplate\": \"/payments/{everything}\",\n      \"UpstreamHttpMethod\": [ \"GET\", \"POST\" ]\n    }\n  ]\n}\n</code></pre>"},{"location":"mid-level/microservices/api-gateway/#2-kimlik-dogrulama-ve-yetkilendirme","title":"2. Kimlik Do\u011frulama ve Yetkilendirme","text":"<pre><code>// Ocelot Authentication Configuration\n{\n  \"Routes\": [\n    {\n      \"DownstreamPathTemplate\": \"/api/orders/{everything}\",\n      \"DownstreamScheme\": \"http\",\n      \"DownstreamHostAndPorts\": [\n        {\n          \"Host\": \"orderservice\",\n          \"Port\": 80\n        }\n      ],\n      \"UpstreamPathTemplate\": \"/orders/{everything}\",\n      \"UpstreamHttpMethod\": [ \"GET\", \"POST\", \"PUT\", \"DELETE\" ],\n      \"AuthenticationOptions\": {\n        \"AuthenticationProviderKey\": \"Bearer\",\n        \"AllowedScopes\": [\"orders.read\", \"orders.write\"]\n      }\n    }\n  ]\n}\n\n// JWT Authentication Middleware\npublic class JwtAuthenticationMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IConfiguration _configuration;\n\n    public JwtAuthenticationMiddleware(\n        RequestDelegate next,\n        IConfiguration configuration)\n    {\n        _next = next;\n        _configuration = configuration;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var token = context.Request.Headers[\"Authorization\"]\n            .ToString()\n            .Replace(\"Bearer \", \"\");\n\n        if (string.IsNullOrEmpty(token))\n        {\n            context.Response.StatusCode = 401;\n            return;\n        }\n\n        try\n        {\n            var tokenHandler = new JwtSecurityTokenHandler();\n            var key = Encoding.ASCII.GetBytes(_configuration[\"Jwt:Secret\"]);\n\n            tokenHandler.ValidateToken(token, new TokenValidationParameters\n            {\n                ValidateIssuerSigningKey = true,\n                IssuerSigningKey = new SymmetricSecurityKey(key),\n                ValidateIssuer = false,\n                ValidateAudience = false,\n                ClockSkew = TimeSpan.Zero\n            }, out SecurityToken validatedToken);\n\n            await _next(context);\n        }\n        catch\n        {\n            context.Response.StatusCode = 401;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/api-gateway/#3-rate-limiting","title":"3. Rate Limiting","text":"<pre><code>// Ocelot Rate Limiting Configuration\n{\n  \"Routes\": [\n    {\n      \"DownstreamPathTemplate\": \"/api/orders/{everything}\",\n      \"DownstreamScheme\": \"http\",\n      \"DownstreamHostAndPorts\": [\n        {\n          \"Host\": \"orderservice\",\n          \"Port\": 80\n        }\n      ],\n      \"UpstreamPathTemplate\": \"/orders/{everything}\",\n      \"UpstreamHttpMethod\": [ \"GET\", \"POST\", \"PUT\", \"DELETE\" ],\n      \"RateLimitOptions\": {\n        \"ClientWhitelist\": [],\n        \"EnableRateLimiting\": true,\n        \"Period\": \"1s\",\n        \"PeriodTimespan\": 1,\n        \"Limit\": 10\n      }\n    }\n  ]\n}\n\n// Custom Rate Limiting Middleware\npublic class RateLimitingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IMemoryCache _cache;\n    private readonly int _limit;\n    private readonly TimeSpan _period;\n\n    public RateLimitingMiddleware(\n        RequestDelegate next,\n        IMemoryCache cache,\n        IConfiguration configuration)\n    {\n        _next = next;\n        _cache = cache;\n        _limit = configuration.GetValue&lt;int&gt;(\"RateLimit:Limit\");\n        _period = TimeSpan.FromSeconds(\n            configuration.GetValue&lt;int&gt;(\"RateLimit:PeriodSeconds\"));\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var key = $\"{context.Request.Path}-{context.Connection.RemoteIpAddress}\";\n        var counter = _cache.GetOrCreate(key, entry =&gt;\n        {\n            entry.AbsoluteExpirationRelativeToNow = _period;\n            return 0;\n        });\n\n        if (counter &gt;= _limit)\n        {\n            context.Response.StatusCode = 429;\n            return;\n        }\n\n        _cache.Set(key, counter + 1);\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/api-gateway/#4-caching","title":"4. Caching","text":"<pre><code>// Ocelot Caching Configuration\n{\n  \"Routes\": [\n    {\n      \"DownstreamPathTemplate\": \"/api/products/{everything}\",\n      \"DownstreamScheme\": \"http\",\n      \"DownstreamHostAndPorts\": [\n        {\n          \"Host\": \"productservice\",\n          \"Port\": 80\n        }\n      ],\n      \"UpstreamPathTemplate\": \"/products/{everything}\",\n      \"UpstreamHttpMethod\": [ \"GET\" ],\n      \"FileCacheOptions\": {\n        \"TtlSeconds\": 60,\n        \"Region\": \"products\"\n      }\n    }\n  ]\n}\n\n// Custom Caching Middleware\npublic class ResponseCachingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IMemoryCache _cache;\n\n    public ResponseCachingMiddleware(\n        RequestDelegate next,\n        IMemoryCache cache)\n    {\n        _next = next;\n        _cache = cache;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.Method != HttpMethods.Get)\n        {\n            await _next(context);\n            return;\n        }\n\n        var cacheKey = context.Request.Path + context.Request.QueryString;\n        if (_cache.TryGetValue(cacheKey, out var cachedResponse))\n        {\n            await context.Response.WriteAsync(cachedResponse.ToString());\n            return;\n        }\n\n        var originalBodyStream = context.Response.Body;\n        using var memoryStream = new MemoryStream();\n        context.Response.Body = memoryStream;\n\n        await _next(context);\n\n        memoryStream.Position = 0;\n        var responseBody = await new StreamReader(memoryStream).ReadToEndAsync();\n\n        _cache.Set(cacheKey, responseBody, TimeSpan.FromMinutes(5));\n\n        memoryStream.Position = 0;\n        await memoryStream.CopyToAsync(originalBodyStream);\n        context.Response.Body = originalBodyStream;\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/api-gateway/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/microservices/api-gateway/#1-guvenlik","title":"1. G\u00fcvenlik","text":"<ul> <li>SSL/TLS kullan\u0131n</li> <li>JWT authentication uygulay\u0131n</li> <li>Rate limiting uygulay\u0131n</li> <li>IP whitelisting yap\u0131n</li> </ul>"},{"location":"mid-level/microservices/api-gateway/#2-performans","title":"2. Performans","text":"<ul> <li>Response caching kullan\u0131n</li> <li>Load balancing yap\u0131n</li> <li>Circuit breaker uygulay\u0131n</li> <li>Timeout de\u011ferlerini ayarlay\u0131n</li> </ul>"},{"location":"mid-level/microservices/api-gateway/#3-monitoring","title":"3. Monitoring","text":"<ul> <li>Request/response logging yap\u0131n</li> <li>Error tracking uygulay\u0131n</li> <li>Performance metrics toplay\u0131n</li> <li>Health checks yap\u0131n</li> </ul>"},{"location":"mid-level/microservices/api-gateway/#4-scalability","title":"4. Scalability","text":"<ul> <li>Horizontal scaling yap\u0131n</li> <li>Stateless tasar\u0131m kullan\u0131n</li> <li>Service discovery kullan\u0131n</li> <li>Load balancing uygulay\u0131n</li> </ul>"},{"location":"mid-level/microservices/api-gateway/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/microservices/api-gateway/#1-api-gateway-neden-onemlidir","title":"1. API Gateway neden \u00f6nemlidir?","text":"<ul> <li>Merkezi y\u00f6netim sa\u011flar</li> <li>G\u00fcvenlik \u00f6nlemlerini tek noktada toplar</li> <li>\u0130stekleri y\u00f6nlendirir ve dengelemeyi sa\u011flar</li> <li>Monitoring ve logging'i kolayla\u015ft\u0131r\u0131r</li> </ul>"},{"location":"mid-level/microservices/api-gateway/#2-hangi-api-gateway-cozumleri-kullanlabilir","title":"2. Hangi API Gateway \u00e7\u00f6z\u00fcmleri kullan\u0131labilir?","text":"<ul> <li>Ocelot</li> <li>Kong</li> <li>Traefik</li> <li>Nginx</li> <li>AWS API Gateway</li> </ul>"},{"location":"mid-level/microservices/api-gateway/#3-api-gatewayde-hangi-guvenlik-onlemleri-alnmaldr","title":"3. API Gateway'de hangi g\u00fcvenlik \u00f6nlemleri al\u0131nmal\u0131d\u0131r?","text":"<ul> <li>SSL/TLS kullan\u0131lmal\u0131</li> <li>JWT authentication uygulanmal\u0131</li> <li>Rate limiting yap\u0131lmal\u0131</li> <li>IP whitelisting uygulanmal\u0131</li> </ul>"},{"location":"mid-level/microservices/api-gateway/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft API Gateway</li> <li>Ocelot Documentation</li> <li>Kong Documentation</li> <li>Traefik Documentation </li> </ul>"},{"location":"mid-level/microservices/circuit-breaker/","title":"Circuit Breaker","text":""},{"location":"mid-level/microservices/circuit-breaker/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Circuit Breaker, mikroservis mimarisinde hata tolerans\u0131n\u0131 art\u0131rmak i\u00e7in kullan\u0131lan bir tasar\u0131m desenidir. Bir servis ba\u015far\u0131s\u0131z oldu\u011funda, belirli bir s\u00fcre boyunca istekleri engelleyerek sistemin daha fazla hasar g\u00f6rmesini \u00f6nler.</p>"},{"location":"mid-level/microservices/circuit-breaker/#temel-ozellikler","title":"Temel \u00d6zellikler","text":""},{"location":"mid-level/microservices/circuit-breaker/#1-circuit-breaker-state-machine","title":"1. Circuit Breaker State Machine","text":"<pre><code>public enum CircuitBreakerState\n{\n    Closed,\n    Open,\n    HalfOpen\n}\n\npublic class CircuitBreaker\n{\n    private readonly int _failureThreshold;\n    private readonly TimeSpan _resetTimeout;\n    private readonly ILogger&lt;CircuitBreaker&gt; _logger;\n\n    private CircuitBreakerState _state = CircuitBreakerState.Closed;\n    private int _failureCount = 0;\n    private DateTime _lastFailureTime;\n    private readonly object _lock = new object();\n\n    public CircuitBreaker(\n        int failureThreshold,\n        TimeSpan resetTimeout,\n        ILogger&lt;CircuitBreaker&gt; logger)\n    {\n        _failureThreshold = failureThreshold;\n        _resetTimeout = resetTimeout;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; ExecuteAsync&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; action)\n    {\n        if (_state == CircuitBreakerState.Open)\n        {\n            if (DateTime.UtcNow - _lastFailureTime &gt;= _resetTimeout)\n            {\n                _state = CircuitBreakerState.HalfOpen;\n            }\n            else\n            {\n                throw new CircuitBreakerOpenException();\n            }\n        }\n\n        try\n        {\n            var result = await action();\n            OnSuccess();\n            return result;\n        }\n        catch (Exception ex)\n        {\n            OnFailure();\n            throw;\n        }\n    }\n\n    private void OnSuccess()\n    {\n        lock (_lock)\n        {\n            _state = CircuitBreakerState.Closed;\n            _failureCount = 0;\n        }\n    }\n\n    private void OnFailure()\n    {\n        lock (_lock)\n        {\n            _failureCount++;\n            _lastFailureTime = DateTime.UtcNow;\n\n            if (_failureCount &gt;= _failureThreshold)\n            {\n                _state = CircuitBreakerState.Open;\n                _logger.LogWarning(\"Circuit breaker opened\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/circuit-breaker/#2-polly-ile-circuit-breaker","title":"2. Polly ile Circuit Breaker","text":"<pre><code>// Circuit Breaker Policy\npublic class CircuitBreakerPolicy\n{\n    private readonly IAsyncPolicy&lt;HttpResponseMessage&gt; _policy;\n\n    public CircuitBreakerPolicy()\n    {\n        _policy = Policy&lt;HttpResponseMessage&gt;\n            .Handle&lt;HttpRequestException&gt;()\n            .OrResult(r =&gt; !r.IsSuccessStatusCode)\n            .CircuitBreakerAsync(\n                exceptionsAllowedBeforeBreaking: 3,\n                durationOfBreak: TimeSpan.FromSeconds(30),\n                onBreak: (ex, duration) =&gt;\n                {\n                    // Circuit a\u00e7\u0131ld\u0131\u011f\u0131nda yap\u0131lacak i\u015flemler\n                },\n                onReset: () =&gt;\n                {\n                    // Circuit kapand\u0131\u011f\u0131nda yap\u0131lacak i\u015flemler\n                });\n    }\n\n    public async Task&lt;HttpResponseMessage&gt; ExecuteAsync(\n        Func&lt;Task&lt;HttpResponseMessage&gt;&gt; action)\n    {\n        return await _policy.ExecuteAsync(action);\n    }\n}\n\n// HttpClient Factory ile Kullan\u0131m\npublic class ResilientHttpClient\n{\n    private readonly HttpClient _httpClient;\n    private readonly CircuitBreakerPolicy _circuitBreaker;\n\n    public ResilientHttpClient(\n        HttpClient httpClient,\n        CircuitBreakerPolicy circuitBreaker)\n    {\n        _httpClient = httpClient;\n        _circuitBreaker = circuitBreaker;\n    }\n\n    public async Task&lt;HttpResponseMessage&gt; GetAsync(string url)\n    {\n        return await _circuitBreaker.ExecuteAsync(\n            () =&gt; _httpClient.GetAsync(url));\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/circuit-breaker/#3-fallback-mekanizmas","title":"3. Fallback Mekanizmas\u0131","text":"<pre><code>// Fallback Policy\npublic class FallbackPolicy\n{\n    private readonly IAsyncPolicy&lt;HttpResponseMessage&gt; _policy;\n\n    public FallbackPolicy()\n    {\n        _policy = Policy&lt;HttpResponseMessage&gt;\n            .Handle&lt;Exception&gt;()\n            .FallbackAsync(\n                fallbackAction: async (context) =&gt;\n                {\n                    // Fallback yan\u0131t\u0131 d\u00f6nd\u00fcr\n                    return new HttpResponseMessage(HttpStatusCode.OK)\n                    {\n                        Content = new StringContent(\"Fallback response\")\n                    };\n                },\n                onFallbackAsync: async (response, context) =&gt;\n                {\n                    // Fallback durumunda yap\u0131lacak i\u015flemler\n                });\n    }\n\n    public async Task&lt;HttpResponseMessage&gt; ExecuteAsync(\n        Func&lt;Task&lt;HttpResponseMessage&gt;&gt; action)\n    {\n        return await _policy.ExecuteAsync(action);\n    }\n}\n\n// Circuit Breaker ve Fallback Birlikte\npublic class ResilientService\n{\n    private readonly CircuitBreakerPolicy _circuitBreaker;\n    private readonly FallbackPolicy _fallback;\n\n    public ResilientService(\n        CircuitBreakerPolicy circuitBreaker,\n        FallbackPolicy fallback)\n    {\n        _circuitBreaker = circuitBreaker;\n        _fallback = fallback;\n    }\n\n    public async Task&lt;HttpResponseMessage&gt; GetDataAsync()\n    {\n        return await _fallback.ExecuteAsync(\n            () =&gt; _circuitBreaker.ExecuteAsync(\n                () =&gt; _httpClient.GetAsync(\"api/data\")));\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/circuit-breaker/#4-monitoring-ve-logging","title":"4. Monitoring ve Logging","text":"<pre><code>// Circuit Breaker Monitor\npublic class CircuitBreakerMonitor\n{\n    private readonly ILogger&lt;CircuitBreakerMonitor&gt; _logger;\n    private readonly IMetricsCollector _metrics;\n\n    public CircuitBreakerMonitor(\n        ILogger&lt;CircuitBreakerMonitor&gt; logger,\n        IMetricsCollector metrics)\n    {\n        _logger = logger;\n        _metrics = metrics;\n    }\n\n    public void OnCircuitOpened(string serviceName)\n    {\n        _logger.LogWarning(\n            \"Circuit breaker opened for service {ServiceName}\",\n            serviceName);\n\n        _metrics.IncrementCounter(\n            \"circuit_breaker_opened\",\n            new Dictionary&lt;string, string&gt;\n            {\n                { \"service\", serviceName }\n            });\n    }\n\n    public void OnCircuitClosed(string serviceName)\n    {\n        _logger.LogInformation(\n            \"Circuit breaker closed for service {ServiceName}\",\n            serviceName);\n\n        _metrics.IncrementCounter(\n            \"circuit_breaker_closed\",\n            new Dictionary&lt;string, string&gt;\n            {\n                { \"service\", serviceName }\n            });\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/circuit-breaker/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/microservices/circuit-breaker/#1-circuit-breaker-yaplandrmas","title":"1. Circuit Breaker Yap\u0131land\u0131rmas\u0131","text":"<ul> <li>Uygun e\u015fik de\u011ferleri belirleyin</li> <li>Timeout s\u00fcrelerini ayarlay\u0131n</li> <li>Half-open state kullan\u0131n</li> <li>Monitoring ekleyin</li> </ul>"},{"location":"mid-level/microservices/circuit-breaker/#2-fallback-stratejisi","title":"2. Fallback Stratejisi","text":"<ul> <li>Anlaml\u0131 fallback yan\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcn</li> <li>Cache kullan\u0131n</li> <li>Stale data y\u00f6netin</li> <li>Graceful degradation uygulay\u0131n</li> </ul>"},{"location":"mid-level/microservices/circuit-breaker/#3-monitoring","title":"3. Monitoring","text":"<ul> <li>Circuit durumlar\u0131n\u0131 izleyin</li> <li>Metrikleri toplay\u0131n</li> <li>Alerting yap\u0131land\u0131r\u0131n</li> <li>Logging yap\u0131n</li> </ul>"},{"location":"mid-level/microservices/circuit-breaker/#4-testing","title":"4. Testing","text":"<ul> <li>Failure senaryolar\u0131n\u0131 test edin</li> <li>Timeout senaryolar\u0131n\u0131 test edin</li> <li>Recovery senaryolar\u0131n\u0131 test edin</li> <li>Load testing yap\u0131n</li> </ul>"},{"location":"mid-level/microservices/circuit-breaker/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/microservices/circuit-breaker/#1-circuit-breaker-neden-onemlidir","title":"1. Circuit Breaker neden \u00f6nemlidir?","text":"<ul> <li>Hata tolerans\u0131n\u0131 art\u0131r\u0131r</li> <li>Sistem kaynaklar\u0131n\u0131 korur</li> <li>Kaskad hatalar\u0131 \u00f6nler</li> <li>Recovery s\u00fcrecini y\u00f6netir</li> </ul>"},{"location":"mid-level/microservices/circuit-breaker/#2-circuit-breaker-ne-zaman-kullanlmaldr","title":"2. Circuit Breaker ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>D\u0131\u015f servis \u00e7a\u011fr\u0131lar\u0131nda</li> <li>Kritik i\u015flemlerde</li> <li>Y\u00fcksek y\u00fck alt\u0131nda</li> <li>Network ba\u011flant\u0131lar\u0131nda</li> </ul>"},{"location":"mid-level/microservices/circuit-breaker/#3-circuit-breakerda-hangi-parametreler-ayarlanmaldr","title":"3. Circuit Breaker'da hangi parametreler ayarlanmal\u0131d\u0131r?","text":"<ul> <li>Failure threshold</li> <li>Reset timeout</li> <li>Half-open timeout</li> <li>Sampling duration</li> </ul>"},{"location":"mid-level/microservices/circuit-breaker/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Circuit Breaker Pattern</li> <li>Polly Documentation</li> <li>Resilience Patterns</li> <li>Circuit Breaker Best Practices </li> </ul>"},{"location":"mid-level/microservices/event-sourcing/","title":"Event Sourcing","text":""},{"location":"mid-level/microservices/event-sourcing/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Event Sourcing, bir uygulaman\u0131n durumunu, ger\u00e7ekle\u015fen olaylar\u0131n (events) s\u0131ral\u0131 bir kayd\u0131 olarak saklayan bir mimari desendir. Her durum de\u011fi\u015fikli\u011fi bir olay olarak kaydedilir ve uygulaman\u0131n mevcut durumu bu olaylar\u0131n yeniden oynat\u0131lmas\u0131yla elde edilir.</p>"},{"location":"mid-level/microservices/event-sourcing/#temel-ozellikler","title":"Temel \u00d6zellikler","text":""},{"location":"mid-level/microservices/event-sourcing/#1-event-modeli","title":"1. Event Modeli","text":"<pre><code>// Base Event\npublic abstract class Event\n{\n    public Guid Id { get; set; }\n    public DateTime Timestamp { get; set; }\n    public string EventType { get; set; }\n    public int Version { get; set; }\n}\n\n// Order Events\npublic class OrderCreatedEvent : Event\n{\n    public Guid OrderId { get; set; }\n    public Guid CustomerId { get; set; }\n    public List&lt;OrderItem&gt; Items { get; set; }\n    public decimal TotalAmount { get; set; }\n}\n\npublic class OrderItemAddedEvent : Event\n{\n    public Guid OrderId { get; set; }\n    public OrderItem Item { get; set; }\n}\n\npublic class OrderStatusChangedEvent : Event\n{\n    public Guid OrderId { get; set; }\n    public OrderStatus NewStatus { get; set; }\n}\n\n// Event Store Interface\npublic interface IEventStore\n{\n    Task SaveEventsAsync(Guid aggregateId, IEnumerable&lt;Event&gt; events, int expectedVersion);\n    Task&lt;IEnumerable&lt;Event&gt;&gt; GetEventsAsync(Guid aggregateId);\n    Task&lt;IEnumerable&lt;Event&gt;&gt; GetEventsAsync(Guid aggregateId, int fromVersion);\n}\n</code></pre>"},{"location":"mid-level/microservices/event-sourcing/#2-aggregate-root","title":"2. Aggregate Root","text":"<pre><code>public class OrderAggregate\n{\n    private readonly List&lt;Event&gt; _changes = new();\n    private OrderState _state = new();\n\n    public Guid Id =&gt; _state.Id;\n    public int Version =&gt; _state.Version;\n\n    public void CreateOrder(CreateOrderCommand command)\n    {\n        var @event = new OrderCreatedEvent\n        {\n            Id = Guid.NewGuid(),\n            Timestamp = DateTime.UtcNow,\n            EventType = nameof(OrderCreatedEvent),\n            Version = _state.Version + 1,\n            OrderId = command.OrderId,\n            CustomerId = command.CustomerId,\n            Items = command.Items,\n            TotalAmount = command.TotalAmount\n        };\n\n        Apply(@event);\n        _changes.Add(@event);\n    }\n\n    public void AddItem(AddItemCommand command)\n    {\n        var @event = new OrderItemAddedEvent\n        {\n            Id = Guid.NewGuid(),\n            Timestamp = DateTime.UtcNow,\n            EventType = nameof(OrderItemAddedEvent),\n            Version = _state.Version + 1,\n            OrderId = command.OrderId,\n            Item = command.Item\n        };\n\n        Apply(@event);\n        _changes.Add(@event);\n    }\n\n    private void Apply(Event @event)\n    {\n        switch (@event)\n        {\n            case OrderCreatedEvent e:\n                _state = new OrderState\n                {\n                    Id = e.OrderId,\n                    CustomerId = e.CustomerId,\n                    Items = e.Items,\n                    TotalAmount = e.TotalAmount,\n                    Status = OrderStatus.Created,\n                    Version = e.Version\n                };\n                break;\n\n            case OrderItemAddedEvent e:\n                _state.Items.Add(e.Item);\n                _state.TotalAmount += e.Item.Price * e.Item.Quantity;\n                _state.Version = e.Version;\n                break;\n\n            case OrderStatusChangedEvent e:\n                _state.Status = e.NewStatus;\n                _state.Version = e.Version;\n                break;\n        }\n    }\n\n    public IEnumerable&lt;Event&gt; GetUncommittedChanges() =&gt; _changes;\n    public void ClearUncommittedChanges() =&gt; _changes.Clear();\n}\n</code></pre>"},{"location":"mid-level/microservices/event-sourcing/#3-event-store-implementation","title":"3. Event Store Implementation","text":"<pre><code>public class EventStore : IEventStore\n{\n    private readonly IEventRepository _repository;\n    private readonly ILogger&lt;EventStore&gt; _logger;\n\n    public EventStore(\n        IEventRepository repository,\n        ILogger&lt;EventStore&gt; logger)\n    {\n        _repository = repository;\n        _logger = logger;\n    }\n\n    public async Task SaveEventsAsync(\n        Guid aggregateId,\n        IEnumerable&lt;Event&gt; events,\n        int expectedVersion)\n    {\n        var existingEvents = await _repository.GetEventsAsync(aggregateId);\n        if (existingEvents.Any() &amp;&amp; existingEvents.Last().Version != expectedVersion)\n        {\n            throw new ConcurrencyException();\n        }\n\n        foreach (var @event in events)\n        {\n            await _repository.SaveEventAsync(@event);\n        }\n\n        _logger.LogInformation(\n            \"Saved {Count} events for aggregate {AggregateId}\",\n            events.Count(),\n            aggregateId);\n    }\n\n    public async Task&lt;IEnumerable&lt;Event&gt;&gt; GetEventsAsync(Guid aggregateId)\n    {\n        return await _repository.GetEventsAsync(aggregateId);\n    }\n\n    public async Task&lt;IEnumerable&lt;Event&gt;&gt; GetEventsAsync(\n        Guid aggregateId,\n        int fromVersion)\n    {\n        return await _repository.GetEventsAsync(aggregateId, fromVersion);\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/event-sourcing/#4-event-handlers","title":"4. Event Handlers","text":"<pre><code>public class OrderEventHandler\n{\n    private readonly IOrderRepository _orderRepository;\n    private readonly IEventPublisher _eventPublisher;\n\n    public OrderEventHandler(\n        IOrderRepository orderRepository,\n        IEventPublisher eventPublisher)\n    {\n        _orderRepository = orderRepository;\n        _eventPublisher = eventPublisher;\n    }\n\n    public async Task HandleAsync(OrderCreatedEvent @event)\n    {\n        var order = new Order\n        {\n            Id = @event.OrderId,\n            CustomerId = @event.CustomerId,\n            Items = @event.Items,\n            TotalAmount = @event.TotalAmount,\n            Status = OrderStatus.Created\n        };\n\n        await _orderRepository.SaveAsync(order);\n        await _eventPublisher.PublishAsync(@event);\n    }\n\n    public async Task HandleAsync(OrderItemAddedEvent @event)\n    {\n        var order = await _orderRepository.GetByIdAsync(@event.OrderId);\n        order.Items.Add(@event.Item);\n        order.TotalAmount += @event.Item.Price * @event.Item.Quantity;\n\n        await _orderRepository.SaveAsync(order);\n        await _eventPublisher.PublishAsync(@event);\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/event-sourcing/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/microservices/event-sourcing/#1-event-tasarm","title":"1. Event Tasar\u0131m\u0131","text":"<ul> <li>Event'leri immutable yap\u0131n</li> <li>Event'leri atomik tutun</li> <li>Event'leri anlaml\u0131 isimlendirin</li> <li>Event'leri versiyonlay\u0131n</li> </ul>"},{"location":"mid-level/microservices/event-sourcing/#2-aggregate-tasarm","title":"2. Aggregate Tasar\u0131m\u0131","text":"<ul> <li>Aggregate'leri k\u00fc\u00e7\u00fck tutun</li> <li>Business kurallar\u0131n\u0131 Aggregate'lerde uygulay\u0131n</li> <li>Event'leri do\u011fru s\u0131rada uygulay\u0131n</li> <li>Concurrency kontrol\u00fc yap\u0131n</li> </ul>"},{"location":"mid-level/microservices/event-sourcing/#3-event-store","title":"3. Event Store","text":"<ul> <li>Event'leri s\u0131ral\u0131 saklay\u0131n</li> <li>Event'leri immutable tutun</li> <li>Event'leri versiyonlay\u0131n</li> <li>Event'leri optimize edin</li> </ul>"},{"location":"mid-level/microservices/event-sourcing/#4-event-handlers_1","title":"4. Event Handlers","text":"<ul> <li>Event handler'lar\u0131 idempotent yap\u0131n</li> <li>Event handler'lar\u0131 asenkron yap\u0131n</li> <li>Event handler'lar\u0131 izole edin</li> <li>Error handling yap\u0131n</li> </ul>"},{"location":"mid-level/microservices/event-sourcing/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/microservices/event-sourcing/#1-event-sourcing-neden-onemlidir","title":"1. Event Sourcing neden \u00f6nemlidir?","text":"<ul> <li>Audit trail sa\u011flar</li> <li>Temporal query'leri destekler</li> <li>Event replay sa\u011flar</li> <li>CQRS ile uyumludur</li> </ul>"},{"location":"mid-level/microservices/event-sourcing/#2-event-sourcing-ne-zaman-kullanlmaldr","title":"2. Event Sourcing ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Audit gerektiren sistemlerde</li> <li>Temporal query gerektiren sistemlerde</li> <li>Event-driven mimarilerde</li> <li>CQRS ile birlikte</li> </ul>"},{"location":"mid-level/microservices/event-sourcing/#3-event-sourcingde-hangi-zorluklar-vardr","title":"3. Event Sourcing'de hangi zorluklar vard\u0131r?","text":"<ul> <li>Event store y\u00f6netimi</li> <li>Event versioning</li> <li>Event migration</li> <li>Performance optimization</li> </ul>"},{"location":"mid-level/microservices/event-sourcing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Event Sourcing Pattern</li> <li>Event Sourcing Best Practices</li> <li>CQRS Pattern</li> <li>Event Store Documentation </li> </ul>"},{"location":"mid-level/microservices/service-communication/","title":"Service Communication (Servis \u0130leti\u015fimi)","text":""},{"location":"mid-level/microservices/service-communication/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Mikroservisler aras\u0131 ileti\u015fim, da\u011f\u0131t\u0131k sistemlerin temel ta\u015f\u0131d\u0131r. Servisler aras\u0131nda veri al\u0131\u015fveri\u015fi ve senkronizasyon i\u00e7in farkl\u0131 ileti\u015fim modelleri kullan\u0131l\u0131r.</p>"},{"location":"mid-level/microservices/service-communication/#iletisim-modelleri","title":"\u0130leti\u015fim Modelleri","text":""},{"location":"mid-level/microservices/service-communication/#1-senkron-iletisim","title":"1. Senkron \u0130leti\u015fim","text":"<p>Do\u011frudan ve anl\u0131k yan\u0131t gerektiren ileti\u015fim t\u00fcr\u00fcd\u00fcr.</p>"},{"location":"mid-level/microservices/service-communication/#rest-api","title":"REST API","text":"<pre><code>// Order Service\npublic class OrderController : ControllerBase\n{\n    private readonly HttpClient _httpClient;\n\n    public OrderController(IHttpClientFactory httpClientFactory)\n    {\n        _httpClient = httpClientFactory.CreateClient(\"PaymentService\");\n    }\n\n    [HttpPost]\n    public async Task&lt;IActionResult&gt; CreateOrder([FromBody] CreateOrderRequest request)\n    {\n        // Payment Service'e istek g\u00f6nder\n        var paymentResponse = await _httpClient.PostAsJsonAsync(\n            \"/api/payments/process\",\n            new ProcessPaymentRequest\n            {\n                OrderId = request.OrderId,\n                Amount = request.TotalAmount\n            });\n\n        if (!paymentResponse.IsSuccessStatusCode)\n        {\n            return BadRequest(\"Payment failed\");\n        }\n\n        // Sipari\u015fi olu\u015ftur\n        return Ok();\n    }\n}\n\n// Payment Service\npublic class PaymentController : ControllerBase\n{\n    [HttpPost(\"process\")]\n    public async Task&lt;IActionResult&gt; ProcessPayment([FromBody] ProcessPaymentRequest request)\n    {\n        // \u00d6deme i\u015flemini ger\u00e7ekle\u015ftir\n        return Ok();\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/service-communication/#grpc","title":"gRPC","text":"<pre><code>// payment.proto\nsyntax = \"proto3\";\n\nservice PaymentService {\n  rpc ProcessPayment (PaymentRequest) returns (PaymentResponse);\n}\n\nmessage PaymentRequest {\n  string order_id = 1;\n  double amount = 2;\n}\n\nmessage PaymentResponse {\n  bool success = 1;\n  string message = 2;\n}\n</code></pre> <pre><code>// Order Service\npublic class OrderService\n{\n    private readonly PaymentService.PaymentServiceClient _paymentClient;\n\n    public OrderService(PaymentService.PaymentServiceClient paymentClient)\n    {\n        _paymentClient = paymentClient;\n    }\n\n    public async Task CreateOrderAsync(CreateOrderRequest request)\n    {\n        var paymentRequest = new PaymentRequest\n        {\n            OrderId = request.OrderId,\n            Amount = request.TotalAmount\n        };\n\n        var paymentResponse = await _paymentClient.ProcessPaymentAsync(paymentRequest);\n\n        if (!paymentResponse.Success)\n        {\n            throw new PaymentFailedException(paymentResponse.Message);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/service-communication/#2-asenkron-iletisim","title":"2. Asenkron \u0130leti\u015fim","text":"<p>Zaman ba\u011f\u0131ms\u0131z, mesaj tabanl\u0131 ileti\u015fim t\u00fcr\u00fcd\u00fcr.</p>"},{"location":"mid-level/microservices/service-communication/#message-queue-rabbitmq","title":"Message Queue (RabbitMQ)","text":"<pre><code>// Order Service\npublic class OrderService\n{\n    private readonly IMessagePublisher _publisher;\n\n    public OrderService(IMessagePublisher publisher)\n    {\n        _publisher = publisher;\n    }\n\n    public async Task CreateOrderAsync(CreateOrderRequest request)\n    {\n        // Sipari\u015fi olu\u015ftur\n        var order = new Order\n        {\n            Id = request.OrderId,\n            TotalAmount = request.TotalAmount\n        };\n\n        // Sipari\u015f olu\u015fturuldu mesaj\u0131n\u0131 yay\u0131nla\n        await _publisher.PublishAsync(new OrderCreatedEvent\n        {\n            OrderId = order.Id,\n            Amount = order.TotalAmount,\n            Timestamp = DateTime.UtcNow\n        });\n    }\n}\n\n// Payment Service\npublic class PaymentConsumer : IConsumer&lt;OrderCreatedEvent&gt;\n{\n    private readonly IPaymentProcessor _paymentProcessor;\n\n    public PaymentConsumer(IPaymentProcessor paymentProcessor)\n    {\n        _paymentProcessor = paymentProcessor;\n    }\n\n    public async Task Consume(ConsumeContext&lt;OrderCreatedEvent&gt; context)\n    {\n        var message = context.Message;\n\n        // \u00d6deme i\u015flemini ger\u00e7ekle\u015ftir\n        await _paymentProcessor.ProcessPaymentAsync(\n            message.OrderId,\n            message.Amount\n        );\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/service-communication/#event-sourcing","title":"Event Sourcing","text":"<pre><code>// Order Service\npublic class OrderAggregate\n{\n    private readonly List&lt;IDomainEvent&gt; _events = new();\n    private OrderState _state = new();\n\n    public void CreateOrder(CreateOrderCommand command)\n    {\n        var @event = new OrderCreatedEvent\n        {\n            OrderId = command.OrderId,\n            CustomerId = command.CustomerId,\n            Items = command.Items,\n            Timestamp = DateTime.UtcNow\n        };\n\n        Apply(@event);\n        _events.Add(@event);\n    }\n\n    private void Apply(OrderCreatedEvent @event)\n    {\n        _state = new OrderState\n        {\n            OrderId = @event.OrderId,\n            CustomerId = @event.CustomerId,\n            Items = @event.Items,\n            Status = OrderStatus.Created\n        };\n    }\n}\n\n// Payment Service\npublic class PaymentEventHandler\n{\n    private readonly IPaymentProcessor _paymentProcessor;\n\n    public PaymentEventHandler(IPaymentProcessor paymentProcessor)\n    {\n        _paymentProcessor = paymentProcessor;\n    }\n\n    public async Task Handle(OrderCreatedEvent @event)\n    {\n        await _paymentProcessor.ProcessPaymentAsync(\n            @event.OrderId,\n            @event.TotalAmount\n        );\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/service-communication/#iletisim-desenleri","title":"\u0130leti\u015fim Desenleri","text":""},{"location":"mid-level/microservices/service-communication/#1-requestresponse","title":"1. Request/Response","text":"<ul> <li>Senkron ileti\u015fim i\u00e7in kullan\u0131l\u0131r</li> <li>Anl\u0131k yan\u0131t gerektiren durumlar</li> <li>REST ve gRPC ile uygulan\u0131r</li> </ul>"},{"location":"mid-level/microservices/service-communication/#2-publishsubscribe","title":"2. Publish/Subscribe","text":"<ul> <li>Asenkron ileti\u015fim i\u00e7in kullan\u0131l\u0131r</li> <li>Birden fazla al\u0131c\u0131 olabilir</li> <li>Message Queue ile uygulan\u0131r</li> </ul>"},{"location":"mid-level/microservices/service-communication/#3-event-driven","title":"3. Event-Driven","text":"<ul> <li>Olay tabanl\u0131 ileti\u015fim</li> <li>Loose coupling sa\u011flar</li> <li>Event sourcing ile uygulan\u0131r</li> </ul>"},{"location":"mid-level/microservices/service-communication/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/microservices/service-communication/#1-api-tasarm","title":"1. API Tasar\u0131m\u0131","text":"<ul> <li>RESTful prensipleri takip edin</li> <li>API versiyonlama kullan\u0131n</li> <li>Swagger/OpenAPI dok\u00fcmantasyonu ekleyin</li> <li>Rate limiting uygulay\u0131n</li> </ul>"},{"location":"mid-level/microservices/service-communication/#2-mesajlasma","title":"2. Mesajla\u015fma","text":"<ul> <li>Mesaj format\u0131n\u0131 standardize edin</li> <li>Dead letter queue kullan\u0131n</li> <li>Retry mekanizmas\u0131 ekleyin</li> <li>Mesaj boyutunu optimize edin</li> </ul>"},{"location":"mid-level/microservices/service-communication/#3-hata-yonetimi","title":"3. Hata Y\u00f6netimi","text":"<ul> <li>Circuit breaker pattern kullan\u0131n</li> <li>Timeout de\u011ferlerini ayarlay\u0131n</li> <li>Fallback mekanizmalar\u0131 ekleyin</li> <li>Hata loglama yap\u0131n</li> </ul>"},{"location":"mid-level/microservices/service-communication/#4-guvenlik","title":"4. G\u00fcvenlik","text":"<ul> <li>SSL/TLS kullan\u0131n</li> <li>API authentication uygulay\u0131n</li> <li>Input validation yap\u0131n</li> <li>Rate limiting uygulay\u0131n</li> </ul>"},{"location":"mid-level/microservices/service-communication/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/microservices/service-communication/#1-senkron-ve-asenkron-iletisim-arasndaki-fark-nedir","title":"1. Senkron ve asenkron ileti\u015fim aras\u0131ndaki fark nedir?","text":"<ul> <li>Senkron: Anl\u0131k yan\u0131t gerektiren durumlar</li> <li>Asenkron: Zaman ba\u011f\u0131ms\u0131z, mesaj tabanl\u0131 ileti\u015fim</li> <li>Senkron: Do\u011frudan servis \u00e7a\u011fr\u0131s\u0131</li> <li>Asenkron: Mesaj kuyru\u011fu \u00fczerinden ileti\u015fim</li> </ul>"},{"location":"mid-level/microservices/service-communication/#2-hangi-iletisim-modeli-ne-zaman-kullanlmaldr","title":"2. Hangi ileti\u015fim modeli ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Senkron: Anl\u0131k yan\u0131t gerektiren i\u015flemler</li> <li>Asenkron: Zaman ba\u011f\u0131ms\u0131z i\u015flemler</li> <li>Event-driven: Loose coupling gerektiren durumlar</li> <li>Message queue: Y\u00fcksek hacimli i\u015flemler</li> </ul>"},{"location":"mid-level/microservices/service-communication/#3-servisler-aras-iletisimde-guvenlik-nasl-saglanmaldr","title":"3. Servisler aras\u0131 ileti\u015fimde g\u00fcvenlik nas\u0131l sa\u011flanmal\u0131d\u0131r?","text":"<ul> <li>SSL/TLS kullan\u0131lmal\u0131</li> <li>API authentication uygulanmal\u0131</li> <li>Input validation yap\u0131lmal\u0131</li> <li>Rate limiting uygulanmal\u0131</li> </ul>"},{"location":"mid-level/microservices/service-communication/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Service Communication</li> <li>gRPC Documentation</li> <li>RabbitMQ Documentation</li> <li>Event Sourcing Pattern </li> </ul>"},{"location":"mid-level/microservices/service-discovery/","title":"Service Discovery (Servis Ke\u015ffi)","text":""},{"location":"mid-level/microservices/service-discovery/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Service Discovery, mikroservis mimarisinde servislerin birbirlerini dinamik olarak bulabilmesini sa\u011flayan bir mekanizmad\u0131r. Servislerin konumlar\u0131n\u0131 ve durumlar\u0131n\u0131 merkezi olarak y\u00f6netir.</p>"},{"location":"mid-level/microservices/service-discovery/#temel-ozellikler","title":"Temel \u00d6zellikler","text":""},{"location":"mid-level/microservices/service-discovery/#1-servis-kayd","title":"1. Servis Kayd\u0131","text":"<pre><code>// Consul Service Registration\npublic class ConsulServiceRegistration\n{\n    private readonly IConsulClient _consulClient;\n    private readonly IConfiguration _configuration;\n\n    public ConsulServiceRegistration(\n        IConsulClient consulClient,\n        IConfiguration configuration)\n    {\n        _consulClient = consulClient;\n        _configuration = configuration;\n    }\n\n    public async Task RegisterServiceAsync()\n    {\n        var serviceId = $\"{_configuration[\"Service:Name\"]}-{Guid.NewGuid()}\";\n        var serviceRegistration = new AgentServiceRegistration\n        {\n            ID = serviceId,\n            Name = _configuration[\"Service:Name\"],\n            Address = _configuration[\"Service:Host\"],\n            Port = int.Parse(_configuration[\"Service:Port\"]),\n            Check = new AgentServiceCheck\n            {\n                HTTP = $\"http://{_configuration[\"Service:Host\"]}:{_configuration[\"Service:Port\"]}/health\",\n                Interval = TimeSpan.FromSeconds(10),\n                Timeout = TimeSpan.FromSeconds(5),\n                DeregisterCriticalServiceAfter = TimeSpan.FromMinutes(1)\n            }\n        };\n\n        await _consulClient.Agent.ServiceRegister(serviceRegistration);\n    }\n}\n\n// Health Check Endpoint\npublic class HealthCheckController : ControllerBase\n{\n    [HttpGet(\"health\")]\n    public IActionResult Check()\n    {\n        return Ok(new { status = \"healthy\" });\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/service-discovery/#2-servis-kesfi","title":"2. Servis Ke\u015ffi","text":"<pre><code>// Consul Service Discovery\npublic class ConsulServiceDiscovery\n{\n    private readonly IConsulClient _consulClient;\n\n    public ConsulServiceDiscovery(IConsulClient consulClient)\n    {\n        _consulClient = consulClient;\n    }\n\n    public async Task&lt;string&gt; GetServiceUrlAsync(string serviceName)\n    {\n        var services = await _consulClient.Health.Service(serviceName);\n        if (!services.Response.Any())\n        {\n            throw new ServiceNotFoundException(serviceName);\n        }\n\n        var service = services.Response.First();\n        return $\"http://{service.Service.Address}:{service.Service.Port}\";\n    }\n}\n\n// Service Discovery Middleware\npublic class ServiceDiscoveryMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IServiceDiscovery _serviceDiscovery;\n\n    public ServiceDiscoveryMiddleware(\n        RequestDelegate next,\n        IServiceDiscovery serviceDiscovery)\n    {\n        _next = next;\n        _serviceDiscovery = serviceDiscovery;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var serviceName = context.Request.Headers[\"X-Service-Name\"];\n        if (!string.IsNullOrEmpty(serviceName))\n        {\n            try\n            {\n                var serviceUrl = await _serviceDiscovery.GetServiceUrlAsync(serviceName);\n                context.Request.Headers[\"X-Service-Url\"] = serviceUrl;\n            }\n            catch (ServiceNotFoundException)\n            {\n                context.Response.StatusCode = 503;\n                return;\n            }\n        }\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/service-discovery/#3-health-checking","title":"3. Health Checking","text":"<pre><code>// Health Check Service\npublic class HealthCheckService : IHealthCheckService\n{\n    private readonly IEnumerable&lt;IHealthCheck&gt; _healthChecks;\n\n    public HealthCheckService(IEnumerable&lt;IHealthCheck&gt; healthChecks)\n    {\n        _healthChecks = healthChecks;\n    }\n\n    public async Task&lt;HealthCheckResult&gt; CheckHealthAsync()\n    {\n        var results = new List&lt;HealthCheckResult&gt;();\n\n        foreach (var healthCheck in _healthChecks)\n        {\n            try\n            {\n                var result = await healthCheck.CheckHealthAsync();\n                results.Add(result);\n            }\n            catch (Exception ex)\n            {\n                results.Add(new HealthCheckResult(\n                    healthCheck.Name,\n                    HealthStatus.Unhealthy,\n                    ex.Message));\n            }\n        }\n\n        var status = results.All(r =&gt; r.Status == HealthStatus.Healthy)\n            ? HealthStatus.Healthy\n            : HealthStatus.Unhealthy;\n\n        return new HealthCheckResult(status, results);\n    }\n}\n\n// Database Health Check\npublic class DatabaseHealthCheck : IHealthCheck\n{\n    private readonly IDbConnection _dbConnection;\n\n    public DatabaseHealthCheck(IDbConnection dbConnection)\n    {\n        _dbConnection = dbConnection;\n    }\n\n    public async Task&lt;HealthCheckResult&gt; CheckHealthAsync()\n    {\n        try\n        {\n            await _dbConnection.OpenAsync();\n            await _dbConnection.CloseAsync();\n            return new HealthCheckResult(\"Database\", HealthStatus.Healthy);\n        }\n        catch (Exception ex)\n        {\n            return new HealthCheckResult(\n                \"Database\",\n                HealthStatus.Unhealthy,\n                ex.Message);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/service-discovery/#4-load-balancing","title":"4. Load Balancing","text":"<pre><code>// Load Balancer\npublic class RoundRobinLoadBalancer : ILoadBalancer\n{\n    private readonly IServiceDiscovery _serviceDiscovery;\n    private readonly ConcurrentDictionary&lt;string, int&gt; _serviceIndices = new();\n\n    public RoundRobinLoadBalancer(IServiceDiscovery serviceDiscovery)\n    {\n        _serviceDiscovery = serviceDiscovery;\n    }\n\n    public async Task&lt;string&gt; GetServiceUrlAsync(string serviceName)\n    {\n        var services = await _serviceDiscovery.GetServicesAsync(serviceName);\n        if (!services.Any())\n        {\n            throw new ServiceNotFoundException(serviceName);\n        }\n\n        var index = _serviceIndices.AddOrUpdate(\n            serviceName,\n            0,\n            (_, current) =&gt; (current + 1) % services.Count);\n\n        return services[index];\n    }\n}\n\n// Load Balancing Middleware\npublic class LoadBalancingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILoadBalancer _loadBalancer;\n\n    public LoadBalancingMiddleware(\n        RequestDelegate next,\n        ILoadBalancer loadBalancer)\n    {\n        _next = next;\n        _loadBalancer = loadBalancer;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var serviceName = context.Request.Headers[\"X-Service-Name\"];\n        if (!string.IsNullOrEmpty(serviceName))\n        {\n            try\n            {\n                var serviceUrl = await _loadBalancer.GetServiceUrlAsync(serviceName);\n                context.Request.Headers[\"X-Service-Url\"] = serviceUrl;\n            }\n            catch (ServiceNotFoundException)\n            {\n                context.Response.StatusCode = 503;\n                return;\n            }\n        }\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"mid-level/microservices/service-discovery/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/microservices/service-discovery/#1-servis-kayd_1","title":"1. Servis Kayd\u0131","text":"<ul> <li>Otomatik kay\u0131t yap\u0131n</li> <li>Health check ekleyin</li> <li>Deregistration yap\u0131n</li> <li>Metadata ekleyin</li> </ul>"},{"location":"mid-level/microservices/service-discovery/#2-servis-kesfi_1","title":"2. Servis Ke\u015ffi","text":"<ul> <li>Caching kullan\u0131n</li> <li>Fallback mekanizmas\u0131 ekleyin</li> <li>Timeout de\u011ferlerini ayarlay\u0131n</li> <li>Retry mekanizmas\u0131 ekleyin</li> </ul>"},{"location":"mid-level/microservices/service-discovery/#3-health-checking_1","title":"3. Health Checking","text":"<ul> <li>D\u00fczenli kontrol yap\u0131n</li> <li>Kritik servisleri izleyin</li> <li>Detayl\u0131 raporlama yap\u0131n</li> <li>Alerting ekleyin</li> </ul>"},{"location":"mid-level/microservices/service-discovery/#4-load-balancing_1","title":"4. Load Balancing","text":"<ul> <li>Farkl\u0131 stratejiler kullan\u0131n</li> <li>Session affinity uygulay\u0131n</li> <li>Circuit breaker ekleyin</li> <li>Monitoring yap\u0131n</li> </ul>"},{"location":"mid-level/microservices/service-discovery/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/microservices/service-discovery/#1-service-discovery-neden-onemlidir","title":"1. Service Discovery neden \u00f6nemlidir?","text":"<ul> <li>Dinamik servis bulmay\u0131 sa\u011flar</li> <li>Y\u00fck dengelemeyi kolayla\u015ft\u0131r\u0131r</li> <li>Servis izolasyonunu sa\u011flar</li> <li>Scaling'i kolayla\u015ft\u0131r\u0131r</li> </ul>"},{"location":"mid-level/microservices/service-discovery/#2-hangi-service-discovery-cozumleri-kullanlabilir","title":"2. Hangi Service Discovery \u00e7\u00f6z\u00fcmleri kullan\u0131labilir?","text":"<ul> <li>Consul</li> <li>Eureka</li> <li>etcd</li> <li>ZooKeeper</li> <li>Kubernetes Service Discovery</li> </ul>"},{"location":"mid-level/microservices/service-discovery/#3-service-discoveryde-hangi-guvenlik-onlemleri-alnmaldr","title":"3. Service Discovery'de hangi g\u00fcvenlik \u00f6nlemleri al\u0131nmal\u0131d\u0131r?","text":"<ul> <li>SSL/TLS kullan\u0131lmal\u0131</li> <li>Authentication uygulanmal\u0131</li> <li>Authorization yap\u0131lmal\u0131</li> <li>Rate limiting uygulanmal\u0131</li> </ul>"},{"location":"mid-level/microservices/service-discovery/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Service Discovery</li> <li>Consul Documentation</li> <li>Eureka Documentation</li> <li>Kubernetes Service Discovery </li> </ul>"},{"location":"mid-level/monitoring/alerting/","title":"Alerting","text":""},{"location":"mid-level/monitoring/alerting/#giris","title":"Giri\u015f","text":"<p>Alerting, sistem durumu, performans ve business metrics'lerde anormal durumlar\u0131 tespit eden ve ilgili ki\u015filere bildirim g\u00f6nderen sistemdir. Mid-level geli\u015ftiriciler i\u00e7in alerting'i anlamak, proactive monitoring, incident response ve system reliability i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, alert rules, notification systems, escalation procedures ve alert management konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/monitoring/alerting/#alert-rules-engine","title":"Alert Rules Engine","text":""},{"location":"mid-level/monitoring/alerting/#1-alert-rule-engine","title":"1. Alert Rule Engine","text":"<p>Alert kurallar\u0131n\u0131 y\u00f6neten ve de\u011ferlendiren engine.</p> <pre><code>public class AlertRuleEngine : IAlertRuleEngine\n{\n    private readonly ILogger&lt;AlertRuleEngine&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IAlertRuleRepository _ruleRepository;\n    private readonly IAlertNotificationService _notificationService;\n    private readonly Dictionary&lt;string, AlertRule&gt; _activeRules;\n    private readonly Timer _evaluationTimer;\n\n    public AlertRuleEngine(ILogger&lt;AlertRuleEngine&gt; logger, IConfiguration configuration,\n        IAlertRuleRepository ruleRepository, IAlertNotificationService notificationService)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _ruleRepository = ruleRepository;\n        _notificationService = notificationService;\n        _activeRules = new Dictionary&lt;string, AlertRule&gt;();\n\n        var evaluationInterval = _configuration.GetValue&lt;int&gt;(\"Alerting:EvaluationIntervalSeconds\", 30);\n        _evaluationTimer = new Timer(EvaluateRules, null, TimeSpan.Zero, TimeSpan.FromSeconds(evaluationInterval));\n    }\n\n    public async Task InitializeAsync()\n    {\n        try\n        {\n            var rules = await _ruleRepository.GetActiveRulesAsync();\n\n            foreach (var rule in rules)\n            {\n                _activeRules[rule.Id] = rule;\n                _logger.LogInformation(\"Loaded alert rule: {RuleName}\", rule.Name);\n            }\n\n            _logger.LogInformation(\"Alert rule engine initialized with {Count} rules\", _activeRules.Count);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error initializing alert rule engine\");\n        }\n    }\n\n    public async Task AddRuleAsync(AlertRule rule)\n    {\n        try\n        {\n            await _ruleRepository.SaveRuleAsync(rule);\n            _activeRules[rule.Id] = rule;\n\n            _logger.LogInformation(\"Alert rule added: {RuleName}\", rule.Name);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error adding alert rule: {RuleName}\", rule.Name);\n        }\n    }\n\n    public async Task UpdateRuleAsync(AlertRule rule)\n    {\n        try\n        {\n            await _ruleRepository.SaveRuleAsync(rule);\n            _activeRules[rule.Id] = rule;\n\n            _logger.LogInformation(\"Alert rule updated: {RuleName}\", rule.Name);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating alert rule: {RuleName}\", rule.Name);\n        }\n    }\n\n    public async Task RemoveRuleAsync(string ruleId)\n    {\n        try\n        {\n            await _ruleRepository.DeleteRuleAsync(ruleId);\n            _activeRules.Remove(ruleId);\n\n            _logger.LogInformation(\"Alert rule removed: {RuleId}\", ruleId);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error removing alert rule: {RuleId}\", ruleId);\n        }\n    }\n\n    private async void EvaluateRules(object state)\n    {\n        try\n        {\n            foreach (var rule in _activeRules.Values)\n            {\n                if (rule.IsEnabled &amp;&amp; ShouldEvaluateRule(rule))\n                {\n                    await EvaluateRuleAsync(rule);\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error evaluating alert rules\");\n        }\n    }\n\n    private bool ShouldEvaluateRule(AlertRule rule)\n    {\n        if (rule.LastEvaluation.HasValue)\n        {\n            var timeSinceLastEvaluation = DateTime.UtcNow - rule.LastEvaluation.Value;\n            return timeSinceLastEvaluation &gt;= rule.EvaluationInterval;\n        }\n\n        return true;\n    }\n\n    private async Task EvaluateRuleAsync(AlertRule rule)\n    {\n        try\n        {\n            var evaluationResult = await EvaluateConditionAsync(rule.Condition);\n\n            if (evaluationResult.IsTriggered)\n            {\n                await HandleAlertTriggeredAsync(rule, evaluationResult);\n            }\n            else if (rule.IsActive)\n            {\n                await HandleAlertResolvedAsync(rule, evaluationResult);\n            }\n\n            // Update last evaluation time\n            rule.LastEvaluation = DateTime.UtcNow;\n            await _ruleRepository.SaveRuleAsync(rule);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error evaluating rule: {RuleName}\", rule.Name);\n        }\n    }\n\n    private async Task&lt;AlertEvaluationResult&gt; EvaluateConditionAsync(AlertCondition condition)\n    {\n        try\n        {\n            var result = new AlertEvaluationResult();\n\n            switch (condition.Type)\n            {\n                case AlertConditionType.Threshold:\n                    result = await EvaluateThresholdConditionAsync(condition);\n                    break;\n                case AlertConditionType.Anomaly:\n                    result = await EvaluateAnomalyConditionAsync(condition);\n                    break;\n                case AlertConditionType.Trend:\n                    result = await EvaluateTrendConditionAsync(condition);\n                    break;\n                case AlertConditionType.Custom:\n                    result = await EvaluateCustomConditionAsync(condition);\n                    break;\n            }\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error evaluating alert condition\");\n            return new AlertEvaluationResult { IsTriggered = false, Error = ex.Message };\n        }\n    }\n\n    private async Task&lt;AlertEvaluationResult&gt; EvaluateThresholdConditionAsync(AlertCondition condition)\n    {\n        var result = new AlertEvaluationResult();\n\n        try\n        {\n            var currentValue = await GetMetricValueAsync(condition.MetricName);\n            var threshold = condition.Threshold;\n            var operatorType = condition.Operator;\n\n            bool isTriggered = operatorType switch\n            {\n                AlertOperator.GreaterThan =&gt; currentValue &gt; threshold,\n                AlertOperator.GreaterThanOrEqual =&gt; currentValue &gt;= threshold,\n                AlertOperator.LessThan =&gt; currentValue &lt; threshold,\n                AlertOperator.LessThanOrEqual =&gt; currentValue &lt;= threshold,\n                AlertOperator.Equal =&gt; Math.Abs(currentValue - threshold) &lt; 0.001,\n                AlertOperator.NotEqual =&gt; Math.Abs(currentValue - threshold) &gt;= 0.001,\n                _ =&gt; false\n            };\n\n            result.IsTriggered = isTriggered;\n            result.CurrentValue = currentValue;\n            result.Threshold = threshold;\n            result.Operator = operatorType;\n\n            if (isTriggered)\n            {\n                result.Message = $\"Metric {condition.MetricName} ({currentValue}) {operatorType} {threshold}\";\n            }\n        }\n        catch (Exception ex)\n        {\n            result.Error = ex.Message;\n        }\n\n        return result;\n    }\n\n    private async Task&lt;double&gt; GetMetricValueAsync(string metricName)\n    {\n        // This would typically integrate with your metrics collection system\n        // For demonstration, return a random value\n        await Task.Delay(10);\n        return new Random().NextDouble() * 100;\n    }\n\n    private async Task HandleAlertTriggeredAsync(AlertRule rule, AlertEvaluationResult result)\n    {\n        try\n        {\n            if (!rule.IsActive)\n            {\n                rule.IsActive = true;\n                rule.TriggeredAt = DateTime.UtcNow;\n                rule.TriggerCount++;\n\n                await _ruleRepository.SaveRuleAsync(rule);\n\n                var alert = new Alert\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    RuleId = rule.Id,\n                    RuleName = rule.Name,\n                    Severity = rule.Severity,\n                    Message = result.Message,\n                    CurrentValue = result.CurrentValue,\n                    Threshold = result.Threshold,\n                    TriggeredAt = DateTime.UtcNow,\n                    Status = AlertStatus.Active\n                };\n\n                await _notificationService.SendAlertAsync(alert);\n\n                _logger.LogWarning(\"Alert triggered: {RuleName}, Message: {Message}\", rule.Name, result.Message);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error handling alert trigger: {RuleName}\", rule.Name);\n        }\n    }\n\n    private async Task HandleAlertResolvedAsync(AlertRule rule, AlertEvaluationResult result)\n    {\n        try\n        {\n            if (rule.IsActive)\n            {\n                rule.IsActive = false;\n                rule.ResolvedAt = DateTime.UtcNow;\n\n                await _ruleRepository.SaveRuleAsync(rule);\n\n                var resolution = new AlertResolution\n                {\n                    AlertId = rule.Id,\n                    RuleName = rule.Name,\n                    ResolvedAt = DateTime.UtcNow,\n                    ResolutionMessage = \"Alert condition no longer met\"\n                };\n\n                await _notificationService.SendResolutionAsync(resolution);\n\n                _logger.LogInformation(\"Alert resolved: {RuleName}\", rule.Name);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error handling alert resolution: {RuleName}\", rule.Name);\n        }\n    }\n\n    public void Dispose()\n    {\n        _evaluationTimer?.Dispose();\n    }\n}\n\npublic interface IAlertRuleEngine\n{\n    Task InitializeAsync();\n    Task AddRuleAsync(AlertRule rule);\n    Task UpdateRuleAsync(AlertRule rule);\n    Task RemoveRuleAsync(string ruleId);\n}\n\npublic class AlertRule\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public AlertSeverity Severity { get; set; }\n    public AlertCondition Condition { get; set; }\n    public TimeSpan EvaluationInterval { get; set; }\n    public bool IsEnabled { get; set; } = true;\n    public bool IsActive { get; set; } = false;\n    public DateTime? TriggeredAt { get; set; }\n    public DateTime? ResolvedAt { get; set; }\n    public DateTime? LastEvaluation { get; set; }\n    public int TriggerCount { get; set; } = 0;\n    public List&lt;string&gt; NotificationChannels { get; set; } = new();\n    public List&lt;string&gt; EscalationRules { get; set; } = new();\n}\n\npublic class AlertCondition\n{\n    public AlertConditionType Type { get; set; }\n    public string MetricName { get; set; }\n    public double Threshold { get; set; }\n    public AlertOperator Operator { get; set; }\n    public TimeSpan? TimeWindow { get; set; }\n    public string CustomExpression { get; set; }\n}\n\npublic class AlertEvaluationResult\n{\n    public bool IsTriggered { get; set; }\n    public double CurrentValue { get; set; }\n    public double Threshold { get; set; }\n    public AlertOperator Operator { get; set; }\n    public string Message { get; set; }\n    public string Error { get; set; }\n}\n\npublic enum AlertConditionType\n{\n    Threshold,\n    Anomaly,\n    Trend,\n    Custom\n}\n\npublic enum AlertOperator\n{\n    GreaterThan,\n    GreaterThanOrEqual,\n    LessThan,\n    LessThanOrEqual,\n    Equal,\n    NotEqual\n}\n\npublic enum AlertSeverity\n{\n    Low,\n    Medium,\n    High,\n    Critical\n}\n</code></pre>"},{"location":"mid-level/monitoring/alerting/#2-notification-service","title":"2. Notification Service","text":"<p>Alert bildirimlerini g\u00f6nderen servis.</p> <pre><code>public class AlertNotificationService : IAlertNotificationService\n{\n    private readonly ILogger&lt;AlertNotificationService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IEmailService _emailService;\n    private readonly ISlackService _slackService;\n    private readonly ISmsService _smsService;\n    private readonly IWebhookService _webhookService;\n\n    public AlertNotificationService(ILogger&lt;AlertNotificationService&gt; logger, IConfiguration configuration,\n        IEmailService emailService, ISlackService slackService, ISmsService smsService, IWebhookService webhookService)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _emailService = emailService;\n        _slackService = slackService;\n        _smsService = smsService;\n        _webhookService = webhookService;\n    }\n\n    public async Task SendAlertAsync(Alert alert)\n    {\n        try\n        {\n            _logger.LogInformation(\"Sending alert notification: {RuleName}, Severity: {Severity}\", \n                alert.RuleName, alert.Severity);\n\n            var notificationTasks = new List&lt;Task&gt;();\n\n            // Send to all configured channels\n            if (ShouldSendEmail(alert))\n            {\n                notificationTasks.Add(SendEmailAlertAsync(alert));\n            }\n\n            if (ShouldSendSlack(alert))\n            {\n                notificationTasks.Add(SendSlackAlertAsync(alert));\n            }\n\n            if (ShouldSendSms(alert))\n            {\n                notificationTasks.Add(SendSmsAlertAsync(alert));\n            }\n\n            if (ShouldSendWebhook(alert))\n            {\n                notificationTasks.Add(SendWebhookAlertAsync(alert));\n            }\n\n            await Task.WhenAll(notificationTasks);\n\n            _logger.LogInformation(\"Alert notification sent successfully: {RuleName}\", alert.RuleName);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending alert notification: {RuleName}\", alert.RuleName);\n        }\n    }\n\n    public async Task SendResolutionAsync(AlertResolution resolution)\n    {\n        try\n        {\n            _logger.LogInformation(\"Sending resolution notification: {RuleName}\", resolution.RuleName);\n\n            var notificationTasks = new List&lt;Task&gt;();\n\n            if (ShouldSendEmail(null))\n            {\n                notificationTasks.Add(SendEmailResolutionAsync(resolution));\n            }\n\n            if (ShouldSendSlack(null))\n            {\n                notificationTasks.Add(SendSlackResolutionAsync(resolution));\n            }\n\n            await Task.WhenAll(notificationTasks);\n\n            _logger.LogInformation(\"Resolution notification sent successfully: {RuleName}\", resolution.RuleName);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending resolution notification: {RuleName}\", resolution.RuleName);\n        }\n    }\n\n    private bool ShouldSendEmail(Alert alert)\n    {\n        var emailEnabled = _configuration.GetValue&lt;bool&gt;(\"Notifications:Email:Enabled\", true);\n        var severityThreshold = _configuration.GetValue&lt;AlertSeverity&gt;(\"Notifications:Email:MinSeverity\", AlertSeverity.Low);\n\n        return emailEnabled &amp;&amp; (alert?.Severity &gt;= severityThreshold || alert == null);\n    }\n\n    private bool ShouldSendSlack(Alert alert)\n    {\n        var slackEnabled = _configuration.GetValue&lt;bool&gt;(\"Notifications:Slack:Enabled\", true);\n        var severityThreshold = _configuration.GetValue&lt;AlertSeverity&gt;(\"Notifications:Slack:MinSeverity\", AlertSeverity.Medium);\n\n        return slackEnabled &amp;&amp; (alert?.Severity &gt;= severityThreshold || alert == null);\n    }\n\n    private bool ShouldSendSms(Alert alert)\n    {\n        var smsEnabled = _configuration.GetValue&lt;bool&gt;(\"Notifications:Sms:Enabled\", false);\n        var severityThreshold = _configuration.GetValue&lt;AlertSeverity&gt;(\"Notifications:Sms:MinSeverity\", AlertSeverity.High);\n\n        return smsEnabled &amp;&amp; alert?.Severity &gt;= severityThreshold;\n    }\n\n    private bool ShouldSendWebhook(Alert alert)\n    {\n        var webhookEnabled = _configuration.GetValue&lt;bool&gt;(\"Notifications:Webhook:Enabled\", false);\n        var severityThreshold = _configuration.GetValue&lt;AlertSeverity&gt;(\"Notifications:Webhook:MinSeverity\", AlertSeverity.Medium);\n\n        return webhookEnabled &amp;&amp; (alert?.Severity &gt;= severityThreshold || alert == null);\n    }\n\n    private async Task SendEmailAlertAsync(Alert alert)\n    {\n        try\n        {\n            var subject = $\"[{alert.Severity}] Alert: {alert.RuleName}\";\n            var body = GenerateEmailBody(alert);\n            var recipients = GetEmailRecipients(alert.Severity);\n\n            await _emailService.SendEmailAsync(recipients, subject, body);\n\n            _logger.LogDebug(\"Email alert sent: {RuleName}\", alert.RuleName);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending email alert: {RuleName}\", alert.RuleName);\n        }\n    }\n\n    private async Task SendSlackAlertAsync(Alert alert)\n    {\n        try\n        {\n            var message = GenerateSlackMessage(alert);\n            var channel = GetSlackChannel(alert.Severity);\n\n            await _slackService.SendMessageAsync(channel, message);\n\n            _logger.LogDebug(\"Slack alert sent: {RuleName}\", alert.RuleName);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending Slack alert: {RuleName}\", alert.RuleName);\n        }\n    }\n\n    private async Task SendSmsAlertAsync(Alert alert)\n    {\n        try\n        {\n            var message = GenerateSmsMessage(alert);\n            var recipients = GetSmsRecipients(alert.Severity);\n\n            foreach (var recipient in recipients)\n            {\n                await _smsService.SendSmsAsync(recipient, message);\n            }\n\n            _logger.LogDebug(\"SMS alert sent: {RuleName}\", alert.RuleName);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending SMS alert: {RuleName}\", alert.RuleName);\n        }\n    }\n\n    private async Task SendWebhookAlertAsync(Alert alert)\n    {\n        try\n        {\n            var payload = GenerateWebhookPayload(alert);\n            var webhookUrl = _configuration[\"Notifications:Webhook:Url\"];\n\n            await _webhookService.SendWebhookAsync(webhookUrl, payload);\n\n            _logger.LogDebug(\"Webhook alert sent: {RuleName}\", alert.RuleName);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending webhook alert: {RuleName}\", alert.RuleName);\n        }\n    }\n\n    private string GenerateEmailBody(Alert alert)\n    {\n        return $@\"\nAlert Details:\n==============\nRule Name: {alert.RuleName}\nSeverity: {alert.Severity}\nMessage: {alert.Message}\nCurrent Value: {alert.CurrentValue}\nThreshold: {alert.Threshold}\nTriggered At: {alert.TriggeredAt:yyyy-MM-dd HH:mm:ss UTC}\n\nPlease investigate this issue immediately.\n\";\n    }\n\n    private string GenerateSlackMessage(Alert alert)\n    {\n        var emoji = alert.Severity switch\n        {\n            AlertSeverity.Low =&gt; \":information_source:\",\n            AlertSeverity.Medium =&gt; \":warning:\",\n            AlertSeverity.High =&gt; \":rotating_light:\",\n            AlertSeverity.Critical =&gt; \":fire:\",\n            _ =&gt; \":warning:\"\n        };\n\n        return $\"{emoji} *[{alert.Severity}] Alert: {alert.RuleName}*\\n{alert.Message}\\nTriggered at {alert.TriggeredAt:HH:mm:ss UTC}\";\n    }\n\n    private string GenerateSmsMessage(Alert alert)\n    {\n        return $\"ALERT: {alert.RuleName} - {alert.Message}\";\n    }\n\n    private object GenerateWebhookPayload(Alert alert)\n    {\n        return new\n        {\n            alert_type = \"alert\",\n            rule_name = alert.RuleName,\n            severity = alert.Severity.ToString(),\n            message = alert.Message,\n            current_value = alert.CurrentValue,\n            threshold = alert.Threshold,\n            triggered_at = alert.TriggeredAt,\n            status = alert.Status.ToString()\n        };\n    }\n\n    private List&lt;string&gt; GetEmailRecipients(AlertSeverity severity)\n    {\n        var baseRecipients = _configuration.GetSection(\"Notifications:Email:Recipients\").Get&lt;string[]&gt;() ?? new string[0];\n        var severityRecipients = _configuration.GetSection($\"Notifications:Email:SeverityRecipients:{severity}\").Get&lt;string[]&gt;() ?? new string[0];\n\n        return baseRecipients.Concat(severityRecipients).Distinct().ToList();\n    }\n\n    private string GetSlackChannel(AlertSeverity severity)\n    {\n        return _configuration[$\"Notifications:Slack:Channels:{severity}\"] ?? \n               _configuration[\"Notifications:Slack:DefaultChannel\"] ?? \n               \"#alerts\";\n    }\n\n    private List&lt;string&gt; GetSmsRecipients(AlertSeverity severity)\n    {\n        return _configuration.GetSection($\"Notifications:Sms:Recipients:{severity}\").Get&lt;string[]&gt;()?.ToList() ?? new List&lt;string&gt;();\n    }\n\n    // Resolution notification methods\n    private async Task SendEmailResolutionAsync(AlertResolution resolution)\n    {\n        var subject = $\"Resolved: {resolution.RuleName}\";\n        var body = $\"Alert {resolution.RuleName} has been resolved at {resolution.ResolvedAt:yyyy-MM-dd HH:mm:ss UTC}\";\n        var recipients = GetEmailRecipients(AlertSeverity.Low);\n\n        await _emailService.SendEmailAsync(recipients, subject, body);\n    }\n\n    private async Task SendSlackResolutionAsync(AlertResolution resolution)\n    {\n        var message = $\":white_check_mark: *Resolved: {resolution.RuleName}*\\nAlert has been resolved at {resolution.ResolvedAt:HH:mm:ss UTC}\";\n        var channel = GetSlackChannel(AlertSeverity.Low);\n\n        await _slackService.SendMessageAsync(channel, message);\n    }\n}\n\npublic interface IAlertNotificationService\n{\n    Task SendAlertAsync(Alert alert);\n    Task SendResolutionAsync(AlertResolution resolution);\n}\n\npublic class Alert\n{\n    public string Id { get; set; }\n    public string RuleId { get; set; }\n    public string RuleName { get; set; }\n    public AlertSeverity Severity { get; set; }\n    public string Message { get; set; }\n    public double CurrentValue { get; set; }\n    public double Threshold { get; set; }\n    public DateTime TriggeredAt { get; set; }\n    public AlertStatus Status { get; set; }\n}\n\npublic class AlertResolution\n{\n    public string AlertId { get; set; }\n    public string RuleName { get; set; }\n    public DateTime ResolvedAt { get; set; }\n    public string ResolutionMessage { get; set; }\n}\n\npublic enum AlertStatus\n{\n    Active,\n    Acknowledged,\n    Resolved\n}\n</code></pre>"},{"location":"mid-level/monitoring/alerting/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/monitoring/alerting/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Alerting nedir?</li> <li> <p>Cevap: Anormal durumlar\u0131 tespit eden ve bildirim g\u00f6nderen sistem.</p> </li> <li> <p>Alert rule nedir?</p> </li> <li> <p>Cevap: Alert ko\u015fullar\u0131n\u0131 tan\u0131mlayan kurallar.</p> </li> <li> <p>Alert severity nedir?</p> </li> <li> <p>Cevap: Alert'in \u00f6nem derecesi (Low, Medium, High, Critical).</p> </li> <li> <p>Escalation nedir?</p> </li> <li> <p>Cevap: Alert'e yan\u0131t verilmedi\u011finde \u00fcst seviyeye bildirim g\u00f6nderme.</p> </li> <li> <p>Alert fatigue nedir?</p> </li> <li>Cevap: \u00c7ok fazla alert'ten dolay\u0131 \u00f6nemli olanlar\u0131 g\u00f6zden ka\u00e7\u0131rma.</li> </ol>"},{"location":"mid-level/monitoring/alerting/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Alert rules nas\u0131l implement edilir?</li> <li> <p>Cevap: Rule engine, condition evaluation, threshold checking.</p> </li> <li> <p>Notification channels nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap: Email, Slack, SMS, Webhook, multiple providers.</p> </li> <li> <p>Alert correlation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Related alerts grouping, root cause analysis.</p> </li> <li> <p>Alert suppression nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Duplicate detection, time-based suppression.</p> </li> <li> <p>Alert dashboard nas\u0131l tasarlan\u0131r?</p> </li> <li>Cevap: Real-time monitoring, status overview, trend analysis.</li> </ol>"},{"location":"mid-level/monitoring/alerting/#best-practices","title":"Best Practices","text":"<ol> <li>Alert Design</li> <li>Meaningful thresholds belirleyin</li> <li>False positive'leri minimize edin</li> <li>Clear messages yaz\u0131n</li> <li> <p>Appropriate severity levels kullan\u0131n</p> </li> <li> <p>Notification Management</p> </li> <li>Multiple channels implement edin</li> <li>Escalation procedures tan\u0131mlay\u0131n</li> <li>Recipient groups organize edin</li> <li> <p>Quiet hours configure edin</p> </li> <li> <p>Performance Optimization</p> </li> <li>Efficient evaluation implement edin</li> <li>Rate limiting uygulay\u0131n</li> <li>Caching strategies kullan\u0131n</li> <li> <p>Background processing yap\u0131n</p> </li> <li> <p>Alert Lifecycle</p> </li> <li>Acknowledgment workflow implement edin</li> <li>Resolution tracking yap\u0131n</li> <li>Post-incident analysis ekleyin</li> <li> <p>Continuous improvement sa\u011flay\u0131n</p> </li> <li> <p>Integration &amp; Monitoring</p> </li> <li>Metrics collection ekleyin</li> <li>Performance monitoring yap\u0131n</li> <li>Error handling implement edin</li> <li>Testing strategies ekleyin</li> </ol>"},{"location":"mid-level/monitoring/alerting/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Alerting Best Practices</li> <li>Alert Rules</li> <li>Notification Channels</li> <li>Alert Management</li> <li>Escalation Procedures</li> </ul>"},{"location":"mid-level/monitoring/dashboard-creation/","title":"Dashboard Creation","text":""},{"location":"mid-level/monitoring/dashboard-creation/#giris","title":"Giri\u015f","text":"<p>Dashboard Creation, monitoring ve observability sistemlerinde verileri g\u00f6rsel olarak sunan ve analiz eden aray\u00fczler olu\u015fturma s\u00fcrecidir. Mid-level geli\u015ftiriciler i\u00e7in dashboard creation'\u0131 anlamak, data visualization, real-time monitoring ve business intelligence i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, dashboard design, widget implementation, data binding ve real-time updates konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/monitoring/dashboard-creation/#dashboard-framework","title":"Dashboard Framework","text":""},{"location":"mid-level/monitoring/dashboard-creation/#1-dashboard-engine","title":"1. Dashboard Engine","text":"<p>Dashboard'lar\u0131 y\u00f6neten ve render eden engine.</p> <pre><code>public class DashboardEngine : IDashboardEngine\n{\n    private readonly ILogger&lt;DashboardEngine&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IDashboardRepository _dashboardRepository;\n    private readonly IWidgetFactory _widgetFactory;\n    private readonly IDataProvider _dataProvider;\n    private readonly Dictionary&lt;string, Dashboard&gt; _activeDashboards;\n\n    public DashboardEngine(ILogger&lt;DashboardEngine&gt; logger, IConfiguration configuration,\n        IDashboardRepository dashboardRepository, IWidgetFactory widgetFactory, IDataProvider dataProvider)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _dashboardRepository = dashboardRepository;\n        _widgetFactory = widgetFactory;\n        _dataProvider = dataProvider;\n        _activeDashboards = new Dictionary&lt;string, Dashboard&gt;();\n    }\n\n    public async Task InitializeAsync()\n    {\n        try\n        {\n            var dashboards = await _dashboardRepository.GetAllDashboardsAsync();\n\n            foreach (var dashboard in dashboards)\n            {\n                await LoadDashboardAsync(dashboard);\n            }\n\n            _logger.LogInformation(\"Dashboard engine initialized with {Count} dashboards\", _activeDashboards.Count);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error initializing dashboard engine\");\n        }\n    }\n\n    public async Task&lt;Dashboard&gt; CreateDashboardAsync(DashboardDefinition definition)\n    {\n        try\n        {\n            var dashboard = new Dashboard\n            {\n                Id = Guid.NewGuid().ToString(),\n                Name = definition.Name,\n                Description = definition.Description,\n                Layout = definition.Layout,\n                RefreshInterval = definition.RefreshInterval,\n                IsPublic = definition.IsPublic,\n                CreatedAt = DateTime.UtcNow,\n                CreatedBy = definition.CreatedBy\n            };\n\n            // Create widgets based on definition\n            foreach (var widgetDef in definition.Widgets)\n            {\n                var widget = await _widgetFactory.CreateWidgetAsync(widgetDef);\n                dashboard.Widgets.Add(widget);\n            }\n\n            await _dashboardRepository.SaveDashboardAsync(dashboard);\n            await LoadDashboardAsync(dashboard);\n\n            _logger.LogInformation(\"Dashboard created: {Name}\", dashboard.Name);\n            return dashboard;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating dashboard: {Name}\", definition.Name);\n            throw;\n        }\n    }\n\n    public async Task&lt;Dashboard&gt; GetDashboardAsync(string dashboardId)\n    {\n        if (_activeDashboards.TryGetValue(dashboardId, out var dashboard))\n        {\n            return dashboard;\n        }\n\n        var dbDashboard = await _dashboardRepository.GetDashboardAsync(dashboardId);\n        if (dbDashboard != null)\n        {\n            await LoadDashboardAsync(dbDashboard);\n            return dbDashboard;\n        }\n\n        return null;\n    }\n\n    public async Task&lt;List&lt;Dashboard&gt;&gt; GetAllDashboardsAsync()\n    {\n        return _activeDashboards.Values.ToList();\n    }\n\n    public async Task UpdateDashboardAsync(Dashboard dashboard)\n    {\n        try\n        {\n            await _dashboardRepository.SaveDashboardAsync(dashboard);\n\n            if (_activeDashboards.ContainsKey(dashboard.Id))\n            {\n                _activeDashboards[dashboard.Id] = dashboard;\n            }\n\n            _logger.LogInformation(\"Dashboard updated: {Name}\", dashboard.Name);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating dashboard: {Name}\", dashboard.Name);\n            throw;\n        }\n    }\n\n    public async Task DeleteDashboardAsync(string dashboardId)\n    {\n        try\n        {\n            await _dashboardRepository.DeleteDashboardAsync(dashboardId);\n            _activeDashboards.Remove(dashboardId);\n\n            _logger.LogInformation(\"Dashboard deleted: {DashboardId}\", dashboardId);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting dashboard: {DashboardId}\", dashboardId);\n            throw;\n        }\n    }\n\n    public async Task&lt;DashboardData&gt; GetDashboardDataAsync(string dashboardId)\n    {\n        try\n        {\n            var dashboard = await GetDashboardAsync(dashboardId);\n            if (dashboard == null)\n            {\n                return null;\n            }\n\n            var dashboardData = new DashboardData\n            {\n                DashboardId = dashboardId,\n                DashboardName = dashboard.Name,\n                LastUpdated = DateTime.UtcNow,\n                Widgets = new List&lt;WidgetData&gt;()\n            };\n\n            // Get data for each widget\n            foreach (var widget in dashboard.Widgets)\n            {\n                var widgetData = await GetWidgetDataAsync(widget);\n                dashboardData.Widgets.Add(widgetData);\n            }\n\n            return dashboardData;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting dashboard data: {DashboardId}\", dashboardId);\n            throw;\n        }\n    }\n\n    private async Task LoadDashboardAsync(Dashboard dashboard)\n    {\n        try\n        {\n            // Initialize widgets\n            foreach (var widget in dashboard.Widgets)\n            {\n                await widget.InitializeAsync();\n            }\n\n            _activeDashboards[dashboard.Id] = dashboard;\n            _logger.LogDebug(\"Dashboard loaded: {Name}\", dashboard.Name);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading dashboard: {Name}\", dashboard.Name);\n        }\n    }\n\n    private async Task&lt;WidgetData&gt; GetWidgetDataAsync(Widget widget)\n    {\n        try\n        {\n            var data = await widget.GetDataAsync();\n\n            return new WidgetData\n            {\n                WidgetId = widget.Id,\n                WidgetType = widget.Type,\n                Data = data,\n                LastUpdated = DateTime.UtcNow,\n                Status = widget.Status\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting widget data: {WidgetId}\", widget.Id);\n\n            return new WidgetData\n            {\n                WidgetId = widget.Id,\n                WidgetType = widget.Type,\n                Data = null,\n                LastUpdated = DateTime.UtcNow,\n                Status = WidgetStatus.Error,\n                Error = ex.Message\n            };\n        }\n    }\n}\n\npublic interface IDashboardEngine\n{\n    Task InitializeAsync();\n    Task&lt;Dashboard&gt; CreateDashboardAsync(DashboardDefinition definition);\n    Task&lt;Dashboard&gt; GetDashboardAsync(string dashboardId);\n    Task&lt;List&lt;Dashboard&gt;&gt; GetAllDashboardsAsync();\n    Task UpdateDashboardAsync(Dashboard dashboard);\n    Task DeleteDashboardAsync(string dashboardId);\n    Task&lt;DashboardData&gt; GetDashboardDataAsync(string dashboardId);\n}\n\npublic class Dashboard\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public DashboardLayout Layout { get; set; }\n    public TimeSpan RefreshInterval { get; set; }\n    public bool IsPublic { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public string CreatedBy { get; set; }\n    public List&lt;Widget&gt; Widgets { get; set; } = new();\n}\n\npublic class DashboardDefinition\n{\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public DashboardLayout Layout { get; set; }\n    public TimeSpan RefreshInterval { get; set; }\n    public bool IsPublic { get; set; }\n    public string CreatedBy { get; set; }\n    public List&lt;WidgetDefinition&gt; Widgets { get; set; } = new();\n}\n\npublic class DashboardLayout\n{\n    public int Columns { get; set; } = 12;\n    public int Rows { get; set; } = 8;\n    public List&lt;WidgetPosition&gt; WidgetPositions { get; set; } = new();\n}\n\npublic class WidgetPosition\n{\n    public string WidgetId { get; set; }\n    public int Column { get; set; }\n    public int Row { get; set; }\n    public int Width { get; set; }\n    public int Height { get; set; }\n}\n\npublic class DashboardData\n{\n    public string DashboardId { get; set; }\n    public string DashboardName { get; set; }\n    public DateTime LastUpdated { get; set; }\n    public List&lt;WidgetData&gt; Widgets { get; set; } = new();\n}\n</code></pre>"},{"location":"mid-level/monitoring/dashboard-creation/#2-widget-system","title":"2. Widget System","text":"<p>Dashboard widget'lar\u0131n\u0131 y\u00f6neten sistem.</p> <pre><code>public abstract class Widget : IWidget\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public string Name { get; set; }\n    public string Type { get; set; }\n    public WidgetConfiguration Configuration { get; set; }\n    public WidgetStatus Status { get; set; } = WidgetStatus.Inactive;\n    public DateTime LastDataUpdate { get; set; }\n\n    public abstract Task InitializeAsync();\n    public abstract Task&lt;object&gt; GetDataAsync();\n    public abstract Task&lt;bool&gt; ValidateConfigurationAsync();\n\n    protected virtual async Task&lt;object&gt; GetDataFromProviderAsync(string dataSource, Dictionary&lt;string, object&gt; parameters)\n    {\n        // This would integrate with your data provider\n        await Task.Delay(100); // Simulate async operation\n\n        // Return mock data based on widget type\n        return Type switch\n        {\n            \"line-chart\" =&gt; GenerateLineChartData(),\n            \"bar-chart\" =&gt; GenerateBarChartData(),\n            \"gauge\" =&gt; GenerateGaugeData(),\n            \"table\" =&gt; GenerateTableData(),\n            \"metric\" =&gt; GenerateMetricData(),\n            _ =&gt; new { message = \"Unknown widget type\" }\n        };\n    }\n\n    private object GenerateLineChartData()\n    {\n        var random = new Random();\n        var dataPoints = new List&lt;object&gt;();\n\n        for (int i = 0; i &lt; 24; i++)\n        {\n            dataPoints.Add(new\n            {\n                time = DateTime.UtcNow.AddHours(-23 + i).ToString(\"HH:mm\"),\n                value = random.Next(50, 150)\n            });\n        }\n\n        return new\n        {\n            type = \"line-chart\",\n            data = dataPoints,\n            xAxis = \"Time\",\n            yAxis = \"Value\"\n        };\n    }\n\n    private object GenerateBarChartData()\n    {\n        var random = new Random();\n        var categories = new[] { \"Category A\", \"Category B\", \"Category C\", \"Category D\", \"Category E\" };\n        var data = categories.Select(c =&gt; new { category = c, value = random.Next(10, 100) }).ToList();\n\n        return new\n        {\n            type = \"bar-chart\",\n            data = data,\n            xAxis = \"Category\",\n            yAxis = \"Value\"\n        };\n    }\n\n    private object GenerateGaugeData()\n    {\n        var random = new Random();\n        var value = random.Next(0, 100);\n\n        return new\n        {\n            type = \"gauge\",\n            value = value,\n            min = 0,\n            max = 100,\n            thresholds = new[] { 25, 50, 75 }\n        };\n    }\n\n    private object GenerateTableData()\n    {\n        var random = new Random();\n        var rows = new List&lt;object&gt;();\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            rows.Add(new\n            {\n                id = i + 1,\n                name = $\"Item {i + 1}\",\n                status = random.Next(0, 2) == 0 ? \"Active\" : \"Inactive\",\n                value = random.Next(100, 1000)\n            });\n        }\n\n        return new\n        {\n            type = \"table\",\n            columns = new[] { \"ID\", \"Name\", \"Status\", \"Value\" },\n            data = rows\n        };\n    }\n\n    private object GenerateMetricData()\n    {\n        var random = new Random();\n        var value = random.Next(1000, 10000);\n        var previousValue = value + random.Next(-500, 500);\n        var change = value - previousValue;\n        var changePercent = (double)change / previousValue * 100;\n\n        return new\n        {\n            type = \"metric\",\n            value = value,\n            previousValue = previousValue,\n            change = change,\n            changePercent = Math.Round(changePercent, 2),\n            trend = change &gt;= 0 ? \"up\" : \"down\"\n        };\n    }\n}\n\npublic interface IWidget\n{\n    string Id { get; set; }\n    string Name { get; set; }\n    string Type { get; set; }\n    WidgetConfiguration Configuration { get; set; }\n    WidgetStatus Status { get; set; }\n    DateTime LastDataUpdate { get; set; }\n\n    Task InitializeAsync();\n    Task&lt;object&gt; GetDataAsync();\n    Task&lt;bool&gt; ValidateConfigurationAsync();\n}\n\npublic class WidgetConfiguration\n{\n    public Dictionary&lt;string, object&gt; Settings { get; set; } = new();\n    public string DataSource { get; set; }\n    public Dictionary&lt;string, object&gt; Parameters { get; set; } = new();\n    public TimeSpan? RefreshInterval { get; set; }\n    public bool AutoRefresh { get; set; } = true;\n}\n\npublic class WidgetData\n{\n    public string WidgetId { get; set; }\n    public string WidgetType { get; set; }\n    public object Data { get; set; }\n    public DateTime LastUpdated { get; set; }\n    public WidgetStatus Status { get; set; }\n    public string Error { get; set; }\n}\n\npublic enum WidgetStatus\n{\n    Inactive,\n    Active,\n    Loading,\n    Error,\n    Disabled\n}\n\n// Specific widget implementations\npublic class LineChartWidget : Widget\n{\n    public LineChartWidget()\n    {\n        Type = \"line-chart\";\n    }\n\n    public override async Task InitializeAsync()\n    {\n        Status = WidgetStatus.Active;\n        await Task.CompletedTask;\n    }\n\n    public override async Task&lt;object&gt; GetDataAsync()\n    {\n        Status = WidgetStatus.Loading;\n\n        try\n        {\n            var data = await GetDataFromProviderAsync(Configuration.DataSource, Configuration.Parameters);\n            Status = WidgetStatus.Active;\n            LastDataUpdate = DateTime.UtcNow;\n            return data;\n        }\n        catch (Exception)\n        {\n            Status = WidgetStatus.Error;\n            throw;\n        }\n    }\n\n    public override async Task&lt;bool&gt; ValidateConfigurationAsync()\n    {\n        return await Task.FromResult(!string.IsNullOrEmpty(Configuration.DataSource));\n    }\n}\n\npublic class MetricWidget : Widget\n{\n    public MetricWidget()\n    {\n        Type = \"metric\";\n    }\n\n    public override async Task InitializeAsync()\n    {\n        Status = WidgetStatus.Active;\n        await Task.CompletedTask;\n    }\n\n    public override async Task&lt;object&gt; GetDataAsync()\n    {\n        Status = WidgetStatus.Loading;\n\n        try\n        {\n            var data = await GetDataFromProviderAsync(Configuration.DataSource, Configuration.Parameters);\n            Status = WidgetStatus.Active;\n            LastDataUpdate = DateTime.UtcNow;\n            return data;\n        }\n        catch (Exception)\n        {\n            Status = WidgetStatus.Error;\n            throw;\n        }\n    }\n\n    public override async Task&lt;bool&gt; ValidateConfigurationAsync()\n    {\n        return await Task.FromResult(!string.IsNullOrEmpty(Configuration.DataSource));\n    }\n}\n</code></pre>"},{"location":"mid-level/monitoring/dashboard-creation/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/monitoring/dashboard-creation/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Dashboard nedir?</li> <li> <p>Cevap: Monitoring verilerini g\u00f6rsel olarak sunan aray\u00fcz.</p> </li> <li> <p>Widget nedir?</p> </li> <li> <p>Cevap: Dashboard'da belirli veri t\u00fcr\u00fcn\u00fc g\u00f6steren bile\u015fen.</p> </li> <li> <p>Real-time dashboard nedir?</p> </li> <li> <p>Cevap: Canl\u0131 veri g\u00fcncellemeleri ile \u00e7al\u0131\u015fan dashboard.</p> </li> <li> <p>Dashboard layout nedir?</p> </li> <li> <p>Cevap: Widget'lar\u0131n dashboard'da nas\u0131l yerle\u015ftirilece\u011fini tan\u0131mlayan yap\u0131.</p> </li> <li> <p>Data binding nedir?</p> </li> <li>Cevap: Widget'lar\u0131n veri kaynaklar\u0131na ba\u011flanmas\u0131.</li> </ol>"},{"location":"mid-level/monitoring/dashboard-creation/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Dashboard engine nas\u0131l implement edilir?</li> <li> <p>Cevap: Dashboard management, widget lifecycle, data aggregation.</p> </li> <li> <p>Widget system nas\u0131l tasarlan\u0131r?</p> </li> <li> <p>Cevap: Abstract base class, configuration management, data providers.</p> </li> <li> <p>Real-time updates nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: SignalR, WebSockets, polling, event-driven updates.</p> </li> <li> <p>Dashboard performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Data caching, lazy loading, efficient rendering, background updates.</p> </li> <li> <p>Responsive dashboard nas\u0131l tasarlan\u0131r?</p> </li> <li>Cevap: CSS Grid, Flexbox, mobile-first design, adaptive layouts.</li> </ol>"},{"location":"mid-level/monitoring/dashboard-creation/#best-practices","title":"Best Practices","text":"<ol> <li>Dashboard Design</li> <li>User-centric design kullan\u0131n</li> <li>Consistent layout implement edin</li> <li>Responsive design sa\u011flay\u0131n</li> <li> <p>Accessibility standards uygulay\u0131n</p> </li> <li> <p>Widget Implementation</p> </li> <li>Reusable components tasarlay\u0131n</li> <li>Configuration-driven approach kullan\u0131n</li> <li>Error handling implement edin</li> <li> <p>Performance optimization yap\u0131n</p> </li> <li> <p>Data Management</p> </li> <li>Efficient data binding implement edin</li> <li>Caching strategies uygulay\u0131n</li> <li>Real-time updates sa\u011flay\u0131n</li> <li> <p>Data validation ekleyin</p> </li> <li> <p>Performance &amp; Scalability</p> </li> <li>Lazy loading implement edin</li> <li>Background processing kullan\u0131n</li> <li>Resource optimization yap\u0131n</li> <li> <p>Monitoring ekleyin</p> </li> <li> <p>User Experience</p> </li> <li>Intuitive navigation sa\u011flay\u0131n</li> <li>Customization options ekleyin</li> <li>Interactive features implement edin</li> <li>Mobile optimization yap\u0131n</li> </ol>"},{"location":"mid-level/monitoring/dashboard-creation/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Dashboard Design</li> <li>Data Visualization</li> <li>Real-time Monitoring</li> <li>Widget Development</li> <li>Dashboard Best Practices</li> </ul>"},{"location":"mid-level/monitoring/distributed-tracing/","title":"Distributed Tracing","text":""},{"location":"mid-level/monitoring/distributed-tracing/#giris","title":"Giri\u015f","text":"<p>Distributed Tracing, microservices architecture'da request'lerin farkl\u0131 servisler aras\u0131nda nas\u0131l ak\u0131\u015f g\u00f6sterdi\u011fini izleyen ve analiz eden teknolojidir. Mid-level geli\u015ftiriciler i\u00e7in distributed tracing'i anlamak, performance monitoring, debugging ve system observability i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, OpenTelemetry, correlation IDs, span management ve tracing visualization konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/monitoring/distributed-tracing/#opentelemetry-implementation","title":"OpenTelemetry Implementation","text":""},{"location":"mid-level/monitoring/distributed-tracing/#1-tracing-service","title":"1. Tracing Service","text":"<p>Distributed tracing implementasyonu.</p> <pre><code>public class TracingService : ITracingService\n{\n    private readonly ILogger&lt;TracingService&gt; _logger;\n    private readonly ActivitySource _activitySource;\n    private readonly IConfiguration _configuration;\n\n    public TracingService(ILogger&lt;TracingService&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _activitySource = new ActivitySource(\"MyApplication\");\n    }\n\n    public Activity StartActivity(string operationName, string operationType = \"internal\")\n    {\n        var activity = _activitySource.StartActivity(operationName);\n\n        if (activity != null)\n        {\n            activity.SetTag(\"operation.type\", operationType);\n            activity.SetTag(\"service.name\", \"MyApplication\");\n            activity.SetTag(\"service.version\", \"1.0.0\");\n\n            _logger.LogDebug(\"Started activity: {OperationName}, TraceId: {TraceId}\", \n                operationName, activity.TraceId);\n        }\n\n        return activity;\n    }\n\n    public Activity StartActivityWithParent(string operationName, ActivityContext parentContext, \n        string operationType = \"internal\")\n    {\n        var activity = _activitySource.StartActivity(operationName, ActivityKind.Internal, parentContext);\n\n        if (activity != null)\n        {\n            activity.SetTag(\"operation.type\", operationType);\n            activity.SetTag(\"service.name\", \"MyApplication\");\n            activity.SetTag(\"service.version\", \"1.0.0\");\n\n            _logger.LogDebug(\"Started child activity: {OperationName}, TraceId: {TraceId}, ParentSpanId: {ParentSpanId}\", \n                operationName, activity.TraceId, parentContext.SpanId);\n        }\n\n        return activity;\n    }\n\n    public void AddTag(Activity activity, string key, string value)\n    {\n        if (activity != null &amp;&amp; !string.IsNullOrEmpty(key))\n        {\n            activity.SetTag(key, value);\n            _logger.LogDebug(\"Added tag to activity: {Key} = {Value}\", key, value);\n        }\n    }\n\n    public void AddEvent(Activity activity, string eventName, Dictionary&lt;string, object&gt; attributes = null)\n    {\n        if (activity != null &amp;&amp; !string.IsNullOrEmpty(eventName))\n        {\n            var activityAttributes = attributes?.ToDictionary(kvp =&gt; kvp.Key, kvp =&gt; kvp.Value?.ToString()) \n                ?? new Dictionary&lt;string, string&gt;();\n\n            activity.AddEvent(new ActivityEvent(eventName, default, activityAttributes));\n\n            _logger.LogDebug(\"Added event to activity: {EventName}\", eventName);\n        }\n    }\n\n    public void SetStatus(Activity activity, ActivityStatusCode status, string description = null)\n    {\n        if (activity != null)\n        {\n            activity.SetStatus(status, description);\n\n            _logger.LogDebug(\"Set activity status: {Status}, Description: {Description}\", \n                status, description ?? \"N/A\");\n        }\n    }\n\n    public string GetTraceId(Activity activity)\n    {\n        return activity?.TraceId.ToString() ?? string.Empty;\n    }\n\n    public string GetSpanId(Activity activity)\n    {\n        return activity?.SpanId.ToString() ?? string.Empty;\n    }\n\n    public ActivityContext GetCurrentContext()\n    {\n        return Activity.Current?.Context ?? default;\n    }\n\n    public void InjectTraceContext(HttpRequestMessage request, Activity activity)\n    {\n        if (activity != null &amp;&amp; request != null)\n        {\n            var traceParent = $\"00-{activity.TraceId}-{activity.SpanId}-{activity.ActivityTraceFlags}\";\n            request.Headers.Add(\"traceparent\", traceParent);\n\n            if (!string.IsNullOrEmpty(activity.TraceStateString))\n            {\n                request.Headers.Add(\"tracestate\", activity.TraceStateString);\n            }\n\n            _logger.LogDebug(\"Injected trace context: {TraceParent}\", traceParent);\n        }\n    }\n\n    public ActivityContext ExtractTraceContext(HttpRequestMessage request)\n    {\n        try\n        {\n            if (request.Headers.TryGetValues(\"traceparent\", out var traceParentValues))\n            {\n                var traceParent = traceParentValues.FirstOrDefault();\n                if (!string.IsNullOrEmpty(traceParent))\n                {\n                    var parts = traceParent.Split('-');\n                    if (parts.Length == 4)\n                    {\n                        var traceId = ActivityTraceId.CreateFromString(parts[1]);\n                        var spanId = ActivitySpanId.CreateFromString(parts[2]);\n                        var traceFlags = (ActivityTraceFlags)Convert.ToByte(parts[3], 16);\n\n                        var traceState = string.Empty;\n                        if (request.Headers.TryGetValues(\"tracestate\", out var traceStateValues))\n                        {\n                            traceState = traceStateValues.FirstOrDefault() ?? string.Empty;\n                        }\n\n                        var context = new ActivityContext(traceId, spanId, traceFlags, traceState);\n\n                        _logger.LogDebug(\"Extracted trace context: TraceId: {TraceId}, SpanId: {SpanId}\", \n                            traceId, spanId);\n\n                        return context;\n                    }\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogWarning(ex, \"Error extracting trace context\");\n        }\n\n        return default;\n    }\n}\n\npublic interface ITracingService\n{\n    Activity StartActivity(string operationName, string operationType = \"internal\");\n    Activity StartActivityWithParent(string operationName, ActivityContext parentContext, string operationType = \"internal\");\n    void AddTag(Activity activity, string key, string value);\n    void AddEvent(Activity activity, string eventName, Dictionary&lt;string, object&gt; attributes = null);\n    void SetStatus(Activity activity, ActivityStatusCode status, string description = null);\n    string GetTraceId(Activity activity);\n    string GetSpanId(Activity activity);\n    ActivityContext GetCurrentContext();\n    void InjectTraceContext(HttpRequestMessage request, Activity activity);\n    ActivityContext ExtractTraceContext(HttpRequestMessage request);\n}\n</code></pre>"},{"location":"mid-level/monitoring/distributed-tracing/#2-http-client-tracing","title":"2. HTTP Client Tracing","text":"<p>HTTP client'lar i\u00e7in tracing middleware.</p> <pre><code>public class TracingHttpClientHandler : DelegatingHandler\n{\n    private readonly ITracingService _tracingService;\n    private readonly ILogger&lt;TracingHttpClientHandler&gt; _logger;\n\n    public TracingHttpClientHandler(ITracingService tracingService, ILogger&lt;TracingHttpClientHandler&gt; logger)\n    {\n        _tracingService = tracingService;\n        _logger = logger;\n    }\n\n    protected override async Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        var operationName = $\"{request.Method} {request.RequestUri?.Host}{request.RequestUri?.AbsolutePath}\";\n        var activity = _tracingService.StartActivity(operationName, \"http_client\");\n\n        try\n        {\n            if (activity != null)\n            {\n                _tracingService.AddTag(activity, \"http.method\", request.Method.ToString());\n                _tracingService.AddTag(activity, \"http.url\", request.RequestUri?.ToString());\n                _tracingService.AddTag(activity, \"http.target\", request.RequestUri?.AbsolutePath);\n                _tracingService.AddTag(activity, \"http.host\", request.RequestUri?.Host);\n\n                // Inject trace context\n                _tracingService.InjectTraceContext(request, activity);\n            }\n\n            var stopwatch = Stopwatch.StartNew();\n            var response = await base.SendAsync(request, cancellationToken);\n            stopwatch.Stop();\n\n            if (activity != null)\n            {\n                _tracingService.AddTag(activity, \"http.status_code\", ((int)response.StatusCode).ToString());\n                _tracingService.AddTag(activity, \"http.response_time_ms\", stopwatch.ElapsedMilliseconds.ToString());\n\n                var status = response.IsSuccessStatusCode ? ActivityStatusCode.Ok : ActivityStatusCode.Error;\n                _tracingService.SetStatus(activity, status);\n            }\n\n            return response;\n        }\n        catch (Exception ex)\n        {\n            if (activity != null)\n            {\n                _tracingService.AddTag(activity, \"error\", \"true\");\n                _tracingService.AddTag(activity, \"error.message\", ex.Message);\n                _tracingService.SetStatus(activity, ActivityStatusCode.Error, ex.Message);\n            }\n\n            _logger.LogError(ex, \"HTTP request failed: {OperationName}\", operationName);\n            throw;\n        }\n        finally\n        {\n            activity?.Dispose();\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/monitoring/distributed-tracing/#correlation-id-management","title":"Correlation ID Management","text":""},{"location":"mid-level/monitoring/distributed-tracing/#1-correlation-service","title":"1. Correlation Service","text":"<p>Request correlation ID'lerini y\u00f6neten servis.</p> <pre><code>public class CorrelationService : ICorrelationService\n{\n    private readonly ILogger&lt;CorrelationService&gt; _logger;\n    private readonly AsyncLocal&lt;string&gt; _correlationId;\n    private readonly AsyncLocal&lt;string&gt; _requestId;\n\n    public CorrelationService(ILogger&lt;CorrelationService&gt; logger)\n    {\n        _logger = logger;\n        _correlationId = new AsyncLocal&lt;string&gt;();\n        _requestId = new AsyncLocal&lt;string&gt;();\n    }\n\n    public string GetCorrelationId()\n    {\n        var correlationId = _correlationId.Value;\n\n        if (string.IsNullOrEmpty(correlationId))\n        {\n            correlationId = GenerateCorrelationId();\n            _correlationId.Value = correlationId;\n\n            _logger.LogDebug(\"Generated new correlation ID: {CorrelationId}\", correlationId);\n        }\n\n        return correlationId;\n    }\n\n    public void SetCorrelationId(string correlationId)\n    {\n        if (!string.IsNullOrEmpty(correlationId))\n        {\n            _correlationId.Value = correlationId;\n            _logger.LogDebug(\"Set correlation ID: {CorrelationId}\", correlationId);\n        }\n    }\n\n    public string GetRequestId()\n    {\n        var requestId = _requestId.Value;\n\n        if (string.IsNullOrEmpty(requestId))\n        {\n            requestId = GenerateRequestId();\n            _requestId.Value = requestId;\n\n            _logger.LogDebug(\"Generated new request ID: {RequestId}\", requestId);\n        }\n\n        return requestId;\n    }\n\n    public void SetRequestId(string requestId)\n    {\n        if (!string.IsNullOrEmpty(requestId))\n        {\n            _requestId.Value = requestId;\n            _logger.LogDebug(\"Set request ID: {RequestId}\", requestId);\n        }\n    }\n\n    public void Clear()\n    {\n        _correlationId.Value = null;\n        _requestId.Value = null;\n\n        _logger.LogDebug(\"Cleared correlation and request IDs\");\n    }\n\n    private string GenerateCorrelationId()\n    {\n        return $\"corr-{Guid.NewGuid():N}\";\n    }\n\n    private string GenerateRequestId()\n    {\n        return $\"req-{Guid.NewGuid():N}\";\n    }\n}\n\npublic interface ICorrelationService\n{\n    string GetCorrelationId();\n    void SetCorrelationId(string correlationId);\n    string GetRequestId();\n    void SetRequestId(string requestId);\n    void Clear();\n}\n</code></pre>"},{"location":"mid-level/monitoring/distributed-tracing/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/monitoring/distributed-tracing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Distributed Tracing nedir?</li> <li> <p>Cevap: Microservices aras\u0131 request flow'u izleme ve analiz etme teknolojisi.</p> </li> <li> <p>OpenTelemetry nedir?</p> </li> <li> <p>Cevap: Observability i\u00e7in open standard, tracing, metrics, logging.</p> </li> <li> <p>Correlation ID nedir?</p> </li> <li> <p>Cevap: Request'leri farkl\u0131 servisler aras\u0131nda takip etmek i\u00e7in kullan\u0131lan unique identifier.</p> </li> <li> <p>Span ve Trace fark\u0131 nedir?</p> </li> <li> <p>Cevap: Span: tek operasyon, Trace: span'lerin collection'\u0131.</p> </li> <li> <p>Distributed tracing ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Microservices, performance monitoring, debugging, system observability.</li> </ol>"},{"location":"mid-level/monitoring/distributed-tracing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>OpenTelemetry nas\u0131l implement edilir?</li> <li> <p>Cevap: ActivitySource, Activity, tags, events, status.</p> </li> <li> <p>Trace context nas\u0131l propagate edilir?</p> </li> <li> <p>Cevap: HTTP headers, traceparent, tracestate, context injection.</p> </li> <li> <p>Correlation ID nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap: AsyncLocal, middleware, header propagation.</p> </li> <li> <p>Tracing performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Sampling, filtering, async operations, resource cleanup.</p> </li> <li> <p>Tracing data nas\u0131l analyze edilir?</p> </li> <li>Cevap: Jaeger, Zipkin, custom dashboards, metrics aggregation.</li> </ol>"},{"location":"mid-level/monitoring/distributed-tracing/#best-practices","title":"Best Practices","text":"<ol> <li>Tracing Implementation</li> <li>Consistent naming conventions kullan\u0131n</li> <li>Meaningful tags ekleyin</li> <li>Error handling implement edin</li> <li> <p>Performance impact minimize edin</p> </li> <li> <p>Correlation Management</p> </li> <li>Unique ID generation sa\u011flay\u0131n</li> <li>Header propagation implement edin</li> <li>Async context management yap\u0131n</li> <li> <p>Cleanup procedures ekleyin</p> </li> <li> <p>Performance Optimization</p> </li> <li>Sampling strategies uygulay\u0131n</li> <li>Async operations kullan\u0131n</li> <li>Resource disposal yap\u0131n</li> <li> <p>Monitoring ekleyin</p> </li> <li> <p>Data Management</p> </li> <li>Structured logging implement edin</li> <li>Metrics collection yap\u0131n</li> <li>Data retention policies uygulay\u0131n</li> <li> <p>Privacy considerations g\u00f6z \u00f6n\u00fcnde bulundurun</p> </li> <li> <p>Integration</p> </li> <li>OpenTelemetry standards kullan\u0131n</li> <li>Multiple backends support edin</li> <li>Custom exporters implement edin</li> <li>Testing strategies ekleyin</li> </ol>"},{"location":"mid-level/monitoring/distributed-tracing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OpenTelemetry</li> <li>Distributed Tracing</li> <li>Activity API</li> <li>Correlation IDs</li> <li>Jaeger Tracing</li> </ul>"},{"location":"mid-level/monitoring/log-aggregation/","title":"Log Aggregation","text":""},{"location":"mid-level/monitoring/log-aggregation/#giris","title":"Giri\u015f","text":"<p>Log Aggregation, farkl\u0131 kaynaklardan gelen log'lar\u0131 toplayan, i\u015fleyen ve analiz eden sistemdir. Mid-level geli\u015ftiriciler i\u00e7in log aggregation'\u0131 anlamak, centralized logging, log analysis ve troubleshooting i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, log collection, log processing, log storage ve log analysis konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/monitoring/log-aggregation/#log-collection-service","title":"Log Collection Service","text":""},{"location":"mid-level/monitoring/log-aggregation/#1-centralized-logging","title":"1. Centralized Logging","text":"<p>Merkezi log collection implementasyonu.</p> <pre><code>public class LogAggregationService : ILogAggregationService\n{\n    private readonly ILogger&lt;LogAggregationService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly ConcurrentQueue&lt;LogEntry&gt; _logQueue;\n    private readonly Timer _flushTimer;\n    private readonly int _batchSize;\n    private readonly string _logEndpoint;\n\n    public LogAggregationService(ILogger&lt;LogAggregationService&gt; logger, IConfiguration configuration, \n        IHttpClientFactory httpClientFactory)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _httpClientFactory = httpClientFactory;\n        _logQueue = new ConcurrentQueue&lt;LogEntry&gt;();\n\n        _batchSize = _configuration.GetValue&lt;int&gt;(\"LogAggregation:BatchSize\", 100);\n        _logEndpoint = _configuration[\"LogAggregation:Endpoint\"] ?? \"http://localhost:5000/api/logs\";\n\n        var flushInterval = _configuration.GetValue&lt;int&gt;(\"LogAggregation:FlushIntervalSeconds\", 30);\n        _flushTimer = new Timer(FlushLogs, null, TimeSpan.FromSeconds(flushInterval), TimeSpan.FromSeconds(flushInterval));\n    }\n\n    public void AddLog(LogEntry logEntry)\n    {\n        try\n        {\n            // Enrich log entry with additional context\n            logEntry.Timestamp = DateTime.UtcNow;\n            logEntry.HostName = Environment.MachineName;\n            logEntry.ProcessId = Environment.ProcessId;\n            logEntry.ApplicationName = _configuration[\"Application:Name\"] ?? \"Unknown\";\n            logEntry.ApplicationVersion = _configuration[\"Application:Version\"] ?? \"1.0.0\";\n\n            _logQueue.Enqueue(logEntry);\n\n            // Flush immediately if queue is full\n            if (_logQueue.Count &gt;= _batchSize)\n            {\n                _ = Task.Run(FlushLogsAsync);\n            }\n\n            _logger.LogDebug(\"Log entry added to queue: {Level}, {Message}\", logEntry.Level, logEntry.Message);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error adding log entry to queue\");\n        }\n    }\n\n    public void AddLog(LogLevel level, string message, string category = null, \n        Dictionary&lt;string, object&gt; properties = null, Exception exception = null)\n    {\n        var logEntry = new LogEntry\n        {\n            Level = level.ToString(),\n            Message = message,\n            Category = category ?? \"General\",\n            Properties = properties ?? new Dictionary&lt;string, object&gt;(),\n            Exception = exception?.ToString(),\n            StackTrace = exception?.StackTrace\n        };\n\n        AddLog(logEntry);\n    }\n\n    private async void FlushLogs(object state)\n    {\n        await FlushLogsAsync();\n    }\n\n    private async Task FlushLogsAsync()\n    {\n        try\n        {\n            var logsToSend = new List&lt;LogEntry&gt;();\n\n            // Dequeue logs from queue\n            while (logsToSend.Count &lt; _batchSize &amp;&amp; _logQueue.TryDequeue(out var logEntry))\n            {\n                logsToSend.Add(logEntry);\n            }\n\n            if (logsToSend.Any())\n            {\n                await SendLogsAsync(logsToSend);\n                _logger.LogDebug(\"Flushed {Count} log entries\", logsToSend.Count);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error flushing logs\");\n        }\n    }\n\n    private async Task SendLogsAsync(List&lt;LogEntry&gt; logs)\n    {\n        try\n        {\n            var client = _httpClientFactory.CreateClient(\"LogAggregation\");\n\n            var request = new HttpRequestMessage(HttpMethod.Post, _logEndpoint)\n            {\n                Content = new StringContent(JsonSerializer.Serialize(logs), Encoding.UTF8, \"application/json\")\n            };\n\n            var response = await client.SendAsync(request);\n\n            if (!response.IsSuccessStatusCode)\n            {\n                var errorContent = await response.Content.ReadAsStringAsync();\n                _logger.LogWarning(\"Failed to send logs. Status: {Status}, Error: {Error}\", \n                    response.StatusCode, errorContent);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending logs to aggregation service\");\n\n            // Re-queue failed logs for retry\n            foreach (var log in logs)\n            {\n                _logQueue.Enqueue(log);\n            }\n        }\n    }\n\n    public async Task&lt;List&lt;LogEntry&gt;&gt; SearchLogsAsync(LogSearchCriteria criteria)\n    {\n        try\n        {\n            var client = _httpClientFactory.CreateClient(\"LogAggregation\");\n\n            var queryString = BuildQueryString(criteria);\n            var request = new HttpRequestMessage(HttpMethod.Get, $\"{_logEndpoint}/search?{queryString}\");\n\n            var response = await client.SendAsync(request);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var content = await response.Content.ReadAsStringAsync();\n                var searchResults = JsonSerializer.Deserialize&lt;List&lt;LogEntry&gt;&gt;(content);\n\n                _logger.LogDebug(\"Log search completed. Found {Count} results\", searchResults?.Count ?? 0);\n                return searchResults ?? new List&lt;LogEntry&gt;();\n            }\n            else\n            {\n                var errorContent = await response.Content.ReadAsStringAsync();\n                _logger.LogWarning(\"Log search failed. Status: {Status}, Error: {Error}\", \n                    response.StatusCode, errorContent);\n                return new List&lt;LogEntry&gt;();\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error searching logs\");\n            return new List&lt;LogEntry&gt;();\n        }\n    }\n\n    private string BuildQueryString(LogSearchCriteria criteria)\n    {\n        var queryParams = new List&lt;string&gt;();\n\n        if (!string.IsNullOrEmpty(criteria.Level))\n            queryParams.Add($\"level={Uri.EscapeDataString(criteria.Level)}\");\n\n        if (!string.IsNullOrEmpty(criteria.Category))\n            queryParams.Add($\"category={Uri.EscapeDataString(criteria.Category)}\");\n\n        if (!string.IsNullOrEmpty(criteria.SearchTerm))\n            queryParams.Add($\"search={Uri.EscapeDataString(criteria.SearchTerm)}\");\n\n        if (criteria.FromDate.HasValue)\n            queryParams.Add($\"from={criteria.FromDate.Value:yyyy-MM-ddTHH:mm:ssZ}\");\n\n        if (criteria.ToDate.HasValue)\n            queryParams.Add($\"to={criteria.ToDate.Value:yyyy-MM-ddTHH:mm:ssZ}\");\n\n        if (criteria.Limit.HasValue)\n            queryParams.Add($\"limit={criteria.Limit.Value}\");\n\n        return string.Join(\"&amp;\", queryParams);\n    }\n\n    public void Dispose()\n    {\n        _flushTimer?.Dispose();\n    }\n}\n\npublic interface ILogAggregationService\n{\n    void AddLog(LogEntry logEntry);\n    void AddLog(LogLevel level, string message, string category = null, \n        Dictionary&lt;string, object&gt; properties = null, Exception exception = null);\n    Task&lt;List&lt;LogEntry&gt;&gt; SearchLogsAsync(LogSearchCriteria criteria);\n}\n\npublic class LogEntry\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public DateTime Timestamp { get; set; }\n    public string Level { get; set; }\n    public string Message { get; set; }\n    public string Category { get; set; }\n    public string HostName { get; set; }\n    public int ProcessId { get; set; }\n    public string ApplicationName { get; set; }\n    public string ApplicationVersion { get; set; }\n    public Dictionary&lt;string, object&gt; Properties { get; set; } = new();\n    public string Exception { get; set; }\n    public string StackTrace { get; set; }\n    public string CorrelationId { get; set; }\n    public string RequestId { get; set; }\n}\n\npublic class LogSearchCriteria\n{\n    public string Level { get; set; }\n    public string Category { get; set; }\n    public string SearchTerm { get; set; }\n    public DateTime? FromDate { get; set; }\n    public DateTime? ToDate { get; set; }\n    public int? Limit { get; set; }\n}\n</code></pre>"},{"location":"mid-level/monitoring/log-aggregation/#2-log-processing-pipeline","title":"2. Log Processing Pipeline","text":"<p>Log'lar\u0131 i\u015fleyen pipeline.</p> <pre><code>public class LogProcessingPipeline : ILogProcessingPipeline\n{\n    private readonly ILogger&lt;LogProcessingPipeline&gt; _logger;\n    private readonly IEnumerable&lt;ILogProcessor&gt; _processors;\n    private readonly IConfiguration _configuration;\n\n    public LogProcessingPipeline(ILogger&lt;LogProcessingPipeline&gt; logger, \n        IEnumerable&lt;ILogProcessor&gt; processors, IConfiguration configuration)\n    {\n        _logger = logger;\n        _processors = processors;\n        _configuration = configuration;\n    }\n\n    public async Task&lt;ProcessedLogEntry&gt; ProcessLogAsync(LogEntry logEntry)\n    {\n        try\n        {\n            var processedLog = new ProcessedLogEntry(logEntry);\n\n            foreach (var processor in _processors.OrderBy(p =&gt; p.Priority))\n            {\n                try\n                {\n                    await processor.ProcessAsync(processedLog);\n                    _logger.LogDebug(\"Log processed by {ProcessorType}\", processor.GetType().Name);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogWarning(ex, \"Error processing log with {ProcessorType}\", processor.GetType().Name);\n                }\n            }\n\n            return processedLog;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error in log processing pipeline\");\n            throw;\n        }\n    }\n\n    public async Task&lt;List&lt;ProcessedLogEntry&gt;&gt; ProcessLogsAsync(List&lt;LogEntry&gt; logEntries)\n    {\n        var processedLogs = new List&lt;ProcessedLogEntry&gt;();\n\n        foreach (var logEntry in logEntries)\n        {\n            try\n            {\n                var processedLog = await ProcessLogAsync(logEntry);\n                processedLogs.Add(processedLog);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error processing log entry: {Id}\", logEntry.Id);\n            }\n        }\n\n        return processedLogs;\n    }\n}\n\npublic interface ILogProcessingPipeline\n{\n    Task&lt;ProcessedLogEntry&gt; ProcessLogAsync(LogEntry logEntry);\n    Task&lt;List&lt;ProcessedLogEntry&gt;&gt; ProcessLogsAsync(List&lt;LogEntry&gt; logEntries);\n}\n\npublic interface ILogProcessor\n{\n    int Priority { get; }\n    Task ProcessAsync(ProcessedLogEntry logEntry);\n}\n\npublic class ProcessedLogEntry\n{\n    public LogEntry OriginalLog { get; }\n    public Dictionary&lt;string, object&gt; EnrichedData { get; }\n    public List&lt;string&gt; Tags { get; }\n    public Dictionary&lt;string, object&gt; Metrics { get; }\n\n    public ProcessedLogEntry(LogEntry originalLog)\n    {\n        OriginalLog = originalLog;\n        EnrichedData = new Dictionary&lt;string, object&gt;();\n        Tags = new List&lt;string&gt;();\n        Metrics = new Dictionary&lt;string, object&gt;();\n    }\n}\n\n// Sample processors\npublic class LogEnrichmentProcessor : ILogProcessor\n{\n    public int Priority =&gt; 1;\n\n    public Task ProcessAsync(ProcessedLogEntry logEntry)\n    {\n        // Add environment information\n        logEntry.EnrichedData[\"Environment\"] = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") ?? \"Unknown\";\n        logEntry.EnrichedData[\"MachineName\"] = Environment.MachineName;\n        logEntry.EnrichedData[\"OSVersion\"] = Environment.OSVersion.ToString();\n\n        // Add performance metrics\n        logEntry.Metrics[\"MemoryUsageMB\"] = GC.GetTotalMemory(false) / (1024 * 1024);\n        logEntry.Metrics[\"ThreadCount\"] = Process.GetCurrentProcess().Threads.Count;\n\n        return Task.CompletedTask;\n    }\n}\n\npublic class LogTaggingProcessor : ILogProcessor\n{\n    public int Priority =&gt; 2;\n\n    public Task ProcessAsync(ProcessedLogEntry logEntry)\n    {\n        // Add tags based on log level\n        if (logEntry.OriginalLog.Level == \"Error\" || logEntry.OriginalLog.Level == \"Critical\")\n        {\n            logEntry.Tags.Add(\"high-priority\");\n        }\n\n        // Add tags based on category\n        if (logEntry.OriginalLog.Category?.Contains(\"Security\") == true)\n        {\n            logEntry.Tags.Add(\"security\");\n        }\n\n        // Add tags based on content\n        if (logEntry.OriginalLog.Message?.Contains(\"Exception\") == true)\n        {\n            logEntry.Tags.Add(\"exception\");\n        }\n\n        return Task.CompletedTask;\n    }\n}\n</code></pre>"},{"location":"mid-level/monitoring/log-aggregation/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/monitoring/log-aggregation/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Log aggregation nedir?</li> <li> <p>Cevap: Farkl\u0131 kaynaklardan log'lar\u0131 toplama, i\u015fleme ve analiz etme.</p> </li> <li> <p>Centralized logging nedir?</p> </li> <li> <p>Cevap: T\u00fcm log'lar\u0131 merkezi bir sistemde toplama ve y\u00f6netme.</p> </li> <li> <p>Log processing pipeline nedir?</p> </li> <li> <p>Cevap: Log'lar\u0131 s\u0131rayla i\u015fleyen ve zenginle\u015ftiren sistem.</p> </li> <li> <p>Structured logging nedir?</p> </li> <li> <p>Cevap: JSON format\u0131nda structured data olarak log yazma.</p> </li> <li> <p>Log correlation nedir?</p> </li> <li>Cevap: Request'leri farkl\u0131 servisler aras\u0131nda takip etme.</li> </ol>"},{"location":"mid-level/monitoring/log-aggregation/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Log aggregation nas\u0131l implement edilir?</li> <li> <p>Cevap: Centralized service, batching, async processing, retry logic.</p> </li> <li> <p>Log processing nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Parallel processing, caching, filtering, compression.</p> </li> <li> <p>Log storage nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Time-series databases, Elasticsearch, data retention, indexing.</p> </li> <li> <p>Log search nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Full-text search, filtering, pagination, real-time search.</p> </li> <li> <p>Log analysis nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Aggregation queries, trend analysis, anomaly detection, reporting.</li> </ol>"},{"location":"mid-level/monitoring/log-aggregation/#best-practices","title":"Best Practices","text":"<ol> <li>Log Collection</li> <li>Structured logging kullan\u0131n</li> <li>Batch processing implement edin</li> <li>Error handling ekleyin</li> <li> <p>Performance monitoring yap\u0131n</p> </li> <li> <p>Log Processing</p> </li> <li>Pipeline architecture kullan\u0131n</li> <li>Priority-based processing implement edin</li> <li>Error isolation sa\u011flay\u0131n</li> <li> <p>Monitoring ekleyin</p> </li> <li> <p>Log Storage</p> </li> <li>Efficient indexing implement edin</li> <li>Data retention policies uygulay\u0131n</li> <li>Compression strategies kullan\u0131n</li> <li> <p>Backup procedures ekleyin</p> </li> <li> <p>Log Analysis</p> </li> <li>Real-time monitoring implement edin</li> <li>Alerting systems kurun</li> <li>Dashboard creation yap\u0131n</li> <li> <p>Trend analysis ekleyin</p> </li> <li> <p>Performance &amp; Scalability</p> </li> <li>Async processing kullan\u0131n</li> <li>Horizontal scaling implement edin</li> <li>Caching strategies uygulay\u0131n</li> <li>Load balancing ekleyin</li> </ol>"},{"location":"mid-level/monitoring/log-aggregation/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Log Aggregation</li> <li>Structured Logging</li> <li>Serilog</li> <li>ELK Stack</li> <li>Log Processing</li> </ul>"},{"location":"mid-level/monitoring/metrics-collection/","title":"Metrics Collection","text":""},{"location":"mid-level/monitoring/metrics-collection/#giris","title":"Giri\u015f","text":"<p>Metrics Collection, uygulama performans\u0131n\u0131, sistem sa\u011fl\u0131\u011f\u0131n\u0131 ve business metrics'leri izlemek i\u00e7in kullan\u0131lan sistemdir. Mid-level geli\u015ftiriciler i\u00e7in metrics collection'\u0131 anlamak, performance monitoring, alerting ve capacity planning i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, custom metrics, performance counters, metrics aggregation ve monitoring konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/monitoring/metrics-collection/#custom-metrics-implementation","title":"Custom Metrics Implementation","text":""},{"location":"mid-level/monitoring/metrics-collection/#1-metrics-service","title":"1. Metrics Service","text":"<p>Custom metrics collection implementasyonu.</p> <pre><code>public class MetricsService : IMetricsService\n{\n    private readonly ILogger&lt;MetricsService&gt; _logger;\n    private readonly Dictionary&lt;string, Counter&gt; _counters;\n    private readonly Dictionary&lt;string, Gauge&gt; _gauges;\n    private readonly Dictionary&lt;string, Histogram&gt; _histograms;\n    private readonly object _lock = new object();\n\n    public MetricsService(ILogger&lt;MetricsService&gt; logger)\n    {\n        _logger = logger;\n        _counters = new Dictionary&lt;string, Counter&gt;();\n        _gauges = new Dictionary&lt;string, Gauge&gt;();\n        _histograms = new Dictionary&lt;string, Histogram&gt;();\n    }\n\n    public void IncrementCounter(string name, Dictionary&lt;string, object&gt; labels = null)\n    {\n        lock (_lock)\n        {\n            if (!_counters.ContainsKey(name))\n            {\n                _counters[name] = new Counter(name);\n            }\n\n            _counters[name].Increment(labels);\n            _logger.LogDebug(\"Incremented counter: {Name}\", name);\n        }\n    }\n\n    public void SetGauge(string name, double value, Dictionary&lt;string, object&gt; labels = null)\n    {\n        lock (_lock)\n        {\n            if (!_gauges.ContainsKey(name))\n            {\n                _gauges[name] = new Gauge(name);\n            }\n\n            _gauges[name].SetValue(value, labels);\n            _logger.LogDebug(\"Set gauge: {Name} = {Value}\", name, value);\n        }\n    }\n\n    public void RecordHistogram(string name, double value, Dictionary&lt;string, object&gt; labels = null)\n    {\n        lock (_lock)\n        {\n            if (!_histograms.ContainsKey(name))\n            {\n                _histograms[name] = new Histogram(name);\n            }\n\n            _histograms[name].RecordValue(value, labels);\n            _logger.LogDebug(\"Recorded histogram: {Name} = {Value}\", name, value);\n        }\n    }\n\n    public MetricsSnapshot GetSnapshot()\n    {\n        lock (_lock)\n        {\n            return new MetricsSnapshot\n            {\n                Counters = _counters.ToDictionary(kvp =&gt; kvp.Key, kvp =&gt; kvp.Value.GetSnapshot()),\n                Gauges = _gauges.ToDictionary(kvp =&gt; kvp.Key, kvp =&gt; kvp.Value.GetSnapshot()),\n                Histograms = _histograms.ToDictionary(kvp =&gt; kvp.Key, kvp =&gt; kvp.Value.GetSnapshot()),\n                Timestamp = DateTime.UtcNow\n            };\n        }\n    }\n\n    public void Reset()\n    {\n        lock (_lock)\n        {\n            _counters.Clear();\n            _gauges.Clear();\n            _histograms.Clear();\n            _logger.LogInformation(\"All metrics reset\");\n        }\n    }\n}\n\npublic class Counter\n{\n    private readonly string _name;\n    private readonly Dictionary&lt;string, long&gt; _values;\n\n    public Counter(string name)\n    {\n        _name = name;\n        _values = new Dictionary&lt;string, long&gt;();\n    }\n\n    public void Increment(Dictionary&lt;string, object&gt; labels = null)\n    {\n        var key = GetLabelKey(labels);\n        if (!_values.ContainsKey(key))\n        {\n            _values[key] = 0;\n        }\n\n        _values[key]++;\n    }\n\n    public CounterSnapshot GetSnapshot()\n    {\n        return new CounterSnapshot\n        {\n            Name = _name,\n            Values = new Dictionary&lt;string, long&gt;(_values)\n        };\n    }\n\n    private string GetLabelKey(Dictionary&lt;string, object&gt; labels)\n    {\n        if (labels == null || !labels.Any())\n            return \"default\";\n\n        return string.Join(\"|\", labels.OrderBy(kvp =&gt; kvp.Key).Select(kvp =&gt; $\"{kvp.Key}={kvp.Value}\"));\n    }\n}\n\npublic class Gauge\n{\n    private readonly string _name;\n    private readonly Dictionary&lt;string, double&gt; _values;\n\n    public Gauge(string name)\n    {\n        _name = name;\n        _values = new Dictionary&lt;string, double&gt;();\n    }\n\n    public void SetValue(double value, Dictionary&lt;string, object&gt; labels = null)\n    {\n        var key = GetLabelKey(labels);\n        _values[key] = value;\n    }\n\n    public GaugeSnapshot GetSnapshot()\n    {\n        return new GaugeSnapshot\n        {\n            Name = _name,\n            Values = new Dictionary&lt;string, double&gt;(_values)\n        };\n    }\n\n    private string GetLabelKey(Dictionary&lt;string, object&gt; labels)\n    {\n        if (labels == null || !labels.Any())\n            return \"default\";\n\n        return string.Join(\"|\", labels.OrderBy(kvp =&gt; kvp.Key).Select(kvp =&gt; $\"{kvp.Key}={kvp.Value}\"));\n    }\n}\n\npublic class Histogram\n{\n    private readonly string _name;\n    private readonly Dictionary&lt;string, List&lt;double&gt;&gt; _values;\n\n    public Histogram(string name)\n    {\n        _name = name;\n        _values = new Dictionary&lt;string, List&lt;double&gt;&gt;();\n    }\n\n    public void RecordValue(double value, Dictionary&lt;string, object&gt; labels = null)\n    {\n        var key = GetLabelKey(labels);\n        if (!_values.ContainsKey(key))\n        {\n            _values[key] = new List&lt;double&gt;();\n        }\n\n        _values[key].Add(value);\n    }\n\n    public HistogramSnapshot GetSnapshot()\n    {\n        var snapshots = new Dictionary&lt;string, HistogramStats&gt;();\n\n        foreach (var kvp in _values)\n        {\n            var values = kvp.Value;\n            if (values.Any())\n            {\n                snapshots[kvp.Key] = new HistogramStats\n                {\n                    Count = values.Count,\n                    Sum = values.Sum(),\n                    Min = values.Min(),\n                    Max = values.Max(),\n                    Average = values.Average(),\n                    Percentile95 = CalculatePercentile(values, 95),\n                    Percentile99 = CalculatePercentile(values, 99)\n                };\n            }\n        }\n\n        return new HistogramSnapshot\n        {\n            Name = _name,\n            Stats = snapshots\n        };\n    }\n\n    private double CalculatePercentile(List&lt;double&gt; values, int percentile)\n    {\n        if (!values.Any()) return 0;\n\n        var sorted = values.OrderBy(v =&gt; v).ToList();\n        var index = (int)Math.Ceiling(percentile / 100.0 * sorted.Count) - 1;\n        return sorted[Math.Max(0, index)];\n    }\n\n    private string GetLabelKey(Dictionary&lt;string, object&gt; labels)\n    {\n        if (labels == null || !labels.Any())\n            return \"default\";\n\n        return string.Join(\"|\", labels.OrderBy(kvp =&gt; kvp.Key).Select(kvp =&gt; $\"{kvp.Key}={kvp.Value}\"));\n    }\n}\n\npublic interface IMetricsService\n{\n    void IncrementCounter(string name, Dictionary&lt;string, object&gt; labels = null);\n    void SetGauge(string name, double value, Dictionary&lt;string, object&gt; labels = null);\n    void RecordHistogram(string name, double value, Dictionary&lt;string, object&gt; labels = null);\n    MetricsSnapshot GetSnapshot();\n    void Reset();\n}\n\npublic class MetricsSnapshot\n{\n    public Dictionary&lt;string, CounterSnapshot&gt; Counters { get; set; } = new();\n    public Dictionary&lt;string, GaugeSnapshot&gt; Gauges { get; set; } = new();\n    public Dictionary&lt;string, HistogramSnapshot&gt; Histograms { get; set; } = new();\n    public DateTime Timestamp { get; set; }\n}\n\npublic class CounterSnapshot\n{\n    public string Name { get; set; }\n    public Dictionary&lt;string, long&gt; Values { get; set; } = new();\n}\n\npublic class GaugeSnapshot\n{\n    public string Name { get; set; }\n    public Dictionary&lt;string, double&gt; Values { get; set; } = new();\n}\n\npublic class HistogramSnapshot\n{\n    public string Name { get; set; }\n    public Dictionary&lt;string, HistogramStats&gt; Stats { get; set; } = new();\n}\n\npublic class HistogramStats\n{\n    public int Count { get; set; }\n    public double Sum { get; set; }\n    public double Min { get; set; }\n    public double Max { get; set; }\n    public double Average { get; set; }\n    public double Percentile95 { get; set; }\n    public double Percentile99 { get; set; }\n}\n</code></pre>"},{"location":"mid-level/monitoring/metrics-collection/#2-performance-metrics-collector","title":"2. Performance Metrics Collector","text":"<p>Performance metrics'leri toplayan servis.</p> <pre><code>public class PerformanceMetricsCollector : BackgroundService\n{\n    private readonly ILogger&lt;PerformanceMetricsCollector&gt; _logger;\n    private readonly IMetricsService _metricsService;\n    private readonly IConfiguration _configuration;\n    private readonly Timer _timer;\n\n    public PerformanceMetricsCollector(ILogger&lt;PerformanceMetricsCollector&gt; logger, \n        IMetricsService metricsService, IConfiguration configuration)\n    {\n        _logger = logger;\n        _metricsService = metricsService;\n        _configuration = configuration;\n\n        var interval = _configuration.GetValue&lt;int&gt;(\"Metrics:CollectionIntervalSeconds\", 60);\n        _timer = new Timer(CollectMetrics, null, TimeSpan.Zero, TimeSpan.FromSeconds(interval));\n    }\n\n    protected override Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        return Task.CompletedTask;\n    }\n\n    private async void CollectMetrics(object state)\n    {\n        try\n        {\n            await CollectSystemMetricsAsync();\n            await CollectApplicationMetricsAsync();\n            await CollectBusinessMetricsAsync();\n\n            _logger.LogDebug(\"Performance metrics collected successfully\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error collecting performance metrics\");\n        }\n    }\n\n    private async Task CollectSystemMetricsAsync()\n    {\n        try\n        {\n            // CPU usage\n            var cpuUsage = await GetCpuUsageAsync();\n            _metricsService.SetGauge(\"system.cpu.usage_percent\", cpuUsage);\n\n            // Memory usage\n            var memoryInfo = GC.GetTotalMemory(false);\n            var workingSet = Environment.WorkingSet;\n            var memoryUsagePercent = (double)workingSet / memoryInfo * 100;\n\n            _metricsService.SetGauge(\"system.memory.total_bytes\", memoryInfo);\n            _metricsService.SetGauge(\"system.memory.working_set_bytes\", workingSet);\n            _metricsService.SetGauge(\"system.memory.usage_percent\", memoryUsagePercent);\n\n            // Process metrics\n            var process = Process.GetCurrentProcess();\n            _metricsService.SetGauge(\"system.process.cpu_time_ms\", process.TotalProcessorTime.TotalMilliseconds);\n            _metricsService.SetGauge(\"system.process.thread_count\", process.Threads.Count);\n            _metricsService.SetGauge(\"system.process.handle_count\", process.HandleCount);\n\n            await Task.CompletedTask;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error collecting system metrics\");\n        }\n    }\n\n    private async Task CollectApplicationMetricsAsync()\n    {\n        try\n        {\n            // GC metrics\n            var gen0Collections = GC.CollectionCount(0);\n            var gen1Collections = GC.CollectionCount(1);\n            var gen2Collections = GC.CollectionCount(2);\n\n            _metricsService.SetGauge(\"application.gc.gen0_collections\", gen0Collections);\n            _metricsService.SetGauge(\"application.gc.gen1_collections\", gen1Collections);\n            _metricsService.SetGauge(\"application.gc.gen2_collections\", gen2Collections);\n\n            // Thread pool metrics\n            ThreadPool.GetAvailableThreads(out var workerThreads, out var completionPortThreads);\n            ThreadPool.GetMaxThreads(out var maxWorkerThreads, out var maxCompletionPortThreads);\n\n            _metricsService.SetGauge(\"application.threadpool.available_worker_threads\", workerThreads);\n            _metricsService.SetGauge(\"application.threadpool.available_completion_port_threads\", completionPortThreads);\n            _metricsService.SetGauge(\"application.threadpool.max_worker_threads\", maxWorkerThreads);\n            _metricsService.SetGauge(\"application.threadpool.max_completion_port_threads\", maxCompletionPortThreads);\n\n            await Task.CompletedTask;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error collecting application metrics\");\n        }\n    }\n\n    private async Task CollectBusinessMetricsAsync()\n    {\n        try\n        {\n            // Business-specific metrics can be added here\n            // For example: active users, request rates, business transactions\n\n            await Task.CompletedTask;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error collecting business metrics\");\n        }\n    }\n\n    private async Task&lt;double&gt; GetCpuUsageAsync()\n    {\n        try\n        {\n            var process = Process.GetCurrentProcess();\n            var startTime = process.TotalProcessorTime;\n            var startCpuTime = Environment.TickCount;\n\n            await Task.Delay(100); // Wait 100ms to get CPU usage\n\n            var endTime = process.TotalProcessorTime;\n            var endCpuTime = Environment.TickCount;\n\n            var cpuUsedMs = (endTime - startTime).TotalMilliseconds;\n            var totalMsPassed = endCpuTime - startCpuTime;\n            var cpuUsageTotal = cpuUsedMs / (Environment.ProcessorCount * totalMsPassed);\n\n            return cpuUsageTotal * 100;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting CPU usage\");\n            return 0;\n        }\n    }\n\n    public override void Dispose()\n    {\n        _timer?.Dispose();\n        base.Dispose();\n    }\n}\n</code></pre>"},{"location":"mid-level/monitoring/metrics-collection/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/monitoring/metrics-collection/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Metrics collection nedir?</li> <li> <p>Cevap: Uygulama ve sistem performans\u0131n\u0131 izlemek i\u00e7in veri toplama.</p> </li> <li> <p>Counter, Gauge, Histogram farklar\u0131 nelerdir?</p> </li> <li> <p>Cevap: Counter: artan de\u011fer, Gauge: anl\u0131k de\u011fer, Histogram: da\u011f\u0131l\u0131m.</p> </li> <li> <p>Performance metrics nelerdir?</p> </li> <li> <p>Cevap: CPU, memory, response time, throughput, error rate.</p> </li> <li> <p>Business metrics nedir?</p> </li> <li> <p>Cevap: \u0130\u015f s\u00fcre\u00e7lerini \u00f6l\u00e7en metrikler (user count, transaction rate).</p> </li> <li> <p>Metrics aggregation nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Sum, average, percentiles, time-based grouping.</li> </ol>"},{"location":"mid-level/monitoring/metrics-collection/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Custom metrics nas\u0131l implement edilir?</li> <li> <p>Cevap: IMetricsService interface, Counter/Gauge/Histogram classes.</p> </li> <li> <p>Performance counters nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: System.Diagnostics.PerformanceCounter, custom counters.</p> </li> <li> <p>Metrics sampling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Time-based sampling, rate limiting, adaptive sampling.</p> </li> <li> <p>Metrics storage nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Time-series databases, Prometheus, InfluxDB.</p> </li> <li> <p>Metrics visualization nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Grafana, custom dashboards, real-time monitoring.</li> </ol>"},{"location":"mid-level/monitoring/metrics-collection/#best-practices","title":"Best Practices","text":"<ol> <li>Metrics Design</li> <li>Meaningful names kullan\u0131n</li> <li>Consistent labeling implement edin</li> <li>Cardinality control edin</li> <li> <p>Documentation sa\u011flay\u0131n</p> </li> <li> <p>Performance Optimization</p> </li> <li>Efficient collection implement edin</li> <li>Sampling strategies uygulay\u0131n</li> <li>Background collection kullan\u0131n</li> <li> <p>Resource usage minimize edin</p> </li> <li> <p>Data Management</p> </li> <li>Retention policies uygulay\u0131n</li> <li>Data aggregation yap\u0131n</li> <li>Storage optimization sa\u011flay\u0131n</li> <li> <p>Backup strategies implement edin</p> </li> <li> <p>Monitoring &amp; Alerting</p> </li> <li>Threshold-based alerting kurun</li> <li>Trend analysis implement edin</li> <li>Anomaly detection ekleyin</li> <li> <p>Escalation procedures tan\u0131mlay\u0131n</p> </li> <li> <p>Integration</p> </li> <li>Standard formats kullan\u0131n</li> <li>Multiple backends support edin</li> <li>Export capabilities ekleyin</li> <li>Testing strategies implement edin</li> </ol>"},{"location":"mid-level/monitoring/metrics-collection/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Metrics Collection</li> <li>Performance Counters</li> <li>OpenTelemetry Metrics</li> <li>Prometheus Metrics</li> <li>Grafana Dashboards</li> </ul>"},{"location":"mid-level/performance-optimization/","title":"Performance Optimization","text":""},{"location":"mid-level/performance-optimization/#giris","title":"Giri\u015f","text":"<p>Performance optimization, modern .NET uygulamalar\u0131nda user experience, scalability ve resource utilization i\u00e7in kritik \u00f6neme sahiptir. Mid-level geli\u015ftiriciler i\u00e7in performance optimization tekniklerini anlamak, high-performance applications geli\u015ftirmek ve performance bottlenecks'leri \u00e7\u00f6zmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, caching, database optimization, memory management, async programming ve profiling konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/performance-optimization/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/performance-optimization/#1-caching","title":"1. Caching","text":"<p>Memory caching, distributed caching, ve cache optimization strategies.</p> <p>\u00d6\u011frenilecekler: - Memory cache strategies - Distributed cache usage - Cache invalidation - Cache patterns - Performance impact</p>"},{"location":"mid-level/performance-optimization/#2-database-optimization","title":"2. Database Optimization","text":"<p>Query optimization, indexing, ve database performance tuning.</p> <p>\u00d6\u011frenilecekler: - Query optimization - Index strategies - Connection pooling - Query caching - Performance monitoring</p>"},{"location":"mid-level/performance-optimization/#3-memory-management","title":"3. Memory Management","text":"<p>Memory allocation, garbage collection, ve memory optimization.</p> <p>\u00d6\u011frenilecekler: - Memory allocation patterns - Garbage collection optimization - Memory pooling - Memory leaks prevention - Performance monitoring</p>"},{"location":"mid-level/performance-optimization/#4-async-programming","title":"4. Async Programming","text":"<p>Asynchronous patterns, task management, ve performance optimization.</p> <p>\u00d6\u011frenilecekler: - Async/await patterns - Task optimization - Parallel processing - Resource utilization - Performance improvement</p>"},{"location":"mid-level/performance-optimization/#5-profiling","title":"5. Profiling","text":"<p>Performance measurement, bottleneck identification, ve optimization strategies.</p> <p>\u00d6\u011frenilecekler: - Performance profiling tools - Bottleneck identification - Optimization strategies - Performance testing - Monitoring strategies</p>"},{"location":"mid-level/performance-optimization/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/performance-optimization/#1-user-experience","title":"1. User Experience","text":"<ul> <li>Faster response times</li> <li>Better user satisfaction</li> <li>Reduced waiting times</li> <li>Improved usability</li> </ul>"},{"location":"mid-level/performance-optimization/#2-scalability","title":"2. Scalability","text":"<ul> <li>Better resource utilization</li> <li>Higher throughput</li> <li>Improved capacity</li> <li>Cost optimization</li> </ul>"},{"location":"mid-level/performance-optimization/#3-business-impact","title":"3. Business Impact","text":"<ul> <li>Better conversion rates</li> <li>Improved customer retention</li> <li>Reduced infrastructure costs</li> <li>Competitive advantage</li> </ul>"},{"location":"mid-level/performance-optimization/#4-technical-excellence","title":"4. Technical Excellence","text":"<ul> <li>Better code quality</li> <li>Improved maintainability</li> <li>Reduced technical debt</li> <li>Professional development</li> </ul>"},{"location":"mid-level/performance-optimization/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/performance-optimization/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Performance optimization nedir?</li> <li> <p>Cevap: Performance improvement, bottleneck elimination, resource optimization.</p> </li> <li> <p>Caching ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Frequently accessed data, expensive operations, performance improvement.</p> </li> <li> <p>Database optimization nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Query optimization, indexing, connection pooling, monitoring.</p> </li> <li> <p>Memory management neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Resource utilization, garbage collection, memory leaks, performance.</p> </li> <li> <p>Profiling nedir?</p> </li> <li>Cevap: Performance measurement, bottleneck identification, optimization planning.</li> </ol>"},{"location":"mid-level/performance-optimization/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Cache invalidation nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: Time-based, event-based, dependency-based, manual invalidation.</p> </li> <li> <p>Query performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Indexing, query rewriting, execution plan analysis, monitoring.</p> </li> <li> <p>Memory leaks nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Proper disposal, weak references, memory profiling, monitoring.</p> </li> <li> <p>Async performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Task composition, resource pooling, parallel processing, monitoring.</p> </li> <li> <p>Performance bottlenecks nas\u0131l tespit edilir?</p> </li> <li>Cevap: Profiling tools, monitoring, metrics analysis, load testing.</li> </ol>"},{"location":"mid-level/performance-optimization/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/performance-optimization/#1-caching-strategy","title":"1. Caching Strategy","text":"<ul> <li>Choose appropriate cache types</li> <li>Implement proper invalidation</li> <li>Monitor cache performance</li> <li>Plan for scalability</li> <li>Handle cache failures</li> </ul>"},{"location":"mid-level/performance-optimization/#2-database-optimization_1","title":"2. Database Optimization","text":"<ul> <li>Optimize queries</li> <li>Use appropriate indexes</li> <li>Implement connection pooling</li> <li>Monitor performance</li> <li>Plan for growth</li> </ul>"},{"location":"mid-level/performance-optimization/#3-memory-management_1","title":"3. Memory Management","text":"<ul> <li>Optimize allocations</li> <li>Monitor garbage collection</li> <li>Prevent memory leaks</li> <li>Use memory pooling</li> <li>Profile memory usage</li> </ul>"},{"location":"mid-level/performance-optimization/#4-async-optimization","title":"4. Async Optimization","text":"<ul> <li>Use appropriate patterns</li> <li>Optimize task composition</li> <li>Implement parallel processing</li> <li>Monitor resource usage</li> <li>Plan for scalability</li> </ul>"},{"location":"mid-level/performance-optimization/#5-performance-monitoring","title":"5. Performance Monitoring","text":"<ul> <li>Implement comprehensive monitoring</li> <li>Use profiling tools</li> <li>Track key metrics</li> <li>Set up alerting</li> <li>Plan for optimization</li> </ul>"},{"location":"mid-level/performance-optimization/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Performance Best Practices</li> <li>Caching Best Practices</li> <li>Database Performance</li> <li>Memory Management</li> <li>Async Programming</li> <li>Performance Profiling </li> </ul>"},{"location":"mid-level/performance-optimization/async-programming/","title":"Asenkron Programlama","text":""},{"location":"mid-level/performance-optimization/async-programming/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Asenkron programlama, uygulaman\u0131n uzun s\u00fcren i\u015flemleri (I/O, a\u011f istekleri, veritaban\u0131 sorgular\u0131 vb.) s\u0131ras\u0131nda thread'leri bloke etmeden \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flayan bir programlama modelidir. Bu sayede uygulama daha responsive ve \u00f6l\u00e7eklenebilir hale gelir.</p>"},{"location":"mid-level/performance-optimization/async-programming/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"mid-level/performance-optimization/async-programming/#1-asyncawait-pattern","title":"1. Async/Await Pattern","text":"<pre><code>public class OrderService\n{\n    private readonly IOrderRepository _repository;\n    private readonly ILogger&lt;OrderService&gt; _logger;\n\n    public OrderService(\n        IOrderRepository repository,\n        ILogger&lt;OrderService&gt; logger)\n    {\n        _repository = repository;\n        _logger = logger;\n    }\n\n    public async Task&lt;Order&gt; GetOrderAsync(int id)\n    {\n        try\n        {\n            _logger.LogInformation(\"Getting order {Id}\", id);\n\n            // Asenkron veritaban\u0131 sorgusu\n            var order = await _repository.GetByIdAsync(id);\n\n            if (order == null)\n            {\n                _logger.LogWarning(\"Order {Id} not found\", id);\n                return null;\n            }\n\n            // Asenkron hesaplama\n            await CalculateOrderTotalAsync(order);\n\n            _logger.LogInformation(\"Order {Id} retrieved successfully\", id);\n            return order;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting order {Id}\", id);\n            throw;\n        }\n    }\n\n    private async Task CalculateOrderTotalAsync(Order order)\n    {\n        // Uzun s\u00fcren hesaplama i\u015flemi\n        await Task.Run(() =&gt;\n        {\n            order.Total = order.Items.Sum(item =&gt; item.Price * item.Quantity);\n        });\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/async-programming/#2-task-parallel-library-tpl","title":"2. Task Parallel Library (TPL)","text":"<pre><code>public class DataProcessor\n{\n    private readonly ILogger&lt;DataProcessor&gt; _logger;\n\n    public DataProcessor(ILogger&lt;DataProcessor&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task ProcessDataAsync(List&lt;DataItem&gt; items)\n    {\n        // Paralel i\u015fleme\n        var tasks = items.Select(async item =&gt;\n        {\n            try\n            {\n                await ProcessItemAsync(item);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error processing item {Id}\", item.Id);\n            }\n        });\n\n        await Task.WhenAll(tasks);\n    }\n\n    private async Task ProcessItemAsync(DataItem item)\n    {\n        // CPU-bound i\u015flem\n        await Task.Run(() =&gt;\n        {\n            // Yo\u011fun hesaplama i\u015flemi\n            item.Process();\n        });\n\n        // I/O-bound i\u015flem\n        await SaveItemAsync(item);\n    }\n\n    private async Task SaveItemAsync(DataItem item)\n    {\n        // Dosya I/O i\u015flemi\n        await File.WriteAllTextAsync(\n            $\"item_{item.Id}.json\",\n            JsonSerializer.Serialize(item));\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/async-programming/#3-cancellation-token","title":"3. Cancellation Token","text":"<pre><code>public class LongRunningOperation\n{\n    private readonly ILogger&lt;LongRunningOperation&gt; _logger;\n\n    public LongRunningOperation(ILogger&lt;LongRunningOperation&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task ProcessAsync(CancellationToken cancellationToken)\n    {\n        try\n        {\n            // \u0130\u015flem ba\u015flad\u0131\n            _logger.LogInformation(\"Operation started\");\n\n            // Her ad\u0131mda iptal kontrol\u00fc\n            for (int i = 0; i &lt; 10; i++)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n\n                await Task.Delay(1000, cancellationToken);\n                _logger.LogInformation(\"Processing step {Step}\", i);\n            }\n\n            _logger.LogInformation(\"Operation completed\");\n        }\n        catch (OperationCanceledException)\n        {\n            _logger.LogInformation(\"Operation cancelled\");\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/async-programming/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/performance-optimization/async-programming/#1-asyncawait-kullanm","title":"1. Async/Await Kullan\u0131m\u0131","text":"<ul> <li>Async void'den ka\u00e7\u0131n\u0131n</li> <li>ConfigureAwait(false) kullan\u0131n</li> <li>Task.WhenAll/WhenAny kullan\u0131n</li> <li>Exception handling yap\u0131n</li> <li>Deadlock'lardan ka\u00e7\u0131n\u0131n</li> </ul>"},{"location":"mid-level/performance-optimization/async-programming/#2-performans-optimizasyonu","title":"2. Performans Optimizasyonu","text":"<ul> <li>CPU-bound i\u015flemleri Task.Run ile yap\u0131n</li> <li>I/O-bound i\u015flemleri async/await ile yap\u0131n</li> <li>Task pooling kullan\u0131n</li> <li>Memory allocation'\u0131 minimize edin</li> <li>Thread pool'u y\u00f6netin</li> </ul>"},{"location":"mid-level/performance-optimization/async-programming/#3-hata-yonetimi","title":"3. Hata Y\u00f6netimi","text":"<ul> <li>Try-catch bloklar\u0131n\u0131 do\u011fru kullan\u0131n</li> <li>AggregateException'lar\u0131 handle edin</li> <li>Cancellation token'lar\u0131 kullan\u0131n</li> <li>Timeout mekanizmalar\u0131 ekleyin</li> <li>Retry pattern uygulay\u0131n</li> </ul>"},{"location":"mid-level/performance-optimization/async-programming/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/performance-optimization/async-programming/#1-asyncawait-ne-zaman-kullanlmaldr","title":"1. Async/Await ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>I/O i\u015flemlerinde</li> <li>A\u011f isteklerinde</li> <li>Veritaban\u0131 sorgular\u0131nda</li> <li>Dosya i\u015flemlerinde</li> <li>Uzun s\u00fcren hesaplamalarda</li> </ul>"},{"location":"mid-level/performance-optimization/async-programming/#2-taskrun-ne-zaman-kullanlmaldr","title":"2. Task.Run ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>CPU-bound i\u015flemlerde</li> <li>UI thread'i bloke etmemek i\u00e7in</li> <li>Paralel i\u015fleme gerekti\u011finde</li> <li>Background task'lar i\u00e7in</li> <li>Legacy kod entegrasyonunda</li> </ul>"},{"location":"mid-level/performance-optimization/async-programming/#3-asenkron-programlamada-hangi-hatalar-yaplr","title":"3. Asenkron programlamada hangi hatalar yap\u0131l\u0131r?","text":"<ul> <li>Async void kullan\u0131m\u0131</li> <li>Deadlock olu\u015fturma</li> <li>Gereksiz Task.Run kullan\u0131m\u0131</li> <li>Exception handling eksikli\u011fi</li> <li>Cancellation token kullanmama</li> </ul>"},{"location":"mid-level/performance-optimization/async-programming/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Async/Await Best Practices</li> <li>Task Parallel Library</li> <li>Cancellation in Managed Threads</li> <li>Async Programming Patterns </li> </ul>"},{"location":"mid-level/performance-optimization/caching/","title":"Caching","text":""},{"location":"mid-level/performance-optimization/caching/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Caching (\u00f6nbellekleme), s\u0131k kullan\u0131lan verilerin h\u0131zl\u0131 eri\u015filebilir bir yerde saklanmas\u0131 ve gerekti\u011finde buradan al\u0131nmas\u0131 i\u015flemidir. Bu sayede veritaban\u0131 sorgular\u0131, hesaplamalar veya d\u0131\u015f servis \u00e7a\u011fr\u0131lar\u0131 gibi maliyetli i\u015flemler tekrarlanmaz ve uygulama performans\u0131 art\u0131r\u0131l\u0131r.</p>"},{"location":"mid-level/performance-optimization/caching/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"mid-level/performance-optimization/caching/#1-cache-turleri","title":"1. Cache T\u00fcrleri","text":"<ul> <li>In-Memory Cache: Verilerin uygulama belle\u011finde saklanmas\u0131</li> <li>Distributed Cache: Verilerin birden fazla sunucu aras\u0131nda payla\u015f\u0131lmas\u0131</li> <li>Response Cache: HTTP yan\u0131tlar\u0131n\u0131n \u00f6nbelle\u011fe al\u0131nmas\u0131</li> <li>Output Cache: Sayfa \u00e7\u0131kt\u0131lar\u0131n\u0131n \u00f6nbelle\u011fe al\u0131nmas\u0131</li> </ul>"},{"location":"mid-level/performance-optimization/caching/#2-cache-stratejileri","title":"2. Cache Stratejileri","text":"<pre><code>// In-Memory Cache \u00f6rne\u011fi\npublic class ProductService\n{\n    private readonly IMemoryCache _cache;\n    private readonly IProductRepository _repository;\n    private readonly ILogger&lt;ProductService&gt; _logger;\n\n    public ProductService(\n        IMemoryCache cache,\n        IProductRepository repository,\n        ILogger&lt;ProductService&gt; logger)\n    {\n        _cache = cache;\n        _repository = repository;\n        _logger = logger;\n    }\n\n    public async Task&lt;Product&gt; GetProductAsync(int id)\n    {\n        var cacheKey = $\"product_{id}\";\n\n        if (_cache.TryGetValue(cacheKey, out Product cachedProduct))\n        {\n            _logger.LogInformation(\"Product {Id} retrieved from cache\", id);\n            return cachedProduct;\n        }\n\n        var product = await _repository.GetByIdAsync(id);\n\n        var cacheOptions = new MemoryCacheEntryOptions()\n            .SetSlidingExpiration(TimeSpan.FromMinutes(30))\n            .SetAbsoluteExpiration(TimeSpan.FromHours(1))\n            .SetPriority(CacheItemPriority.Normal)\n            .RegisterPostEvictionCallback((key, value, reason, state) =&gt;\n            {\n                _logger.LogInformation(\"Cache entry {Key} was evicted due to {Reason}\", key, reason);\n            });\n\n        _cache.Set(cacheKey, product, cacheOptions);\n        _logger.LogInformation(\"Product {Id} added to cache\", id);\n\n        return product;\n    }\n}\n\n// Distributed Cache \u00f6rne\u011fi\npublic class DistributedCacheService\n{\n    private readonly IDistributedCache _cache;\n    private readonly ILogger&lt;DistributedCacheService&gt; _logger;\n\n    public DistributedCacheService(\n        IDistributedCache cache,\n        ILogger&lt;DistributedCacheService&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; GetOrSetAsync&lt;T&gt;(\n        string key,\n        Func&lt;Task&lt;T&gt;&gt; factory,\n        TimeSpan? expiration = null)\n    {\n        var cachedValue = await _cache.GetStringAsync(key);\n        if (cachedValue != null)\n        {\n            _logger.LogInformation(\"Value for key {Key} retrieved from cache\", key);\n            return JsonSerializer.Deserialize&lt;T&gt;(cachedValue);\n        }\n\n        var value = await factory();\n        var serializedValue = JsonSerializer.Serialize(value);\n\n        var options = new DistributedCacheEntryOptions\n        {\n            AbsoluteExpirationRelativeToNow = expiration ?? TimeSpan.FromMinutes(30)\n        };\n\n        await _cache.SetStringAsync(key, serializedValue, options);\n        _logger.LogInformation(\"Value for key {Key} added to cache\", key);\n\n        return value;\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/caching/#3-cache-invalidation","title":"3. Cache Invalidation","text":"<pre><code>public class CacheInvalidator\n{\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;CacheInvalidator&gt; _logger;\n\n    public CacheInvalidator(\n        IMemoryCache cache,\n        ILogger&lt;CacheInvalidator&gt; logger)\n    {\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public void InvalidateProduct(int productId)\n    {\n        var cacheKey = $\"product_{productId}\";\n        _cache.Remove(cacheKey);\n        _logger.LogInformation(\"Cache entry {Key} invalidated\", cacheKey);\n    }\n\n    public void InvalidateByPattern(string pattern)\n    {\n        var keys = _cache.GetKeys&lt;string&gt;()\n            .Where(k =&gt; k.StartsWith(pattern));\n\n        foreach (var key in keys)\n        {\n            _cache.Remove(key);\n            _logger.LogInformation(\"Cache entry {Key} invalidated by pattern\", key);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/caching/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/performance-optimization/caching/#1-cache-tasarm","title":"1. Cache Tasar\u0131m\u0131","text":"<ul> <li>Uygun cache stratejisini se\u00e7in</li> <li>Cache key'lerini anlaml\u0131 tasarlay\u0131n</li> <li>Cache s\u00fcrelerini optimize edin</li> <li>Cache boyutunu y\u00f6netin</li> <li>Cache invalidation stratejisi belirleyin</li> </ul>"},{"location":"mid-level/performance-optimization/caching/#2-performans-optimizasyonu","title":"2. Performans Optimizasyonu","text":"<ul> <li>Cache hit oran\u0131n\u0131 art\u0131r\u0131n</li> <li>Cache miss maliyetini azalt\u0131n</li> <li>Cache coherency'yi sa\u011flay\u0131n</li> <li>Cache partitioning kullan\u0131n</li> <li>Cache warming uygulay\u0131n</li> </ul>"},{"location":"mid-level/performance-optimization/caching/#3-guvenlik","title":"3. G\u00fcvenlik","text":"<ul> <li>Hassas verileri cache'lemeyin</li> <li>Cache poisoning'a kar\u015f\u0131 korunun</li> <li>Cache key'lerini g\u00fcvenli olu\u015fturun</li> <li>Cache eri\u015fimini kontrol edin</li> <li>Cache verilerini \u015fifreleyin</li> </ul>"},{"location":"mid-level/performance-optimization/caching/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/performance-optimization/caching/#1-ne-zaman-cache-kullanlmaldr","title":"1. Ne zaman cache kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>S\u0131k eri\u015filen veriler i\u00e7in</li> <li>Hesaplama maliyeti y\u00fcksek i\u015flemler i\u00e7in</li> <li>D\u0131\u015f servis \u00e7a\u011fr\u0131lar\u0131 i\u00e7in</li> <li>Statik i\u00e7erik i\u00e7in</li> <li>Session verileri i\u00e7in</li> </ul>"},{"location":"mid-level/performance-optimization/caching/#2-hangi-cache-cozumleri-kullanlabilir","title":"2. Hangi cache \u00e7\u00f6z\u00fcmleri kullan\u0131labilir?","text":"<ul> <li>In-Memory: IMemoryCache, MemoryCache</li> <li>Distributed: Redis, NCache, Memcached</li> <li>Response: ResponseCache, OutputCache</li> <li>Browser: LocalStorage, SessionStorage</li> </ul>"},{"location":"mid-level/performance-optimization/caching/#3-cache-kullanrken-nelere-dikkat-edilmelidir","title":"3. Cache kullan\u0131rken nelere dikkat edilmelidir?","text":"<ul> <li>Cache invalidation stratejisi</li> <li>Cache boyutu y\u00f6netimi</li> <li>Cache coherency</li> <li>Cache security</li> <li>Cache monitoring</li> </ul>"},{"location":"mid-level/performance-optimization/caching/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Caching Best Practices</li> <li>Distributed Caching in ASP.NET Core</li> <li>Response Caching in ASP.NET Core</li> <li>Redis Documentation </li> </ul>"},{"location":"mid-level/performance-optimization/database-optimization/","title":"Veritaban\u0131 Optimizasyonu","text":""},{"location":"mid-level/performance-optimization/database-optimization/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Veritaban\u0131 optimizasyonu, veritaban\u0131 sorgular\u0131n\u0131n ve i\u015flemlerinin daha h\u0131zl\u0131 ve verimli \u00e7al\u0131\u015fmas\u0131 i\u00e7in yap\u0131lan iyile\u015ftirmelerdir. Bu optimizasyonlar, sorgu performans\u0131n\u0131 art\u0131r\u0131r, kaynak kullan\u0131m\u0131n\u0131 azalt\u0131r ve sistem \u00f6l\u00e7eklenebilirli\u011fini iyile\u015ftirir.</p>"},{"location":"mid-level/performance-optimization/database-optimization/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"mid-level/performance-optimization/database-optimization/#1-indeksleme","title":"1. \u0130ndeksleme","text":"<pre><code>// Entity Framework Core'da indeks tan\u0131mlama\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Category { get; set; }\n    public decimal Price { get; set; }\n    public DateTime CreatedDate { get; set; }\n}\n\npublic class ApplicationDbContext : DbContext\n{\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // Tek kolon indeksi\n        modelBuilder.Entity&lt;Product&gt;()\n            .HasIndex(p =&gt; p.Name);\n\n        // Bile\u015fik indeks\n        modelBuilder.Entity&lt;Product&gt;()\n            .HasIndex(p =&gt; new { p.Category, p.Price });\n\n        // Benzersiz indeks\n        modelBuilder.Entity&lt;Product&gt;()\n            .HasIndex(p =&gt; p.Name)\n            .IsUnique();\n\n        // Filtrelenmi\u015f indeks\n        modelBuilder.Entity&lt;Product&gt;()\n            .HasIndex(p =&gt; p.Price)\n            .HasFilter(\"[Price] &gt; 1000\");\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/database-optimization/#2-sorgu-optimizasyonu","title":"2. Sorgu Optimizasyonu","text":"<pre><code>public class ProductRepository\n{\n    private readonly ApplicationDbContext _context;\n    private readonly ILogger&lt;ProductRepository&gt; _logger;\n\n    public ProductRepository(\n        ApplicationDbContext context,\n        ILogger&lt;ProductRepository&gt; logger)\n    {\n        _context = context;\n        _logger = logger;\n    }\n\n    // N+1 problemi \u00e7\u00f6z\u00fcm\u00fc\n    public async Task&lt;List&lt;Product&gt;&gt; GetProductsWithCategoryAsync()\n    {\n        return await _context.Products\n            .Include(p =&gt; p.Category)  // Eager loading\n            .ToListAsync();\n    }\n\n    // Select N+1 problemi \u00e7\u00f6z\u00fcm\u00fc\n    public async Task&lt;List&lt;ProductDto&gt;&gt; GetProductDtosAsync()\n    {\n        return await _context.Products\n            .Select(p =&gt; new ProductDto\n            {\n                Id = p.Id,\n                Name = p.Name,\n                CategoryName = p.Category.Name\n            })\n            .ToListAsync();\n    }\n\n    // Batch i\u015flem \u00f6rne\u011fi\n    public async Task BulkInsertProductsAsync(List&lt;Product&gt; products)\n    {\n        await _context.BulkInsertAsync(products, options =&gt;\n        {\n            options.BatchSize = 1000;\n            options.AutoMapOutputDirection = false;\n        });\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/database-optimization/#3-baglant-yonetimi","title":"3. Ba\u011flant\u0131 Y\u00f6netimi","text":"<pre><code>public class DatabaseConnectionManager\n{\n    private readonly string _connectionString;\n    private readonly ILogger&lt;DatabaseConnectionManager&gt; _logger;\n\n    public DatabaseConnectionManager(\n        IConfiguration configuration,\n        ILogger&lt;DatabaseConnectionManager&gt; logger)\n    {\n        _connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; ExecuteWithRetryAsync&lt;T&gt;(Func&lt;IDbConnection, Task&lt;T&gt;&gt; operation)\n    {\n        var policy = Policy\n            .Handle&lt;SqlException&gt;()\n            .WaitAndRetryAsync(3, retryAttempt =&gt; \n                TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)),\n                (exception, timeSpan, retryCount, context) =&gt;\n                {\n                    _logger.LogWarning(\n                        exception,\n                        \"Retry {RetryCount} after {TimeSpan} due to {Exception}\",\n                        retryCount,\n                        timeSpan,\n                        exception.Message);\n                });\n\n        return await policy.ExecuteAsync(async () =&gt;\n        {\n            using var connection = new SqlConnection(_connectionString);\n            await connection.OpenAsync();\n            return await operation(connection);\n        });\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/database-optimization/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/performance-optimization/database-optimization/#1-indeks-tasarm","title":"1. \u0130ndeks Tasar\u0131m\u0131","text":"<ul> <li>S\u0131k sorgulanan kolonlar\u0131 indeksleyin</li> <li>Bile\u015fik indeksleri do\u011fru s\u0131rada olu\u015fturun</li> <li>Gereksiz indekslerden ka\u00e7\u0131n\u0131n</li> <li>\u0130ndeks bak\u0131m\u0131n\u0131 d\u00fczenli yap\u0131n</li> <li>\u0130ndeks fragmentasyonunu izleyin</li> </ul>"},{"location":"mid-level/performance-optimization/database-optimization/#2-sorgu-optimizasyonu_1","title":"2. Sorgu Optimizasyonu","text":"<ul> <li>N+1 problemini \u00f6nleyin</li> <li>Gereksiz kolon se\u00e7iminden ka\u00e7\u0131n\u0131n</li> <li>JOIN'leri optimize edin</li> <li>Subquery'leri dikkatli kullan\u0131n</li> <li>Batch i\u015flemleri kullan\u0131n</li> </ul>"},{"location":"mid-level/performance-optimization/database-optimization/#3-baglant-yonetimi_1","title":"3. Ba\u011flant\u0131 Y\u00f6netimi","text":"<ul> <li>Ba\u011flant\u0131 havuzunu yap\u0131land\u0131r\u0131n</li> <li>Ba\u011flant\u0131 s\u00fcrelerini optimize edin</li> <li>Retry mekanizmas\u0131 kullan\u0131n</li> <li>Ba\u011flant\u0131 hatalar\u0131n\u0131 y\u00f6netin</li> <li>Ba\u011flant\u0131 izleme yap\u0131n</li> </ul>"},{"location":"mid-level/performance-optimization/database-optimization/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/performance-optimization/database-optimization/#1-indeksleme-ne-zaman-kullanlmaldr","title":"1. \u0130ndeksleme ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>S\u0131k sorgulanan kolonlar i\u00e7in</li> <li>JOIN i\u015flemlerinde kullan\u0131lan kolonlar i\u00e7in</li> <li>WHERE ko\u015fullar\u0131nda kullan\u0131lan kolonlar i\u00e7in</li> <li>ORDER BY ve GROUP BY i\u015flemlerinde kullan\u0131lan kolonlar i\u00e7in</li> <li>Benzersiz de\u011fer gerektiren kolonlar i\u00e7in</li> </ul>"},{"location":"mid-level/performance-optimization/database-optimization/#2-sorgu-performans-nasl-iyilestirilir","title":"2. Sorgu performans\u0131 nas\u0131l iyile\u015ftirilir?","text":"<ul> <li>Execution plan analizi yap\u0131n</li> <li>\u0130ndeks kullan\u0131m\u0131n\u0131 optimize edin</li> <li>Sorgu yap\u0131s\u0131n\u0131 basitle\u015ftirin</li> <li>Gereksiz JOIN'lerden ka\u00e7\u0131n\u0131n</li> <li>Batch i\u015flemleri kullan\u0131n</li> </ul>"},{"location":"mid-level/performance-optimization/database-optimization/#3-veritaban-baglantlar-nasl-yonetilir","title":"3. Veritaban\u0131 ba\u011flant\u0131lar\u0131 nas\u0131l y\u00f6netilir?","text":"<ul> <li>Ba\u011flant\u0131 havuzu boyutunu ayarlay\u0131n</li> <li>Ba\u011flant\u0131 s\u00fcrelerini yap\u0131land\u0131r\u0131n</li> <li>Retry politikalar\u0131 uygulay\u0131n</li> <li>Ba\u011flant\u0131 hatalar\u0131n\u0131 izleyin</li> <li>Ba\u011flant\u0131 kaynaklar\u0131n\u0131 temizleyin</li> </ul>"},{"location":"mid-level/performance-optimization/database-optimization/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>SQL Server Performance Tuning</li> <li>Entity Framework Core Performance</li> <li>Database Connection Pooling</li> <li>SQL Server Index Architecture </li> </ul>"},{"location":"mid-level/performance-optimization/memory-management/","title":"Bellek Y\u00f6netimi","text":""},{"location":"mid-level/performance-optimization/memory-management/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Bellek y\u00f6netimi, uygulaman\u0131n bellek kullan\u0131m\u0131n\u0131 optimize etmek ve bellek s\u0131z\u0131nt\u0131lar\u0131n\u0131 \u00f6nlemek i\u00e7in yap\u0131lan i\u015flemlerdir. .NET'te otomatik bellek y\u00f6netimi (Garbage Collection) kullan\u0131l\u0131r, ancak baz\u0131 durumlarda manuel bellek y\u00f6netimi de gerekebilir.</p>"},{"location":"mid-level/performance-optimization/memory-management/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"mid-level/performance-optimization/memory-management/#1-garbage-collection","title":"1. Garbage Collection","text":"<pre><code>public class MemoryAnalyzer\n{\n    private readonly ILogger&lt;MemoryAnalyzer&gt; _logger;\n\n    public MemoryAnalyzer(ILogger&lt;MemoryAnalyzer&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void AnalyzeMemoryUsage()\n    {\n        // Bellek kullan\u0131m\u0131n\u0131 analiz et\n        var process = Process.GetCurrentProcess();\n        var memoryUsage = process.WorkingSet64;\n        var peakMemoryUsage = process.PeakWorkingSet64;\n\n        _logger.LogInformation(\n            \"Current Memory Usage: {MemoryUsage}MB, Peak: {PeakMemoryUsage}MB\",\n            memoryUsage / 1024 / 1024,\n            peakMemoryUsage / 1024 / 1024);\n\n        // GC istatistiklerini al\n        var totalMemory = GC.GetTotalMemory(false);\n        var maxGeneration = GC.MaxGeneration;\n\n        _logger.LogInformation(\n            \"Total Memory: {TotalMemory}MB, Max Generation: {MaxGeneration}\",\n            totalMemory / 1024 / 1024,\n            maxGeneration);\n    }\n\n    public void ForceGarbageCollection()\n    {\n        // GC'yi manuel olarak tetikle\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n\n        _logger.LogInformation(\"Garbage collection completed\");\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/memory-management/#2-bellek-havuzu-object-pool","title":"2. Bellek Havuzu (Object Pool)","text":"<pre><code>public class ObjectPool&lt;T&gt; where T : class, new()\n{\n    private readonly ConcurrentBag&lt;T&gt; _objects;\n    private readonly int _maxSize;\n    private int _currentSize;\n\n    public ObjectPool(int maxSize = 100)\n    {\n        _objects = new ConcurrentBag&lt;T&gt;();\n        _maxSize = maxSize;\n        _currentSize = 0;\n    }\n\n    public T Get()\n    {\n        if (_objects.TryTake(out T item))\n        {\n            return item;\n        }\n\n        if (_currentSize &lt; _maxSize)\n        {\n            Interlocked.Increment(ref _currentSize);\n            return new T();\n        }\n\n        throw new InvalidOperationException(\"Pool limit reached\");\n    }\n\n    public void Return(T item)\n    {\n        if (_currentSize &lt;= _maxSize)\n        {\n            _objects.Add(item);\n        }\n    }\n}\n\n// Kullan\u0131m \u00f6rne\u011fi\npublic class ConnectionPool\n{\n    private readonly ObjectPool&lt;SqlConnection&gt; _pool;\n\n    public ConnectionPool()\n    {\n        _pool = new ObjectPool&lt;SqlConnection&gt;(10);\n    }\n\n    public async Task&lt;SqlConnection&gt; GetConnectionAsync()\n    {\n        var connection = _pool.Get();\n        if (connection.State != ConnectionState.Open)\n        {\n            await connection.OpenAsync();\n        }\n        return connection;\n    }\n\n    public void ReturnConnection(SqlConnection connection)\n    {\n        _pool.Return(connection);\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/memory-management/#3-idisposable-pattern","title":"3. IDisposable Pattern","text":"<pre><code>public class ResourceManager : IDisposable\n{\n    private bool _disposed;\n    private readonly ILogger&lt;ResourceManager&gt; _logger;\n    private readonly List&lt;IDisposable&gt; _resources;\n\n    public ResourceManager(ILogger&lt;ResourceManager&gt; logger)\n    {\n        _logger = logger;\n        _resources = new List&lt;IDisposable&gt;();\n    }\n\n    public void AddResource(IDisposable resource)\n    {\n        _resources.Add(resource);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!_disposed)\n        {\n            if (disposing)\n            {\n                foreach (var resource in _resources)\n                {\n                    try\n                    {\n                        resource.Dispose();\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogError(ex, \"Error disposing resource\");\n                    }\n                }\n                _resources.Clear();\n            }\n            _disposed = true;\n        }\n    }\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/memory-management/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/performance-optimization/memory-management/#1-bellek-kullanm","title":"1. Bellek Kullan\u0131m\u0131","text":"<ul> <li>B\u00fcy\u00fck nesneleri dikkatli kullan\u0131n</li> <li>Bellek s\u0131z\u0131nt\u0131lar\u0131n\u0131 \u00f6nleyin</li> <li>IDisposable pattern'i uygulay\u0131n</li> <li>Object pooling kullan\u0131n</li> <li>Bellek fragmentasyonunu izleyin</li> </ul>"},{"location":"mid-level/performance-optimization/memory-management/#2-garbage-collection","title":"2. Garbage Collection","text":"<ul> <li>GC'yi manuel tetiklemekten ka\u00e7\u0131n\u0131n</li> <li>Finalizer'lar\u0131 dikkatli kullan\u0131n</li> <li>Weak references kullan\u0131n</li> <li>Large Object Heap'\u0131 y\u00f6netin</li> <li>GC modlar\u0131n\u0131 anlay\u0131n</li> </ul>"},{"location":"mid-level/performance-optimization/memory-management/#3-bellek-izleme","title":"3. Bellek \u0130zleme","text":"<ul> <li>Memory profiler kullan\u0131n</li> <li>Bellek kullan\u0131m\u0131n\u0131 loglay\u0131n</li> <li>Bellek s\u0131z\u0131nt\u0131lar\u0131n\u0131 tespit edin</li> <li>Performans metriklerini izleyin</li> <li>Alarm mekanizmalar\u0131 kurun</li> </ul>"},{"location":"mid-level/performance-optimization/memory-management/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/performance-optimization/memory-management/#1-bellek-sznts-nedir-ve-nasl-onlenir","title":"1. Bellek s\u0131z\u0131nt\u0131s\u0131 nedir ve nas\u0131l \u00f6nlenir?","text":"<ul> <li>Event handler'lar\u0131 d\u00fczg\u00fcn temizleyin</li> <li>IDisposable nesneleri dispose edin</li> <li>Static koleksiyonlar\u0131 dikkatli kullan\u0131n</li> <li>Timer'lar\u0131 d\u00fczg\u00fcn y\u00f6netin</li> <li>Weak references kullan\u0131n</li> </ul>"},{"location":"mid-level/performance-optimization/memory-management/#2-garbage-collection-nasl-calsr","title":"2. Garbage Collection nas\u0131l \u00e7al\u0131\u015f\u0131r?","text":"<ul> <li>Generations (0, 1, 2)</li> <li>Mark and Sweep algoritmas\u0131</li> <li>Finalization queue</li> <li>Large Object Heap</li> <li>GC modlar\u0131 (Workstation, Server)</li> </ul>"},{"location":"mid-level/performance-optimization/memory-management/#3-bellek-optimizasyonu-icin-hangi-araclar-kullanlabilir","title":"3. Bellek optimizasyonu i\u00e7in hangi ara\u00e7lar kullan\u0131labilir?","text":"<ul> <li>Visual Studio Memory Profiler</li> <li>dotMemory</li> <li>PerfView</li> <li>CLR Profiler</li> <li>Windows Performance Monitor</li> </ul>"},{"location":"mid-level/performance-optimization/memory-management/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>.NET Garbage Collection</li> <li>Memory Management Best Practices</li> <li>Object Pooling in .NET</li> <li>IDisposable Pattern </li> </ul>"},{"location":"mid-level/performance-optimization/profiling/","title":"Profiling","text":""},{"location":"mid-level/performance-optimization/profiling/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Profiling (performans analizi), bir uygulaman\u0131n \u00e7al\u0131\u015fma zaman\u0131ndaki davran\u0131\u015f\u0131n\u0131 ve performans\u0131n\u0131 analiz etme s\u00fcrecidir. Bu analiz, performans sorunlar\u0131n\u0131 tespit etmek, darbo\u011fazlar\u0131 belirlemek ve optimizasyon f\u0131rsatlar\u0131n\u0131 ortaya \u00e7\u0131karmak i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"mid-level/performance-optimization/profiling/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"mid-level/performance-optimization/profiling/#1-cpu-profiling","title":"1. CPU Profiling","text":"<pre><code>public class CpuProfiler\n{\n    private readonly ILogger&lt;CpuProfiler&gt; _logger;\n    private readonly Stopwatch _stopwatch = new();\n\n    public CpuProfiler(ILogger&lt;CpuProfiler&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task&lt;T&gt; ProfileAsync&lt;T&gt;(string operationName, Func&lt;Task&lt;T&gt;&gt; operation)\n    {\n        _stopwatch.Restart();\n        var startCpuTime = Process.GetCurrentProcess().TotalProcessorTime;\n\n        try\n        {\n            return await operation();\n        }\n        finally\n        {\n            _stopwatch.Stop();\n            var endCpuTime = Process.GetCurrentProcess().TotalProcessorTime;\n            var cpuTime = endCpuTime - startCpuTime;\n\n            _logger.LogInformation(\n                \"Operation {OperationName} took {ElapsedMilliseconds}ms (CPU: {CpuTime}ms)\",\n                operationName,\n                _stopwatch.ElapsedMilliseconds,\n                cpuTime.TotalMilliseconds);\n        }\n    }\n\n    public void ProfileAction(string operationName, Action operation)\n    {\n        _stopwatch.Restart();\n        var startCpuTime = Process.GetCurrentProcess().TotalProcessorTime;\n\n        try\n        {\n            operation();\n        }\n        finally\n        {\n            _stopwatch.Stop();\n            var endCpuTime = Process.GetCurrentProcess().TotalProcessorTime;\n            var cpuTime = endCpuTime - startCpuTime;\n\n            _logger.LogInformation(\n                \"Operation {OperationName} took {ElapsedMilliseconds}ms (CPU: {CpuTime}ms)\",\n                operationName,\n                _stopwatch.ElapsedMilliseconds,\n                cpuTime.TotalMilliseconds);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/profiling/#2-memory-profiling","title":"2. Memory Profiling","text":"<pre><code>public class MemoryProfiler\n{\n    private readonly ILogger&lt;MemoryProfiler&gt; _logger;\n\n    public MemoryProfiler(ILogger&lt;MemoryProfiler&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogMemoryUsage(string context)\n    {\n        var process = Process.GetCurrentProcess();\n        var memoryUsage = process.WorkingSet64;\n        var privateMemory = process.PrivateMemorySize64;\n        var virtualMemory = process.VirtualMemorySize64;\n\n        _logger.LogInformation(\n            \"Memory Usage ({Context}): Working Set: {WorkingSet}MB, Private: {PrivateMemory}MB, Virtual: {VirtualMemory}MB\",\n            context,\n            memoryUsage / 1024 / 1024,\n            privateMemory / 1024 / 1024,\n            virtualMemory / 1024 / 1024);\n    }\n\n    public void LogGarbageCollectionStats()\n    {\n        var gen0Collections = GC.CollectionCount(0);\n        var gen1Collections = GC.CollectionCount(1);\n        var gen2Collections = GC.CollectionCount(2);\n        var totalMemory = GC.GetTotalMemory(false);\n\n        _logger.LogInformation(\n            \"GC Stats: Gen0: {Gen0}, Gen1: {Gen1}, Gen2: {Gen2}, Total Memory: {TotalMemory}MB\",\n            gen0Collections,\n            gen1Collections,\n            gen2Collections,\n            totalMemory / 1024 / 1024);\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/profiling/#3-performance-counter","title":"3. Performance Counter","text":"<pre><code>public class PerformanceMonitor\n{\n    private readonly ILogger&lt;PerformanceMonitor&gt; _logger;\n    private readonly List&lt;PerformanceCounter&gt; _counters = new();\n\n    public PerformanceMonitor(ILogger&lt;PerformanceMonitor&gt; logger)\n    {\n        _logger = logger;\n        InitializeCounters();\n    }\n\n    private void InitializeCounters()\n    {\n        // CPU kullan\u0131m\u0131\n        _counters.Add(new PerformanceCounter(\n            \"Processor\",\n            \"% Processor Time\",\n            \"_Total\"));\n\n        // Bellek kullan\u0131m\u0131\n        _counters.Add(new PerformanceCounter(\n            \"Memory\",\n            \"Available MBytes\"));\n\n        // Disk I/O\n        _counters.Add(new PerformanceCounter(\n            \"PhysicalDisk\",\n            \"% Disk Time\",\n            \"_Total\"));\n    }\n\n    public void LogPerformanceMetrics()\n    {\n        foreach (var counter in _counters)\n        {\n            try\n            {\n                var value = counter.NextValue();\n                _logger.LogInformation(\n                    \"Performance Counter {CounterName}: {Value}\",\n                    counter.CounterName,\n                    value);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error reading counter {CounterName}\", counter.CounterName);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/performance-optimization/profiling/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/performance-optimization/profiling/#1-profiling-stratejisi","title":"1. Profiling Stratejisi","text":"<ul> <li>Profiling hedeflerini belirleyin</li> <li>Do\u011fru ara\u00e7lar\u0131 se\u00e7in</li> <li>Test senaryolar\u0131n\u0131 haz\u0131rlay\u0131n</li> <li>Baseline \u00f6l\u00e7\u00fcmleri al\u0131n</li> <li>Sonu\u00e7lar\u0131 dok\u00fcmante edin</li> </ul>"},{"location":"mid-level/performance-optimization/profiling/#2-performans-metrikleri","title":"2. Performans Metrikleri","text":"<ul> <li>CPU kullan\u0131m\u0131n\u0131 izleyin</li> <li>Bellek kullan\u0131m\u0131n\u0131 takip edin</li> <li>I/O operasyonlar\u0131n\u0131 \u00f6l\u00e7\u00fcn</li> <li>A\u011f trafi\u011fini analiz edin</li> <li>Response time'\u0131 \u00f6l\u00e7\u00fcn</li> </ul>"},{"location":"mid-level/performance-optimization/profiling/#3-analiz-ve-raporlama","title":"3. Analiz ve Raporlama","text":"<ul> <li>Darbo\u011fazlar\u0131 tespit edin</li> <li>Trend analizi yap\u0131n</li> <li>\u00d6neriler geli\u015ftirin</li> <li>Raporlar\u0131 payla\u015f\u0131n</li> <li>\u0130yile\u015ftirmeleri takip edin</li> </ul>"},{"location":"mid-level/performance-optimization/profiling/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"mid-level/performance-optimization/profiling/#1-hangi-profiling-araclar-kullanlabilir","title":"1. Hangi profiling ara\u00e7lar\u0131 kullan\u0131labilir?","text":"<ul> <li>Visual Studio Profiler</li> <li>dotTrace</li> <li>ANTS Performance Profiler</li> <li>PerfView</li> <li>Application Insights</li> </ul>"},{"location":"mid-level/performance-optimization/profiling/#2-profiling-ne-zaman-yaplmaldr","title":"2. Profiling ne zaman yap\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Performans sorunlar\u0131 ya\u015fand\u0131\u011f\u0131nda</li> <li>Yeni \u00f6zellikler eklendi\u011finde</li> <li>D\u00fczenli performans kontrollerinde</li> <li>Kapasite planlamas\u0131 yaparken</li> <li>Optimizasyon \u00f6ncesi ve sonras\u0131</li> </ul>"},{"location":"mid-level/performance-optimization/profiling/#3-profiling-sonuclar-nasl-yorumlanr","title":"3. Profiling sonu\u00e7lar\u0131 nas\u0131l yorumlan\u0131r?","text":"<ul> <li>Baseline ile kar\u015f\u0131la\u015ft\u0131r\u0131n</li> <li>Trend analizi yap\u0131n</li> <li>Darbo\u011fazlar\u0131 belirleyin</li> <li>\u00d6neriler geli\u015ftirin</li> <li>Sonu\u00e7lar\u0131 dok\u00fcmante edin</li> </ul>"},{"location":"mid-level/performance-optimization/profiling/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Visual Studio Profiling Tools</li> <li>Application Performance Monitoring</li> <li>Performance Counters in .NET</li> <li>Memory Profiling in .NET </li> </ul>"},{"location":"mid-level/security/api-security/","title":"API Security","text":""},{"location":"mid-level/security/api-security/#giris","title":"Giri\u015f","text":"<p>API Security, modern web uygulamalar\u0131nda en kritik g\u00fcvenlik konular\u0131ndan biridir. Mid-level geli\u015ftiriciler i\u00e7in API g\u00fcvenli\u011fini anlamak, g\u00fcvenli ve g\u00fcvenilir sistemler tasarlamada esast\u0131r. Bu dosya, API g\u00fcvenlik tehditlerini, korunma y\u00f6ntemlerini ve best practice'leri kapsar.</p>"},{"location":"mid-level/security/api-security/#api-security-threats","title":"API Security Threats","text":""},{"location":"mid-level/security/api-security/#1-authentication-bypass","title":"1. Authentication Bypass","text":"<p>API'lerde authentication mekanizmalar\u0131n\u0131n bypass edilmesi.</p> <pre><code>public class AuthenticationBypassProtection\n{\n    private readonly IUserService _userService;\n    private readonly ILogger&lt;AuthenticationBypassProtection&gt; _logger;\n\n    public AuthenticationBypassProtection(\n        IUserService userService,\n        ILogger&lt;AuthenticationBypassProtection&gt; logger)\n    {\n        _userService = userService;\n        _logger = logger;\n    }\n\n    public async Task&lt;bool&gt; ValidateAuthenticationAsync(HttpContext context)\n    {\n        try\n        {\n            // Check if user is authenticated\n            if (!context.User.Identity.IsAuthenticated)\n            {\n                _logger.LogWarning(\"Unauthenticated access attempt to {Path}\", context.Request.Path);\n                return false;\n            }\n\n            // Validate JWT token if present\n            var token = ExtractTokenFromContext(context);\n            if (!string.IsNullOrEmpty(token))\n            {\n                var isValid = await ValidateJwtTokenAsync(token);\n                if (!isValid)\n                {\n                    _logger.LogWarning(\"Invalid JWT token for user {UserId}\", context.User.Identity.Name);\n                    return false;\n                }\n            }\n\n            // Check if user exists and is active\n            var userId = context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (!string.IsNullOrEmpty(userId))\n            {\n                var user = await _userService.GetUserByIdAsync(userId);\n                if (user == null || !user.IsActive)\n                {\n                    _logger.LogWarning(\"Inactive or non-existent user {UserId} attempting access\", userId);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating authentication\");\n            return false;\n        }\n    }\n\n    private string ExtractTokenFromContext(HttpContext context)\n    {\n        var authorizationHeader = context.Request.Headers[\"Authorization\"].FirstOrDefault();\n\n        if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith(\"Bearer \"))\n        {\n            return null;\n        }\n\n        return authorizationHeader.Substring(\"Bearer \".Length).Trim();\n    }\n\n    private async Task&lt;bool&gt; ValidateJwtTokenAsync(string token)\n    {\n        try\n        {\n            // Implement JWT validation logic\n            // This is a simplified example\n            return !string.IsNullOrEmpty(token) &amp;&amp; token.Length &gt; 10;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating JWT token\");\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/security/api-security/#2-authorization-vulnerabilities","title":"2. Authorization Vulnerabilities","text":"<p>Kullan\u0131c\u0131lar\u0131n yetkileri d\u0131\u015f\u0131ndaki kaynaklara eri\u015fim sa\u011flamas\u0131.</p> <pre><code>public class AuthorizationService\n{\n    private readonly IUserService _userService;\n    private readonly IRoleService _roleService;\n    private readonly IPermissionService _permissionService;\n    private readonly ILogger&lt;AuthorizationService&gt; _logger;\n\n    public AuthorizationService(\n        IUserService userService,\n        IRoleService roleService,\n        IPermissionService permissionService,\n        ILogger&lt;AuthorizationService&gt; logger)\n    {\n        _userService = userService;\n        _roleService = roleService;\n        _permissionService = permissionService;\n        _logger = logger;\n    }\n\n    public async Task&lt;bool&gt; AuthorizeAsync(string userId, string resource, string action)\n    {\n        try\n        {\n            // Get user permissions\n            var userPermissions = await GetUserPermissionsAsync(userId);\n\n            // Check if user has permission for the specific resource and action\n            var hasPermission = userPermissions.Any(p =&gt; \n                p.Resource == resource &amp;&amp; \n                p.Action == action &amp;&amp; \n                p.IsGranted);\n\n            if (!hasPermission)\n            {\n                _logger.LogWarning(\"User {UserId} denied access to {Resource} with action {Action}\", \n                    userId, resource, action);\n            }\n\n            return hasPermission;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error authorizing user {UserId} for {Resource} {Action}\", \n                userId, resource, action);\n            return false; // Fail secure\n        }\n    }\n\n    public async Task&lt;bool&gt; AuthorizeResourceAccessAsync(string userId, string resourceId, string resourceType)\n    {\n        try\n        {\n            // Get user's resource access permissions\n            var resourcePermissions = await GetResourcePermissionsAsync(userId, resourceType);\n\n            // Check if user owns the resource or has admin access\n            var hasAccess = resourcePermissions.Any(p =&gt; \n                (p.ResourceId == resourceId &amp;&amp; p.IsOwner) || \n                (p.ResourceType == resourceType &amp;&amp; p.Action == \"admin\"));\n\n            if (!hasAccess)\n            {\n                _logger.LogWarning(\"User {UserId} denied access to {ResourceType} {ResourceId}\", \n                    userId, resourceType, resourceId);\n            }\n\n            return hasAccess;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error authorizing resource access for user {UserId}\", userId);\n            return false;\n        }\n    }\n\n    private async Task&lt;IEnumerable&lt;Permission&gt;&gt; GetUserPermissionsAsync(string userId)\n    {\n        var user = await _userService.GetUserByIdAsync(userId);\n        if (user == null) return Enumerable.Empty&lt;Permission&gt;();\n\n        var roles = await _roleService.GetUserRolesAsync(userId);\n        var permissions = new List&lt;Permission&gt;();\n\n        foreach (var role in roles)\n        {\n            var rolePermissions = await _permissionService.GetRolePermissionsAsync(role.Id);\n            permissions.AddRange(rolePermissions);\n        }\n\n        return permissions;\n    }\n\n    private async Task&lt;IEnumerable&lt;ResourcePermission&gt;&gt; GetResourcePermissionsAsync(string userId, string resourceType)\n    {\n        // Implementation for resource-specific permissions\n        return await _permissionService.GetResourcePermissionsAsync(userId, resourceType);\n    }\n}\n\npublic class Permission\n{\n    public string Id { get; set; }\n    public string Resource { get; set; }\n    public string Action { get; set; }\n    public bool IsGranted { get; set; }\n}\n\npublic class ResourcePermission\n{\n    public string Id { get; set; }\n    public string UserId { get; set; }\n    public string ResourceId { get; set; }\n    public string ResourceType { get; set; }\n    public string Action { get; set; }\n    public bool IsOwner { get; set; }\n}\n</code></pre>"},{"location":"mid-level/security/api-security/#3-input-validation-attacks","title":"3. Input Validation Attacks","text":"<p>API'ye g\u00f6nderilen verilerin do\u011frulanmamas\u0131 sonucu olu\u015fan g\u00fcvenlik a\u00e7\u0131klar\u0131.</p> <pre><code>public class InputValidationService\n{\n    private readonly ILogger&lt;InputValidationService&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public InputValidationService(\n        ILogger&lt;InputValidationService&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public ValidationResult ValidateUserInput(UserInputModel input)\n    {\n        var result = new ValidationResult();\n\n        try\n        {\n            // Validate email\n            if (!string.IsNullOrEmpty(input.Email))\n            {\n                if (!IsValidEmail(input.Email))\n                {\n                    result.AddError(\"Email\", \"Invalid email format\");\n                }\n\n                // Check for SQL injection patterns\n                if (ContainsSqlInjectionPatterns(input.Email))\n                {\n                    result.AddError(\"Email\", \"Invalid characters detected\");\n                    _logger.LogWarning(\"Potential SQL injection attempt in email: {Email}\", input.Email);\n                }\n            }\n\n            // Validate username\n            if (!string.IsNullOrEmpty(input.Username))\n            {\n                if (input.Username.Length &lt; 3 || input.Username.Length &gt; 50)\n                {\n                    result.AddError(\"Username\", \"Username must be between 3 and 50 characters\");\n                }\n\n                if (!Regex.IsMatch(input.Username, @\"^[a-zA-Z0-9_-]+$\"))\n                {\n                    result.AddError(\"Username\", \"Username contains invalid characters\");\n                }\n            }\n\n            // Validate password strength\n            if (!string.IsNullOrEmpty(input.Password))\n            {\n                var passwordValidation = ValidatePasswordStrength(input.Password);\n                if (!passwordValidation.IsValid)\n                {\n                    result.AddError(\"Password\", passwordValidation.ErrorMessage);\n                }\n            }\n\n            // Validate file upload\n            if (input.ProfileImage != null)\n            {\n                var fileValidation = ValidateFileUpload(input.ProfileImage);\n                if (!fileValidation.IsValid)\n                {\n                    result.AddError(\"ProfileImage\", fileValidation.ErrorMessage);\n                }\n            }\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating user input\");\n            result.AddError(\"General\", \"Validation error occurred\");\n            return result;\n        }\n    }\n\n    public ValidationResult ValidateApiRequest(ApiRequestModel request)\n    {\n        var result = new ValidationResult();\n\n        try\n        {\n            // Validate request size\n            var requestSize = GetRequestSize(request);\n            var maxRequestSize = _configuration.GetValue&lt;int&gt;(\"Api:MaxRequestSize\", 10485760); // 10MB default\n\n            if (requestSize &gt; maxRequestSize)\n            {\n                result.AddError(\"Request\", $\"Request size exceeds maximum allowed size of {maxRequestSize} bytes\");\n                _logger.LogWarning(\"Large request detected: {Size} bytes\", requestSize);\n            }\n\n            // Validate rate limiting\n            if (!ValidateRateLimit(request.ClientId))\n            {\n                result.AddError(\"RateLimit\", \"Rate limit exceeded\");\n                _logger.LogWarning(\"Rate limit exceeded for client {ClientId}\", request.ClientId);\n            }\n\n            // Validate content type\n            if (!IsValidContentType(request.ContentType))\n            {\n                result.AddError(\"ContentType\", \"Invalid content type\");\n            }\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating API request\");\n            result.AddError(\"General\", \"Validation error occurred\");\n            return result;\n        }\n    }\n\n    private bool IsValidEmail(string email)\n    {\n        try\n        {\n            var addr = new System.Net.Mail.MailAddress(email);\n            return addr.Address == email;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n\n    private bool ContainsSqlInjectionPatterns(string input)\n    {\n        if (string.IsNullOrEmpty(input)) return false;\n\n        var sqlPatterns = new[]\n        {\n            \"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"DROP\", \"CREATE\", \"ALTER\",\n            \"EXEC\", \"EXECUTE\", \"UNION\", \"OR 1=1\", \"OR '1'='1\", \"--\", \"/*\", \"*/\"\n        };\n\n        var upperInput = input.ToUpperInvariant();\n        return sqlPatterns.Any(pattern =&gt; upperInput.Contains(pattern));\n    }\n\n    private PasswordValidationResult ValidatePasswordStrength(string password)\n    {\n        var result = new PasswordValidationResult();\n\n        if (string.IsNullOrEmpty(password) || password.Length &lt; 8)\n        {\n            result.IsValid = false;\n            result.ErrorMessage = \"Password must be at least 8 characters long\";\n            return result;\n        }\n\n        if (!Regex.IsMatch(password, @\"[A-Z]\"))\n        {\n            result.IsValid = false;\n            result.ErrorMessage = \"Password must contain at least one uppercase letter\";\n            return result;\n        }\n\n        if (!Regex.IsMatch(password, @\"[a-z]\"))\n        {\n            result.IsValid = false;\n            result.ErrorMessage = \"Password must contain at least one lowercase letter\";\n            return result;\n        }\n\n        if (!Regex.IsMatch(password, @\"[0-9]\"))\n        {\n            result.IsValid = false;\n            result.ErrorMessage = \"Password must contain at least one number\";\n            return result;\n        }\n\n        if (!Regex.IsMatch(password, @\"[^A-Za-z0-9]\"))\n        {\n            result.IsValid = false;\n            result.ErrorMessage = \"Password must contain at least one special character\";\n            return result;\n        }\n\n        result.IsValid = true;\n        return result;\n    }\n\n    private FileValidationResult ValidateFileUpload(IFormFile file)\n    {\n        var result = new FileValidationResult();\n\n        // Check file size\n        var maxFileSize = _configuration.GetValue&lt;int&gt;(\"FileUpload:MaxSize\", 5242880); // 5MB default\n        if (file.Length &gt; maxFileSize)\n        {\n            result.IsValid = false;\n            result.ErrorMessage = $\"File size exceeds maximum allowed size of {maxFileSize} bytes\";\n            return result;\n        }\n\n        // Check file extension\n        var allowedExtensions = _configuration.GetSection(\"FileUpload:AllowedExtensions\").Get&lt;string[]&gt;() \n            ?? new[] { \".jpg\", \".jpeg\", \".png\", \".gif\" };\n\n        var fileExtension = Path.GetExtension(file.FileName).ToLowerInvariant();\n        if (!allowedExtensions.Contains(fileExtension))\n        {\n            result.IsValid = false;\n            result.ErrorMessage = $\"File extension {fileExtension} is not allowed\";\n            return result;\n        }\n\n        // Check MIME type\n        var allowedMimeTypes = _configuration.GetSection(\"FileUpload:AllowedMimeTypes\").Get&lt;string[]&gt;()\n            ?? new[] { \"image/jpeg\", \"image/png\", \"image/gif\" };\n\n        if (!allowedMimeTypes.Contains(file.ContentType.ToLowerInvariant()))\n        {\n            result.IsValid = false;\n            result.ErrorMessage = $\"File type {file.ContentType} is not allowed\";\n            return result;\n        }\n\n        result.IsValid = true;\n        return result;\n    }\n\n    private long GetRequestSize(ApiRequestModel request)\n    {\n        // Calculate request size based on content\n        var size = 0L;\n\n        if (request.Body != null)\n        {\n            size += request.Body.Length;\n        }\n\n        if (request.Headers != null)\n        {\n            size += request.Headers.Sum(h =&gt; h.Key.Length + h.Value.Length);\n        }\n\n        return size;\n    }\n\n    private bool ValidateRateLimit(string clientId)\n    {\n        // Implement rate limiting logic\n        // This is a simplified example\n        return true;\n    }\n\n    private bool IsValidContentType(string contentType)\n    {\n        var validTypes = new[]\n        {\n            \"application/json\",\n            \"application/xml\",\n            \"application/x-www-form-urlencoded\",\n            \"multipart/form-data\"\n        };\n\n        return validTypes.Contains(contentType?.ToLowerInvariant());\n    }\n}\n\npublic class ValidationResult\n{\n    public List&lt;ValidationError&gt; Errors { get; } = new List&lt;ValidationError&gt;();\n    public bool IsValid =&gt; !Errors.Any();\n\n    public void AddError(string field, string message)\n    {\n        Errors.Add(new ValidationError { Field = field, Message = message });\n    }\n}\n\npublic class ValidationError\n{\n    public string Field { get; set; }\n    public string Message { get; set; }\n}\n\npublic class PasswordValidationResult\n{\n    public bool IsValid { get; set; }\n    public string ErrorMessage { get; set; }\n}\n\npublic class FileValidationResult\n{\n    public bool IsValid { get; set; }\n    public string ErrorMessage { get; set; }\n}\n</code></pre>"},{"location":"mid-level/security/api-security/#api-security-middleware","title":"API Security Middleware","text":""},{"location":"mid-level/security/api-security/#1-security-headers-middleware","title":"1. Security Headers Middleware","text":"<p>G\u00fcvenlik ba\u015fl\u0131klar\u0131n\u0131 otomatik olarak ekleyen middleware.</p> <pre><code>public class SecurityHeadersMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;SecurityHeadersMiddleware&gt; _logger;\n    private readonly SecurityHeadersOptions _options;\n\n    public SecurityHeadersMiddleware(\n        RequestDelegate next,\n        ILogger&lt;SecurityHeadersMiddleware&gt; logger,\n        IOptions&lt;SecurityHeadersOptions&gt; options)\n    {\n        _next = next;\n        _logger = logger;\n        _options = options.Value;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            // Add security headers\n            AddSecurityHeaders(context.Response);\n\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error in security headers middleware\");\n            await _next(context);\n        }\n    }\n\n    private void AddSecurityHeaders(HttpResponse response)\n    {\n        // Content Security Policy\n        if (_options.EnableContentSecurityPolicy)\n        {\n            response.Headers[\"Content-Security-Policy\"] = _options.ContentSecurityPolicy;\n        }\n\n        // X-Frame-Options\n        if (_options.EnableXFrameOptions)\n        {\n            response.Headers[\"X-Frame-Options\"] = _options.XFrameOptions;\n        }\n\n        // X-Content-Type-Options\n        if (_options.EnableXContentTypeOptions)\n        {\n            response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n        }\n\n        // X-XSS-Protection\n        if (_options.EnableXXssProtection)\n        {\n            response.Headers[\"X-XSS-Protection\"] = \"1; mode=block\";\n        }\n\n        // Referrer Policy\n        if (_options.EnableReferrerPolicy)\n        {\n            response.Headers[\"Referrer-Policy\"] = _options.ReferrerPolicy;\n        }\n\n        // Strict Transport Security\n        if (_options.EnableStrictTransportSecurity)\n        {\n            response.Headers[\"Strict-Transport-Security\"] = _options.StrictTransportSecurity;\n        }\n\n        // Permissions Policy\n        if (_options.EnablePermissionsPolicy)\n        {\n            response.Headers[\"Permissions-Policy\"] = _options.PermissionsPolicy;\n        }\n\n        // Remove server header\n        if (_options.RemoveServerHeader)\n        {\n            response.Headers.Remove(\"Server\");\n        }\n\n        // Remove X-Powered-By header\n        if (_options.RemoveXPoweredByHeader)\n        {\n            response.Headers.Remove(\"X-Powered-By\");\n        }\n    }\n}\n\npublic class SecurityHeadersOptions\n{\n    public bool EnableContentSecurityPolicy { get; set; } = true;\n    public string ContentSecurityPolicy { get; set; } = \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';\";\n\n    public bool EnableXFrameOptions { get; set; } = true;\n    public string XFrameOptions { get; set; } = \"DENY\";\n\n    public bool EnableXContentTypeOptions { get; set; } = true;\n    public bool EnableXXssProtection { get; set; } = true;\n\n    public bool EnableReferrerPolicy { get; set; } = true;\n    public string ReferrerPolicy { get; set; } = \"strict-origin-when-cross-origin\";\n\n    public bool EnableStrictTransportSecurity { get; set; } = true;\n    public string StrictTransportSecurity { get; set; } = \"max-age=31536000; includeSubDomains\";\n\n    public bool EnablePermissionsPolicy { get; set; } = true;\n    public string PermissionsPolicy { get; set; } = \"geolocation=(), microphone=(), camera=()\";\n\n    public bool RemoveServerHeader { get; set; } = true;\n    public bool RemoveXPoweredByHeader { get; set; } = true;\n}\n\npublic static class SecurityHeadersMiddlewareExtensions\n{\n    public static IApplicationBuilder UseSecurityHeaders(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware&lt;SecurityHeadersMiddleware&gt;();\n    }\n}\n</code></pre>"},{"location":"mid-level/security/api-security/#2-api-rate-limiting-middleware","title":"2. API Rate Limiting Middleware","text":"<p>API rate limiting implementasyonu.</p> <pre><code>public class ApiRateLimitingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;ApiRateLimitingMiddleware&gt; _logger;\n    private readonly RateLimitingOptions _options;\n\n    public ApiRateLimitingMiddleware(\n        RequestDelegate next,\n        IMemoryCache cache,\n        ILogger&lt;ApiRateLimitingMiddleware&gt; logger,\n        IOptions&lt;RateLimitingOptions&gt; options)\n    {\n        _next = next;\n        _cache = cache;\n        _logger = logger;\n        _options = options.Value;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            var clientIdentifier = GetClientIdentifier(context);\n\n            if (await IsRateLimitExceededAsync(clientIdentifier))\n            {\n                _logger.LogWarning(\"Rate limit exceeded for client {ClientId}\", clientIdentifier);\n\n                context.Response.StatusCode = 429; // Too Many Requests\n                context.Response.Headers[\"Retry-After\"] = _options.RetryAfterSeconds.ToString();\n\n                var errorResponse = new\n                {\n                    Error = \"Rate limit exceeded\",\n                    RetryAfter = _options.RetryAfterSeconds,\n                    Message = \"Too many requests. Please try again later.\"\n                };\n\n                await context.Response.WriteAsJsonAsync(errorResponse);\n                return;\n            }\n\n            // Add rate limit headers\n            AddRateLimitHeaders(context.Response, clientIdentifier);\n\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error in rate limiting middleware\");\n            await _next(context);\n        }\n    }\n\n    private string GetClientIdentifier(HttpContext context)\n    {\n        // Try to get client ID from various sources\n        var clientId = context.User?.FindFirst(\"client_id\")?.Value;\n\n        if (!string.IsNullOrEmpty(clientId))\n        {\n            return clientId;\n        }\n\n        // Fall back to IP address\n        var ipAddress = context.Connection.RemoteIpAddress?.ToString();\n        if (!string.IsNullOrEmpty(ipAddress))\n        {\n            return $\"ip_{ipAddress}\";\n        }\n\n        // Fall back to user agent\n        var userAgent = context.Request.Headers[\"User-Agent\"].FirstOrDefault();\n        if (!string.IsNullOrEmpty(userAgent))\n        {\n            return $\"ua_{userAgent.GetHashCode()}\";\n        }\n\n        return \"unknown\";\n    }\n\n    private async Task&lt;bool&gt; IsRateLimitExceededAsync(string clientIdentifier)\n    {\n        var cacheKey = $\"rate_limit:{clientIdentifier}\";\n\n        if (_cache.TryGetValue(cacheKey, out RateLimitInfo rateLimitInfo))\n        {\n            // Check if window has expired\n            if (DateTime.UtcNow &gt;= rateLimitInfo.WindowEnd)\n            {\n                // Reset for new window\n                rateLimitInfo = new RateLimitInfo\n                {\n                    RequestCount = 1,\n                    WindowStart = DateTime.UtcNow,\n                    WindowEnd = DateTime.UtcNow.AddSeconds(_options.WindowSizeSeconds)\n                };\n            }\n            else\n            {\n                // Increment request count\n                rateLimitInfo.RequestCount++;\n            }\n        }\n        else\n        {\n            // First request in new window\n            rateLimitInfo = new RateLimitInfo\n            {\n                RequestCount = 1,\n                WindowStart = DateTime.UtcNow,\n                WindowEnd = DateTime.UtcNow.AddSeconds(_options.WindowSizeSeconds)\n            };\n        }\n\n        // Update cache\n        var cacheOptions = new MemoryCacheEntryOptions\n        {\n            AbsoluteExpiration = rateLimitInfo.WindowEnd\n        };\n\n        _cache.Set(cacheKey, rateLimitInfo, cacheOptions);\n\n        return rateLimitInfo.RequestCount &gt; _options.MaxRequestsPerWindow;\n    }\n\n    private void AddRateLimitHeaders(HttpResponse response, string clientIdentifier)\n    {\n        var cacheKey = $\"rate_limit:{clientIdentifier}\";\n\n        if (_cache.TryGetValue(cacheKey, out RateLimitInfo rateLimitInfo))\n        {\n            response.Headers[\"X-RateLimit-Limit\"] = _options.MaxRequestsPerWindow.ToString();\n            response.Headers[\"X-RateLimit-Remaining\"] = Math.Max(0, _options.MaxRequestsPerWindow - rateLimitInfo.RequestCount).ToString();\n            response.Headers[\"X-RateLimit-Reset\"] = ((DateTimeOffset)rateLimitInfo.WindowEnd).ToUnixTimeSeconds().ToString();\n        }\n    }\n}\n\npublic class RateLimitInfo\n{\n    public int RequestCount { get; set; }\n    public DateTime WindowStart { get; set; }\n    public DateTime WindowEnd { get; set; }\n}\n\npublic class RateLimitingOptions\n{\n    public int MaxRequestsPerWindow { get; set; } = 100;\n    public int WindowSizeSeconds { get; set; } = 60;\n    public int RetryAfterSeconds { get; set; } = 60;\n}\n\npublic static class ApiRateLimitingMiddlewareExtensions\n{\n    public static IApplicationBuilder UseApiRateLimiting(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware&lt;ApiRateLimitingMiddleware&gt;();\n    }\n}\n</code></pre>"},{"location":"mid-level/security/api-security/#api-security-best-practices","title":"API Security Best Practices","text":""},{"location":"mid-level/security/api-security/#1-secure-configuration","title":"1. Secure Configuration","text":"<pre><code>public class SecurityConfiguration\n{\n    public static void ConfigureSecurityServices(IServiceCollection services, IConfiguration configuration)\n    {\n        // Configure authentication\n        services.AddAuthentication(options =&gt;\n        {\n            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n        })\n        .AddJwtBearer(options =&gt;\n        {\n            options.TokenValidationParameters = new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateLifetime = true,\n                ValidateIssuerSigningKey = true,\n                ValidIssuer = configuration[\"Jwt:Issuer\"],\n                ValidAudience = configuration[\"Jwt:Audience\"],\n                IssuerSigningKey = new SymmetricSecurityKey(\n                    Encoding.UTF8.GetBytes(configuration[\"Jwt:Key\"]))\n            };\n        });\n\n        // Configure authorization\n        services.AddAuthorization(options =&gt;\n        {\n            options.AddPolicy(\"RequireAdminRole\", policy =&gt;\n                policy.RequireRole(\"Admin\"));\n\n            options.AddPolicy(\"RequireUserRole\", policy =&gt;\n                policy.RequireRole(\"User\", \"Admin\"));\n\n            options.AddPolicy(\"RequireApiKey\", policy =&gt;\n                policy.RequireClaim(\"api_key\"));\n        });\n\n        // Configure CORS\n        services.AddCors(options =&gt;\n        {\n            options.AddPolicy(\"SecureCorsPolicy\", policy =&gt;\n            {\n                policy.WithOrigins(configuration.GetSection(\"AllowedOrigins\").Get&lt;string[]&gt;())\n                      .AllowAnyMethod()\n                      .AllowAnyHeader()\n                      .AllowCredentials();\n            });\n        });\n\n        // Configure security headers\n        services.Configure&lt;SecurityHeadersOptions&gt;(configuration.GetSection(\"SecurityHeaders\"));\n\n        // Configure rate limiting\n        services.Configure&lt;RateLimitingOptions&gt;(configuration.GetSection(\"RateLimiting\"));\n    }\n\n    public static void ConfigureSecurityApp(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        // Use HTTPS redirection in production\n        if (env.IsProduction())\n        {\n            app.UseHttpsRedirection();\n        }\n\n        // Use security headers\n        app.UseSecurityHeaders();\n\n        // Use CORS\n        app.UseCors(\"SecureCorsPolicy\");\n\n        // Use rate limiting\n        app.UseApiRateLimiting();\n\n        // Use authentication and authorization\n        app.UseAuthentication();\n        app.UseAuthorization();\n    }\n}\n</code></pre>"},{"location":"mid-level/security/api-security/#2-security-monitoring","title":"2. Security Monitoring","text":"<pre><code>public class SecurityMonitoringService\n{\n    private readonly ILogger&lt;SecurityMonitoringService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IMemoryCache _cache;\n\n    public SecurityMonitoringService(\n        ILogger&lt;SecurityMonitoringService&gt; logger,\n        IConfiguration configuration,\n        IMemoryCache cache)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _cache = cache;\n    }\n\n    public void LogSecurityEvent(SecurityEvent securityEvent)\n    {\n        try\n        {\n            // Log security event\n            _logger.LogWarning(\"Security Event: {EventType} - {Description} - User: {UserId} - IP: {IpAddress} - Timestamp: {Timestamp}\",\n                securityEvent.EventType,\n                securityEvent.Description,\n                securityEvent.UserId ?? \"Anonymous\",\n                securityEvent.IpAddress,\n                securityEvent.Timestamp);\n\n            // Store in cache for monitoring\n            var cacheKey = $\"security_event_{DateTime.UtcNow:yyyyMMdd}\";\n            var events = _cache.Get&lt;List&lt;SecurityEvent&gt;&gt;(cacheKey) ?? new List&lt;SecurityEvent&gt;();\n            events.Add(securityEvent);\n\n            var cacheOptions = new MemoryCacheEntryOptions\n            {\n                AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1)\n            };\n\n            _cache.Set(cacheKey, events, cacheOptions);\n\n            // Check for security alerts\n            CheckSecurityAlerts(events);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error logging security event\");\n        }\n    }\n\n    private void CheckSecurityAlerts(List&lt;SecurityEvent&gt; events)\n    {\n        var recentEvents = events.Where(e =&gt; \n            e.Timestamp &gt;= DateTime.UtcNow.AddMinutes(-5)).ToList();\n\n        // Check for multiple failed login attempts\n        var failedLogins = recentEvents.Count(e =&gt; e.EventType == SecurityEventType.FailedLogin);\n        if (failedLogins &gt;= 5)\n        {\n            _logger.LogError(\"SECURITY ALERT: Multiple failed login attempts detected. Count: {Count}\", failedLogins);\n            // Send alert notification\n            SendSecurityAlert(\"Multiple failed login attempts detected\", failedLogins);\n        }\n\n        // Check for suspicious IP addresses\n        var suspiciousIps = recentEvents\n            .GroupBy(e =&gt; e.IpAddress)\n            .Where(g =&gt; g.Count() &gt;= 10)\n            .Select(g =&gt; g.Key);\n\n        foreach (var ip in suspiciousIps)\n        {\n            _logger.LogError(\"SECURITY ALERT: Suspicious activity from IP {IpAddress}\", ip);\n            SendSecurityAlert($\"Suspicious activity from IP {ip}\", 0);\n        }\n\n        // Check for unauthorized access attempts\n        var unauthorizedAccess = recentEvents.Count(e =&gt; e.EventType == SecurityEventType.UnauthorizedAccess);\n        if (unauthorizedAccess &gt;= 3)\n        {\n            _logger.LogError(\"SECURITY ALERT: Multiple unauthorized access attempts detected. Count: {Count}\", unauthorizedAccess);\n            SendSecurityAlert(\"Multiple unauthorized access attempts detected\", unauthorizedAccess);\n        }\n    }\n\n    private void SendSecurityAlert(string message, int count)\n    {\n        // Implement alert notification logic\n        // This could be email, SMS, Slack, etc.\n        _logger.LogWarning(\"SECURITY ALERT: {Message} - Count: {Count}\", message, count);\n    }\n}\n\npublic class SecurityEvent\n{\n    public SecurityEventType EventType { get; set; }\n    public string Description { get; set; }\n    public string UserId { get; set; }\n    public string IpAddress { get; set; }\n    public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    public Dictionary&lt;string, object&gt; AdditionalData { get; set; } = new Dictionary&lt;string, object&gt;();\n}\n\npublic enum SecurityEventType\n{\n    FailedLogin,\n    SuccessfulLogin,\n    UnauthorizedAccess,\n    SuspiciousActivity,\n    RateLimitExceeded,\n    InvalidToken,\n    SecurityHeaderViolation\n}\n</code></pre>"},{"location":"mid-level/security/api-security/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/security/api-security/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>API Security'de en \u00f6nemli tehditler nelerdir?</li> <li> <p>Cevap: Authentication bypass, Authorization vulnerabilities, Input validation attacks, SQL injection, XSS, CSRF, Rate limiting bypass.</p> </li> <li> <p>API'lerde authentication nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: JWT tokens, OAuth 2.0, API keys, Multi-factor authentication, Session management.</p> </li> <li> <p>Authorization vs Authentication aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Authentication kim oldu\u011funu do\u011frular, Authorization ne yapabilece\u011fini belirler.</p> </li> <li> <p>API rate limiting neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: DDoS attacks'i \u00f6nler, resource abuse'u engeller, fair usage sa\u011flar, API stability korur.</p> </li> <li> <p>Security headers nelerdir ve neden kullan\u0131l\u0131r?</p> </li> <li>Cevap: CSP, X-Frame-Options, X-Content-Type-Options, HSTS. Browser-based attacks'i \u00f6nler.</li> </ol>"},{"location":"mid-level/security/api-security/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>API'de SQL injection nas\u0131l \u00f6nlenir?</li> <li> <p>Cevap: Parameterized queries, Input validation, ORM kullan\u0131m\u0131, Least privilege principle.</p> </li> <li> <p>JWT token security nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: Secure signing, Expiration times, Token validation, Secure storage, HTTPS.</p> </li> <li> <p>API versioning security implications nelerdir?</p> </li> <li> <p>Cevap: Backward compatibility, Deprecation policies, Security updates, Access control.</p> </li> <li> <p>API monitoring ve alerting nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Log aggregation, Metrics collection, Anomaly detection, Real-time alerts.</p> </li> <li> <p>API security testing nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Penetration testing, Vulnerability scanning, Security code review, Automated security testing.</li> </ol>"},{"location":"mid-level/security/api-security/#best-practices","title":"Best Practices","text":"<ol> <li>Authentication &amp; Authorization</li> <li>Multi-factor authentication kullan\u0131n</li> <li>Role-based access control implement edin</li> <li>JWT token expiration s\u00fcrelerini optimize edin</li> <li> <p>Secure password policies uygulay\u0131n</p> </li> <li> <p>Input Validation</p> </li> <li>T\u00fcm input'lar\u0131 validate edin</li> <li>Whitelist approach kullan\u0131n</li> <li>SQL injection ve XSS prevention implement edin</li> <li> <p>File upload security sa\u011flay\u0131n</p> </li> <li> <p>Security Headers</p> </li> <li>Security headers middleware kullan\u0131n</li> <li>Content Security Policy implement edin</li> <li>HTTPS zorunlu yap\u0131n</li> <li> <p>CORS policy'leri s\u0131k\u0131la\u015ft\u0131r\u0131n</p> </li> <li> <p>Monitoring &amp; Alerting</p> </li> <li>Security events log edin</li> <li>Real-time monitoring implement edin</li> <li>Automated alerting kurun</li> <li> <p>Security metrics toplay\u0131n</p> </li> <li> <p>Rate Limiting</p> </li> <li>Client-based rate limiting implement edin</li> <li>IP-based rate limiting kullan\u0131n</li> <li>Rate limit headers ekleyin</li> <li>Graceful degradation sa\u011flay\u0131n</li> </ol>"},{"location":"mid-level/security/api-security/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OWASP API Security Top 10</li> <li>Microsoft Security Documentation</li> <li>API Security Best Practices</li> <li>REST API Security</li> <li>API Security Testing Guide</li> </ul>"},{"location":"mid-level/security/data-encryption/","title":"Data Encryption","text":""},{"location":"mid-level/security/data-encryption/#giris","title":"Giri\u015f","text":"<p>Data Encryption, hassas verilerin g\u00fcvenli\u011fini sa\u011flamak i\u00e7in kullan\u0131lan temel kriptografi teknikleridir. Mid-level geli\u015ftiriciler i\u00e7in encryption implementasyonunu anlamak, g\u00fcvenli veri saklama ve iletim sistemleri tasarlamada kritiktir. Bu dosya, symmetric/asymmetric encryption, hashing, key management ve best practice'leri kapsar.</p>"},{"location":"mid-level/security/data-encryption/#encryption-types","title":"Encryption Types","text":""},{"location":"mid-level/security/data-encryption/#1-symmetric-encryption","title":"1. Symmetric Encryption","text":"<p>Ayn\u0131 key ile encryption ve decryption yap\u0131lan y\u00f6ntem.</p> <pre><code>public class SymmetricEncryptionService\n{\n    private readonly ILogger&lt;SymmetricEncryptionService&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public SymmetricEncryptionService(\n        ILogger&lt;SymmetricEncryptionService&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public async Task&lt;EncryptionResult&gt; EncryptAsync(string plainText, string key = null)\n    {\n        try\n        {\n            var encryptionKey = key ?? _configuration[\"Encryption:SymmetricKey\"];\n            if (string.IsNullOrEmpty(encryptionKey))\n            {\n                throw new ArgumentException(\"Encryption key is required\");\n            }\n\n            using var aes = Aes.Create();\n            aes.Key = DeriveKey(encryptionKey, aes.KeySize / 8);\n            aes.GenerateIV();\n\n            using var encryptor = aes.CreateEncryptor();\n            using var msEncrypt = new MemoryStream();\n            using var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);\n            using var swEncrypt = new StreamWriter(csEncrypt);\n\n            await swEncrypt.WriteAsync(plainText);\n            await swEncrypt.FlushAsync();\n            csEncrypt.FlushFinalBlock();\n\n            var encryptedData = msEncrypt.ToArray();\n            var result = new EncryptionResult\n            {\n                EncryptedData = Convert.ToBase64String(encryptedData),\n                IV = Convert.ToBase64String(aes.IV),\n                KeyId = GenerateKeyId(encryptionKey)\n            };\n\n            _logger.LogDebug(\"Successfully encrypted data with key ID {KeyId}\", result.KeyId);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error encrypting data\");\n            throw new EncryptionException(\"Failed to encrypt data\", ex);\n        }\n    }\n\n    public async Task&lt;string&gt; DecryptAsync(string encryptedData, string iv, string key = null)\n    {\n        try\n        {\n            var encryptionKey = key ?? _configuration[\"Encryption:SymmetricKey\"];\n            if (string.IsNullOrEmpty(encryptionKey))\n            {\n                throw new ArgumentException(\"Encryption key is required\");\n            }\n\n            using var aes = Aes.Create();\n            aes.Key = DeriveKey(encryptionKey, aes.KeySize / 8);\n            aes.IV = Convert.FromBase64String(iv);\n\n            using var decryptor = aes.CreateDecryptor();\n            using var msDecrypt = new MemoryStream(Convert.FromBase64String(encryptedData));\n            using var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);\n            using var srDecrypt = new StreamReader(csDecrypt);\n\n            var decryptedText = await srDecrypt.ReadToEndAsync();\n\n            _logger.LogDebug(\"Successfully decrypted data\");\n            return decryptedText;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error decrypting data\");\n            throw new EncryptionException(\"Failed to decrypt data\", ex);\n        }\n    }\n\n    public async Task&lt;EncryptionResult&gt; EncryptFileAsync(IFormFile file, string key = null)\n    {\n        try\n        {\n            var encryptionKey = key ?? _configuration[\"Encryption:SymmetricKey\"];\n            if (string.IsNullOrEmpty(encryptionKey))\n            {\n                throw new ArgumentException(\"Encryption key is required\");\n            }\n\n            using var aes = Aes.Create();\n            aes.Key = DeriveKey(encryptionKey, aes.KeySize / 8);\n            aes.GenerateIV();\n\n            using var encryptor = aes.CreateEncryptor();\n            using var msEncrypt = new MemoryStream();\n            using var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);\n\n            await file.CopyToAsync(csEncrypt);\n            csEncrypt.FlushFinalBlock();\n\n            var encryptedData = msEncrypt.ToArray();\n            var result = new EncryptionResult\n            {\n                EncryptedData = Convert.ToBase64String(encryptedData),\n                IV = Convert.ToBase64String(aes.IV),\n                KeyId = GenerateKeyId(encryptionKey),\n                FileName = file.FileName,\n                ContentType = file.ContentType\n            };\n\n            _logger.LogDebug(\"Successfully encrypted file {FileName} with key ID {KeyId}\", \n                file.FileName, result.KeyId);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error encrypting file {FileName}\", file.FileName);\n            throw new EncryptionException($\"Failed to encrypt file {file.FileName}\", ex);\n        }\n    }\n\n    private byte[] DeriveKey(string password, int keySize)\n    {\n        using var deriveBytes = new Rfc2898DeriveBytes(password, new byte[16], 10000, HashAlgorithmName.SHA256);\n        return deriveBytes.GetBytes(keySize);\n    }\n\n    private string GenerateKeyId(string key)\n    {\n        using var sha256 = SHA256.Create();\n        var hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(key));\n        return Convert.ToBase64String(hash).Substring(0, 8);\n    }\n}\n\npublic class EncryptionResult\n{\n    public string EncryptedData { get; set; }\n    public string IV { get; set; }\n    public string KeyId { get; set; }\n    public string FileName { get; set; }\n    public string ContentType { get; set; }\n}\n</code></pre>"},{"location":"mid-level/security/data-encryption/#2-asymmetric-encryption","title":"2. Asymmetric Encryption","text":"<p>Public/private key pair kullanarak encryption yap\u0131lan y\u00f6ntem.</p> <pre><code>public class AsymmetricEncryptionService\n{\n    private readonly ILogger&lt;AsymmetricEncryptionService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IKeyVaultService _keyVaultService;\n\n    public AsymmetricEncryptionService(\n        ILogger&lt;AsymmetricEncryptionService&gt; logger,\n        IConfiguration configuration,\n        IKeyVaultService keyVaultService)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _keyVaultService = keyVaultService;\n    }\n\n    public async Task&lt;AsymmetricEncryptionResult&gt; EncryptAsync(string plainText, string keyName = null)\n    {\n        try\n        {\n            var keyNameToUse = keyName ?? _configuration[\"Encryption:AsymmetricKeyName\"];\n            if (string.IsNullOrEmpty(keyNameToUse))\n            {\n                throw new ArgumentException(\"Asymmetric key name is required\");\n            }\n\n            // Get public key from key vault\n            var publicKey = await _keyVaultService.GetPublicKeyAsync(keyNameToUse);\n            if (publicKey == null)\n            {\n                throw new ArgumentException($\"Public key not found for key name: {keyNameToUse}\");\n            }\n\n            using var rsa = RSA.Create();\n            rsa.ImportRSAPublicKey(publicKey, out _);\n\n            // Encrypt data in chunks (RSA has size limitations)\n            var chunkSize = rsa.KeySize / 8 - 42; // Padding overhead\n            var plainTextBytes = Encoding.UTF8.GetBytes(plainText);\n            var encryptedChunks = new List&lt;byte[]&gt;();\n\n            for (int i = 0; i &lt; plainTextBytes.Length; i += chunkSize)\n            {\n                var chunk = new byte[Math.Min(chunkSize, plainTextBytes.Length - i)];\n                Array.Copy(plainTextBytes, i, chunk, 0, chunk.Length);\n\n                var encryptedChunk = rsa.Encrypt(chunk, RSAEncryptionPadding.OaepSHA256);\n                encryptedChunks.Add(encryptedChunk);\n            }\n\n            var result = new AsymmetricEncryptionResult\n            {\n                EncryptedData = Convert.ToBase64String(encryptedChunks.SelectMany(c =&gt; c).ToArray()),\n                KeyName = keyNameToUse,\n                ChunkCount = encryptedChunks.Count,\n                Algorithm = \"RSA-OAEP-SHA256\"\n            };\n\n            _logger.LogDebug(\"Successfully encrypted data with asymmetric key {KeyName}\", keyNameToUse);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error encrypting data with asymmetric encryption\");\n            throw new EncryptionException(\"Failed to encrypt data with asymmetric encryption\", ex);\n        }\n    }\n\n    public async Task&lt;string&gt; DecryptAsync(string encryptedData, string keyName = null)\n    {\n        try\n        {\n            var keyNameToUse = keyName ?? _configuration[\"Encryption:AsymmetricKeyName\"];\n            if (string.IsNullOrEmpty(keyNameToUse))\n            {\n                throw new ArgumentException(\"Asymmetric key name is required\");\n            }\n\n            // Get private key from key vault\n            var privateKey = await _keyVaultService.GetPrivateKeyAsync(keyNameToUse);\n            if (privateKey == null)\n            {\n                throw new ArgumentException($\"Private key not found for key name: {keyNameToUse}\");\n            }\n\n            using var rsa = RSA.Create();\n            rsa.ImportRSAPrivateKey(privateKey, out _);\n\n            var encryptedBytes = Convert.FromBase64String(encryptedData);\n            var chunkSize = rsa.KeySize / 8;\n            var decryptedChunks = new List&lt;byte[]&gt;();\n\n            for (int i = 0; i &lt; encryptedBytes.Length; i += chunkSize)\n            {\n                var chunk = new byte[Math.Min(chunkSize, encryptedBytes.Length - i)];\n                Array.Copy(encryptedBytes, i, chunk, 0, chunk.Length);\n\n                var decryptedChunk = rsa.Decrypt(chunk, RSAEncryptionPadding.OaepSHA256);\n                decryptedChunks.Add(decryptedChunk);\n            }\n\n            var decryptedBytes = decryptedChunks.SelectMany(c =&gt; c).ToArray();\n            var decryptedText = Encoding.UTF8.GetString(decryptedBytes);\n\n            _logger.LogDebug(\"Successfully decrypted data with asymmetric key {KeyName}\", keyNameToUse);\n            return decryptedText;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error decrypting data with asymmetric encryption\");\n            throw new EncryptionException(\"Failed to decrypt data with asymmetric encryption\", ex);\n        }\n    }\n\n    public async Task&lt;string&gt; SignDataAsync(string data, string keyName = null)\n    {\n        try\n        {\n            var keyNameToUse = keyName ?? _configuration[\"Encryption:AsymmetricKeyName\"];\n            if (string.IsNullOrEmpty(keyNameToUse))\n            {\n                throw new ArgumentException(\"Asymmetric key name is required\");\n            }\n\n            // Get private key from key vault\n            var privateKey = await _keyVaultService.GetPrivateKeyAsync(keyNameToUse);\n            if (privateKey == null)\n            {\n                throw new ArgumentException($\"Private key not found for key name: {keyNameToUse}\");\n            }\n\n            using var rsa = RSA.Create();\n            rsa.ImportRSAPrivateKey(privateKey, out _);\n\n            var dataBytes = Encoding.UTF8.GetBytes(data);\n            var signature = rsa.SignData(dataBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pss);\n\n            _logger.LogDebug(\"Successfully signed data with asymmetric key {KeyName}\", keyNameToUse);\n            return Convert.ToBase64String(signature);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error signing data\");\n            throw new EncryptionException(\"Failed to sign data\", ex);\n        }\n    }\n\n    public async Task&lt;bool&gt; VerifySignatureAsync(string data, string signature, string keyName = null)\n    {\n        try\n        {\n            var keyNameToUse = keyName ?? _configuration[\"Encryption:AsymmetricKeyName\"];\n            if (string.IsNullOrEmpty(keyNameToUse))\n            {\n                throw new ArgumentException(\"Asymmetric key name is required\");\n            }\n\n            // Get public key from key vault\n            var publicKey = await _keyVaultService.GetPublicKeyAsync(keyNameToUse);\n            if (publicKey == null)\n            {\n                throw new ArgumentException($\"Public key not found for key name: {keyNameToUse}\");\n            }\n\n            using var rsa = RSA.Create();\n            rsa.ImportRSAPublicKey(publicKey, out _);\n\n            var dataBytes = Encoding.UTF8.GetBytes(data);\n            var signatureBytes = Convert.FromBase64String(signature);\n\n            var isValid = rsa.VerifyData(dataBytes, signatureBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pss);\n\n            _logger.LogDebug(\"Signature verification result: {IsValid} for key {KeyName}\", isValid, keyNameToUse);\n            return isValid;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error verifying signature\");\n            return false;\n        }\n    }\n}\n\npublic class AsymmetricEncryptionResult\n{\n    public string EncryptedData { get; set; }\n    public string KeyName { get; set; }\n    public int ChunkCount { get; set; }\n    public string Algorithm { get; set; }\n}\n</code></pre>"},{"location":"mid-level/security/data-encryption/#3-hashing-and-salting","title":"3. Hashing and Salting","text":"<p>Veri b\u00fct\u00fcnl\u00fc\u011f\u00fc ve g\u00fcvenli\u011fi i\u00e7in hashing algoritmalar\u0131.</p> <pre><code>public class HashingService\n{\n    private readonly ILogger&lt;HashingService&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public HashingService(\n        ILogger&lt;HashingService&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public async Task&lt;HashResult&gt; HashPasswordAsync(string password)\n    {\n        try\n        {\n            // Generate random salt\n            var salt = new byte[32];\n            using var rng = new RNGCryptoServiceProvider();\n            rng.GetBytes(salt);\n\n            // Hash password with salt\n            using var pbkdf2 = new Rfc2898DeriveBytes(\n                password, \n                salt, \n                100000, // Iteration count\n                HashAlgorithmName.SHA256);\n\n            var hash = pbkdf2.GetBytes(32);\n\n            var result = new HashResult\n            {\n                Hash = Convert.ToBase64String(hash),\n                Salt = Convert.ToBase64String(salt),\n                Iterations = 100000,\n                Algorithm = \"PBKDF2-SHA256\"\n            };\n\n            _logger.LogDebug(\"Successfully hashed password\");\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error hashing password\");\n            throw new HashingException(\"Failed to hash password\", ex);\n        }\n    }\n\n    public async Task&lt;bool&gt; VerifyPasswordAsync(string password, string storedHash, string storedSalt, int iterations)\n    {\n        try\n        {\n            var salt = Convert.FromBase64String(storedSalt);\n\n            using var pbkdf2 = new Rfc2898DeriveBytes(\n                password, \n                salt, \n                iterations, \n                HashAlgorithmName.SHA256);\n\n            var hash = pbkdf2.GetBytes(32);\n            var computedHash = Convert.ToBase64String(hash);\n\n            var isValid = storedHash == computedHash;\n\n            _logger.LogDebug(\"Password verification result: {IsValid}\", isValid);\n            return isValid;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error verifying password\");\n            return false;\n        }\n    }\n\n    public async Task&lt;string&gt; HashFileAsync(IFormFile file)\n    {\n        try\n        {\n            using var sha256 = SHA256.Create();\n            using var stream = file.OpenReadStream();\n\n            var hash = await sha256.ComputeHashAsync(stream);\n            var hashString = Convert.ToBase64String(hash);\n\n            _logger.LogDebug(\"Successfully hashed file {FileName}\", file.FileName);\n            return hashString;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error hashing file {FileName}\", file.FileName);\n            throw new HashingException($\"Failed to hash file {file.FileName}\", ex);\n        }\n    }\n\n    public async Task&lt;string&gt; HashDataAsync(string data)\n    {\n        try\n        {\n            using var sha256 = SHA256.Create();\n            var dataBytes = Encoding.UTF8.GetBytes(data);\n            var hash = sha256.ComputeHash(dataBytes);\n            var hashString = Convert.ToBase64String(hash);\n\n            _logger.LogDebug(\"Successfully hashed data\");\n            return hashString;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error hashing data\");\n            throw new HashingException(\"Failed to hash data\", ex);\n        }\n    }\n\n    public async Task&lt;bool&gt; VerifyFileIntegrityAsync(IFormFile file, string expectedHash)\n    {\n        try\n        {\n            var actualHash = await HashFileAsync(file);\n            var isValid = actualHash == expectedHash;\n\n            _logger.LogDebug(\"File integrity verification result: {IsValid} for {FileName}\", isValid, file.FileName);\n            return isValid;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error verifying file integrity for {FileName}\", file.FileName);\n            return false;\n        }\n    }\n}\n\npublic class HashResult\n{\n    public string Hash { get; set; }\n    public string Salt { get; set; }\n    public int Iterations { get; set; }\n    public string Algorithm { get; set; }\n}\n</code></pre>"},{"location":"mid-level/security/data-encryption/#key-management","title":"Key Management","text":""},{"location":"mid-level/security/data-encryption/#1-key-vault-service","title":"1. Key Vault Service","text":"<p>Encryption key'lerini g\u00fcvenli \u015fekilde y\u00f6neten servis.</p> <pre><code>public interface IKeyVaultService\n{\n    Task&lt;byte[]&gt; GetPublicKeyAsync(string keyName);\n    Task&lt;byte[]&gt; GetPrivateKeyAsync(string keyName);\n    Task&lt;string&gt; GetSecretAsync(string secretName);\n    Task&lt;bool&gt; StoreSecretAsync(string secretName, string secretValue);\n    Task&lt;bool&gt; RotateKeyAsync(string keyName);\n}\n\npublic class AzureKeyVaultService : IKeyVaultService\n{\n    private readonly ILogger&lt;AzureKeyVaultService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly SecretClient _secretClient;\n    private readonly KeyClient _keyClient;\n\n    public AzureKeyVaultService(\n        ILogger&lt;AzureKeyVaultService&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n\n        var keyVaultUrl = configuration[\"Azure:KeyVault:Url\"];\n        var credential = new DefaultAzureCredential();\n\n        _secretClient = new SecretClient(new Uri(keyVaultUrl), credential);\n        _keyClient = new KeyClient(new Uri(keyVaultUrl), credential);\n    }\n\n    public async Task&lt;byte[]&gt; GetPublicKeyAsync(string keyName)\n    {\n        try\n        {\n            var key = await _keyClient.GetKeyAsync(keyName);\n            var publicKey = key.Value.Key;\n\n            if (publicKey is RsaPublicKey rsaKey)\n            {\n                return rsaKey.N;\n            }\n\n            _logger.LogWarning(\"Key {KeyName} is not an RSA public key\", keyName);\n            return null;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting public key {KeyName}\", keyName);\n            return null;\n        }\n    }\n\n    public async Task&lt;byte[]&gt; GetPrivateKeyAsync(string keyName)\n    {\n        try\n        {\n            var key = await _keyClient.GetKeyAsync(keyName);\n            var privateKey = key.Value.Key;\n\n            if (privateKey is RsaPrivateKey rsaKey)\n            {\n                return rsaKey.D;\n            }\n\n            _logger.LogWarning(\"Key {KeyName} is not an RSA private key\", keyName);\n            return null;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting private key {KeyName}\", keyName);\n            return null;\n        }\n    }\n\n    public async Task&lt;string&gt; GetSecretAsync(string secretName)\n    {\n        try\n        {\n            var secret = await _secretClient.GetSecretAsync(secretName);\n            return secret.Value.Value;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting secret {SecretName}\", secretName);\n            return null;\n        }\n    }\n\n    public async Task&lt;bool&gt; StoreSecretAsync(string secretName, string secretValue)\n    {\n        try\n        {\n            await _secretClient.SetSecretAsync(secretName, secretValue);\n            _logger.LogInformation(\"Successfully stored secret {SecretName}\", secretName);\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error storing secret {SecretName}\", secretName);\n            return false;\n        }\n    }\n\n    public async Task&lt;bool&gt; RotateKeyAsync(string keyName)\n    {\n        try\n        {\n            // Create new key version\n            var keyOptions = new CreateRsaKeyOptions(keyName)\n            {\n                KeySize = 2048,\n                KeyOperations = { KeyOperation.Encrypt, KeyOperation.Decrypt, KeyOperation.Sign, KeyOperation.Verify }\n            };\n\n            var newKey = await _keyClient.CreateRsaKeyAsync(keyOptions);\n\n            // Update configuration to use new key\n            // This would typically involve updating configuration or database\n\n            _logger.LogInformation(\"Successfully rotated key {KeyName}\", keyName);\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rotating key {KeyName}\", keyName);\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/security/data-encryption/#2-key-rotation-service","title":"2. Key Rotation Service","text":"<p>Encryption key'lerini otomatik olarak rotate eden servis.</p> <pre><code>public class KeyRotationService : BackgroundService\n{\n    private readonly ILogger&lt;KeyRotationService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IKeyVaultService _keyVaultService;\n    private readonly IServiceProvider _serviceProvider;\n\n    public KeyRotationService(\n        ILogger&lt;KeyRotationService&gt; logger,\n        IConfiguration configuration,\n        IKeyVaultService keyVaultService,\n        IServiceProvider serviceProvider)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _keyVaultService = keyVaultService;\n        _serviceProvider = serviceProvider;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            try\n            {\n                await RotateKeysIfNeededAsync();\n\n                // Wait for next rotation check (e.g., daily)\n                await Task.Delay(TimeSpan.FromHours(24), stoppingToken);\n            }\n            catch (OperationCanceledException)\n            {\n                // Service is stopping\n                break;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in key rotation service\");\n                await Task.Delay(TimeSpan.FromHours(1), stoppingToken);\n            }\n        }\n    }\n\n    private async Task RotateKeysIfNeededAsync()\n    {\n        try\n        {\n            var keyRotationConfig = _configuration.GetSection(\"KeyRotation\").Get&lt;KeyRotationConfig&gt;();\n            if (keyRotationConfig == null)\n            {\n                _logger.LogWarning(\"Key rotation configuration not found\");\n                return;\n            }\n\n            foreach (var keyConfig in keyRotationConfig.Keys)\n            {\n                if (await ShouldRotateKeyAsync(keyConfig))\n                {\n                    await RotateKeyAsync(keyConfig);\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error checking key rotation\");\n        }\n    }\n\n    private async Task&lt;bool&gt; ShouldRotateKeyAsync(KeyConfig keyConfig)\n    {\n        try\n        {\n            // Check key age\n            var keyCreationDate = await GetKeyCreationDateAsync(keyConfig.Name);\n            if (keyCreationDate.HasValue)\n            {\n                var keyAge = DateTime.UtcNow - keyCreationDate.Value;\n                if (keyAge.TotalDays &gt;= keyConfig.MaxAgeDays)\n                {\n                    _logger.LogInformation(\"Key {KeyName} is {Days} days old, rotation needed\", \n                        keyConfig.Name, keyAge.TotalDays);\n                    return true;\n                }\n            }\n\n            // Check if key is compromised (this would be based on security events)\n            if (await IsKeyCompromisedAsync(keyConfig.Name))\n            {\n                _logger.LogWarning(\"Key {KeyName} is compromised, immediate rotation needed\", keyConfig.Name);\n                return true;\n            }\n\n            return false;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error checking if key {KeyName} should be rotated\", keyConfig.Name);\n            return false;\n        }\n    }\n\n    private async Task RotateKeyAsync(KeyConfig keyConfig)\n    {\n        try\n        {\n            _logger.LogInformation(\"Starting key rotation for {KeyName}\", keyConfig.Name);\n\n            // Create new key\n            var newKeyCreated = await _keyVaultService.RotateKeyAsync(keyConfig.Name);\n            if (!newKeyCreated)\n            {\n                _logger.LogError(\"Failed to create new key for {KeyName}\", keyConfig.Name);\n                return;\n            }\n\n            // Update configuration\n            await UpdateKeyConfigurationAsync(keyConfig.Name);\n\n            // Notify stakeholders\n            await NotifyKeyRotationAsync(keyConfig.Name);\n\n            _logger.LogInformation(\"Successfully completed key rotation for {KeyName}\", keyConfig.Name);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rotating key {KeyName}\", keyConfig.Name);\n        }\n    }\n\n    private async Task&lt;DateTime?&gt; GetKeyCreationDateAsync(string keyName)\n    {\n        // Implementation to get key creation date from key vault\n        // This is a simplified example\n        return DateTime.UtcNow.AddDays(-30);\n    }\n\n    private async Task&lt;bool&gt; IsKeyCompromisedAsync(string keyName)\n    {\n        // Implementation to check if key is compromised\n        // This would typically involve checking security logs, alerts, etc.\n        return false;\n    }\n\n    private async Task UpdateKeyConfigurationAsync(string keyName)\n    {\n        // Implementation to update configuration with new key\n        // This could involve updating database, configuration files, etc.\n        await Task.CompletedTask;\n    }\n\n    private async Task NotifyKeyRotationAsync(string keyName)\n    {\n        // Implementation to notify stakeholders about key rotation\n        // This could involve sending emails, Slack messages, etc.\n        await Task.CompletedTask;\n    }\n}\n\npublic class KeyRotationConfig\n{\n    public List&lt;KeyConfig&gt; Keys { get; set; } = new List&lt;KeyConfig&gt;();\n}\n\npublic class KeyConfig\n{\n    public string Name { get; set; }\n    public int MaxAgeDays { get; set; } = 90;\n    public bool AutoRotation { get; set; } = true;\n}\n</code></pre>"},{"location":"mid-level/security/data-encryption/#database-encryption","title":"Database Encryption","text":""},{"location":"mid-level/security/data-encryption/#1-column-level-encryption","title":"1. Column-Level Encryption","text":"<p>Veritaban\u0131nda belirli kolonlar\u0131 encrypt eden servis.</p> <pre><code>public class DatabaseEncryptionService\n{\n    private readonly ILogger&lt;DatabaseEncryptionService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly SymmetricEncryptionService _symmetricEncryptionService;\n\n    public DatabaseEncryptionService(\n        ILogger&lt;DatabaseEncryptionService&gt; logger,\n        IConfiguration configuration,\n        SymmetricEncryptionService symmetricEncryptionService)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _symmetricEncryptionService = symmetricEncryptionService;\n    }\n\n    public async Task&lt;string&gt; EncryptColumnValueAsync(string plainText, string columnName)\n    {\n        try\n        {\n            if (string.IsNullOrEmpty(plainText))\n            {\n                return plainText;\n            }\n\n            var encryptionResult = await _symmetricEncryptionService.EncryptAsync(plainText);\n\n            // Store IV with encrypted data for decryption\n            var encryptedValue = $\"{encryptionResult.IV}:{encryptionResult.EncryptedData}\";\n\n            _logger.LogDebug(\"Successfully encrypted column {ColumnName}\", columnName);\n            return encryptedValue;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error encrypting column {ColumnName}\", columnName);\n            throw new DatabaseEncryptionException($\"Failed to encrypt column {columnName}\", ex);\n        }\n    }\n\n    public async Task&lt;string&gt; DecryptColumnValueAsync(string encryptedValue, string columnName)\n    {\n        try\n        {\n            if (string.IsNullOrEmpty(encryptedValue) || !encryptedValue.Contains(\":\"))\n            {\n                return encryptedValue; // Not encrypted or invalid format\n            }\n\n            var parts = encryptedValue.Split(':', 2);\n            if (parts.Length != 2)\n            {\n                _logger.LogWarning(\"Invalid encrypted value format for column {ColumnName}\", columnName);\n                return encryptedValue;\n            }\n\n            var iv = parts[0];\n            var encryptedData = parts[1];\n\n            var decryptedValue = await _symmetricEncryptionService.DecryptAsync(encryptedData, iv);\n\n            _logger.LogDebug(\"Successfully decrypted column {ColumnName}\", columnName);\n            return decryptedValue;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error decrypting column {ColumnName}\", columnName);\n            throw new DatabaseEncryptionException($\"Failed to decrypt column {columnName}\", ex);\n        }\n    }\n\n    public async Task&lt;Dictionary&lt;string, object&gt;&gt; EncryptEntityAsync&lt;T&gt;(T entity) where T : class\n    {\n        try\n        {\n            var encryptedEntity = new Dictionary&lt;string, object&gt;();\n            var entityType = typeof(T);\n            var encryptedProperties = GetEncryptedProperties(entityType);\n\n            foreach (var property in entityType.GetProperties())\n            {\n                var value = property.GetValue(entity);\n\n                if (encryptedProperties.Contains(property.Name) &amp;&amp; value != null)\n                {\n                    var encryptedValue = await EncryptColumnValueAsync(value.ToString(), property.Name);\n                    encryptedEntity[property.Name] = encryptedValue;\n                }\n                else\n                {\n                    encryptedEntity[property.Name] = value;\n                }\n            }\n\n            _logger.LogDebug(\"Successfully encrypted entity of type {EntityType}\", entityType.Name);\n            return encryptedEntity;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error encrypting entity of type {EntityType}\", typeof(T).Name);\n            throw new DatabaseEncryptionException($\"Failed to encrypt entity of type {typeof(T).Name}\", ex);\n        }\n    }\n\n    public async Task&lt;T&gt; DecryptEntityAsync&lt;T&gt;(Dictionary&lt;string, object&gt; encryptedEntity) where T : class, new()\n    {\n        try\n        {\n            var entity = new T();\n            var entityType = typeof(T);\n            var encryptedProperties = GetEncryptedProperties(entityType);\n\n            foreach (var kvp in encryptedEntity)\n            {\n                var property = entityType.GetProperty(kvp.Key);\n                if (property != null &amp;&amp; property.CanWrite)\n                {\n                    var value = kvp.Value;\n\n                    if (encryptedProperties.Contains(kvp.Key) &amp;&amp; value != null)\n                    {\n                        var decryptedValue = await DecryptColumnValueAsync(value.ToString(), kvp.Key);\n                        property.SetValue(entity, Convert.ChangeType(decryptedValue, property.PropertyType));\n                    }\n                    else\n                    {\n                        property.SetValue(entity, Convert.ChangeType(value, property.PropertyType));\n                    }\n                }\n            }\n\n            _logger.LogDebug(\"Successfully decrypted entity of type {EntityType}\", entityType.Name);\n            return entity;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error decrypting entity of type {EntityType}\", typeof(T).Name);\n            throw new DatabaseEncryptionException($\"Failed to decrypt entity of type {typeof(T).Name}\", ex);\n        }\n    }\n\n    private HashSet&lt;string&gt; GetEncryptedProperties(Type entityType)\n    {\n        var encryptedProperties = new HashSet&lt;string&gt;();\n\n        foreach (var property in entityType.GetProperties())\n        {\n            var encryptedAttribute = property.GetCustomAttribute&lt;EncryptedAttribute&gt;();\n            if (encryptedAttribute != null)\n            {\n                encryptedProperties.Add(property.Name);\n            }\n        }\n\n        return encryptedProperties;\n    }\n}\n\n[AttributeUsage(AttributeTargets.Property)]\npublic class EncryptedAttribute : Attribute\n{\n    public string EncryptionKey { get; set; }\n}\n\npublic class User\n{\n    public int Id { get; set; }\n    public string Username { get; set; }\n\n    [Encrypted]\n    public string Email { get; set; }\n\n    [Encrypted]\n    public string PhoneNumber { get; set; }\n\n    public DateTime CreatedAt { get; set; }\n}\n</code></pre>"},{"location":"mid-level/security/data-encryption/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/security/data-encryption/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Symmetric vs Asymmetric encryption aras\u0131ndaki fark nedir?</li> <li> <p>Cevap: Symmetric ayn\u0131 key kullan\u0131r, h\u0131zl\u0131 ama key distribution zor. Asymmetric public/private key pair kullan\u0131r, yava\u015f ama key distribution kolay.</p> </li> <li> <p>Hashing vs Encryption aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: Hashing one-way, veri b\u00fct\u00fcnl\u00fc\u011f\u00fc i\u00e7in. Encryption reversible, veri gizlili\u011fi i\u00e7in.</p> </li> <li> <p>Salt nedir ve neden kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Random data eklenir, rainbow table attacks'i \u00f6nler, ayn\u0131 password'lar i\u00e7in farkl\u0131 hash'ler \u00fcretir.</p> </li> <li> <p>Key rotation neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Compromised key'lerin etkisini s\u0131n\u0131rlar, security posture'\u0131 iyile\u015ftirir, compliance gereksinimlerini kar\u015f\u0131lar.</p> </li> <li> <p>Column-level encryption ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Hassas veriler (SSN, credit card, health data) i\u00e7in, compliance gereksinimlerinde, selective data protection i\u00e7in.</li> </ol>"},{"location":"mid-level/security/data-encryption/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>RSA encryption'da chunk size nas\u0131l hesaplan\u0131r?</li> <li> <p>Cevap: Key size / 8 - padding overhead (42 bytes for OAEP-SHA256).</p> </li> <li> <p>PBKDF2'de iteration count neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Brute force attacks'i zorla\u015ft\u0131r\u0131r, computational cost art\u0131r\u0131r, security level belirler.</p> </li> <li> <p>Database encryption'da IV nas\u0131l saklan\u0131r?</p> </li> <li> <p>Cevap: Encrypted data ile birlikte (IV:encrypted_data format), ayr\u0131 kolonda, metadata olarak.</p> </li> <li> <p>Key vault'ta key rotation nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: New key version olu\u015ftur, configuration update, gradual migration, old key cleanup.</p> </li> <li> <p>Encryption performance nas\u0131l optimize edilir?</p> </li> <li>Cevap: Hardware acceleration, async operations, caching, selective encryption, key size optimization.</li> </ol>"},{"location":"mid-level/security/data-encryption/#best-practices","title":"Best Practices","text":"<ol> <li>Key Management</li> <li>Key vault kullan\u0131n</li> <li>Regular key rotation yap\u0131n</li> <li>Key access logging implement edin</li> <li> <p>Backup ve recovery plan\u0131 haz\u0131rlay\u0131n</p> </li> <li> <p>Encryption Implementation</p> </li> <li>Strong algorithms kullan\u0131n (AES-256, RSA-2048)</li> <li>Secure random number generation kullan\u0131n</li> <li>IV'leri unique yap\u0131n</li> <li> <p>Proper padding schemes kullan\u0131n</p> </li> <li> <p>Performance Optimization</p> </li> <li>Hardware acceleration kullan\u0131n</li> <li>Async operations implement edin</li> <li>Selective encryption yap\u0131n</li> <li> <p>Caching strategies kullan\u0131n</p> </li> <li> <p>Security Monitoring</p> </li> <li>Encryption operations log edin</li> <li>Key usage metrics toplay\u0131n</li> <li>Security alerts kurun</li> <li> <p>Regular security audits yap\u0131n</p> </li> <li> <p>Compliance &amp; Standards</p> </li> <li>Industry standards takip edin (FIPS, NIST)</li> <li>Regular security assessments yap\u0131n</li> <li>Documentation g\u00fcncelleyin</li> <li>Training programs kurun</li> </ol>"},{"location":"mid-level/security/data-encryption/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Encryption Documentation</li> <li>OWASP Cryptographic Storage Cheat Sheet</li> <li>NIST Cryptographic Standards</li> <li>Azure Key Vault Documentation</li> <li>Cryptography Best Practices</li> </ul>"},{"location":"mid-level/security/identity-access-management/","title":"Identity &amp; Access Management","text":""},{"location":"mid-level/security/identity-access-management/#giris","title":"Giri\u015f","text":"<p>Identity &amp; Access Management (IAM), kullan\u0131c\u0131 kimliklerini y\u00f6netme ve sistemlere eri\u015fim kontrol\u00fc sa\u011flama s\u00fcre\u00e7leridir. Mid-level geli\u015ftiriciler i\u00e7in IAM sistemlerini anlamak, g\u00fcvenli ve \u00f6l\u00e7eklenebilir authentication/authorization sistemleri tasarlamada kritiktir.</p>"},{"location":"mid-level/security/identity-access-management/#identity-management","title":"Identity Management","text":""},{"location":"mid-level/security/identity-access-management/#1-user-identity-store","title":"1. User Identity Store","text":"<p>Kullan\u0131c\u0131 kimlik bilgilerini g\u00fcvenli \u015fekilde saklama.</p> <pre><code>public interface IUserStore\n{\n    Task&lt;User&gt; FindByIdAsync(string userId, CancellationToken cancellationToken = default);\n    Task&lt;User&gt; FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken = default);\n    Task&lt;User&gt; FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; CreateAsync(User user, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; UpdateAsync(User user, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; DeleteAsync(User user, CancellationToken cancellationToken = default);\n}\n\npublic class User\n{\n    public string Id { get; set; }\n    public string UserName { get; set; }\n    public string NormalizedUserName { get; set; }\n    public string Email { get; set; }\n    public string NormalizedEmail { get; set; }\n    public bool EmailConfirmed { get; set; }\n    public string PasswordHash { get; set; }\n    public string SecurityStamp { get; set; }\n    public string ConcurrencyStamp { get; set; }\n    public string PhoneNumber { get; set; }\n    public bool PhoneNumberConfirmed { get; set; }\n    public bool TwoFactorEnabled { get; set; }\n    public DateTimeOffset? LockoutEnd { get; set; }\n    public bool LockoutEnabled { get; set; }\n    public int AccessFailedCount { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime? LastLoginAt { get; set; }\n    public bool IsActive { get; set; }\n    public List&lt;string&gt; Roles { get; set; } = new();\n    public Dictionary&lt;string, string&gt; Claims { get; set; } = new();\n}\n\npublic class SqlServerUserStore : IUserStore\n{\n    private readonly IDbConnection _connection;\n    private readonly ILogger&lt;SqlServerUserStore&gt; _logger;\n    private readonly IPasswordHasher _passwordHasher;\n\n    public SqlServerUserStore(\n        IDbConnection connection,\n        ILogger&lt;SqlServerUserStore&gt; logger,\n        IPasswordHasher passwordHasher)\n    {\n        _connection = connection;\n        _logger = logger;\n        _passwordHasher = passwordHasher;\n    }\n\n    public async Task&lt;User&gt; FindByIdAsync(string userId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var sql = @\"\n                SELECT Id, UserName, NormalizedUserName, Email, NormalizedEmail,\n                       EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp,\n                       PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled,\n                       LockoutEnd, LockoutEnabled, AccessFailedCount,\n                       CreatedAt, LastLoginAt, IsActive\n                FROM Users \n                WHERE Id = @UserId AND IsActive = 1\n            \";\n\n            var user = await _connection.QueryFirstOrDefaultAsync&lt;User&gt;(sql, new { UserId = userId });\n\n            if (user != null)\n            {\n                await LoadUserRolesAsync(user, cancellationToken);\n                await LoadUserClaimsAsync(user, cancellationToken);\n            }\n\n            return user;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error finding user by ID: {UserId}\", userId);\n            throw;\n        }\n    }\n\n    public async Task&lt;User&gt; FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var sql = @\"\n                SELECT Id, UserName, NormalizedUserName, Email, NormalizedEmail,\n                       EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp,\n                       PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled,\n                       LockoutEnd, LockoutEnabled, AccessFailedCount,\n                       CreatedAt, LastLoginAt, IsActive\n                FROM Users \n                WHERE NormalizedUserName = @NormalizedUserName AND IsActive = 1\n            \";\n\n            var user = await _connection.QueryFirstOrDefaultAsync&lt;User&gt;(sql, new { NormalizedUserName = normalizedUserName });\n\n            if (user != null)\n            {\n                await LoadUserRolesAsync(user, cancellationToken);\n                await LoadUserClaimsAsync(user, cancellationToken);\n            }\n\n            return user;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error finding user by name: {NormalizedUserName}\", normalizedUserName);\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; CreateAsync(User user, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // Generate security stamp for password change tracking\n            user.SecurityStamp = Guid.NewGuid().ToString();\n            user.ConcurrencyStamp = Guid.NewGuid().ToString();\n            user.CreatedAt = DateTime.UtcNow;\n            user.IsActive = true;\n\n            var sql = @\"\n                INSERT INTO Users (Id, UserName, NormalizedUserName, Email, NormalizedEmail,\n                                 EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp,\n                                 PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled,\n                                 LockoutEnd, LockoutEnabled, AccessFailedCount,\n                                 CreatedAt, LastLoginAt, IsActive)\n                VALUES (@Id, @UserName, @NormalizedUserName, @Email, @NormalizedEmail,\n                        @EmailConfirmed, @PasswordHash, @SecurityStamp, @ConcurrencyStamp,\n                        @PhoneNumber, @PhoneNumberConfirmed, @TwoFactorEnabled,\n                        @LockoutEnd, @LockoutEnabled, @AccessFailedCount,\n                        @CreatedAt, @LastLoginAt, @IsActive)\n            \";\n\n            var rowsAffected = await _connection.ExecuteAsync(sql, user);\n\n            if (rowsAffected &gt; 0)\n            {\n                await SaveUserRolesAsync(user, cancellationToken);\n                await SaveUserClaimsAsync(user, cancellationToken);\n                return true;\n            }\n\n            return false;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating user: {UserName}\", user.UserName);\n            throw;\n        }\n    }\n\n    private async Task LoadUserRolesAsync(User user, CancellationToken cancellationToken)\n    {\n        var sql = \"SELECT RoleName FROM UserRoles WHERE UserId = @UserId\";\n        var roles = await _connection.QueryAsync&lt;string&gt;(sql, new { UserId = user.Id });\n        user.Roles = roles.ToList();\n    }\n\n    private async Task LoadUserClaimsAsync(User user, CancellationToken cancellationToken)\n    {\n        var sql = \"SELECT ClaimType, ClaimValue FROM UserClaims WHERE UserId = @UserId\";\n        var claims = await _connection.QueryAsync&lt;Claim&gt;(sql, new { UserId = user.Id });\n        user.Claims = claims.ToDictionary(c =&gt; c.ClaimType, c =&gt; c.ClaimValue);\n    }\n\n    private async Task SaveUserRolesAsync(User user, CancellationToken cancellationToken)\n    {\n        if (user.Roles?.Any() == true)\n        {\n            var sql = \"INSERT INTO UserRoles (UserId, RoleName) VALUES (@UserId, @RoleName)\";\n            var parameters = user.Roles.Select(role =&gt; new { UserId = user.Id, RoleName = role });\n            await _connection.ExecuteAsync(sql, parameters);\n        }\n    }\n\n    private async Task SaveUserClaimsAsync(User user, CancellationToken cancellationToken)\n    {\n        if (user.Claims?.Any() == true)\n        {\n            var sql = \"INSERT INTO UserClaims (UserId, ClaimType, ClaimValue) VALUES (@UserId, @ClaimType, @ClaimValue)\";\n            var parameters = user.Claims.Select(kvp =&gt; new { UserId = user.Id, ClaimType = kvp.Key, ClaimValue = kvp.Value });\n            await _connection.ExecuteAsync(sql, parameters);\n        }\n    }\n}\n\npublic class Claim\n{\n    public string ClaimType { get; set; }\n    public string ClaimValue { get; set; }\n}\n</code></pre>"},{"location":"mid-level/security/identity-access-management/#2-password-management","title":"2. Password Management","text":"<p>G\u00fcvenli \u015fifre y\u00f6netimi ve hash'leme.</p> <pre><code>public interface IPasswordHasher\n{\n    string HashPassword(string password);\n    PasswordVerificationResult VerifyHashedPassword(string hashedPassword, string providedPassword);\n}\n\npublic class PasswordHasher : IPasswordHasher\n{\n    private readonly ILogger&lt;PasswordHasher&gt; _logger;\n\n    public PasswordHasher(ILogger&lt;PasswordHasher&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public string HashPassword(string password)\n    {\n        if (string.IsNullOrEmpty(password))\n        {\n            throw new ArgumentException(\"Password cannot be null or empty\", nameof(password));\n        }\n\n        try\n        {\n            // Use BCrypt for password hashing\n            return BCrypt.Net.BCrypt.HashPassword(password, BCrypt.Net.BCrypt.GenerateSalt(12));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error hashing password\");\n            throw;\n        }\n    }\n\n    public PasswordVerificationResult VerifyHashedPassword(string hashedPassword, string providedPassword)\n    {\n        if (string.IsNullOrEmpty(hashedPassword))\n        {\n            return PasswordVerificationResult.Failed;\n        }\n\n        if (string.IsNullOrEmpty(providedPassword))\n        {\n            return PasswordVerificationResult.Failed;\n        }\n\n        try\n        {\n            var isValid = BCrypt.Net.BCrypt.Verify(providedPassword, hashedPassword);\n            return isValid ? PasswordVerificationResult.Success : PasswordVerificationResult.Failed;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error verifying password hash\");\n            return PasswordVerificationResult.Failed;\n        }\n    }\n}\n\npublic enum PasswordVerificationResult\n{\n    Failed,\n    Success,\n    SuccessRehashNeeded\n}\n\npublic class PasswordPolicy\n{\n    public int MinimumLength { get; set; } = 8;\n    public bool RequireUppercase { get; set; } = true;\n    public bool RequireLowercase { get; set; } = true;\n    public bool RequireDigit { get; set; } = true;\n    public bool RequireSpecialCharacter { get; set; } = true;\n    public int MaximumAgeDays { get; set; } = 90;\n    public int PasswordHistoryCount { get; set; } = 5;\n    public bool PreventCommonPasswords { get; set; } = true;\n}\n\npublic class PasswordValidator\n{\n    private readonly PasswordPolicy _policy;\n    private readonly ILogger&lt;PasswordValidator&gt; _logger;\n\n    public PasswordValidator(PasswordPolicy policy, ILogger&lt;PasswordValidator&gt; logger)\n    {\n        _policy = policy;\n        _logger = logger;\n    }\n\n    public ValidationResult ValidatePassword(string password)\n    {\n        var result = new ValidationResult();\n\n        if (string.IsNullOrEmpty(password))\n        {\n            result.AddError(\"Password\", \"Password is required\");\n            return result;\n        }\n\n        // Length validation\n        if (password.Length &lt; _policy.MinimumLength)\n        {\n            result.AddError(\"Password\", $\"Password must be at least {_policy.MinimumLength} characters long\");\n        }\n\n        // Character type validation\n        if (_policy.RequireUppercase &amp;&amp; !password.Any(char.IsUpper))\n        {\n            result.AddError(\"Password\", \"Password must contain at least one uppercase letter\");\n        }\n\n        if (_policy.RequireLowercase &amp;&amp; !password.Any(char.IsLower))\n        {\n            result.AddError(\"Password\", \"Password must contain at least one lowercase letter\");\n        }\n\n        if (_policy.RequireDigit &amp;&amp; !password.Any(char.IsDigit))\n        {\n            result.AddError(\"Password\", \"Password must contain at least one number\");\n        }\n\n        if (_policy.RequireSpecialCharacter &amp;&amp; !password.Any(c =&gt; !char.IsLetterOrDigit(c)))\n        {\n            result.AddError(\"Password\", \"Password must contain at least one special character\");\n        }\n\n        // Common password check\n        if (_policy.PreventCommonPasswords &amp;&amp; IsCommonPassword(password))\n        {\n            result.AddError(\"Password\", \"Password is too common, please choose a stronger password\");\n        }\n\n        return result;\n    }\n\n    private bool IsCommonPassword(string password)\n    {\n        var commonPasswords = new[]\n        {\n            \"password\", \"123456\", \"123456789\", \"qwerty\", \"abc123\",\n            \"password123\", \"admin\", \"letmein\", \"welcome\", \"monkey\"\n        };\n\n        return commonPasswords.Contains(password.ToLower());\n    }\n}\n</code></pre>"},{"location":"mid-level/security/identity-access-management/#access-control","title":"Access Control","text":""},{"location":"mid-level/security/identity-access-management/#1-role-based-access-control-rbac","title":"1. Role-Based Access Control (RBAC)","text":"<p>Rol tabanl\u0131 eri\u015fim kontrol\u00fc.</p> <pre><code>public interface IRoleStore\n{\n    Task&lt;Role&gt; FindByIdAsync(string roleId, CancellationToken cancellationToken = default);\n    Task&lt;Role&gt; FindByNameAsync(string normalizedRoleName, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; CreateAsync(Role role, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; UpdateAsync(Role role, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; DeleteAsync(Role role, CancellationToken cancellationToken = default);\n}\n\npublic class Role\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string NormalizedName { get; set; }\n    public string Description { get; set; }\n    public List&lt;string&gt; Permissions { get; set; } = new();\n    public DateTime CreatedAt { get; set; }\n    public bool IsActive { get; set; }\n}\n\npublic class Permission\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Resource { get; set; }\n    public string Action { get; set; }\n    public string Description { get; set; }\n}\n\npublic class RoleBasedAuthorizationHandler : AuthorizationHandler&lt;RoleRequirement&gt;\n{\n    private readonly IUserStore _userStore;\n    private readonly IRoleStore _roleStore;\n\n    public RoleBasedAuthorizationHandler(IUserStore userStore, IRoleStore roleStore)\n    {\n        _userStore = userStore;\n        _roleStore = roleStore;\n    }\n\n    protected override async Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        RoleRequirement requirement)\n    {\n        var user = context.User;\n\n        if (!user.Identity.IsAuthenticated)\n        {\n            context.Fail();\n            return;\n        }\n\n        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n        if (string.IsNullOrEmpty(userId))\n        {\n            context.Fail();\n            return;\n        }\n\n        var userEntity = await _userStore.FindByIdAsync(userId);\n        if (userEntity == null)\n        {\n            context.Fail();\n            return;\n        }\n\n        // Check if user has any of the required roles\n        var hasRequiredRole = requirement.Roles.Any(role =&gt; \n            userEntity.Roles.Contains(role, StringComparer.OrdinalIgnoreCase));\n\n        if (hasRequiredRole)\n        {\n            context.Succeed(requirement);\n        }\n        else\n        {\n            context.Fail();\n        }\n    }\n}\n\npublic class RoleRequirement : IAuthorizationRequirement\n{\n    public IEnumerable&lt;string&gt; Roles { get; }\n\n    public RoleRequirement(params string[] roles)\n    {\n        Roles = roles ?? Array.Empty&lt;string&gt;();\n    }\n}\n\npublic class PermissionBasedAuthorizationHandler : AuthorizationHandler&lt;PermissionRequirement&gt;\n{\n    private readonly IUserStore _userStore;\n    private readonly IRoleStore _roleStore;\n\n    public PermissionBasedAuthorizationHandler(IUserStore userStore, IRoleStore roleStore)\n    {\n        _userStore = userStore;\n        _roleStore = roleStore;\n    }\n\n    protected override async Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        PermissionRequirement requirement)\n    {\n        var user = context.User;\n\n        if (!user.Identity.IsAuthenticated)\n        {\n            context.Fail();\n            return;\n        }\n\n        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n        if (string.IsNullOrEmpty(userId))\n        {\n            context.Fail();\n            return;\n        }\n\n        var userEntity = await _userStore.FindByIdAsync(userId);\n        if (userEntity == null)\n        {\n            context.Fail();\n            return;\n        }\n\n        // Get all permissions from user's roles\n        var userPermissions = new HashSet&lt;string&gt;(StringComparer.OrdinalIgnoreCase);\n\n        foreach (var roleName in userEntity.Roles)\n        {\n            var role = await _roleStore.FindByNameAsync(roleName);\n            if (role?.Permissions != null)\n            {\n                foreach (var permission in role.Permissions)\n                {\n                    userPermissions.Add(permission);\n                }\n            }\n        }\n\n        // Check if user has the required permission\n        var hasPermission = userPermissions.Contains(requirement.Permission);\n\n        if (hasPermission)\n        {\n            context.Succeed(requirement);\n        }\n        else\n        {\n            context.Fail();\n        }\n    }\n}\n\npublic class PermissionRequirement : IAuthorizationRequirement\n{\n    public string Permission { get; }\n\n    public PermissionRequirement(string permission)\n    {\n        Permission = permission ?? throw new ArgumentNullException(nameof(permission));\n    }\n}\n</code></pre>"},{"location":"mid-level/security/identity-access-management/#2-claims-based-authorization","title":"2. Claims-Based Authorization","text":"<p>Claim tabanl\u0131 yetkilendirme.</p> <pre><code>public class ClaimsBasedAuthorizationHandler : AuthorizationHandler&lt;ClaimsRequirement&gt;\n{\n    protected override Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        ClaimsRequirement requirement)\n    {\n        var user = context.User;\n\n        if (!user.Identity.IsAuthenticated)\n        {\n            context.Fail();\n            return Task.CompletedTask;\n        }\n\n        // Check if user has all required claims\n        var hasAllClaims = requirement.RequiredClaims.All(requiredClaim =&gt;\n            user.HasClaim(requiredClaim.Type, requiredClaim.Value));\n\n        if (hasAllClaims)\n        {\n            context.Succeed(requirement);\n        }\n        else\n        {\n            context.Fail();\n        }\n\n        return Task.CompletedTask;\n    }\n}\n\npublic class ClaimsRequirement : IAuthorizationRequirement\n{\n    public IEnumerable&lt;Claim&gt; RequiredClaims { get; }\n\n    public ClaimsRequirement(params Claim[] claims)\n    {\n        RequiredClaims = claims ?? Array.Empty&lt;Claim&gt;();\n    }\n}\n\npublic class CustomClaimsPrincipalFactory : IClaimsPrincipalFactory&lt;User&gt;\n{\n    private readonly IUserStore _userStore;\n    private readonly IRoleStore _roleStore;\n\n    public CustomClaimsPrincipalFactory(IUserStore userStore, IRoleStore roleStore)\n    {\n        _userStore = userStore;\n        _roleStore = roleStore;\n    }\n\n    public async Task&lt;ClaimsPrincipal&gt; CreateAsync(User user)\n    {\n        var claims = new List&lt;Claim&gt;\n        {\n            new Claim(ClaimTypes.NameIdentifier, user.Id),\n            new Claim(ClaimTypes.Name, user.UserName),\n            new Claim(ClaimTypes.Email, user.Email),\n            new Claim(\"created_at\", user.CreatedAt.ToString(\"O\")),\n            new Claim(\"is_active\", user.IsActive.ToString())\n        };\n\n        // Add role claims\n        foreach (var role in user.Roles)\n        {\n            claims.Add(new Claim(ClaimTypes.Role, role));\n        }\n\n        // Add custom claims\n        foreach (var kvp in user.Claims)\n        {\n            claims.Add(new Claim(kvp.Key, kvp.Value));\n        }\n\n        var identity = new ClaimsIdentity(claims, \"Custom\", ClaimTypes.Name, ClaimTypes.Role);\n        return new ClaimsPrincipal(identity);\n    }\n}\n</code></pre>"},{"location":"mid-level/security/identity-access-management/#session-management","title":"Session Management","text":""},{"location":"mid-level/security/identity-access-management/#1-session-store","title":"1. Session Store","text":"<p>Kullan\u0131c\u0131 oturumlar\u0131n\u0131 y\u00f6netme.</p> <pre><code>public interface ISessionStore\n{\n    Task&lt;Session&gt; CreateAsync(string userId, TimeSpan duration, CancellationToken cancellationToken = default);\n    Task&lt;Session&gt; GetAsync(string sessionId, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; UpdateAsync(Session session, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; DeleteAsync(string sessionId, CancellationToken cancellationToken = default);\n    Task&lt;bool&gt; ExtendAsync(string sessionId, TimeSpan additionalDuration, CancellationToken cancellationToken = default);\n    Task&lt;IEnumerable&lt;Session&gt;&gt; GetUserSessionsAsync(string userId, CancellationToken cancellationToken = default);\n}\n\npublic class Session\n{\n    public string Id { get; set; }\n    public string UserId { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime ExpiresAt { get; set; }\n    public DateTime LastAccessedAt { get; set; }\n    public string IpAddress { get; set; }\n    public string UserAgent { get; set; }\n    public bool IsActive { get; set; }\n    public Dictionary&lt;string, string&gt; Metadata { get; set; } = new();\n}\n\npublic class RedisSessionStore : ISessionStore\n{\n    private readonly IDatabase _redis;\n    private readonly ILogger&lt;RedisSessionStore&gt; _logger;\n    private readonly string _keyPrefix = \"session:\";\n\n    public RedisSessionStore(IConnectionMultiplexer redis, ILogger&lt;RedisSessionStore&gt; logger)\n    {\n        _redis = redis.GetDatabase();\n        _logger = logger;\n    }\n\n    public async Task&lt;Session&gt; CreateAsync(string userId, TimeSpan duration, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var session = new Session\n            {\n                Id = Guid.NewGuid().ToString(),\n                UserId = userId,\n                CreatedAt = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.Add(duration),\n                LastAccessedAt = DateTime.UtcNow,\n                IsActive = true\n            };\n\n            var key = $\"{_keyPrefix}{session.Id}\";\n            var json = JsonSerializer.Serialize(session);\n\n            await _redis.StringSetAsync(key, json, duration);\n\n            // Store session ID in user's session list\n            var userSessionsKey = $\"user_sessions:{userId}\";\n            await _redis.SetAddAsync(userSessionsKey, session.Id);\n            await _redis.KeyExpireAsync(userSessionsKey, duration);\n\n            _logger.LogInformation(\"Created session {SessionId} for user {UserId}\", session.Id, userId);\n            return session;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating session for user {UserId}\", userId);\n            throw;\n        }\n    }\n\n    public async Task&lt;Session&gt; GetAsync(string sessionId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var key = $\"{_keyPrefix}{sessionId}\";\n            var json = await _redis.StringGetAsync(key);\n\n            if (json.IsNull)\n            {\n                return null;\n            }\n\n            var session = JsonSerializer.Deserialize&lt;Session&gt;(json);\n\n            // Check if session is expired\n            if (session.ExpiresAt &lt;= DateTime.UtcNow)\n            {\n                await DeleteAsync(sessionId, cancellationToken);\n                return null;\n            }\n\n            // Update last accessed time\n            session.LastAccessedAt = DateTime.UtcNow;\n            await UpdateAsync(session, cancellationToken);\n\n            return session;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting session {SessionId}\", sessionId);\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; UpdateAsync(Session session, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var key = $\"{_keyPrefix}{session.Id}\";\n            var json = JsonSerializer.Serialize(session);\n\n            var remainingTime = session.ExpiresAt - DateTime.UtcNow;\n            if (remainingTime &lt;= TimeSpan.Zero)\n            {\n                return false;\n            }\n\n            return await _redis.StringSetAsync(key, json, remainingTime);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating session {SessionId}\", session.Id);\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; DeleteAsync(string sessionId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var key = $\"{_keyPrefix}{sessionId}\";\n            var session = await GetAsync(sessionId, cancellationToken);\n\n            if (session != null)\n            {\n                // Remove from user's session list\n                var userSessionsKey = $\"user_sessions:{session.UserId}\";\n                await _redis.SetRemoveAsync(userSessionsKey, sessionId);\n            }\n\n            return await _redis.KeyDeleteAsync(key);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting session {SessionId}\", sessionId);\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; ExtendAsync(string sessionId, TimeSpan additionalDuration, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var session = await GetAsync(sessionId, cancellationToken);\n            if (session == null)\n            {\n                return false;\n            }\n\n            session.ExpiresAt = session.ExpiresAt.Add(additionalDuration);\n            return await UpdateAsync(session, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error extending session {SessionId}\", sessionId);\n            throw;\n        }\n    }\n\n    public async Task&lt;IEnumerable&lt;Session&gt;&gt; GetUserSessionsAsync(string userId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var userSessionsKey = $\"user_sessions:{userId}\";\n            var sessionIds = await _redis.SetMembersAsync(userSessionsKey);\n\n            var sessions = new List&lt;Session&gt;();\n            foreach (var sessionId in sessionIds)\n            {\n                var session = await GetAsync(sessionId.ToString(), cancellationToken);\n                if (session != null)\n                {\n                    sessions.Add(session);\n                }\n            }\n\n            return sessions;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting sessions for user {UserId}\", userId);\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/security/identity-access-management/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/security/identity-access-management/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Identity &amp; Access Management nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Kullan\u0131c\u0131 kimliklerini y\u00f6netme ve sistemlere eri\u015fim kontrol\u00fc sa\u011flama. Security, compliance ve user experience i\u00e7in kritik.</p> </li> <li> <p>Role-Based Access Control (RBAC) nedir?</p> </li> <li> <p>Cevap: Kullan\u0131c\u0131lara rol atayarak yetki verme sistemi. Permission management ve access control i\u00e7in yayg\u0131n kullan\u0131lan pattern.</p> </li> <li> <p>Claims-based authorization nedir?</p> </li> <li> <p>Cevap: Kullan\u0131c\u0131 hakk\u0131nda bilgi i\u00e7eren claim'ler ile yetkilendirme. Flexible ve granular access control sa\u011flar.</p> </li> <li> <p>Session management nedir ve nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Kullan\u0131c\u0131 oturumlar\u0131n\u0131 y\u00f6netme. Redis, database veya in-memory store kullan\u0131larak implement edilir.</p> </li> <li> <p>Password hashing nedir ve hangi algoritmalar kullan\u0131l\u0131r?</p> </li> <li>Cevap: \u015eifreleri g\u00fcvenli \u015fekilde saklama. BCrypt, Argon2, PBKDF2 gibi algoritmalar kullan\u0131l\u0131r.</li> </ol>"},{"location":"mid-level/security/identity-access-management/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>User store'da password security nas\u0131l sa\u011flan\u0131r?</li> <li> <p>Cevap: Strong hashing algorithms, salt generation, secure storage, password policies, regular updates.</p> </li> <li> <p>RBAC vs Claims-based authorization aras\u0131ndaki fark nedir?</p> </li> <li> <p>Cevap: RBAC rol odakl\u0131, Claims-based daha granular. RBAC daha basit, Claims-based daha flexible.</p> </li> <li> <p>Session hijacking nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Secure session IDs, HTTPS, secure cookies, session timeout, IP validation, user agent validation.</p> </li> <li> <p>Multi-factor authentication nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: TOTP, SMS, email verification, hardware tokens, biometric authentication.</p> </li> <li> <p>Identity federation nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li>Cevap: Farkl\u0131 sistemler aras\u0131 kimlik payla\u015f\u0131m\u0131. SAML, OpenID Connect, OAuth2 protokolleri kullan\u0131l\u0131r.</li> </ol>"},{"location":"mid-level/security/identity-access-management/#best-practices","title":"Best Practices","text":"<ol> <li>Security</li> <li>Strong password policies implement edin</li> <li>Multi-factor authentication kullan\u0131n</li> <li>Session security sa\u011flay\u0131n</li> <li> <p>Regular security audits yap\u0131n</p> </li> <li> <p>Performance</p> </li> <li>Caching implement edin</li> <li>Database optimization yap\u0131n</li> <li>Async operations kullan\u0131n</li> <li> <p>Connection pooling kullan\u0131n</p> </li> <li> <p>Scalability</p> </li> <li>Distributed session store kullan\u0131n</li> <li>Horizontal scaling planlay\u0131n</li> <li>Load balancing implement edin</li> <li> <p>Database sharding d\u00fc\u015f\u00fcn\u00fcn</p> </li> <li> <p>Monitoring</p> </li> <li>Authentication logs tutun</li> <li>Failed login attempts izleyin</li> <li>Session analytics toplay\u0131n</li> <li>Security alerts kurun</li> </ol>"},{"location":"mid-level/security/identity-access-management/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>ASP.NET Core Identity</li> <li>Role-Based Access Control</li> <li>Claims-Based Authorization</li> <li>Session Management</li> <li>Identity Federation</li> </ul>"},{"location":"mid-level/security/jwt-implementation/","title":"JWT Implementation","text":""},{"location":"mid-level/security/jwt-implementation/#giris","title":"Giri\u015f","text":"<p>JSON Web Token (JWT), taraflar aras\u0131nda g\u00fcvenli bilgi aktar\u0131m\u0131 i\u00e7in kullan\u0131lan a\u00e7\u0131k standartt\u0131r. Mid-level geli\u015ftiriciler i\u00e7in JWT implementation'\u0131n\u0131 anlamak, stateless authentication ve authorization sistemleri tasarlamada kritiktir.</p>"},{"location":"mid-level/security/jwt-implementation/#jwt-structure","title":"JWT Structure","text":""},{"location":"mid-level/security/jwt-implementation/#1-jwt-components","title":"1. JWT Components","text":"<p>JWT'nin \u00fc\u00e7 ana bile\u015feni: Header, Payload ve Signature.</p> <pre><code>public class JwtToken\n{\n    public string Header { get; set; }\n    public string Payload { get; set; }\n    public string Signature { get; set; }\n\n    public string ToTokenString()\n    {\n        return $\"{Header}.{Payload}.{Signature}\";\n    }\n\n    public static JwtToken FromTokenString(string token)\n    {\n        var parts = token.Split('.');\n        if (parts.Length != 3)\n        {\n            throw new ArgumentException(\"Invalid JWT token format\");\n        }\n\n        return new JwtToken\n        {\n            Header = parts[0],\n            Payload = parts[1],\n            Signature = parts[2]\n        };\n    }\n}\n\npublic class JwtHeader\n{\n    [JsonPropertyName(\"alg\")]\n    public string Algorithm { get; set; } = \"HS256\";\n\n    [JsonPropertyName(\"typ\")]\n    public string Type { get; set; } = \"JWT\";\n\n    [JsonPropertyName(\"kid\")]\n    public string KeyId { get; set; }\n}\n\npublic class JwtPayload\n{\n    [JsonPropertyName(\"iss\")]\n    public string Issuer { get; set; }\n\n    [JsonPropertyName(\"sub\")]\n    public string Subject { get; set; }\n\n    [JsonPropertyName(\"aud\")]\n    public string Audience { get; set; }\n\n    [JsonPropertyName(\"exp\")]\n    public long ExpirationTime { get; set; }\n\n    [JsonPropertyName(\"nbf\")]\n    public long NotBefore { get; set; }\n\n    [JsonPropertyName(\"iat\")]\n    public long IssuedAt { get; set; }\n\n    [JsonPropertyName(\"jti\")]\n    public string JwtId { get; set; }\n\n    // Custom claims\n    [JsonPropertyName(\"user_id\")]\n    public string UserId { get; set; }\n\n    [JsonPropertyName(\"username\")]\n    public string Username { get; set; }\n\n    [JsonPropertyName(\"email\")]\n    public string Email { get; set; }\n\n    [JsonPropertyName(\"roles\")]\n    public List&lt;string&gt; Roles { get; set; } = new();\n\n    [JsonPropertyName(\"permissions\")]\n    public List&lt;string&gt; Permissions { get; set; } = new();\n\n    public DateTime ExpirationTimeUtc =&gt; DateTimeOffset.FromUnixTimeSeconds(ExpirationTime).UtcDateTime;\n    public DateTime NotBeforeUtc =&gt; DateTimeOffset.FromUnixTimeSeconds(NotBefore).UtcDateTime;\n    public DateTime IssuedAtUtc =&gt; DateTimeOffset.FromUnixTimeSeconds(IssuedAt).UtcDateTime;\n}\n</code></pre>"},{"location":"mid-level/security/jwt-implementation/#2-jwt-token-builder","title":"2. JWT Token Builder","text":"<p>JWT token olu\u015fturma ve y\u00f6netme.</p> <pre><code>public interface IJwtTokenBuilder\n{\n    string BuildToken(JwtPayload payload);\n    JwtPayload ValidateToken(string token);\n    string RefreshToken(string token);\n}\n\npublic class JwtTokenBuilder : IJwtTokenBuilder\n{\n    private readonly JwtSettings _settings;\n    private readonly ILogger&lt;JwtTokenBuilder&gt; _logger;\n    private readonly byte[] _secretKey;\n\n    public JwtTokenBuilder(JwtSettings settings, ILogger&lt;JwtTokenBuilder&gt; logger)\n    {\n        _settings = settings;\n        _logger = logger;\n        _secretKey = Encoding.UTF8.GetBytes(settings.SecretKey);\n    }\n\n    public string BuildToken(JwtPayload payload)\n    {\n        try\n        {\n            // Set standard claims if not provided\n            var now = DateTime.UtcNow;\n            if (payload.IssuedAt == 0)\n            {\n                payload.IssuedAt = new DateTimeOffset(now).ToUnixTimeSeconds();\n            }\n\n            if (payload.NotBefore == 0)\n            {\n                payload.NotBefore = new DateTimeOffset(now).ToUnixTimeSeconds();\n            }\n\n            if (payload.ExpirationTime == 0)\n            {\n                payload.ExpirationTime = new DateTimeOffset(now.AddMinutes(_settings.ExpirationMinutes)).ToUnixTimeSeconds();\n            }\n\n            if (string.IsNullOrEmpty(payload.Issuer))\n            {\n                payload.Issuer = _settings.Issuer;\n            }\n\n            if (string.IsNullOrEmpty(payload.Audience))\n            {\n                payload.Audience = _settings.Audience;\n            }\n\n            if (string.IsNullOrEmpty(payload.JwtId))\n            {\n                payload.JwtId = Guid.NewGuid().ToString();\n            }\n\n            // Create header\n            var header = new JwtHeader\n            {\n                Algorithm = _settings.Algorithm,\n                Type = \"JWT\",\n                KeyId = _settings.KeyId\n            };\n\n            // Serialize header and payload\n            var headerJson = JsonSerializer.Serialize(header);\n            var payloadJson = JsonSerializer.Serialize(payload);\n\n            var headerBase64 = Base64UrlEncode(headerJson);\n            var payloadBase64 = Base64UrlEncode(payloadJson);\n\n            // Create signature\n            var signatureInput = $\"{headerBase64}.{payloadBase64}\";\n            var signature = CreateSignature(signatureInput);\n\n            // Build token\n            var token = new JwtToken\n            {\n                Header = headerBase64,\n                Payload = payloadBase64,\n                Signature = signature\n            };\n\n            _logger.LogInformation(\"JWT token created for user {UserId}\", payload.UserId);\n            return token.ToTokenString();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error building JWT token\");\n            throw;\n        }\n    }\n\n    public JwtPayload ValidateToken(string token)\n    {\n        try\n        {\n            var jwtToken = JwtToken.FromTokenString(token);\n\n            // Verify signature\n            var signatureInput = $\"{jwtToken.Header}.{jwtToken.Payload}\";\n            var expectedSignature = CreateSignature(signatureInput);\n\n            if (jwtToken.Signature != expectedSignature)\n            {\n                throw new SecurityTokenInvalidSignatureException(\"Invalid JWT signature\");\n            }\n\n            // Decode payload\n            var payloadJson = Base64UrlDecode(jwtToken.Payload);\n            var payload = JsonSerializer.Deserialize&lt;JwtPayload&gt;(payloadJson);\n\n            // Validate claims\n            ValidateClaims(payload);\n\n            _logger.LogInformation(\"JWT token validated for user {UserId}\", payload.UserId);\n            return payload;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating JWT token\");\n            throw;\n        }\n    }\n\n    public string RefreshToken(string token)\n    {\n        try\n        {\n            var payload = ValidateToken(token);\n\n            // Create new payload with extended expiration\n            var newPayload = new JwtPayload\n            {\n                Issuer = payload.Issuer,\n                Subject = payload.Subject,\n                Audience = payload.Audience,\n                UserId = payload.UserId,\n                Username = payload.Username,\n                Email = payload.Email,\n                Roles = payload.Roles,\n                Permissions = payload.Permissions\n            };\n\n            return BuildToken(newPayload);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error refreshing JWT token\");\n            throw;\n        }\n    }\n\n    private string CreateSignature(string input)\n    {\n        using var hmac = new HMACSHA256(_secretKey);\n        var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(input));\n        return Base64UrlEncode(hash);\n    }\n\n    private void ValidateClaims(JwtPayload payload)\n    {\n        var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n\n        if (payload.ExpirationTime &lt;= now)\n        {\n            throw new SecurityTokenExpiredException(\"JWT token has expired\");\n        }\n\n        if (payload.NotBefore &gt; now)\n        {\n            throw new SecurityTokenNotYetValidException(\"JWT token is not yet valid\");\n        }\n\n        if (!string.IsNullOrEmpty(_settings.Issuer) &amp;&amp; payload.Issuer != _settings.Issuer)\n        {\n            throw new SecurityTokenInvalidIssuerException(\"Invalid JWT issuer\");\n        }\n\n        if (!string.IsNullOrEmpty(_settings.Audience) &amp;&amp; payload.Audience != _settings.Audience)\n        {\n            throw new SecurityTokenInvalidAudienceException(\"Invalid JWT audience\");\n        }\n    }\n\n    private static string Base64UrlEncode(string input)\n    {\n        var bytes = Encoding.UTF8.GetBytes(input);\n        return Base64UrlEncode(bytes);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        var base64 = Convert.ToBase64String(input);\n        return base64.Replace('+', '-').Replace('/', '_').TrimEnd('=');\n    }\n\n    private static string Base64UrlDecode(string input)\n    {\n        var base64 = input.Replace('-', '+').Replace('_', '/');\n        var padding = 4 - (base64.Length % 4);\n        if (padding != 4)\n        {\n            base64 += new string('=', padding);\n        }\n\n        var bytes = Convert.FromBase64String(base64);\n        return Encoding.UTF8.GetString(bytes);\n    }\n}\n\npublic class JwtSettings\n{\n    public string SecretKey { get; set; }\n    public string Issuer { get; set; }\n    public string Audience { get; set; }\n    public int ExpirationMinutes { get; set; } = 60;\n    public string Algorithm { get; set; } = \"HS256\";\n    public string KeyId { get; set; }\n}\n</code></pre>"},{"location":"mid-level/security/jwt-implementation/#jwt-authentication","title":"JWT Authentication","text":""},{"location":"mid-level/security/jwt-implementation/#1-jwt-authentication-handler","title":"1. JWT Authentication Handler","text":"<p>ASP.NET Core i\u00e7in JWT authentication handler.</p> <pre><code>public class JwtAuthenticationHandler : AuthenticationHandler&lt;AuthenticationSchemeOptions&gt;\n{\n    private readonly IJwtTokenBuilder _jwtTokenBuilder;\n    private readonly IUserService _userService;\n\n    public JwtAuthenticationHandler(\n        IOptionsMonitor&lt;AuthenticationSchemeOptions&gt; options,\n        ILoggerFactory logger,\n        UrlEncoder encoder,\n        ISystemClock clock,\n        IJwtTokenBuilder jwtTokenBuilder,\n        IUserService userService)\n        : base(options, logger, encoder, clock)\n    {\n        _jwtTokenBuilder = jwtTokenBuilder;\n        _userService = userService;\n    }\n\n    protected override async Task&lt;AuthenticateResult&gt; HandleAuthenticateAsync()\n    {\n        try\n        {\n            // Extract token from Authorization header\n            var token = ExtractTokenFromHeader();\n            if (string.IsNullOrEmpty(token))\n            {\n                return AuthenticateResult.Fail(\"No JWT token provided\");\n            }\n\n            // Validate token\n            var payload = _jwtTokenBuilder.ValidateToken(token);\n\n            // Get user information\n            var user = await _userService.GetUserByIdAsync(payload.UserId);\n            if (user == null || !user.IsActive)\n            {\n                return AuthenticateResult.Fail(\"User not found or inactive\");\n            }\n\n            // Create claims principal\n            var claims = CreateClaims(payload, user);\n            var identity = new ClaimsIdentity(claims, Scheme.Name);\n            var principal = new ClaimsPrincipal(identity);\n\n            var ticket = new AuthenticationTicket(principal, Scheme.Name);\n            return AuthenticateResult.Success(ticket);\n        }\n        catch (SecurityTokenExpiredException)\n        {\n            return AuthenticateResult.Fail(\"JWT token has expired\");\n        }\n        catch (SecurityTokenInvalidSignatureException)\n        {\n            return AuthenticateResult.Fail(\"Invalid JWT signature\");\n        }\n        catch (Exception ex)\n        {\n            Logger.LogError(ex, \"Error during JWT authentication\");\n            return AuthenticateResult.Fail(\"Authentication failed\");\n        }\n    }\n\n    protected override Task HandleChallengeAsync(AuthenticationProperties properties)\n    {\n        Response.Headers[\"WWW-Authenticate\"] = \"Bearer\";\n        return Task.CompletedTask;\n    }\n\n    private string ExtractTokenFromHeader()\n    {\n        var authorizationHeader = Request.Headers[\"Authorization\"].FirstOrDefault();\n\n        if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith(\"Bearer \"))\n        {\n            return null;\n        }\n\n        return authorizationHeader.Substring(\"Bearer \".Length).Trim();\n    }\n\n    private IEnumerable&lt;Claim&gt; CreateClaims(JwtPayload payload, User user)\n    {\n        var claims = new List&lt;Claim&gt;\n        {\n            new Claim(ClaimTypes.NameIdentifier, payload.UserId),\n            new Claim(ClaimTypes.Name, payload.Username),\n            new Claim(ClaimTypes.Email, payload.Email),\n            new Claim(\"jti\", payload.JwtId),\n            new Claim(\"iat\", payload.IssuedAt.ToString()),\n            new Claim(\"exp\", payload.ExpirationTime.ToString())\n        };\n\n        // Add role claims\n        foreach (var role in payload.Roles)\n        {\n            claims.Add(new Claim(ClaimTypes.Role, role));\n        }\n\n        // Add permission claims\n        foreach (var permission in payload.Permissions)\n        {\n            claims.Add(new Claim(\"permission\", permission));\n        }\n\n        return claims;\n    }\n}\n\npublic class JwtAuthenticationSchemeOptions : AuthenticationSchemeOptions\n{\n    public string TokenHeaderName { get; set; } = \"Authorization\";\n    public string TokenPrefix { get; set; } = \"Bearer\";\n    public bool RequireHttps { get; set; } = true;\n}\n</code></pre>"},{"location":"mid-level/security/jwt-implementation/#2-jwt-authentication-service","title":"2. JWT Authentication Service","text":"<p>JWT authentication i\u015flemlerini y\u00f6neten service.</p> <pre><code>public interface IJwtAuthenticationService\n{\n    Task&lt;AuthenticationResult&gt; AuthenticateAsync(string username, string password);\n    Task&lt;AuthenticationResult&gt; AuthenticateWithRefreshTokenAsync(string refreshToken);\n    Task&lt;bool&gt; RevokeTokenAsync(string token);\n    Task&lt;bool&gt; IsTokenValidAsync(string token);\n}\n\npublic class JwtAuthenticationService : IJwtAuthenticationService\n{\n    private readonly IUserService _userService;\n    private readonly IPasswordHasher _passwordHasher;\n    private readonly IJwtTokenBuilder _jwtTokenBuilder;\n    private readonly IRefreshTokenService _refreshTokenService;\n    private readonly ILogger&lt;JwtAuthenticationService&gt; _logger;\n\n    public JwtAuthenticationService(\n        IUserService userService,\n        IPasswordHasher passwordHasher,\n        IJwtTokenBuilder jwtTokenBuilder,\n        IRefreshTokenService refreshTokenService,\n        ILogger&lt;JwtAuthenticationService&gt; logger)\n    {\n        _userService = userService;\n        _passwordHasher = passwordHasher;\n        _jwtTokenBuilder = jwtTokenBuilder;\n        _refreshTokenService = refreshTokenService;\n        _logger = logger;\n    }\n\n    public async Task&lt;AuthenticationResult&gt; AuthenticateAsync(string username, string password)\n    {\n        try\n        {\n            // Validate input\n            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))\n            {\n                return AuthenticationResult.Failure(\"Username and password are required\");\n            }\n\n            // Get user\n            var user = await _userService.GetUserByUsernameAsync(username);\n            if (user == null)\n            {\n                _logger.LogWarning(\"Authentication failed for username: {Username}\", username);\n                return AuthenticationResult.Failure(\"Invalid credentials\");\n            }\n\n            // Check if user is active\n            if (!user.IsActive)\n            {\n                _logger.LogWarning(\"Authentication failed for inactive user: {Username}\", username);\n                return AuthenticationResult.Failure(\"User account is inactive\");\n            }\n\n            // Check if user is locked out\n            if (user.LockoutEnd.HasValue &amp;&amp; user.LockoutEnd.Value &gt; DateTime.UtcNow)\n            {\n                _logger.LogWarning(\"Authentication failed for locked user: {Username}\", username);\n                return AuthenticationResult.Failure(\"User account is locked\");\n            }\n\n            // Verify password\n            var passwordResult = _passwordHasher.VerifyHashedPassword(user.PasswordHash, password);\n            if (passwordResult == PasswordVerificationResult.Failed)\n            {\n                await HandleFailedLoginAsync(user);\n                return AuthenticationResult.Failure(\"Invalid credentials\");\n            }\n\n            // Reset failed login count on successful authentication\n            if (user.AccessFailedCount &gt; 0)\n            {\n                await _userService.ResetAccessFailedCountAsync(user.Id);\n            }\n\n            // Update last login time\n            await _userService.UpdateLastLoginAsync(user.Id);\n\n            // Create JWT token\n            var payload = CreateJwtPayload(user);\n            var accessToken = _jwtTokenBuilder.BuildToken(payload);\n\n            // Create refresh token\n            var refreshToken = await _refreshTokenService.CreateRefreshTokenAsync(user.Id);\n\n            _logger.LogInformation(\"User {Username} authenticated successfully\", username);\n\n            return AuthenticationResult.Success(accessToken, refreshToken, user);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during authentication for username: {Username}\", username);\n            return AuthenticationResult.Failure(\"Authentication failed\");\n        }\n    }\n\n    public async Task&lt;AuthenticationResult&gt; AuthenticateWithRefreshTokenAsync(string refreshToken)\n    {\n        try\n        {\n            // Validate refresh token\n            var refreshTokenInfo = await _refreshTokenService.ValidateRefreshTokenAsync(refreshToken);\n            if (refreshTokenInfo == null)\n            {\n                return AuthenticationResult.Failure(\"Invalid refresh token\");\n            }\n\n            // Get user\n            var user = await _userService.GetUserByIdAsync(refreshTokenInfo.UserId);\n            if (user == null || !user.IsActive)\n            {\n                return AuthenticationResult.Failure(\"User not found or inactive\");\n            }\n\n            // Create new JWT token\n            var payload = CreateJwtPayload(user);\n            var accessToken = _jwtTokenBuilder.BuildToken(payload);\n\n            // Create new refresh token\n            var newRefreshToken = await _refreshTokenService.CreateRefreshTokenAsync(user.Id);\n\n            // Revoke old refresh token\n            await _refreshTokenService.RevokeRefreshTokenAsync(refreshToken);\n\n            _logger.LogInformation(\"User {Username} authenticated with refresh token\", user.Username);\n\n            return AuthenticationResult.Success(accessToken, newRefreshToken, user);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during refresh token authentication\");\n            return AuthenticationResult.Failure(\"Authentication failed\");\n        }\n    }\n\n    public async Task&lt;bool&gt; RevokeTokenAsync(string token)\n    {\n        try\n        {\n            // Add token to blacklist or revoke it\n            // Implementation depends on your requirements\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error revoking token\");\n            return false;\n        }\n    }\n\n    public async Task&lt;bool&gt; IsTokenValidAsync(string token)\n    {\n        try\n        {\n            var payload = _jwtTokenBuilder.ValidateToken(token);\n            return true;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n\n    private JwtPayload CreateJwtPayload(User user)\n    {\n        return new JwtPayload\n        {\n            Subject = user.Id,\n            UserId = user.Id,\n            Username = user.Username,\n            Email = user.Email,\n            Roles = user.Roles,\n            Permissions = user.Permissions,\n            IssuedAt = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds(),\n            NotBefore = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds(),\n            ExpirationTime = new DateTimeOffset(DateTime.UtcNow.AddMinutes(60)).ToUnixTimeSeconds(),\n            JwtId = Guid.NewGuid().ToString()\n        };\n    }\n\n    private async Task HandleFailedLoginAsync(User user)\n    {\n        user.AccessFailedCount++;\n\n        // Lock user account if too many failed attempts\n        if (user.AccessFailedCount &gt;= 5)\n        {\n            user.LockoutEnd = DateTime.UtcNow.AddMinutes(30);\n            user.LockoutEnabled = true;\n        }\n\n        await _userService.UpdateAsync(user);\n\n        _logger.LogWarning(\"Failed login attempt for user {Username}. Attempt {AttemptCount}\", \n            user.Username, user.AccessFailedCount);\n    }\n}\n\npublic class AuthenticationResult\n{\n    public bool Succeeded { get; private set; }\n    public string AccessToken { get; private set; }\n    public string RefreshToken { get; private set; }\n    public User User { get; private set; }\n    public string ErrorMessage { get; private set; }\n\n    public static AuthenticationResult Success(string accessToken, string refreshToken, User user)\n    {\n        return new AuthenticationResult\n        {\n            Succeeded = true,\n            AccessToken = accessToken,\n            RefreshToken = refreshToken,\n            User = user\n        };\n    }\n\n    public static AuthenticationResult Failure(string errorMessage)\n    {\n        return new AuthenticationResult\n        {\n            Succeeded = false,\n            ErrorMessage = errorMessage\n        };\n    }\n}\n</code></pre>"},{"location":"mid-level/security/jwt-implementation/#jwt-security","title":"JWT Security","text":""},{"location":"mid-level/security/jwt-implementation/#1-jwt-security-best-practices","title":"1. JWT Security Best Practices","text":"<p>JWT g\u00fcvenli\u011fi i\u00e7in best practices.</p> <pre><code>public class JwtSecurityService\n{\n    private readonly IJwtTokenBuilder _jwtTokenBuilder;\n    private readonly ILogger&lt;JwtSecurityService&gt; _logger;\n    private readonly IMemoryCache _cache;\n\n    public JwtSecurityService(\n        IJwtTokenBuilder jwtTokenBuilder,\n        ILogger&lt;JwtSecurityService&gt; logger,\n        IMemoryCache cache)\n    {\n        _jwtTokenBuilder = jwtTokenBuilder;\n        _logger = logger;\n        _cache = cache;\n    }\n\n    public async Task&lt;bool&gt; IsTokenBlacklistedAsync(string token)\n    {\n        var tokenHash = ComputeTokenHash(token);\n        return _cache.TryGetValue($\"blacklist:{tokenHash}\", out _);\n    }\n\n    public async Task BlacklistTokenAsync(string token, TimeSpan duration)\n    {\n        var tokenHash = ComputeTokenHash(token);\n        var expiration = DateTime.UtcNow.Add(duration);\n\n        _cache.Set($\"blacklist:{tokenHash}\", true, expiration);\n\n        _logger.LogInformation(\"Token blacklisted for {Duration} minutes\", duration.TotalMinutes);\n    }\n\n    public async Task&lt;bool&gt; ValidateTokenSecurityAsync(string token)\n    {\n        try\n        {\n            // Check if token is blacklisted\n            if (await IsTokenBlacklistedAsync(token))\n            {\n                _logger.LogWarning(\"Attempted to use blacklisted token\");\n                return false;\n            }\n\n            // Validate token structure and signature\n            var payload = _jwtTokenBuilder.ValidateToken(token);\n\n            // Check token age\n            var tokenAge = DateTime.UtcNow - payload.IssuedAtUtc;\n            if (tokenAge &gt; TimeSpan.FromDays(1))\n            {\n                _logger.LogWarning(\"Token is too old: {TokenAge}\", tokenAge);\n                return false;\n            }\n\n            // Check for suspicious patterns\n            if (HasSuspiciousPatterns(payload))\n            {\n                _logger.LogWarning(\"Suspicious patterns detected in token for user {UserId}\", payload.UserId);\n                return false;\n            }\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating token security\");\n            return false;\n        }\n    }\n\n    private string ComputeTokenHash(string token)\n    {\n        using var sha256 = SHA256.Create();\n        var hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(token));\n        return Convert.ToBase64String(hash);\n    }\n\n    private bool HasSuspiciousPatterns(JwtPayload payload)\n    {\n        // Check for unusual claim values\n        if (payload.Roles.Contains(\"admin\") &amp;&amp; payload.IssuedAtUtc &lt; DateTime.UtcNow.AddHours(-1))\n        {\n            return true;\n        }\n\n        // Check for multiple tokens with same user in short time\n        var cacheKey = $\"user_tokens:{payload.UserId}\";\n        var tokenCount = _cache.GetOrCreate(cacheKey, entry =&gt;\n        {\n            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5);\n            return 0;\n        });\n\n        if (tokenCount &gt; 10)\n        {\n            return true;\n        }\n\n        _cache.Set(cacheKey, tokenCount + 1, TimeSpan.FromMinutes(5));\n\n        return false;\n    }\n}\n\npublic class JwtRateLimitingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;JwtRateLimitingMiddleware&gt; _logger;\n\n    public JwtRateLimitingMiddleware(\n        RequestDelegate next,\n        IMemoryCache cache,\n        ILogger&lt;JwtRateLimitingMiddleware&gt; logger)\n    {\n        _next = next;\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var token = ExtractTokenFromContext(context);\n\n        if (!string.IsNullOrEmpty(token))\n        {\n            var userId = ExtractUserIdFromToken(token);\n\n            if (!string.IsNullOrEmpty(userId))\n            {\n                var cacheKey = $\"rate_limit:{userId}\";\n                var requestCount = _cache.GetOrCreate(cacheKey, entry =&gt;\n                {\n                    entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(1);\n                    return 0;\n                });\n\n                if (requestCount &gt; 100) // 100 requests per minute\n                {\n                    _logger.LogWarning(\"Rate limit exceeded for user {UserId}\", userId);\n                    context.Response.StatusCode = 429; // Too Many Requests\n                    await context.Response.WriteAsync(\"Rate limit exceeded\");\n                    return;\n                }\n\n                _cache.Set(cacheKey, requestCount + 1, TimeSpan.FromMinutes(1));\n            }\n        }\n\n        await _next(context);\n    }\n\n    private string ExtractTokenFromContext(HttpContext context)\n    {\n        var authorizationHeader = context.Request.Headers[\"Authorization\"].FirstOrDefault();\n\n        if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith(\"Bearer \"))\n        {\n            return null;\n        }\n\n        return authorizationHeader.Substring(\"Bearer \".Length).Trim();\n    }\n\n    private string ExtractUserIdFromToken(string token)\n    {\n        try\n        {\n            var jwtToken = JwtToken.FromTokenString(token);\n            var payloadJson = Base64UrlDecode(jwtToken.Payload);\n            var payload = JsonSerializer.Deserialize&lt;JwtPayload&gt;(payloadJson);\n            return payload.UserId;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n\n    private static string Base64UrlDecode(string input)\n    {\n        var base64 = input.Replace('-', '+').Replace('_', '/');\n        var padding = 4 - (base64.Length % 4);\n        if (padding != 4)\n        {\n            base64 += new string('=', padding);\n        }\n\n        var bytes = Convert.FromBase64String(base64);\n        return Encoding.UTF8.GetString(bytes);\n    }\n}\n</code></pre>"},{"location":"mid-level/security/jwt-implementation/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/security/jwt-implementation/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>JWT nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li> <p>Cevap: JSON Web Token, stateless authentication i\u00e7in kullan\u0131lan standart. Header, Payload ve Signature'dan olu\u015fur.</p> </li> <li> <p>JWT'nin avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap: Avantajlar: Stateless, scalable, cross-domain. Dezavantajlar: Size, revocation difficulty, security concerns.</p> </li> <li> <p>JWT signature nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: HMAC veya RSA ile header ve payload hash'lenir. Veri b\u00fct\u00fcnl\u00fc\u011f\u00fc ve authenticity sa\u011flar.</p> </li> <li> <p>JWT token'lar\u0131 nas\u0131l g\u00fcvenli hale getirilir?</p> </li> <li> <p>Cevap: Strong secret keys, HTTPS, short expiration, token blacklisting, rate limiting.</p> </li> <li> <p>JWT vs Session-based authentication aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: JWT stateless, session stateful. JWT daha scalable ama daha b\u00fcy\u00fck, session daha g\u00fcvenli ama server memory kullan\u0131r.</li> </ol>"},{"location":"mid-level/security/jwt-implementation/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>JWT token'\u0131 nas\u0131l revoke edilir?</li> <li> <p>Cevap: Token blacklisting, refresh token rotation, short expiration times, server-side validation.</p> </li> <li> <p>JWT payload'da hangi bilgiler saklanmal\u0131?</p> </li> <li> <p>Cevap: User ID, roles, permissions, expiration, issued at. Sensitive data saklanmamal\u0131.</p> </li> <li> <p>JWT security vulnerabilities nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Strong algorithms, secure storage, HTTPS, input validation, rate limiting.</p> </li> <li> <p>JWT performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Minimal payload size, caching, async validation, efficient algorithms.</p> </li> <li> <p>JWT refresh token pattern nas\u0131l implement edilir?</p> </li> <li>Cevap: Access token + refresh token, rotation, secure storage, validation.</li> </ol>"},{"location":"mid-level/security/jwt-implementation/#best-practices","title":"Best Practices","text":"<ol> <li>Security</li> <li>Strong secret keys kullan\u0131n</li> <li>HTTPS zorunlu yap\u0131n</li> <li>Short expiration times belirleyin</li> <li> <p>Token blacklisting implement edin</p> </li> <li> <p>Performance</p> </li> <li>Minimal payload size sa\u011flay\u0131n</li> <li>Efficient algorithms kullan\u0131n</li> <li>Caching implement edin</li> <li> <p>Async operations kullan\u0131n</p> </li> <li> <p>Monitoring</p> </li> <li>Token usage izleyin</li> <li>Failed validations log edin</li> <li>Rate limiting metrics toplay\u0131n</li> <li> <p>Security alerts kurun</p> </li> <li> <p>Maintenance</p> </li> <li>Regular key rotation yap\u0131n</li> <li>Security updates takip edin</li> <li>Performance monitoring yap\u0131n</li> <li>Documentation g\u00fcncelleyin</li> </ol>"},{"location":"mid-level/security/jwt-implementation/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>JWT.io</li> <li>ASP.NET Core JWT Authentication</li> <li>JWT Security Best Practices</li> <li>JWT Implementation Guide</li> <li>JWT Security Considerations</li> </ul>"},{"location":"mid-level/security/oauth2-integration/","title":"OAuth 2.0 Integration","text":""},{"location":"mid-level/security/oauth2-integration/#giris","title":"Giri\u015f","text":"<p>OAuth 2.0, \u00fc\u00e7\u00fcnc\u00fc taraf uygulamalara kullan\u0131c\u0131 verilerine eri\u015fim izni vermek i\u00e7in kullan\u0131lan a\u00e7\u0131k standartt\u0131r. Mid-level geli\u015ftiriciler i\u00e7in OAuth 2.0 implementation'\u0131n\u0131 anlamak, g\u00fcvenli ve \u00f6l\u00e7eklenebilir authorization sistemleri tasarlamada kritiktir.</p>"},{"location":"mid-level/security/oauth2-integration/#oauth-20-flow-types","title":"OAuth 2.0 Flow Types","text":""},{"location":"mid-level/security/oauth2-integration/#1-authorization-code-flow","title":"1. Authorization Code Flow","text":"<p>En g\u00fcvenli OAuth 2.0 flow'u, server-side uygulamalar i\u00e7in.</p> <pre><code>public class OAuth2AuthorizationCodeFlow\n{\n    private readonly IConfiguration _configuration;\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly ILogger&lt;OAuth2AuthorizationCodeFlow&gt; _logger;\n\n    public OAuth2AuthorizationCodeFlow(\n        IConfiguration configuration,\n        IHttpClientFactory httpClientFactory,\n        ILogger&lt;OAuth2AuthorizationCodeFlow&gt; logger)\n    {\n        _configuration = configuration;\n        _httpClientFactory = httpClientFactory;\n        _logger = logger;\n    }\n\n    public string GetAuthorizationUrl(string state, string scope = \"read\")\n    {\n        var clientId = _configuration[\"OAuth2:ClientId\"];\n        var redirectUri = _configuration[\"OAuth2:RedirectUri\"];\n        var authorizationEndpoint = _configuration[\"OAuth2:AuthorizationEndpoint\"];\n\n        var queryParams = new Dictionary&lt;string, string&gt;\n        {\n            [\"response_type\"] = \"code\",\n            [\"client_id\"] = clientId,\n            [\"redirect_uri\"] = redirectUri,\n            [\"scope\"] = scope,\n            [\"state\"] = state\n        };\n\n        var queryString = string.Join(\"&amp;\", queryParams.Select(kvp =&gt; $\"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}\"));\n        return $\"{authorizationEndpoint}?{queryString}\";\n    }\n\n    public async Task&lt;OAuth2TokenResponse&gt; ExchangeCodeForTokenAsync(string authorizationCode)\n    {\n        try\n        {\n            var client = _httpClientFactory.CreateClient(\"OAuth2\");\n\n            var tokenRequest = new FormUrlEncodedContent(new[]\n            {\n                new KeyValuePair&lt;string, string&gt;(\"grant_type\", \"authorization_code\"),\n                new KeyValuePair&lt;string, string&gt;(\"code\", authorizationCode),\n                new KeyValuePair&lt;string, string&gt;(\"client_id\", _configuration[\"OAuth2:ClientId\"]),\n                new KeyValuePair&lt;string, string&gt;(\"client_secret\", _configuration[\"OAuth2:ClientSecret\"]),\n                new KeyValuePair&lt;string, string&gt;(\"redirect_uri\", _configuration[\"OAuth2:RedirectUri\"])\n            });\n\n            var response = await client.PostAsync(_configuration[\"OAuth2:TokenEndpoint\"], tokenRequest);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseContent = await response.Content.ReadAsStringAsync();\n                var tokenResponse = JsonSerializer.Deserialize&lt;OAuth2TokenResponse&gt;(responseContent);\n\n                _logger.LogInformation(\"Successfully exchanged authorization code for token\");\n                return tokenResponse;\n            }\n            else\n            {\n                var errorContent = await response.Content.ReadAsStringAsync();\n                _logger.LogError(\"Failed to exchange authorization code. Status: {Status}, Content: {Content}\", \n                    response.StatusCode, errorContent);\n                throw new OAuth2Exception($\"Token exchange failed: {response.StatusCode}\");\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error exchanging authorization code for token\");\n            throw;\n        }\n    }\n\n    public async Task&lt;OAuth2TokenResponse&gt; RefreshTokenAsync(string refreshToken)\n    {\n        try\n        {\n            var client = _httpClientFactory.CreateClient(\"OAuth2\");\n\n            var tokenRequest = new FormUrlEncodedContent(new[]\n            {\n                new KeyValuePair&lt;string, string&gt;(\"grant_type\", \"refresh_token\"),\n                new KeyValuePair&lt;string, string&gt;(\"refresh_token\", refreshToken),\n                new KeyValuePair&lt;string, string&gt;(\"client_id\", _configuration[\"OAuth2:ClientId\"]),\n                new KeyValuePair&lt;string, string&gt;(\"client_secret\", _configuration[\"OAuth2:ClientSecret\"])\n            });\n\n            var response = await client.PostAsync(_configuration[\"OAuth2:TokenEndpoint\"], tokenRequest);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseContent = await response.Content.ReadAsStringAsync();\n                var tokenResponse = JsonSerializer.Deserialize&lt;OAuth2TokenResponse&gt;(responseContent);\n\n                _logger.LogInformation(\"Successfully refreshed access token\");\n                return tokenResponse;\n            }\n            else\n            {\n                var errorContent = await response.Content.ReadAsStringAsync();\n                _logger.LogError(\"Failed to refresh token. Status: {Status}, Content: {Content}\", \n                    response.StatusCode, errorContent);\n                throw new OAuth2Exception($\"Token refresh failed: {response.StatusCode}\");\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error refreshing token\");\n            throw;\n        }\n    }\n}\n\npublic class OAuth2TokenResponse\n{\n    [JsonPropertyName(\"access_token\")]\n    public string AccessToken { get; set; }\n\n    [JsonPropertyName(\"token_type\")]\n    public string TokenType { get; set; }\n\n    [JsonPropertyName(\"expires_in\")]\n    public int ExpiresIn { get; set; }\n\n    [JsonPropertyName(\"refresh_token\")]\n    public string RefreshToken { get; set; }\n\n    [JsonPropertyName(\"scope\")]\n    public string Scope { get; set; }\n\n    [JsonPropertyName(\"id_token\")]\n    public string IdToken { get; set; }\n\n    public DateTime ExpiresAt =&gt; DateTime.UtcNow.AddSeconds(ExpiresIn);\n    public bool IsExpired =&gt; DateTime.UtcNow &gt;= ExpiresAt;\n}\n</code></pre>"},{"location":"mid-level/security/oauth2-integration/#2-client-credentials-flow","title":"2. Client Credentials Flow","text":"<p>Machine-to-machine authentication i\u00e7in kullan\u0131lan flow.</p> <pre><code>public class OAuth2ClientCredentialsFlow\n{\n    private readonly IConfiguration _configuration;\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly IMemoryCache _cache;\n    private readonly ILogger&lt;OAuth2ClientCredentialsFlow&gt; _logger;\n\n    public OAuth2ClientCredentialsFlow(\n        IConfiguration configuration,\n        IHttpClientFactory httpClientFactory,\n        IMemoryCache cache,\n        ILogger&lt;OAuth2ClientCredentialsFlow&gt; logger)\n    {\n        _configuration = configuration;\n        _httpClientFactory = httpClientFactory;\n        _cache = cache;\n        _logger = logger;\n    }\n\n    public async Task&lt;string&gt; GetAccessTokenAsync(string scope = null)\n    {\n        var cacheKey = $\"oauth2_token:{scope ?? \"default\"}\";\n\n        if (_cache.TryGetValue(cacheKey, out string cachedToken))\n        {\n            return cachedToken;\n        }\n\n        try\n        {\n            var client = _httpClientFactory.CreateClient(\"OAuth2\");\n\n            var tokenRequest = new FormUrlEncodedContent(new[]\n            {\n                new KeyValuePair&lt;string, string&gt;(\"grant_type\", \"client_credentials\"),\n                new KeyValuePair&lt;string, string&gt;(\"client_id\", _configuration[\"OAuth2:ClientId\"]),\n                new KeyValuePair&lt;string, string&gt;(\"client_secret\", _configuration[\"OAuth2:ClientSecret\"]),\n                new KeyValuePair&lt;string, string&gt;(\"scope\", scope ?? _configuration[\"OAuth2:DefaultScope\"])\n            });\n\n            var response = await client.PostAsync(_configuration[\"OAuth2:TokenEndpoint\"], tokenRequest);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseContent = await response.Content.ReadAsStringAsync();\n                var tokenResponse = JsonSerializer.Deserialize&lt;OAuth2TokenResponse&gt;(responseContent);\n\n                // Cache the token with expiration\n                var cacheOptions = new MemoryCacheEntryOptions\n                {\n                    AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(tokenResponse.ExpiresIn - 60) // Cache 1 minute less\n                };\n\n                _cache.Set(cacheKey, tokenResponse.AccessToken, cacheOptions);\n\n                _logger.LogInformation(\"Successfully obtained client credentials token\");\n                return tokenResponse.AccessToken;\n            }\n            else\n            {\n                var errorContent = await response.Content.ReadAsStringAsync();\n                _logger.LogError(\"Failed to obtain client credentials token. Status: {Status}, Content: {Content}\", \n                    response.StatusCode, errorContent);\n                throw new OAuth2Exception($\"Client credentials flow failed: {response.StatusCode}\");\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error obtaining client credentials token\");\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; ValidateTokenAsync(string accessToken)\n    {\n        try\n        {\n            var client = _httpClientFactory.CreateClient(\"OAuth2\");\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n\n            var response = await client.GetAsync(_configuration[\"OAuth2:UserInfoEndpoint\"]);\n            return response.IsSuccessStatusCode;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating token\");\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/security/oauth2-integration/#3-resource-owner-password-credentials-flow","title":"3. Resource Owner Password Credentials Flow","text":"<p>Direct username/password authentication i\u00e7in (legacy uygulamalar).</p> <pre><code>public class OAuth2PasswordFlow\n{\n    private readonly IConfiguration _configuration;\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly ILogger&lt;OAuth2PasswordFlow&gt; _logger;\n\n    public OAuth2PasswordFlow(\n        IConfiguration configuration,\n        IHttpClientFactory httpClientFactory,\n        ILogger&lt;OAuth2PasswordFlow&gt; logger)\n    {\n        _configuration = configuration;\n        _httpClientFactory = httpClientFactory;\n        _logger = logger;\n    }\n\n    public async Task&lt;OAuth2TokenResponse&gt; AuthenticateAsync(string username, string password, string scope = null)\n    {\n        try\n        {\n            var client = _httpClientFactory.CreateClient(\"OAuth2\");\n\n            var tokenRequest = new FormUrlEncodedContent(new[]\n            {\n                new KeyValuePair&lt;string, string&gt;(\"grant_type\", \"password\"),\n                new KeyValuePair&lt;string, string&gt;(\"username\", username),\n                new KeyValuePair&lt;string, string&gt;(\"password\", password),\n                new KeyValuePair&lt;string, string&gt;(\"client_id\", _configuration[\"OAuth2:ClientId\"]),\n                new KeyValuePair&lt;string, string&gt;(\"client_secret\", _configuration[\"OAuth2:ClientSecret\"]),\n                new KeyValuePair&lt;string, string&gt;(\"scope\", scope ?? _configuration[\"OAuth2:DefaultScope\"])\n            });\n\n            var response = await client.PostAsync(_configuration[\"OAuth2:TokenEndpoint\"], tokenRequest);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseContent = await response.Content.ReadAsStringAsync();\n                var tokenResponse = JsonSerializer.Deserialize&lt;OAuth2TokenResponse&gt;(responseContent);\n\n                _logger.LogInformation(\"Successfully authenticated user {Username} with password flow\", username);\n                return tokenResponse;\n            }\n            else\n            {\n                var errorContent = await response.Content.ReadAsStringAsync();\n                _logger.LogError(\"Failed to authenticate user {Username}. Status: {Status}, Content: {Content}\", \n                    username, response.StatusCode, errorContent);\n                throw new OAuth2Exception($\"Password flow authentication failed: {response.StatusCode}\");\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error authenticating user {Username} with password flow\", username);\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/security/oauth2-integration/#oauth-20-server-implementation","title":"OAuth 2.0 Server Implementation","text":""},{"location":"mid-level/security/oauth2-integration/#1-authorization-server","title":"1. Authorization Server","text":"<p>OAuth 2.0 authorization server implementation.</p> <pre><code>public class OAuth2AuthorizationServer\n{\n    private readonly IUserService _userService;\n    private readonly IClientService _clientService;\n    private readonly ITokenService _tokenService;\n    private readonly ILogger&lt;OAuth2AuthorizationServer&gt; _logger;\n\n    public OAuth2AuthorizationServer(\n        IUserService userService,\n        IClientService clientService,\n        ITokenService tokenService,\n        ILogger&lt;OAuth2AuthorizationServer&gt; logger)\n    {\n        _userService = userService;\n        _clientService = clientService;\n        _tokenService = tokenService;\n        _logger = logger;\n    }\n\n    public async Task&lt;AuthorizationRequest&gt; ValidateAuthorizationRequestAsync(\n        string clientId, \n        string redirectUri, \n        string responseType, \n        string scope, \n        string state)\n    {\n        try\n        {\n            // Validate client\n            var client = await _clientService.GetClientByIdAsync(clientId);\n            if (client == null || !client.IsActive)\n            {\n                throw new OAuth2Exception(\"Invalid client\");\n            }\n\n            // Validate redirect URI\n            if (!client.RedirectUris.Contains(redirectUri))\n            {\n                throw new OAuth2Exception(\"Invalid redirect URI\");\n            }\n\n            // Validate response type\n            if (responseType != \"code\")\n            {\n                throw new OAuth2Exception(\"Unsupported response type\");\n            }\n\n            // Validate scope\n            var requestedScopes = scope?.Split(' ', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty&lt;string&gt;();\n            var validScopes = await ValidateScopesAsync(requestedScopes);\n\n            var authorizationRequest = new AuthorizationRequest\n            {\n                ClientId = clientId,\n                RedirectUri = redirectUri,\n                ResponseType = responseType,\n                Scope = string.Join(\" \", validScopes),\n                State = state,\n                CreatedAt = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.AddMinutes(10)\n            };\n\n            _logger.LogInformation(\"Authorization request validated for client {ClientId}\", clientId);\n            return authorizationRequest;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating authorization request for client {ClientId}\", clientId);\n            throw;\n        }\n    }\n\n    public async Task&lt;AuthorizationCode&gt; CreateAuthorizationCodeAsync(\n        string clientId, \n        string userId, \n        string scope, \n        string redirectUri)\n    {\n        try\n        {\n            var authorizationCode = new AuthorizationCode\n            {\n                Code = GenerateRandomCode(),\n                ClientId = clientId,\n                UserId = userId,\n                Scope = scope,\n                RedirectUri = redirectUri,\n                CreatedAt = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.AddMinutes(10)\n            };\n\n            await _tokenService.StoreAuthorizationCodeAsync(authorizationCode);\n\n            _logger.LogInformation(\"Authorization code created for client {ClientId} and user {UserId}\", clientId, userId);\n            return authorizationCode;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating authorization code for client {ClientId} and user {UserId}\", clientId, userId);\n            throw;\n        }\n    }\n\n    public async Task&lt;OAuth2TokenResponse&gt; ExchangeAuthorizationCodeAsync(\n        string authorizationCode, \n        string clientId, \n        string clientSecret, \n        string redirectUri)\n    {\n        try\n        {\n            // Validate authorization code\n            var code = await _tokenService.GetAuthorizationCodeAsync(authorizationCode);\n            if (code == null || code.IsExpired || code.IsUsed)\n            {\n                throw new OAuth2Exception(\"Invalid or expired authorization code\");\n            }\n\n            // Validate client\n            var client = await _clientService.GetClientByIdAsync(clientId);\n            if (client == null || !client.IsActive || client.ClientSecret != clientSecret)\n            {\n                throw new OAuth2Exception(\"Invalid client\");\n            }\n\n            // Validate redirect URI\n            if (code.RedirectUri != redirectUri)\n            {\n                throw new OAuth2Exception(\"Redirect URI mismatch\");\n            }\n\n            // Mark code as used\n            await _tokenService.MarkAuthorizationCodeAsUsedAsync(authorizationCode);\n\n            // Create access token\n            var accessToken = await _tokenService.CreateAccessTokenAsync(code.UserId, code.ClientId, code.Scope);\n\n            // Create refresh token\n            var refreshToken = await _tokenService.CreateRefreshTokenAsync(code.UserId, code.ClientId, code.Scope);\n\n            var tokenResponse = new OAuth2TokenResponse\n            {\n                AccessToken = accessToken.Token,\n                TokenType = \"Bearer\",\n                ExpiresIn = (int)(accessToken.ExpiresAt - DateTime.UtcNow).TotalSeconds,\n                RefreshToken = refreshToken.Token,\n                Scope = code.Scope\n            };\n\n            _logger.LogInformation(\"Authorization code exchanged for tokens for client {ClientId} and user {UserId}\", clientId, code.UserId);\n            return tokenResponse;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error exchanging authorization code {Code}\", authorizationCode);\n            throw;\n        }\n    }\n\n    private async Task&lt;string[]&gt; ValidateScopesAsync(string[] requestedScopes)\n    {\n        var validScopes = new List&lt;string&gt;();\n        var availableScopes = await GetAvailableScopesAsync();\n\n        foreach (var scope in requestedScopes)\n        {\n            if (availableScopes.Contains(scope))\n            {\n                validScopes.Add(scope);\n            }\n            else\n            {\n                _logger.LogWarning(\"Invalid scope requested: {Scope}\", scope);\n            }\n        }\n\n        return validScopes.ToArray();\n    }\n\n    private async Task&lt;string[]&gt; GetAvailableScopesAsync()\n    {\n        return new[]\n        {\n            \"read\",\n            \"write\",\n            \"delete\",\n            \"admin\"\n        };\n    }\n\n    private string GenerateRandomCode()\n    {\n        var randomBytes = new byte[32];\n        using var rng = new RNGCryptoServiceProvider();\n        rng.GetBytes(randomBytes);\n        return Convert.ToBase64String(randomBytes).Replace(\"+\", \"-\").Replace(\"/\", \"_\").TrimEnd('=');\n    }\n}\n\npublic class AuthorizationRequest\n{\n    public string ClientId { get; set; }\n    public string RedirectUri { get; set; }\n    public string ResponseType { get; set; }\n    public string Scope { get; set; }\n    public string State { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime ExpiresAt { get; set; }\n    public bool IsExpired =&gt; DateTime.UtcNow &gt;= ExpiresAt;\n}\n\npublic class AuthorizationCode\n{\n    public string Code { get; set; }\n    public string ClientId { get; set; }\n    public string UserId { get; set; }\n    public string Scope { get; set; }\n    public string RedirectUri { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime ExpiresAt { get; set; }\n    public bool IsUsed { get; set; }\n    public bool IsExpired =&gt; DateTime.UtcNow &gt;= ExpiresAt;\n}\n</code></pre>"},{"location":"mid-level/security/oauth2-integration/#2-token-service","title":"2. Token Service","text":"<p>OAuth 2.0 token y\u00f6netimi.</p> <pre><code>public interface ITokenService\n{\n    Task&lt;AccessToken&gt; CreateAccessTokenAsync(string userId, string clientId, string scope);\n    Task&lt;RefreshToken&gt; CreateRefreshTokenAsync(string userId, string clientId, string scope);\n    Task&lt;AccessToken&gt; GetAccessTokenAsync(string token);\n    Task&lt;RefreshToken&gt; GetRefreshTokenAsync(string token);\n    Task&lt;bool&gt; RevokeAccessTokenAsync(string token);\n    Task&lt;bool&gt; RevokeRefreshTokenAsync(string token);\n    Task StoreAuthorizationCodeAsync(AuthorizationCode code);\n    Task&lt;AuthorizationCode&gt; GetAuthorizationCodeAsync(string code);\n    Task MarkAuthorizationCodeAsUsedAsync(string code);\n}\n\npublic class TokenService : ITokenService\n{\n    private readonly IDbConnection _connection;\n    private readonly ILogger&lt;TokenService&gt; _logger;\n    private readonly IJwtTokenBuilder _jwtTokenBuilder;\n\n    public TokenService(\n        IDbConnection connection,\n        ILogger&lt;TokenService&gt; logger,\n        IJwtTokenBuilder jwtTokenBuilder)\n    {\n        _connection = connection;\n        _logger = logger;\n        _jwtTokenBuilder = jwtTokenBuilder;\n    }\n\n    public async Task&lt;AccessToken&gt; CreateAccessTokenAsync(string userId, string clientId, string scope)\n    {\n        try\n        {\n            var accessToken = new AccessToken\n            {\n                Token = GenerateRandomToken(),\n                UserId = userId,\n                ClientId = clientId,\n                Scope = scope,\n                CreatedAt = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.AddHours(1)\n            };\n\n            var sql = @\"\n                INSERT INTO AccessTokens (Token, UserId, ClientId, Scope, CreatedAt, ExpiresAt)\n                VALUES (@Token, @UserId, @ClientId, @Scope, @CreatedAt, @ExpiresAt)\n            \";\n\n            await _connection.ExecuteAsync(sql, accessToken);\n\n            _logger.LogInformation(\"Access token created for user {UserId} and client {ClientId}\", userId, clientId);\n            return accessToken;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating access token for user {UserId} and client {ClientId}\", userId, clientId);\n            throw;\n        }\n    }\n\n    public async Task&lt;RefreshToken&gt; CreateRefreshTokenAsync(string userId, string clientId, string scope)\n    {\n        try\n        {\n            var refreshToken = new RefreshToken\n            {\n                Token = GenerateRandomToken(),\n                UserId = userId,\n                ClientId = clientId,\n                Scope = scope,\n                CreatedAt = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.AddDays(30)\n            };\n\n            var sql = @\"\n                INSERT INTO RefreshTokens (Token, UserId, ClientId, Scope, CreatedAt, ExpiresAt)\n                VALUES (@Token, @UserId, @ClientId, @Scope, @CreatedAt, @ExpiresAt)\n            \";\n\n            await _connection.ExecuteAsync(sql, refreshToken);\n\n            _logger.LogInformation(\"Refresh token created for user {UserId} and client {ClientId}\", userId, clientId);\n            return refreshToken;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating refresh token for user {UserId} and client {ClientId}\", userId, clientId);\n            throw;\n        }\n    }\n\n    public async Task&lt;AccessToken&gt; GetAccessTokenAsync(string token)\n    {\n        try\n        {\n            var sql = @\"\n                SELECT Token, UserId, ClientId, Scope, CreatedAt, ExpiresAt\n                FROM AccessTokens \n                WHERE Token = @Token AND ExpiresAt &gt; @Now\n            \";\n\n            var accessToken = await _connection.QueryFirstOrDefaultAsync&lt;AccessToken&gt;(sql, new { Token = token, Now = DateTime.UtcNow });\n\n            if (accessToken != null &amp;&amp; accessToken.IsExpired)\n            {\n                await RevokeAccessTokenAsync(token);\n                return null;\n            }\n\n            return accessToken;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting access token {Token}\", token);\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; RevokeAccessTokenAsync(string token)\n    {\n        try\n        {\n            var sql = \"DELETE FROM AccessTokens WHERE Token = @Token\";\n            var rowsAffected = await _connection.ExecuteAsync(sql, new { Token = token });\n\n            _logger.LogInformation(\"Access token {Token} revoked\", token);\n            return rowsAffected &gt; 0;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error revoking access token {Token}\", token);\n            throw;\n        }\n    }\n\n    public async Task StoreAuthorizationCodeAsync(AuthorizationCode code)\n    {\n        try\n        {\n            var sql = @\"\n                INSERT INTO AuthorizationCodes (Code, ClientId, UserId, Scope, RedirectUri, CreatedAt, ExpiresAt)\n                VALUES (@Code, @ClientId, @UserId, @Scope, @RedirectUri, @CreatedAt, @ExpiresAt)\n            \";\n\n            await _connection.ExecuteAsync(sql, code);\n\n            _logger.LogInformation(\"Authorization code {Code} stored\", code.Code);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error storing authorization code {Code}\", code.Code);\n            throw;\n        }\n    }\n\n    public async Task&lt;AuthorizationCode&gt; GetAuthorizationCodeAsync(string code)\n    {\n        try\n        {\n            var sql = @\"\n                SELECT Code, ClientId, UserId, Scope, RedirectUri, CreatedAt, ExpiresAt, IsUsed\n                FROM AuthorizationCodes \n                WHERE Code = @Code\n            \";\n\n            return await _connection.QueryFirstOrDefaultAsync&lt;AuthorizationCode&gt;(sql, new { Code = code });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting authorization code {Code}\", code);\n            throw;\n        }\n    }\n\n    public async Task MarkAuthorizationCodeAsUsedAsync(string code)\n    {\n        try\n        {\n            var sql = \"UPDATE AuthorizationCodes SET IsUsed = 1 WHERE Code = @Code\";\n            await _connection.ExecuteAsync(sql, new { Code = code });\n\n            _logger.LogInformation(\"Authorization code {Code} marked as used\", code);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error marking authorization code {Code} as used\", code);\n            throw;\n        }\n    }\n\n    private string GenerateRandomToken()\n    {\n        var randomBytes = new byte[32];\n        using var rng = new RNGCryptoServiceProvider();\n        rng.GetBytes(randomBytes);\n        return Convert.ToBase64String(randomBytes).Replace(\"+\", \"-\").Replace(\"/\", \"_\").TrimEnd('=');\n    }\n}\n\npublic class AccessToken\n{\n    public string Token { get; set; }\n    public string UserId { get; set; }\n    public string ClientId { get; set; }\n    public string Scope { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime ExpiresAt { get; set; }\n    public bool IsExpired =&gt; DateTime.UtcNow &gt;= ExpiresAt;\n}\n\npublic class RefreshToken\n{\n    public string Token { get; set; }\n    public string UserId { get; set; }\n    public string ClientId { get; set; }\n    public string Scope { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime ExpiresAt { get; set; }\n    public bool IsExpired =&gt; DateTime.UtcNow &gt;= ExpiresAt;\n}\n</code></pre>"},{"location":"mid-level/security/oauth2-integration/#oauth-20-middleware","title":"OAuth 2.0 Middleware","text":""},{"location":"mid-level/security/oauth2-integration/#1-oauth-20-authentication-middleware","title":"1. OAuth 2.0 Authentication Middleware","text":"<pre><code>public class OAuth2AuthenticationMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ITokenService _tokenService;\n    private readonly ILogger&lt;OAuth2AuthenticationMiddleware&gt; _logger;\n\n    public OAuth2AuthenticationMiddleware(\n        RequestDelegate next,\n        ITokenService tokenService,\n        ILogger&lt;OAuth2AuthenticationMiddleware&gt; logger)\n    {\n        _next = next;\n        _tokenService = tokenService;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            var token = ExtractTokenFromContext(context);\n\n            if (!string.IsNullOrEmpty(token))\n            {\n                var accessToken = await _tokenService.GetAccessTokenAsync(token);\n\n                if (accessToken != null)\n                {\n                    // Set user identity in context\n                    var claims = new List&lt;Claim&gt;\n                    {\n                        new Claim(ClaimTypes.NameIdentifier, accessToken.UserId),\n                        new Claim(\"client_id\", accessToken.ClientId),\n                        new Claim(\"scope\", accessToken.Scope)\n                    };\n\n                    var identity = new ClaimsIdentity(claims, \"OAuth2\");\n                    context.User = new ClaimsPrincipal(identity);\n\n                    _logger.LogDebug(\"OAuth2 authentication successful for user {UserId}\", accessToken.UserId);\n                }\n                else\n                {\n                    _logger.LogWarning(\"Invalid or expired OAuth2 token: {Token}\", token);\n                }\n            }\n\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error in OAuth2 authentication middleware\");\n            await _next(context);\n        }\n    }\n\n    private string ExtractTokenFromContext(HttpContext context)\n    {\n        var authorizationHeader = context.Request.Headers[\"Authorization\"].FirstOrDefault();\n\n        if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith(\"Bearer \"))\n        {\n            return null;\n        }\n\n        return authorizationHeader.Substring(\"Bearer \".Length).Trim();\n    }\n}\n\npublic static class OAuth2AuthenticationMiddlewareExtensions\n{\n    public static IApplicationBuilder UseOAuth2Authentication(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware&lt;OAuth2AuthenticationMiddleware&gt;();\n    }\n}\n</code></pre>"},{"location":"mid-level/security/oauth2-integration/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/security/oauth2-integration/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>OAuth 2.0 nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: \u00dc\u00e7\u00fcnc\u00fc taraf uygulamalara kullan\u0131c\u0131 verilerine eri\u015fim izni vermek i\u00e7in kullan\u0131lan standart. Security ve user experience i\u00e7in kritik.</p> </li> <li> <p>OAuth 2.0 flow t\u00fcrleri nelerdir?</p> </li> <li> <p>Cevap: Authorization Code, Client Credentials, Password, Implicit. Her biri farkl\u0131 use case'ler i\u00e7in tasarlanm\u0131\u015f.</p> </li> <li> <p>Authorization Code flow nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: User authorization \u2192 Authorization code \u2192 Token exchange \u2192 Access token. En g\u00fcvenli flow.</p> </li> <li> <p>Refresh token nedir ve nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Access token'\u0131 yenilemek i\u00e7in kullan\u0131lan token. Long-lived ama revokable.</p> </li> <li> <p>OAuth 2.0 vs OpenID Connect aras\u0131ndaki fark nedir?</p> </li> <li>Cevap: OAuth 2.0 authorization, OpenID Connect authentication. OpenID Connect OAuth 2.0 \u00fczerine kurulu.</li> </ol>"},{"location":"mid-level/security/oauth2-integration/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>OAuth 2.0 server nas\u0131l implement edilir?</li> <li> <p>Cevap: Authorization endpoint, token endpoint, client validation, scope management, token storage.</p> </li> <li> <p>OAuth 2.0 security vulnerabilities nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: HTTPS, state parameter, PKCE, scope validation, token expiration, secure storage.</p> </li> <li> <p>OAuth 2.0 client registration nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Client ID/Secret, redirect URIs, scope definition, client validation.</p> </li> <li> <p>OAuth 2.0 token validation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Signature verification, expiration check, scope validation, client validation.</p> </li> <li> <p>OAuth 2.0 rate limiting nas\u0131l implement edilir?</p> </li> <li>Cevap: Client-based limiting, user-based limiting, endpoint-based limiting, token-based limiting.</li> </ol>"},{"location":"mid-level/security/oauth2-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Security</li> <li>HTTPS zorunlu yap\u0131n</li> <li>State parameter kullan\u0131n</li> <li>PKCE implement edin</li> <li> <p>Scope validation yap\u0131n</p> </li> <li> <p>Performance</p> </li> <li>Token caching implement edin</li> <li>Database optimization yap\u0131n</li> <li>Async operations kullan\u0131n</li> <li> <p>Connection pooling kullan\u0131n</p> </li> <li> <p>Monitoring</p> </li> <li>Token usage izleyin</li> <li>Failed authentications log edin</li> <li>Rate limiting metrics toplay\u0131n</li> <li> <p>Security alerts kurun</p> </li> <li> <p>Maintenance</p> </li> <li>Regular security audits yap\u0131n</li> <li>Client management automate edin</li> <li>Token cleanup implement edin</li> <li>Documentation g\u00fcncelleyin</li> </ol>"},{"location":"mid-level/security/oauth2-integration/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OAuth 2.0 Specification</li> <li>OAuth 2.0 Security Best Practices</li> <li>ASP.NET Core OAuth 2.0</li> <li>OAuth 2.0 Implementation Guide</li> <li>OAuth 2.0 Security Considerations</li> </ul>"},{"location":"mid-level/solid-principles/","title":"SOLID Prensipleri","text":""},{"location":"mid-level/solid-principles/#giris","title":"Giri\u015f","text":"<p>SOLID prensipleri, object-oriented programming'de clean, maintainable ve scalable code yazmak i\u00e7in temel olan be\u015f tasar\u0131m prensibidir. Mid-level geli\u015ftiriciler i\u00e7in SOLID prensiplerini anlamak, software architecture, code quality ve maintainability konular\u0131nda uzmanla\u015fmak i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation ve Dependency Inversion prensiplerini kapsar.</p>"},{"location":"mid-level/solid-principles/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/solid-principles/#1-single-responsibility-principle-srp","title":"1. Single Responsibility Principle (SRP)","text":"<p>Bir s\u0131n\u0131f\u0131n sadece bir sorumlulu\u011fa sahip olmas\u0131, tek bir de\u011fi\u015fiklik nedeni olmas\u0131.</p> <p>\u00d6\u011frenilecekler: - Responsibility identification - Class cohesion - Change impact analysis - Refactoring strategies - SRP violations</p>"},{"location":"mid-level/solid-principles/#2-openclosed-principle-ocp","title":"2. Open/Closed Principle (OCP)","text":"<p>Yaz\u0131l\u0131m varl\u0131klar\u0131 (s\u0131n\u0131flar, mod\u00fcller, fonksiyonlar) geni\u015fletmeye a\u00e7\u0131k, de\u011fi\u015ftirmeye kapal\u0131 olmal\u0131.</p> <p>\u00d6\u011frenilecekler: - Extension mechanisms - Abstraction usage - Polymorphism - Strategy pattern - Template method pattern</p>"},{"location":"mid-level/solid-principles/#3-liskov-substitution-principle-lsp","title":"3. Liskov Substitution Principle (LSP)","text":"<p>Alt s\u0131n\u0131flar, \u00fcst s\u0131n\u0131flar\u0131n yerine ge\u00e7ebilmeli ve program davran\u0131\u015f\u0131 de\u011fi\u015fmemeli.</p> <p>\u00d6\u011frenilecekler: - Subtype relationships - Contract compliance - Behavioral compatibility - Inheritance design - LSP violations</p>"},{"location":"mid-level/solid-principles/#4-interface-segregation-principle-isp","title":"4. Interface Segregation Principle (ISP)","text":"<p>Client'lar kullanmad\u0131klar\u0131 interface'lere ba\u011f\u0131ml\u0131 olmamal\u0131, b\u00fcy\u00fck interface'ler k\u00fc\u00e7\u00fck par\u00e7alara b\u00f6l\u00fcnmeli.</p> <p>\u00d6\u011frenilecekler: - Interface design - Client-specific interfaces - Interface cohesion - Fat interface problems - ISP violations</p>"},{"location":"mid-level/solid-principles/#5-dependency-inversion-principle-dip","title":"5. Dependency Inversion Principle (DIP)","text":"<p>Y\u00fcksek seviye mod\u00fcller d\u00fc\u015f\u00fck seviye mod\u00fcllere ba\u011f\u0131ml\u0131 olmamal\u0131, her ikisi de abstraction'lara ba\u011f\u0131ml\u0131 olmal\u0131.</p> <p>\u00d6\u011frenilecekler: - Dependency direction - Abstraction usage - Inversion of control - Dependency injection - DIP violations</p>"},{"location":"mid-level/solid-principles/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/solid-principles/#1-code-quality","title":"1. Code Quality","text":"<ul> <li>Clean, readable code</li> <li>Reduced complexity</li> <li>Better maintainability</li> <li>Improved testability</li> </ul>"},{"location":"mid-level/solid-principles/#2-software-design","title":"2. Software Design","text":"<ul> <li>Better architecture</li> <li>Reduced coupling</li> <li>Increased cohesion</li> <li>Flexible design</li> </ul>"},{"location":"mid-level/solid-principles/#3-maintainability","title":"3. Maintainability","text":"<ul> <li>Easier modifications</li> <li>Reduced side effects</li> <li>Better extensibility</li> <li>Faster development</li> </ul>"},{"location":"mid-level/solid-principles/#4-team-collaboration","title":"4. Team Collaboration","text":"<ul> <li>Shared understanding</li> <li>Consistent approach</li> <li>Better code reviews</li> <li>Knowledge transfer</li> </ul>"},{"location":"mid-level/solid-principles/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/solid-principles/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>SOLID prensipleri nelerdir?</li> <li> <p>Cevap: SRP, OCP, LSP, ISP, DIP - object-oriented design principles.</p> </li> <li> <p>Single Responsibility Principle nedir?</p> </li> <li> <p>Cevap: One class, one responsibility, one change reason.</p> </li> <li> <p>Open/Closed Principle nedir?</p> </li> <li> <p>Cevap: Open for extension, closed for modification.</p> </li> <li> <p>Liskov Substitution Principle nedir?</p> </li> <li> <p>Cevap: Subtypes replaceable, behavior preserved.</p> </li> <li> <p>Interface Segregation Principle nedir?</p> </li> <li>Cevap: Client-specific interfaces, no unused dependencies.</li> </ol>"},{"location":"mid-level/solid-principles/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>SRP violation nas\u0131l tespit edilir?</li> <li> <p>Cevap: Multiple responsibilities, multiple change reasons, low cohesion.</p> </li> <li> <p>OCP nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Abstraction, polymorphism, strategy pattern, extension points.</p> </li> <li> <p>LSP violation nas\u0131l \u00f6nlenir?</p> </li> <li> <p>Cevap: Contract compliance, behavioral compatibility, proper inheritance.</p> </li> <li> <p>ISP nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: Small interfaces, client-specific contracts, interface segregation.</p> </li> <li> <p>DIP nas\u0131l implement edilir?</p> </li> <li>Cevap: Dependency injection, abstraction usage, inversion of control.</li> </ol>"},{"location":"mid-level/solid-principles/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/solid-principles/#1-srp-implementation","title":"1. SRP Implementation","text":"<ul> <li>Identify single responsibility</li> <li>Maintain high cohesion</li> <li>Avoid multiple change reasons</li> <li>Refactor when needed</li> <li>Monitor class size</li> </ul>"},{"location":"mid-level/solid-principles/#2-ocp-implementation","title":"2. OCP Implementation","text":"<ul> <li>Use abstraction</li> <li>Implement extension points</li> <li>Avoid modification</li> <li>Use design patterns</li> <li>Plan for evolution</li> </ul>"},{"location":"mid-level/solid-principles/#3-lsp-implementation","title":"3. LSP Implementation","text":"<ul> <li>Maintain contracts</li> <li>Ensure compatibility</li> <li>Test substitution</li> <li>Monitor behavior</li> <li>Document expectations</li> </ul>"},{"location":"mid-level/solid-principles/#4-isp-implementation","title":"4. ISP Implementation","text":"<ul> <li>Design small interfaces</li> <li>Avoid fat interfaces</li> <li>Client-specific contracts</li> <li>Monitor interface size</li> <li>Refactor when needed</li> </ul>"},{"location":"mid-level/solid-principles/#5-dip-implementation","title":"5. DIP Implementation","text":"<ul> <li>Use dependency injection</li> <li>Rely on abstractions</li> <li>Invert dependencies</li> <li>Use IoC containers</li> <li>Monitor coupling</li> </ul>"},{"location":"mid-level/solid-principles/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>SOLID Principles</li> <li>Single Responsibility Principle</li> <li>Open/Closed Principle</li> <li>Liskov Substitution Principle</li> <li>Interface Segregation Principle</li> <li>Dependency Inversion Principle </li> </ul>"},{"location":"mid-level/solid-principles/dependency-inversion/","title":"Dependency Inversion Principle (DIP)","text":""},{"location":"mid-level/solid-principles/dependency-inversion/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Dependency Inversion Principle (DIP), \u00fcst seviye mod\u00fcllerin alt seviye mod\u00fcllere ba\u011f\u0131ml\u0131 olmamas\u0131 gerekti\u011fini belirtir. Her ikisi de soyutlamalara ba\u011f\u0131ml\u0131 olmal\u0131d\u0131r. Ayr\u0131ca, soyutlamalar detaylara ba\u011f\u0131ml\u0131 olmamal\u0131, detaylar soyutlamalara ba\u011f\u0131ml\u0131 olmal\u0131d\u0131r.</p>"},{"location":"mid-level/solid-principles/dependency-inversion/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/solid-principles/dependency-inversion/#1-dependency-inversion-principle-nedir-ve-neden-onemlidir","title":"1. Dependency Inversion Principle nedir ve neden \u00f6nemlidir?","text":"<p>Cevap: Dependency Inversion Principle, \u00fcst seviye mod\u00fcllerin alt seviye mod\u00fcllere ba\u011f\u0131ml\u0131 olmamas\u0131 gerekti\u011fini belirtir. \u00d6nemlidir \u00e7\u00fcnk\u00fc: - Ba\u011f\u0131ml\u0131l\u0131klar\u0131 azalt\u0131r - Kodun bak\u0131m\u0131n\u0131 kolayla\u015ft\u0131r\u0131r - Test edilebilirli\u011fi art\u0131r\u0131r - Esnekli\u011fi art\u0131r\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// DIP'ye uymayan kod\npublic class OrderService\n{\n    private readonly SqlServerDatabase _database;\n\n    public OrderService()\n    {\n        _database = new SqlServerDatabase();\n    }\n\n    public void SaveOrder(Order order)\n    {\n        _database.Save(order);\n    }\n}\n\n// DIP'ye uyan kod\npublic interface IDatabase\n{\n    void Save(Order order);\n}\n\npublic class OrderService\n{\n    private readonly IDatabase _database;\n\n    public OrderService(IDatabase database)\n    {\n        _database = database;\n    }\n\n    public void SaveOrder(Order order)\n    {\n        _database.Save(order);\n    }\n}\n\npublic class SqlServerDatabase : IDatabase\n{\n    public void Save(Order order)\n    {\n        // SQL Server'a kaydetme i\u015flemi\n    }\n}\n\npublic class MongoDbDatabase : IDatabase\n{\n    public void Save(Order order)\n    {\n        // MongoDB'ye kaydetme i\u015flemi\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/dependency-inversion/#2-dipyi-ihlal-eden-durumlar-nasl-tespit-edebiliriz","title":"2. DIP'yi ihlal eden durumlar\u0131 nas\u0131l tespit edebiliriz?","text":"<p>Cevap: DIP ihlallerini tespit etmek i\u00e7in: - Somut s\u0131n\u0131flara do\u011frudan ba\u011f\u0131ml\u0131l\u0131k - new operat\u00f6r\u00fc ile nesne olu\u015fturma - Statik metod \u00e7a\u011fr\u0131lar\u0131 - Ba\u011f\u0131ml\u0131l\u0131klar\u0131n constructor'da olu\u015fturulmas\u0131</p> <p>\u00d6rnek Kod: <pre><code>// DIP ihlali\npublic class EmailService\n{\n    private readonly SmtpClient _smtpClient;\n\n    public EmailService()\n    {\n        _smtpClient = new SmtpClient();\n    }\n\n    public void SendEmail(string to, string subject, string body)\n    {\n        _smtpClient.Send(to, subject, body);\n    }\n}\n\n// DIP'ye uygun\npublic interface IEmailSender\n{\n    void SendEmail(string to, string subject, string body);\n}\n\npublic class EmailService\n{\n    private readonly IEmailSender _emailSender;\n\n    public EmailService(IEmailSender emailSender)\n    {\n        _emailSender = emailSender;\n    }\n\n    public void SendEmail(string to, string subject, string body)\n    {\n        _emailSender.SendEmail(to, subject, body);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/dependency-inversion/#3-dipyi-uygularken-dikkat-edilmesi-gereken-noktalar-nelerdir","title":"3. DIP'yi uygularken dikkat edilmesi gereken noktalar nelerdir?","text":"<p>Cevap: DIP uygularken dikkat edilmesi gerekenler: - Dependency injection kullan\u0131n - Interface'leri do\u011fru tasarlay\u0131n - Ba\u011f\u0131ml\u0131l\u0131klar\u0131 d\u0131\u015far\u0131dan al\u0131n - Constructor injection tercih edin</p> <p>\u00d6rnek Kod: <pre><code>public interface ILogger\n{\n    void Log(string message);\n}\n\npublic interface IEmailSender\n{\n    void SendEmail(string to, string subject, string body);\n}\n\npublic class OrderProcessor\n{\n    private readonly ILogger _logger;\n    private readonly IEmailSender _emailSender;\n\n    public OrderProcessor(ILogger logger, IEmailSender emailSender)\n    {\n        _logger = logger;\n        _emailSender = emailSender;\n    }\n\n    public void ProcessOrder(Order order)\n    {\n        try\n        {\n            // Sipari\u015f i\u015fleme mant\u0131\u011f\u0131\n            _logger.Log(\"Sipari\u015f i\u015flendi\");\n            _emailSender.SendEmail(order.CustomerEmail, \"Sipari\u015f Onay\u0131\", \"Sipari\u015finiz al\u0131nd\u0131\");\n        }\n        catch (Exception ex)\n        {\n            _logger.Log($\"Hata: {ex.Message}\");\n            throw;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/dependency-inversion/#4-dip-ile-ilgili-yaygn-hatalar-nelerdir","title":"4. DIP ile ilgili yayg\u0131n hatalar nelerdir?","text":"<p>Cevap: Yayg\u0131n hatalar: - Service locator pattern kullan\u0131m\u0131 - Static s\u0131n\u0131flara ba\u011f\u0131ml\u0131l\u0131k - Constructor'da nesne olu\u015fturma - Interface'lerin yanl\u0131\u015f tasarlanmas\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Yayg\u0131n hata: Service locator pattern\npublic class OrderService\n{\n    public void ProcessOrder(Order order)\n    {\n        var logger = ServiceLocator.GetService&lt;ILogger&gt;();\n        var emailSender = ServiceLocator.GetService&lt;IEmailSender&gt;();\n\n        logger.Log(\"Sipari\u015f i\u015fleniyor\");\n        emailSender.SendEmail(order.CustomerEmail, \"Sipari\u015f\", \"\u0130\u015flem ba\u015far\u0131l\u0131\");\n    }\n}\n\n// Daha uygun\npublic class OrderService\n{\n    private readonly ILogger _logger;\n    private readonly IEmailSender _emailSender;\n\n    public OrderService(ILogger logger, IEmailSender emailSender)\n    {\n        _logger = logger;\n        _emailSender = emailSender;\n    }\n\n    public void ProcessOrder(Order order)\n    {\n        _logger.Log(\"Sipari\u015f i\u015fleniyor\");\n        _emailSender.SendEmail(order.CustomerEmail, \"Sipari\u015f\", \"\u0130\u015flem ba\u015far\u0131l\u0131\");\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/dependency-inversion/#5-dipyi-gercek-dunya-senaryolarnda-nasl-uygularz","title":"5. DIP'yi ger\u00e7ek d\u00fcnya senaryolar\u0131nda nas\u0131l uygular\u0131z?","text":"<p>Cevap: Ger\u00e7ek d\u00fcnya senaryolar\u0131nda: - Dependency injection container kullan\u0131n - Interface'leri do\u011fru tasarlay\u0131n - Unit of work pattern uygulay\u0131n - Repository pattern kullan\u0131n</p> <p>\u00d6rnek Kod: <pre><code>public interface IUnitOfWork : IDisposable\n{\n    IRepository&lt;Order&gt; Orders { get; }\n    IRepository&lt;Customer&gt; Customers { get; }\n    int SaveChanges();\n}\n\npublic class OrderService\n{\n    private readonly IUnitOfWork _unitOfWork;\n    private readonly IEmailSender _emailSender;\n\n    public OrderService(IUnitOfWork unitOfWork, IEmailSender emailSender)\n    {\n        _unitOfWork = unitOfWork;\n        _emailSender = emailSender;\n    }\n\n    public void ProcessOrder(Order order)\n    {\n        try\n        {\n            _unitOfWork.Orders.Add(order);\n            _unitOfWork.SaveChanges();\n\n            var customer = _unitOfWork.Customers.GetById(order.CustomerId);\n            _emailSender.SendEmail(customer.Email, \"Sipari\u015f Onay\u0131\", \"Sipari\u015finiz al\u0131nd\u0131\");\n        }\n        catch (Exception)\n        {\n            _unitOfWork.Dispose();\n            throw;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/dependency-inversion/#best-practices","title":"Best Practices","text":"<ol> <li>Dependency Injection</li> <li>Constructor injection kullan\u0131n</li> <li>Property injection'dan ka\u00e7\u0131n\u0131n</li> <li>Method injection'\u0131 dikkatli kullan\u0131n</li> <li> <p>Dependency injection container kullan\u0131n</p> </li> <li> <p>Interface Tasar\u0131m\u0131</p> </li> <li>Interface'leri k\u00fc\u00e7\u00fck ve \u00f6z tutun</li> <li>Single Responsibility Principle'\u0131 uygulay\u0131n</li> <li>Interface segregation uygulay\u0131n</li> <li> <p>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Unit testler yaz\u0131n</li> <li>Mock nesneler kullan\u0131n</li> <li>Test coverage'\u0131 takip edin</li> <li>Test edilebilir kod yaz\u0131n</li> </ol>"},{"location":"mid-level/solid-principles/dependency-inversion/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Dependency Inversion Principle</li> <li>SOLID Principles in C#</li> <li>Dependency Inversion Principle: Explanation and Examples </li> </ul>"},{"location":"mid-level/solid-principles/interface-segregation/","title":"Interface Segregation Principle (ISP)","text":""},{"location":"mid-level/solid-principles/interface-segregation/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Interface Segregation Principle (ISP), bir s\u0131n\u0131f\u0131n kullanmad\u0131\u011f\u0131 interface'leri implemente etmeye zorlanmamas\u0131 gerekti\u011fini belirtir. Yani, interface'ler m\u00fc\u015fterilerinin ihtiya\u00e7lar\u0131na g\u00f6re ayr\u0131lmal\u0131 ve her m\u00fc\u015fteri sadece kendisi i\u00e7in gerekli olan metodlara sahip olmal\u0131d\u0131r.</p>"},{"location":"mid-level/solid-principles/interface-segregation/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/solid-principles/interface-segregation/#1-interface-segregation-principle-nedir-ve-neden-onemlidir","title":"1. Interface Segregation Principle nedir ve neden \u00f6nemlidir?","text":"<p>Cevap: Interface Segregation Principle, interface'lerin m\u00fc\u015fterilerinin ihtiya\u00e7lar\u0131na g\u00f6re ayr\u0131lmas\u0131 gerekti\u011fini belirtir. \u00d6nemlidir \u00e7\u00fcnk\u00fc: - Kodun bak\u0131m\u0131n\u0131 kolayla\u015ft\u0131r\u0131r - Ba\u011f\u0131ml\u0131l\u0131klar\u0131 azalt\u0131r - Test edilebilirli\u011fi art\u0131r\u0131r - Kodun anla\u015f\u0131labilirli\u011fini art\u0131r\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// ISP'ye uymayan kod\npublic interface IWorker\n{\n    void Work();\n    void Eat();\n    void Sleep();\n}\n\npublic class HumanWorker : IWorker\n{\n    public void Work() { /* \u00c7al\u0131\u015fma i\u015flemi */ }\n    public void Eat() { /* Yemek yeme i\u015flemi */ }\n    public void Sleep() { /* Uyuma i\u015flemi */ }\n}\n\npublic class RobotWorker : IWorker\n{\n    public void Work() { /* \u00c7al\u0131\u015fma i\u015flemi */ }\n    public void Eat() { throw new NotSupportedException(); }\n    public void Sleep() { throw new NotSupportedException(); }\n}\n\n// ISP'ye uyan kod\npublic interface IWorkable\n{\n    void Work();\n}\n\npublic interface IEatable\n{\n    void Eat();\n}\n\npublic interface ISleepable\n{\n    void Sleep();\n}\n\npublic class HumanWorker : IWorkable, IEatable, ISleepable\n{\n    public void Work() { /* \u00c7al\u0131\u015fma i\u015flemi */ }\n    public void Eat() { /* Yemek yeme i\u015flemi */ }\n    public void Sleep() { /* Uyuma i\u015flemi */ }\n}\n\npublic class RobotWorker : IWorkable\n{\n    public void Work() { /* \u00c7al\u0131\u015fma i\u015flemi */ }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/interface-segregation/#2-ispyi-ihlal-eden-durumlar-nasl-tespit-edebiliriz","title":"2. ISP'yi ihlal eden durumlar\u0131 nas\u0131l tespit edebiliriz?","text":"<p>Cevap: ISP ihlallerini tespit etmek i\u00e7in: - Interface'lerin b\u00fcy\u00fck ve karma\u015f\u0131k olmas\u0131 - S\u0131n\u0131flar\u0131n kullanmad\u0131\u011f\u0131 metodlar\u0131 implemente etmesi - NotSupportedException f\u0131rlat\u0131lmas\u0131 - Interface'lerin \u00e7ok fazla sorumlulu\u011fu olmas\u0131</p> <p>\u00d6rnek Kod: <pre><code>// ISP ihlali\npublic interface IOrderProcessor\n{\n    void ProcessOrder(Order order);\n    void CancelOrder(Order order);\n    void RefundOrder(Order order);\n    void GenerateInvoice(Order order);\n    void SendEmail(Order order);\n}\n\n// ISP'ye uygun\npublic interface IOrderProcessor\n{\n    void ProcessOrder(Order order);\n}\n\npublic interface IOrderCancellation\n{\n    void CancelOrder(Order order);\n}\n\npublic interface IOrderRefund\n{\n    void RefundOrder(Order order);\n}\n\npublic interface IInvoiceGenerator\n{\n    void GenerateInvoice(Order order);\n}\n\npublic interface IEmailSender\n{\n    void SendEmail(Order order);\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/interface-segregation/#3-ispyi-uygularken-dikkat-edilmesi-gereken-noktalar-nelerdir","title":"3. ISP'yi uygularken dikkat edilmesi gereken noktalar nelerdir?","text":"<p>Cevap: ISP uygularken dikkat edilmesi gerekenler: - Interface'leri k\u00fc\u00e7\u00fck ve \u00f6z tutun - \u0130lgili metodlar\u0131 gruplay\u0131n - Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin - Single Responsibility Principle'\u0131 dikkate al\u0131n</p> <p>\u00d6rnek Kod: <pre><code>public interface IRepository&lt;T&gt;\n{\n    T GetById(int id);\n    IEnumerable&lt;T&gt; GetAll();\n    void Add(T entity);\n    void Update(T entity);\n    void Delete(T entity);\n}\n\npublic interface IReadOnlyRepository&lt;T&gt;\n{\n    T GetById(int id);\n    IEnumerable&lt;T&gt; GetAll();\n}\n\npublic interface IWriteOnlyRepository&lt;T&gt;\n{\n    void Add(T entity);\n    void Update(T entity);\n    void Delete(T entity);\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/interface-segregation/#4-isp-ile-ilgili-yaygn-hatalar-nelerdir","title":"4. ISP ile ilgili yayg\u0131n hatalar nelerdir?","text":"<p>Cevap: Yayg\u0131n hatalar: - Interface'lerin \u00e7ok b\u00fcy\u00fck olmas\u0131 - Gereksiz metodlar\u0131n eklenmesi - \u0130lgili metodlar\u0131n ayr\u0131lmas\u0131 - A\u015f\u0131r\u0131 par\u00e7alama</p> <p>\u00d6rnek Kod: <pre><code>// Yayg\u0131n hata: A\u015f\u0131r\u0131 par\u00e7alama\npublic interface IId\n{\n    int Id { get; set; }\n}\n\npublic interface IName\n{\n    string Name { get; set; }\n}\n\n// Daha uygun\npublic interface IEntity\n{\n    int Id { get; set; }\n    string Name { get; set; }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/interface-segregation/#5-ispyi-gercek-dunya-senaryolarnda-nasl-uygularz","title":"5. ISP'yi ger\u00e7ek d\u00fcnya senaryolar\u0131nda nas\u0131l uygular\u0131z?","text":"<p>Cevap: Ger\u00e7ek d\u00fcnya senaryolar\u0131nda: - Domain-driven design yakla\u015f\u0131m\u0131n\u0131 kullan\u0131n - CQRS pattern uygulay\u0131n - Repository pattern kullan\u0131n - Service layer pattern uygulay\u0131n</p> <p>\u00d6rnek Kod: <pre><code>public interface IOrderQueryService\n{\n    Order GetOrderById(int id);\n    IEnumerable&lt;Order&gt; GetOrdersByCustomer(int customerId);\n    IEnumerable&lt;Order&gt; GetOrdersByDateRange(DateTime startDate, DateTime endDate);\n}\n\npublic interface IOrderCommandService\n{\n    void CreateOrder(Order order);\n    void UpdateOrder(Order order);\n    void CancelOrder(int orderId);\n}\n\npublic interface IOrderReportService\n{\n    OrderReport GenerateDailyReport(DateTime date);\n    OrderReport GenerateMonthlyReport(int year, int month);\n}\n\npublic class OrderService : IOrderQueryService, IOrderCommandService, IOrderReportService\n{\n    private readonly IOrderRepository _orderRepository;\n    private readonly IReportGenerator _reportGenerator;\n\n    public OrderService(IOrderRepository orderRepository, IReportGenerator reportGenerator)\n    {\n        _orderRepository = orderRepository;\n        _reportGenerator = reportGenerator;\n    }\n\n    // IOrderQueryService implementasyonu\n    public Order GetOrderById(int id)\n    {\n        return _orderRepository.GetById(id);\n    }\n\n    // IOrderCommandService implementasyonu\n    public void CreateOrder(Order order)\n    {\n        _orderRepository.Add(order);\n    }\n\n    // IOrderReportService implementasyonu\n    public OrderReport GenerateDailyReport(DateTime date)\n    {\n        return _reportGenerator.GenerateDailyReport(date);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/interface-segregation/#best-practices","title":"Best Practices","text":"<ol> <li>Interface Tasar\u0131m\u0131</li> <li>Interface'leri k\u00fc\u00e7\u00fck ve \u00f6z tutun</li> <li>\u0130lgili metodlar\u0131 gruplay\u0131n</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin</li> <li> <p>Single Responsibility Principle'\u0131 dikkate al\u0131n</p> </li> <li> <p>Kod Organizasyonu</p> </li> <li>Domain-driven design yakla\u015f\u0131m\u0131n\u0131 kullan\u0131n</li> <li>CQRS pattern uygulay\u0131n</li> <li>Repository pattern kullan\u0131n</li> <li> <p>Service layer pattern uygulay\u0131n</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Unit testler yaz\u0131n</li> <li>Mock nesneler kullan\u0131n</li> <li>Test coverage'\u0131 takip edin</li> <li>Test edilebilir kod yaz\u0131n</li> </ol>"},{"location":"mid-level/solid-principles/interface-segregation/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Interface Segregation Principle</li> <li>SOLID Principles in C#</li> <li>Interface Segregation Principle: Explanation and Examples </li> </ul>"},{"location":"mid-level/solid-principles/liskov-substitution/","title":"Liskov Substitution Principle (LSP)","text":""},{"location":"mid-level/solid-principles/liskov-substitution/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Liskov Substitution Principle (LSP), alt s\u0131n\u0131flar\u0131n, \u00fcst s\u0131n\u0131flar\u0131n yerine ge\u00e7ebilmesi gerekti\u011fini belirtir. Yani, bir programda \u00fcst s\u0131n\u0131f tipinde bir nesne kullan\u0131l\u0131yorsa, bu nesnenin yerine alt s\u0131n\u0131f tipinde bir nesne kullan\u0131ld\u0131\u011f\u0131nda program\u0131n davran\u0131\u015f\u0131 bozulmamal\u0131d\u0131r.</p>"},{"location":"mid-level/solid-principles/liskov-substitution/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/solid-principles/liskov-substitution/#1-liskov-substitution-principle-nedir-ve-neden-onemlidir","title":"1. Liskov Substitution Principle nedir ve neden \u00f6nemlidir?","text":"<p>Cevap: Liskov Substitution Principle, alt s\u0131n\u0131flar\u0131n \u00fcst s\u0131n\u0131flar\u0131n yerine ge\u00e7ebilmesi gerekti\u011fini belirtir. \u00d6nemlidir \u00e7\u00fcnk\u00fc: - Kodun tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flar - Beklenmeyen davran\u0131\u015flar\u0131 \u00f6nler - Kal\u0131t\u0131m hiyerar\u015fisinin do\u011fru kullan\u0131lmas\u0131n\u0131 sa\u011flar - Test edilebilirli\u011fi art\u0131r\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// LSP'ye uymayan kod\npublic class Rectangle\n{\n    public virtual int Width { get; set; }\n    public virtual int Height { get; set; }\n\n    public int CalculateArea()\n    {\n        return Width * Height;\n    }\n}\n\npublic class Square : Rectangle\n{\n    public override int Width\n    {\n        set { base.Width = value; base.Height = value; }\n    }\n\n    public override int Height\n    {\n        set { base.Height = value; base.Width = value; }\n    }\n}\n\n// LSP'ye uyan kod\npublic abstract class Shape\n{\n    public abstract int CalculateArea();\n}\n\npublic class Rectangle : Shape\n{\n    public int Width { get; set; }\n    public int Height { get; set; }\n\n    public override int CalculateArea()\n    {\n        return Width * Height;\n    }\n}\n\npublic class Square : Shape\n{\n    public int Side { get; set; }\n\n    public override int CalculateArea()\n    {\n        return Side * Side;\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/liskov-substitution/#2-lspyi-ihlal-eden-durumlar-nasl-tespit-edebiliriz","title":"2. LSP'yi ihlal eden durumlar\u0131 nas\u0131l tespit edebiliriz?","text":"<p>Cevap: LSP ihlallerini tespit etmek i\u00e7in: - Alt s\u0131n\u0131f\u0131n \u00fcst s\u0131n\u0131f\u0131n davran\u0131\u015f\u0131n\u0131 de\u011fi\u015ftirmesi - Alt s\u0131n\u0131f\u0131n \u00fcst s\u0131n\u0131f\u0131n \u00f6n ko\u015fullar\u0131n\u0131 g\u00fc\u00e7lendirmesi - Alt s\u0131n\u0131f\u0131n \u00fcst s\u0131n\u0131f\u0131n son ko\u015fullar\u0131n\u0131 zay\u0131flatmas\u0131 - Alt s\u0131n\u0131f\u0131n \u00fcst s\u0131n\u0131f\u0131n de\u011fi\u015fmezlerini ihlal etmesi</p> <p>\u00d6rnek Kod: <pre><code>// LSP ihlali\npublic class Bird\n{\n    public virtual void Fly()\n    {\n        // U\u00e7ma i\u015flemi\n    }\n}\n\npublic class Penguin : Bird\n{\n    public override void Fly()\n    {\n        throw new NotSupportedException(\"Penguenler u\u00e7amaz!\");\n    }\n}\n\n// LSP'ye uygun\npublic abstract class Bird\n{\n    public abstract void Move();\n}\n\npublic class FlyingBird : Bird\n{\n    public override void Move()\n    {\n        // U\u00e7ma i\u015flemi\n    }\n}\n\npublic class Penguin : Bird\n{\n    public override void Move()\n    {\n        // Y\u00fcr\u00fcme i\u015flemi\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/liskov-substitution/#3-lspyi-uygularken-dikkat-edilmesi-gereken-noktalar-nelerdir","title":"3. LSP'yi uygularken dikkat edilmesi gereken noktalar nelerdir?","text":"<p>Cevap: LSP uygularken dikkat edilmesi gerekenler: - Kal\u0131t\u0131m hiyerar\u015fisini do\u011fru tasarlay\u0131n - Alt s\u0131n\u0131flar\u0131n davran\u0131\u015flar\u0131n\u0131 kontrol edin - \u00d6n ko\u015fullar\u0131 ve son ko\u015fullar\u0131 dikkate al\u0131n - De\u011fi\u015fmezleri koruyun</p> <p>\u00d6rnek Kod: <pre><code>public abstract class Account\n{\n    public decimal Balance { get; protected set; }\n\n    public virtual void Deposit(decimal amount)\n    {\n        if (amount &lt;= 0)\n            throw new ArgumentException(\"Miktar pozitif olmal\u0131d\u0131r\");\n\n        Balance += amount;\n    }\n\n    public virtual void Withdraw(decimal amount)\n    {\n        if (amount &lt;= 0)\n            throw new ArgumentException(\"Miktar pozitif olmal\u0131d\u0131r\");\n\n        if (amount &gt; Balance)\n            throw new InvalidOperationException(\"Yetersiz bakiye\");\n\n        Balance -= amount;\n    }\n}\n\npublic class SavingsAccount : Account\n{\n    public decimal InterestRate { get; set; }\n\n    public override void Withdraw(decimal amount)\n    {\n        if (amount &gt; Balance * 0.9m)\n            throw new InvalidOperationException(\"Maksimum \u00e7ekim limiti a\u015f\u0131ld\u0131\");\n\n        base.Withdraw(amount);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/liskov-substitution/#4-lsp-ile-ilgili-yaygn-hatalar-nelerdir","title":"4. LSP ile ilgili yayg\u0131n hatalar nelerdir?","text":"<p>Cevap: Yayg\u0131n hatalar: - Yanl\u0131\u015f kal\u0131t\u0131m hiyerar\u015fisi - Davran\u0131\u015f de\u011fi\u015fiklikleri - \u00d6n ko\u015ful ihlalleri - Son ko\u015ful ihlalleri</p> <p>\u00d6rnek Kod: <pre><code>// Yayg\u0131n hata: Yanl\u0131\u015f kal\u0131t\u0131m hiyerar\u015fisi\npublic class Employee\n{\n    public decimal CalculateSalary()\n    {\n        // Maa\u015f hesaplama\n        return 0;\n    }\n}\n\npublic class Manager : Employee\n{\n    public decimal CalculateBonus()\n    {\n        // Bonus hesaplama\n        return 0;\n    }\n}\n\n// Daha uygun\npublic interface IEmployee\n{\n    decimal CalculateSalary();\n}\n\npublic interface IManager : IEmployee\n{\n    decimal CalculateBonus();\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/liskov-substitution/#5-lspyi-gercek-dunya-senaryolarnda-nasl-uygularz","title":"5. LSP'yi ger\u00e7ek d\u00fcnya senaryolar\u0131nda nas\u0131l uygular\u0131z?","text":"<p>Cevap: Ger\u00e7ek d\u00fcnya senaryolar\u0131nda: - Domain-driven design yakla\u015f\u0131m\u0131n\u0131 kullan\u0131n - Interface segregation uygulay\u0131n - Composition over inheritance kullan\u0131n - Design by contract yakla\u015f\u0131m\u0131n\u0131 uygulay\u0131n</p> <p>\u00d6rnek Kod: <pre><code>public interface IOrderProcessor\n{\n    void ProcessOrder(Order order);\n}\n\npublic interface IOrderValidator\n{\n    bool Validate(Order order);\n}\n\npublic class OrderProcessor : IOrderProcessor\n{\n    private readonly IOrderValidator _validator;\n\n    public OrderProcessor(IOrderValidator validator)\n    {\n        _validator = validator;\n    }\n\n    public void ProcessOrder(Order order)\n    {\n        if (!_validator.Validate(order))\n            throw new InvalidOperationException(\"Sipari\u015f ge\u00e7ersiz\");\n\n        // Sipari\u015f i\u015fleme mant\u0131\u011f\u0131\n    }\n}\n\npublic class ExpressOrderProcessor : IOrderProcessor\n{\n    private readonly IOrderValidator _validator;\n\n    public ExpressOrderProcessor(IOrderValidator validator)\n    {\n        _validator = validator;\n    }\n\n    public void ProcessOrder(Order order)\n    {\n        if (!_validator.Validate(order))\n            throw new InvalidOperationException(\"Sipari\u015f ge\u00e7ersiz\");\n\n        // Express sipari\u015f i\u015fleme mant\u0131\u011f\u0131\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/liskov-substitution/#best-practices","title":"Best Practices","text":"<ol> <li>Kal\u0131t\u0131m Hiyerar\u015fisi</li> <li>Do\u011fru kal\u0131t\u0131m hiyerar\u015fisi tasarlay\u0131n</li> <li>Interface'leri tercih edin</li> <li>Composition over inheritance kullan\u0131n</li> <li> <p>Design by contract uygulay\u0131n</p> </li> <li> <p>Davran\u0131\u015f Kontrol\u00fc</p> </li> <li>Alt s\u0131n\u0131flar\u0131n davran\u0131\u015flar\u0131n\u0131 kontrol edin</li> <li>\u00d6n ko\u015fullar\u0131 ve son ko\u015fullar\u0131 dikkate al\u0131n</li> <li>De\u011fi\u015fmezleri koruyun</li> <li> <p>Exception handling uygulay\u0131n</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Unit testler yaz\u0131n</li> <li>Mock nesneler kullan\u0131n</li> <li>Test coverage'\u0131 takip edin</li> <li>Test edilebilir kod yaz\u0131n</li> </ol>"},{"location":"mid-level/solid-principles/liskov-substitution/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Liskov Substitution Principle</li> <li>SOLID Principles in C#</li> <li>Liskov Substitution Principle: Explanation and Examples </li> </ul>"},{"location":"mid-level/solid-principles/open-closed/","title":"Open/Closed Principle (OCP)","text":""},{"location":"mid-level/solid-principles/open-closed/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Open/Closed Principle (OCP), yaz\u0131l\u0131m varl\u0131klar\u0131n\u0131n (s\u0131n\u0131flar, mod\u00fcller, fonksiyonlar vb.) geni\u015fletmeye a\u00e7\u0131k, de\u011fi\u015fikli\u011fe kapal\u0131 olmas\u0131 gerekti\u011fini belirtir. Bu prensip, mevcut kodu de\u011fi\u015ftirmeden yeni \u00f6zellikler eklememizi sa\u011flar.</p>"},{"location":"mid-level/solid-principles/open-closed/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/solid-principles/open-closed/#1-openclosed-principle-nedir-ve-neden-onemlidir","title":"1. Open/Closed Principle nedir ve neden \u00f6nemlidir?","text":"<p>Cevap: Open/Closed Principle, yaz\u0131l\u0131m varl\u0131klar\u0131n\u0131n geni\u015fletmeye a\u00e7\u0131k, de\u011fi\u015fikli\u011fe kapal\u0131 olmas\u0131 gerekti\u011fini belirtir. \u00d6nemlidir \u00e7\u00fcnk\u00fc: - Mevcut kodu de\u011fi\u015ftirmeden yeni \u00f6zellikler eklememizi sa\u011flar - Kodun bak\u0131m\u0131n\u0131 kolayla\u015ft\u0131r\u0131r - Hata riskini azalt\u0131r - Test edilebilirli\u011fi art\u0131r\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// OCP'ye uymayan kod\npublic class AreaCalculator\n{\n    public double CalculateArea(object shape)\n    {\n        if (shape is Rectangle)\n        {\n            var rectangle = (Rectangle)shape;\n            return rectangle.Width * rectangle.Height;\n        }\n        else if (shape is Circle)\n        {\n            var circle = (Circle)shape;\n            return Math.PI * circle.Radius * circle.Radius;\n        }\n        throw new ArgumentException(\"Bilinmeyen \u015fekil\");\n    }\n}\n\n// OCP'ye uyan kod\npublic abstract class Shape\n{\n    public abstract double CalculateArea();\n}\n\npublic class Rectangle : Shape\n{\n    public double Width { get; set; }\n    public double Height { get; set; }\n\n    public override double CalculateArea()\n    {\n        return Width * Height;\n    }\n}\n\npublic class Circle : Shape\n{\n    public double Radius { get; set; }\n\n    public override double CalculateArea()\n    {\n        return Math.PI * Radius * Radius;\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/open-closed/#2-ocpyi-ihlal-eden-durumlar-nasl-tespit-edebiliriz","title":"2. OCP'yi ihlal eden durumlar\u0131 nas\u0131l tespit edebiliriz?","text":"<p>Cevap: OCP ihlallerini tespit etmek i\u00e7in: - Switch-case veya if-else bloklar\u0131n\u0131 kontrol edin - Yeni \u00f6zellik eklemek i\u00e7in mevcut kodu de\u011fi\u015ftirmeniz gerekiyorsa - S\u0131n\u0131f\u0131n birden fazla sorumlulu\u011fu varsa - Kod tekrar\u0131 varsa</p> <p>\u00d6rnek Kod: <pre><code>// OCP ihlali\npublic class PaymentProcessor\n{\n    public void ProcessPayment(string paymentType, decimal amount)\n    {\n        if (paymentType == \"CreditCard\")\n        {\n            // Kredi kart\u0131 i\u015flemi\n        }\n        else if (paymentType == \"PayPal\")\n        {\n            // PayPal i\u015flemi\n        }\n        else if (paymentType == \"BankTransfer\")\n        {\n            // Banka transferi i\u015flemi\n        }\n    }\n}\n\n// OCP'ye uygun\npublic interface IPaymentProcessor\n{\n    void ProcessPayment(decimal amount);\n}\n\npublic class CreditCardPaymentProcessor : IPaymentProcessor\n{\n    public void ProcessPayment(decimal amount)\n    {\n        // Kredi kart\u0131 i\u015flemi\n    }\n}\n\npublic class PayPalPaymentProcessor : IPaymentProcessor\n{\n    public void ProcessPayment(decimal amount)\n    {\n        // PayPal i\u015flemi\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/open-closed/#3-ocpyi-uygularken-dikkat-edilmesi-gereken-noktalar-nelerdir","title":"3. OCP'yi uygularken dikkat edilmesi gereken noktalar nelerdir?","text":"<p>Cevap: OCP uygularken dikkat edilmesi gerekenler: - Soyutlamalar\u0131 do\u011fru seviyede yap\u0131n - Interface'leri k\u00fc\u00e7\u00fck ve \u00f6z tutun - Dependency injection kullan\u0131n - Strategy pattern gibi tasar\u0131m desenlerini kullan\u0131n</p> <p>\u00d6rnek Kod: <pre><code>public interface ILogger\n{\n    void Log(string message);\n}\n\npublic class FileLogger : ILogger\n{\n    public void Log(string message)\n    {\n        // Dosyaya loglama\n    }\n}\n\npublic class DatabaseLogger : ILogger\n{\n    public void Log(string message)\n    {\n        // Veritaban\u0131na loglama\n    }\n}\n\npublic class Application\n{\n    private readonly ILogger _logger;\n\n    public Application(ILogger logger)\n    {\n        _logger = logger;\n    }\n\n    public void DoSomething()\n    {\n        _logger.Log(\"\u0130\u015flem ba\u015flad\u0131\");\n        // \u0130\u015flemler\n        _logger.Log(\"\u0130\u015flem tamamland\u0131\");\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/open-closed/#4-ocp-ile-ilgili-yaygn-hatalar-nelerdir","title":"4. OCP ile ilgili yayg\u0131n hatalar nelerdir?","text":"<p>Cevap: Yayg\u0131n hatalar: - A\u015f\u0131r\u0131 soyutlama - Gereksiz interface'ler - Yanl\u0131\u015f seviyede soyutlama - Performans kayb\u0131</p> <p>\u00d6rnek Kod: <pre><code>// Yayg\u0131n hata: A\u015f\u0131r\u0131 soyutlama\npublic interface IDataAccess\n{\n    void Connect();\n    void Disconnect();\n    void ExecuteQuery(string query);\n    void BeginTransaction();\n    void CommitTransaction();\n    void RollbackTransaction();\n}\n\n// Daha uygun\npublic interface IRepository&lt;T&gt;\n{\n    void Add(T entity);\n    void Update(T entity);\n    void Delete(T entity);\n    T GetById(int id);\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/open-closed/#5-ocpyi-gercek-dunya-senaryolarnda-nasl-uygularz","title":"5. OCP'yi ger\u00e7ek d\u00fcnya senaryolar\u0131nda nas\u0131l uygular\u0131z?","text":"<p>Cevap: Ger\u00e7ek d\u00fcnya senaryolar\u0131nda: - Plugin mimarisi kullan\u0131n - Strategy pattern uygulay\u0131n - Factory pattern kullan\u0131n - Dependency injection kullan\u0131n</p> <p>\u00d6rnek Kod: <pre><code>public interface IExportStrategy\n{\n    void Export(Report report);\n}\n\npublic class PdfExportStrategy : IExportStrategy\n{\n    public void Export(Report report)\n    {\n        // PDF'e d\u0131\u015fa aktarma\n    }\n}\n\npublic class ExcelExportStrategy : IExportStrategy\n{\n    public void Export(Report report)\n    {\n        // Excel'e d\u0131\u015fa aktarma\n    }\n}\n\npublic class ReportExporter\n{\n    private readonly IExportStrategy _exportStrategy;\n\n    public ReportExporter(IExportStrategy exportStrategy)\n    {\n        _exportStrategy = exportStrategy;\n    }\n\n    public void Export(Report report)\n    {\n        _exportStrategy.Export(report);\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/open-closed/#best-practices","title":"Best Practices","text":"<ol> <li>Soyutlama Seviyesi</li> <li>Soyutlamalar\u0131 do\u011fru seviyede yap\u0131n</li> <li>Interface'leri k\u00fc\u00e7\u00fck tutun</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin</li> <li> <p>Dependency injection kullan\u0131n</p> </li> <li> <p>Kod Organizasyonu</p> </li> <li>Plugin mimarisi kullan\u0131n</li> <li>Strategy pattern uygulay\u0131n</li> <li>Factory pattern kullan\u0131n</li> <li> <p>Interface segregation uygulay\u0131n</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Unit testler yaz\u0131n</li> <li>Mock nesneler kullan\u0131n</li> <li>Test coverage'\u0131 takip edin</li> <li>Test edilebilir kod yaz\u0131n</li> </ol>"},{"location":"mid-level/solid-principles/open-closed/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Open/Closed Principle</li> <li>SOLID Principles in C#</li> <li>Open/Closed Principle: Explanation and Examples </li> </ul>"},{"location":"mid-level/solid-principles/single-responsibility/","title":"Single Responsibility Principle (SRP)","text":""},{"location":"mid-level/solid-principles/single-responsibility/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Single Responsibility Principle (SRP), bir s\u0131n\u0131f\u0131n sadece bir sorumlulu\u011fu olmas\u0131 gerekti\u011fini belirtir. Bu prensip, kodun daha anla\u015f\u0131l\u0131r, bak\u0131m\u0131 kolay ve test edilebilir olmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"mid-level/solid-principles/single-responsibility/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/solid-principles/single-responsibility/#1-single-responsibility-principle-nedir-ve-neden-onemlidir","title":"1. Single Responsibility Principle nedir ve neden \u00f6nemlidir?","text":"<p>Cevap: Single Responsibility Principle, bir s\u0131n\u0131f\u0131n sadece bir de\u011fi\u015fiklik nedeni olmas\u0131 gerekti\u011fini belirtir. \u00d6nemlidir \u00e7\u00fcnk\u00fc: - Kodun bak\u0131m\u0131n\u0131 kolayla\u015ft\u0131r\u0131r - Test edilebilirli\u011fi art\u0131r\u0131r - De\u011fi\u015fikliklerin etkisini s\u0131n\u0131rlar - Kodun anla\u015f\u0131labilirli\u011fini art\u0131r\u0131r</p> <p>\u00d6rnek Kod: <pre><code>// SRP'ye uymayan kod\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n\n    public void SaveToDatabase()\n    {\n        // Veritaban\u0131na kaydetme i\u015flemi\n    }\n\n    public void SendEmail()\n    {\n        // Email g\u00f6nderme i\u015flemi\n    }\n}\n\n// SRP'ye uyan kod\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class UserRepository\n{\n    public void Save(User user)\n    {\n        // Veritaban\u0131na kaydetme i\u015flemi\n    }\n}\n\npublic class EmailService\n{\n    public void SendEmail(User user)\n    {\n        // Email g\u00f6nderme i\u015flemi\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/single-responsibility/#2-srpyi-ihlal-eden-durumlar-nasl-tespit-edebiliriz","title":"2. SRP'yi ihlal eden durumlar\u0131 nas\u0131l tespit edebiliriz?","text":"<p>Cevap: SRP ihlallerini tespit etmek i\u00e7in: - S\u0131n\u0131f\u0131n birden fazla sorumlulu\u011fu olup olmad\u0131\u011f\u0131n\u0131 kontrol edin - \"Ve\" kelimesi kullan\u0131yorsan\u0131z, muhtemelen birden fazla sorumluluk var - S\u0131n\u0131f\u0131n de\u011fi\u015fiklik nedenlerini analiz edin - Metotlar\u0131n birbiriyle ili\u015fkisini inceleyin</p> <p>\u00d6rnek Kod: <pre><code>// SRP ihlali\npublic class ReportGenerator\n{\n    public void GenerateReport()\n    {\n        // Rapor olu\u015fturma\n    }\n\n    public void SaveToFile()\n    {\n        // Dosyaya kaydetme\n    }\n\n    public void SendToPrinter()\n    {\n        // Yaz\u0131c\u0131ya g\u00f6nderme\n    }\n}\n\n// SRP'ye uygun\npublic class ReportGenerator\n{\n    public Report GenerateReport()\n    {\n        // Sadece rapor olu\u015fturma\n        return new Report();\n    }\n}\n\npublic class ReportSaver\n{\n    public void SaveToFile(Report report)\n    {\n        // Sadece dosyaya kaydetme\n    }\n}\n\npublic class ReportPrinter\n{\n    public void Print(Report report)\n    {\n        // Sadece yazd\u0131rma\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/single-responsibility/#3-srpyi-uygularken-dikkat-edilmesi-gereken-noktalar-nelerdir","title":"3. SRP'yi uygularken dikkat edilmesi gereken noktalar nelerdir?","text":"<p>Cevap: SRP uygularken dikkat edilmesi gerekenler: - Sorumluluklar\u0131 do\u011fru belirleyin - A\u015f\u0131r\u0131 par\u00e7alama yapmay\u0131n - \u0130lgili sorumluluklar\u0131 bir arada tutun - Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin</p> <p>\u00d6rnek Kod: <pre><code>// A\u015f\u0131r\u0131 par\u00e7alama\npublic class UserName\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n\npublic class UserEmail\n{\n    public string Email { get; set; }\n}\n\n// Daha uygun\npublic class User\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string Email { get; set; }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/single-responsibility/#4-srp-ile-ilgili-yaygn-hatalar-nelerdir","title":"4. SRP ile ilgili yayg\u0131n hatalar nelerdir?","text":"<p>Cevap: Yayg\u0131n hatalar: - Sorumluluklar\u0131 yanl\u0131\u015f belirleme - A\u015f\u0131r\u0131 par\u00e7alama - \u0130lgili sorumluluklar\u0131 ay\u0131rma - Ba\u011f\u0131ml\u0131l\u0131klar\u0131 art\u0131rma</p> <p>\u00d6rnek Kod: <pre><code>// Yayg\u0131n hata: A\u015f\u0131r\u0131 par\u00e7alama\npublic class UserFirstName\n{\n    public string Value { get; set; }\n}\n\npublic class UserLastName\n{\n    public string Value { get; set; }\n}\n\n// Daha uygun\npublic class UserName\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/single-responsibility/#5-srpyi-gercek-dunya-senaryolarnda-nasl-uygularz","title":"5. SRP'yi ger\u00e7ek d\u00fcnya senaryolar\u0131nda nas\u0131l uygular\u0131z?","text":"<p>Cevap: Ger\u00e7ek d\u00fcnya senaryolar\u0131nda: - Domain-driven design yakla\u015f\u0131m\u0131n\u0131 kullan\u0131n - Bounded context'leri belirleyin - Aggregate root'lar\u0131 do\u011fru tan\u0131mlay\u0131n - Value object'leri kullan\u0131n</p> <p>\u00d6rnek Kod: <pre><code>public class Order\n{\n    public int Id { get; private set; }\n    public OrderStatus Status { get; private set; }\n    private readonly List&lt;OrderItem&gt; _items;\n    public IReadOnlyCollection&lt;OrderItem&gt; Items =&gt; _items.AsReadOnly();\n\n    public void AddItem(Product product, int quantity)\n    {\n        // Sipari\u015f \u00f6\u011fesi ekleme mant\u0131\u011f\u0131\n    }\n\n    public void ProcessPayment(Payment payment)\n    {\n        // \u00d6deme i\u015fleme mant\u0131\u011f\u0131\n    }\n}\n\npublic class OrderRepository\n{\n    public void Save(Order order)\n    {\n        // Sipari\u015fi veritaban\u0131na kaydetme\n    }\n}\n\npublic class PaymentProcessor\n{\n    public void ProcessPayment(Order order, Payment payment)\n    {\n        // \u00d6deme i\u015fleme mant\u0131\u011f\u0131\n    }\n}\n</code></pre></p>"},{"location":"mid-level/solid-principles/single-responsibility/#best-practices","title":"Best Practices","text":"<ol> <li>Sorumluluk Belirleme</li> <li>Sorumluluklar\u0131 net tan\u0131mlay\u0131n</li> <li>\u0130lgili sorumluluklar\u0131 gruplay\u0131n</li> <li>A\u015f\u0131r\u0131 par\u00e7alamaktan ka\u00e7\u0131n\u0131n</li> <li> <p>Domain-driven design yakla\u015f\u0131m\u0131n\u0131 kullan\u0131n</p> </li> <li> <p>Kod Organizasyonu</p> </li> <li>\u0130lgili s\u0131n\u0131flar\u0131 ayn\u0131 namespace'te tutun</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin</li> <li>Interface'leri k\u00fc\u00e7\u00fck tutun</li> <li> <p>Dependency injection kullan\u0131n</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Unit testler yaz\u0131n</li> <li>Mock nesneler kullan\u0131n</li> <li>Test coverage'\u0131 takip edin</li> <li>Test edilebilir kod yaz\u0131n</li> </ol>"},{"location":"mid-level/solid-principles/single-responsibility/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Single Responsibility Principle</li> <li>SOLID Principles in C#</li> <li>Single Responsibility Principle: Explanation and Examples </li> </ul>"},{"location":"mid-level/testing/","title":"Test","text":""},{"location":"mid-level/testing/#giris","title":"Giri\u015f","text":"<p>Testing, modern .NET uygulamalar\u0131nda code quality, reliability ve maintainability i\u00e7in kritik \u00f6neme sahiptir. Mid-level geli\u015ftiriciler i\u00e7in comprehensive testing strategies, test-driven development (TDD), mocking, integration testing ve test coverage konular\u0131nda uzmanla\u015fmak, production-ready uygulamalar geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, unit testing, TDD, mocking, integration testing, test coverage ve testing best practices konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/testing/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"mid-level/testing/#1-unit-testing","title":"1. Unit Testing","text":"<p>Unit test yaz\u0131m\u0131, test frameworks, ve unit testing best practices.</p> <p>\u00d6\u011frenilecekler: - Unit test principles - Test frameworks (xUnit, NUnit, MSTest) - Test organization - Test naming conventions - Test isolation</p>"},{"location":"mid-level/testing/#2-test-driven-development-tdd","title":"2. Test Driven Development (TDD)","text":"<p>TDD cycle, red-green-refactor, ve TDD best practices.</p> <p>\u00d6\u011frenilecekler: - TDD cycle - Red-Green-Refactor - Test-first development - Behavior-driven development - TDD benefits</p>"},{"location":"mid-level/testing/#3-mocking","title":"3. Mocking","text":"<p>Mock objects, test doubles, ve mocking frameworks.</p> <p>\u00d6\u011frenilecekler: - Mock vs Stub vs Fake - Mocking frameworks (Moq, NSubstitute) - Mock verification - Mock setup - Mock best practices</p>"},{"location":"mid-level/testing/#4-integration-testing","title":"4. Integration Testing","text":"<p>Integration test yaz\u0131m\u0131, test databases, ve integration testing strategies.</p> <p>\u00d6\u011frenilecekler: - Integration test setup - Test database management - External service testing - API testing - End-to-end testing</p>"},{"location":"mid-level/testing/#5-test-coverage","title":"5. Test Coverage","text":"<p>Code coverage measurement, coverage analysis, ve coverage improvement.</p> <p>\u00d6\u011frenilecekler: - Coverage metrics - Coverage tools - Coverage analysis - Coverage improvement - Coverage goals</p>"},{"location":"mid-level/testing/#6-testing-best-practices","title":"6. Testing Best Practices","text":"<p>Testing strategies, test maintenance, ve testing automation.</p> <p>\u00d6\u011frenilecekler: - Test organization - Test maintenance - Test automation - CI/CD integration - Testing metrics</p>"},{"location":"mid-level/testing/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"mid-level/testing/#1-code-quality","title":"1. Code Quality","text":"<ul> <li>Bug prevention</li> <li>Code reliability</li> <li>Maintainability</li> <li>Refactoring confidence</li> </ul>"},{"location":"mid-level/testing/#2-development-efficiency","title":"2. Development Efficiency","text":"<ul> <li>Faster development cycles</li> <li>Reduced debugging time</li> <li>Better design decisions</li> <li>Documentation through tests</li> </ul>"},{"location":"mid-level/testing/#3-business-confidence","title":"3. Business Confidence","text":"<ul> <li>Reduced production bugs</li> <li>Faster feature delivery</li> <li>Better user experience</li> <li>Cost reduction</li> </ul>"},{"location":"mid-level/testing/#4-team-collaboration","title":"4. Team Collaboration","text":"<ul> <li>Shared understanding</li> <li>Code review support</li> <li>Knowledge transfer</li> <li>Onboarding support</li> </ul>"},{"location":"mid-level/testing/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/testing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Unit test nedir?</li> <li> <p>Cevap: Individual unit testing, isolated testing, fast execution, reliable results.</p> </li> <li> <p>TDD nedir?</p> </li> <li> <p>Cevap: Test-first development, red-green-refactor cycle, behavior specification.</p> </li> <li> <p>Mock nedir?</p> </li> <li> <p>Cevap: Test double, simulated behavior, dependency isolation, controlled testing.</p> </li> <li> <p>Integration test nedir?</p> </li> <li> <p>Cevap: Component interaction testing, external dependency testing, system testing.</p> </li> <li> <p>Test coverage nedir?</p> </li> <li>Cevap: Code execution measurement, coverage metrics, quality indicator.</li> </ol>"},{"location":"mid-level/testing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Unit test nas\u0131l yaz\u0131l\u0131r?</li> <li> <p>Cevap: Arrange-Act-Assert pattern, test isolation, dependency injection.</p> </li> <li> <p>TDD cycle nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Write failing test, write code, refactor, repeat.</p> </li> <li> <p>Mock object nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: Mock framework usage, behavior setup, verification.</p> </li> <li> <p>Integration test nas\u0131l yaz\u0131l\u0131r?</p> </li> <li> <p>Cevap: Test environment setup, external dependency management.</p> </li> <li> <p>Test coverage nas\u0131l \u00f6l\u00e7\u00fcl\u00fcr?</p> </li> <li>Cevap: Coverage tools, metrics analysis, improvement strategies.</li> </ol>"},{"location":"mid-level/testing/#best-practices","title":"Best Practices","text":""},{"location":"mid-level/testing/#1-test-design","title":"1. Test Design","text":"<ul> <li>Follow AAA pattern</li> <li>Write readable tests</li> <li>Use descriptive names</li> <li>Keep tests simple</li> <li>Test one thing at a time</li> </ul>"},{"location":"mid-level/testing/#2-test-organization","title":"2. Test Organization","text":"<ul> <li>Organize by feature</li> <li>Use consistent naming</li> <li>Group related tests</li> <li>Maintain test structure</li> <li>Plan for scalability</li> </ul>"},{"location":"mid-level/testing/#3-test-maintenance","title":"3. Test Maintenance","text":"<ul> <li>Keep tests up to date</li> <li>Refactor tests regularly</li> <li>Remove obsolete tests</li> <li>Monitor test performance</li> <li>Plan for test evolution</li> </ul>"},{"location":"mid-level/testing/#4-test-automation","title":"4. Test Automation","text":"<ul> <li>Automate test execution</li> <li>Integrate with CI/CD</li> <li>Monitor test results</li> <li>Track test metrics</li> <li>Plan for continuous improvement</li> </ul>"},{"location":"mid-level/testing/#5-test-quality","title":"5. Test Quality","text":"<ul> <li>Write meaningful tests</li> <li>Avoid test smells</li> <li>Use appropriate assertions</li> <li>Handle edge cases</li> <li>Plan for test coverage</li> </ul>"},{"location":"mid-level/testing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Unit Testing</li> <li>Test Driven Development</li> <li>Mocking in .NET</li> <li>Integration Testing</li> <li>Test Coverage</li> <li>Testing Best Practices </li> </ul>"},{"location":"mid-level/testing/integration-testing/","title":"Integration Testing","text":""},{"location":"mid-level/testing/integration-testing/#giris","title":"Giri\u015f","text":"<p>Integration Testing (Entegrasyon Testi), yaz\u0131l\u0131m bile\u015fenlerinin birbiriyle etkile\u015fimini test etmek i\u00e7in kullan\u0131lan bir test t\u00fcr\u00fcd\u00fcr. Bu testler, farkl\u0131 mod\u00fcllerin, servislerin veya sistemlerin birlikte do\u011fru \u00e7al\u0131\u015f\u0131p \u00e7al\u0131\u015fmad\u0131\u011f\u0131n\u0131 kontrol eder.</p>"},{"location":"mid-level/testing/integration-testing/#integration-testingin-onemi","title":"Integration Testing'in \u00d6nemi","text":"<ol> <li>Sistem B\u00fct\u00fcnl\u00fc\u011f\u00fc</li> <li>Bile\u015fenler aras\u0131 etkile\u015fimleri do\u011frulama</li> <li>Sistem genelinde veri ak\u0131\u015f\u0131n\u0131 test etme</li> <li> <p>Bile\u015fen entegrasyonlar\u0131n\u0131 kontrol etme</p> </li> <li> <p>Hata Tespiti</p> </li> <li>Bile\u015fenler aras\u0131 ileti\u015fim hatalar\u0131n\u0131 bulma</li> <li>Veri d\u00f6n\u00fc\u015f\u00fcm hatalar\u0131n\u0131 tespit etme</li> <li> <p>API uyumsuzluklar\u0131n\u0131 belirleme</p> </li> <li> <p>Sistem Davran\u0131\u015f\u0131</p> </li> <li>Ger\u00e7ek d\u00fcnya senaryolar\u0131n\u0131 test etme</li> <li>Sistem performans\u0131n\u0131 \u00f6l\u00e7me</li> <li>\u00d6l\u00e7eklenebilirli\u011fi test etme</li> </ol>"},{"location":"mid-level/testing/integration-testing/#integration-testing-turleri","title":"Integration Testing T\u00fcrleri","text":"<ol> <li>Big Bang Testing</li> <li>T\u00fcm bile\u015fenlerin ayn\u0131 anda entegre edilmesi</li> <li>H\u0131zl\u0131 test s\u00fcreci</li> <li> <p>Hata tespiti zorlu\u011fu</p> </li> <li> <p>Top-Down Testing</p> </li> <li>\u00dcst seviyeden ba\u015flayarak test etme</li> <li>Stub'lar kullanma</li> <li> <p>Kritik mod\u00fclleri \u00f6ncelikli test etme</p> </li> <li> <p>Bottom-Up Testing</p> </li> <li>Alt seviyeden ba\u015flayarak test etme</li> <li>Driver'lar kullanma</li> <li> <p>Temel fonksiyonlar\u0131 \u00f6nce test etme</p> </li> <li> <p>Sandwich Testing</p> </li> <li>Top-Down ve Bottom-Up yakla\u015f\u0131mlar\u0131n kombinasyonu</li> <li>Paralel test s\u00fcreci</li> <li>Karma\u015f\u0131k sistemler i\u00e7in uygun</li> </ol>"},{"location":"mid-level/testing/integration-testing/#nette-integration-testing","title":".NET'te Integration Testing","text":""},{"location":"mid-level/testing/integration-testing/#testserver-kullanm","title":"TestServer Kullan\u0131m\u0131","text":"<pre><code>public class IntegrationTests\n{\n    private readonly TestServer _server;\n    private readonly HttpClient _client;\n\n    public IntegrationTests()\n    {\n        _server = new TestServer(new WebHostBuilder()\n            .UseStartup&lt;Startup&gt;());\n        _client = _server.CreateClient();\n    }\n\n    [Fact]\n    public async Task GetUsers_ReturnsSuccessStatusCode()\n    {\n        // Act\n        var response = await _client.GetAsync(\"/api/users\");\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n        var content = await response.Content.ReadAsStringAsync();\n        var users = JsonConvert.DeserializeObject&lt;List&lt;User&gt;&gt;(content);\n        Assert.NotEmpty(users);\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/integration-testing/#entity-framework-core-ile-test","title":"Entity Framework Core ile Test","text":"<pre><code>public class UserRepositoryTests\n{\n    private readonly DbContextOptions&lt;ApplicationDbContext&gt; _options;\n\n    public UserRepositoryTests()\n    {\n        _options = new DbContextOptionsBuilder&lt;ApplicationDbContext&gt;()\n            .UseInMemoryDatabase(databaseName: \"TestDb\")\n            .Options;\n    }\n\n    [Fact]\n    public async Task CreateUser_ShouldAddUserToDatabase()\n    {\n        // Arrange\n        using (var context = new ApplicationDbContext(_options))\n        {\n            var repository = new UserRepository(context);\n            var user = new User { Name = \"Test User\" };\n\n            // Act\n            await repository.CreateUser(user);\n\n            // Assert\n            var savedUser = await context.Users.FirstOrDefaultAsync();\n            Assert.NotNull(savedUser);\n            Assert.Equal(\"Test User\", savedUser.Name);\n        }\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/integration-testing/#integration-testing-best-practices","title":"Integration Testing Best Practices","text":"<ol> <li>Test Ortam\u0131</li> <li>Ger\u00e7e\u011fe yak\u0131n test ortam\u0131</li> <li>\u0130zole edilmi\u015f test veritaban\u0131</li> <li> <p>Harici servislerin mock'lanmas\u0131</p> </li> <li> <p>Test Verileri</p> </li> <li>Ger\u00e7ek\u00e7i test verileri</li> <li>Veri temizleme stratejileri</li> <li> <p>Test verilerinin y\u00f6netimi</p> </li> <li> <p>Test Organizasyonu</p> </li> <li>Mant\u0131ksal test gruplar\u0131</li> <li>Ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimi</li> <li>Test s\u0131ras\u0131 kontrol\u00fc</li> </ol>"},{"location":"mid-level/testing/integration-testing/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/testing/integration-testing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Integration Testing nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Integration Testing, yaz\u0131l\u0131m bile\u015fenlerinin birbiriyle etkile\u015fimini test etmek i\u00e7in kullan\u0131lan bir test t\u00fcr\u00fcd\u00fcr. \u00d6nemi:</p> <ul> <li>Bile\u015fenler aras\u0131 etkile\u015fimleri do\u011frular</li> <li>Sistem b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc kontrol eder</li> <li>Entegrasyon hatalar\u0131n\u0131 erken tespit eder</li> <li>Sistem davran\u0131\u015f\u0131n\u0131 do\u011frular</li> <li>Performans sorunlar\u0131n\u0131 belirler</li> </ul> </li> <li> <p>Unit Testing ve Integration Testing aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Unit Testing:</li> <li>Tek bir bile\u015feni test eder</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar mock'lan\u0131r</li> <li>H\u0131zl\u0131 \u00e7al\u0131\u015f\u0131r</li> <li>\u0130zole edilmi\u015f testler</li> <li>Integration Testing:</li> <li>Birden fazla bile\u015feni test eder</li> <li>Ger\u00e7ek ba\u011f\u0131ml\u0131l\u0131klar kullan\u0131l\u0131r</li> <li>Daha yava\u015f \u00e7al\u0131\u015f\u0131r</li> <li>Sistem genelinde testler</li> </ul> </li> <li> <p>Integration Testing t\u00fcrleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Big Bang Testing</li> <li>Top-Down Testing</li> <li>Bottom-Up Testing</li> <li>Sandwich Testing</li> <li>Continuous Integration Testing</li> </ul> </li> <li> <p>Integration Testing'in avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Avantajlar:</li> <li>Sistem b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc do\u011frular</li> <li>Ger\u00e7ek senaryolar\u0131 test eder</li> <li>Performans sorunlar\u0131n\u0131 tespit eder</li> <li>Dezavantajlar:</li> <li>Test s\u00fcresi uzundur</li> <li>Bak\u0131m maliyeti y\u00fcksektir</li> <li>Hata tespiti zordur</li> </ul> </li> <li> <p>Integration Testing'de hangi ara\u00e7lar kullan\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>TestServer (ASP.NET Core)</li> <li>Entity Framework Core</li> <li>xUnit/NUnit</li> <li>Docker</li> <li>Postman</li> <li>Swagger</li> </ul> </li> </ol>"},{"location":"mid-level/testing/integration-testing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>TestServer nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>public class ApiTests\n{\n    private readonly TestServer _server;\n    private readonly HttpClient _client;\n\n    public ApiTests()\n    {\n        _server = new TestServer(new WebHostBuilder()\n            .UseStartup&lt;Startup&gt;()\n            .ConfigureTestServices(services =&gt;\n            {\n                services.AddScoped&lt;IService, MockService&gt;();\n            }));\n        _client = _server.CreateClient();\n    }\n\n    [Fact]\n    public async Task GetData_ReturnsExpectedResult()\n    {\n        var response = await _client.GetAsync(\"/api/data\");\n        response.EnsureSuccessStatusCode();\n    }\n}\n</code></pre></p> </li> <li> <p>In-Memory Database nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class DatabaseTests\n{\n    private readonly DbContextOptions&lt;AppDbContext&gt; _options;\n\n    public DatabaseTests()\n    {\n        _options = new DbContextOptionsBuilder&lt;AppDbContext&gt;()\n            .UseInMemoryDatabase(databaseName: \"TestDb\")\n            .Options;\n    }\n\n    [Fact]\n    public async Task SaveData_ShouldWork()\n    {\n        using (var context = new AppDbContext(_options))\n        {\n            var repository = new Repository(context);\n            await repository.Save(new Data());\n\n            Assert.True(await context.Data.AnyAsync());\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Integration Test'lerde mock nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>public class ServiceTests\n{\n    [Fact]\n    public async Task ProcessData_ShouldWork()\n    {\n        var mockService = new Mock&lt;IExternalService&gt;();\n        mockService.Setup(x =&gt; x.GetData())\n                  .ReturnsAsync(new Data());\n\n        var service = new Service(mockService.Object);\n        var result = await service.Process();\n\n        Assert.NotNull(result);\n    }\n}\n</code></pre></p> </li> <li> <p>Test verileri nas\u0131l y\u00f6netilir?</p> </li> <li> <p>Cevap: <pre><code>public class TestData\n{\n    public static List&lt;User&gt; GetTestUsers()\n    {\n        return new List&lt;User&gt;\n        {\n            new User { Id = 1, Name = \"User1\" },\n            new User { Id = 2, Name = \"User2\" }\n        };\n    }\n}\n\npublic class UserTests\n{\n    [Fact]\n    public void TestWithData()\n    {\n        var users = TestData.GetTestUsers();\n        // Test logic\n    }\n}\n</code></pre></p> </li> <li> <p>Test s\u0131ras\u0131 nas\u0131l kontrol edilir?</p> </li> <li>Cevap: <pre><code>[Collection(\"IntegrationTests\")]\npublic class OrderedTests\n{\n    [Fact]\n    [TestOrder(1)]\n    public void FirstTest()\n    {\n        // Test logic\n    }\n\n    [Fact]\n    [TestOrder(2)]\n    public void SecondTest()\n    {\n        // Test logic\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/testing/integration-testing/#pratik-sorular","title":"Pratik Sorular","text":"<ol> <li> <p>A\u015fa\u011f\u0131daki API endpoint'ini test edin: <pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class UsersController : ControllerBase\n{\n    private readonly IUserRepository _repository;\n    private readonly IEmailService _emailService;\n\n    public UsersController(IUserRepository repository, IEmailService emailService)\n    {\n        _repository = repository;\n        _emailService = emailService;\n    }\n\n    [HttpPost]\n    public async Task&lt;IActionResult&gt; CreateUser([FromBody] UserDto userDto)\n    {\n        var user = new User\n        {\n            Name = userDto.Name,\n            Email = userDto.Email\n        };\n\n        await _repository.AddAsync(user);\n        await _emailService.SendWelcomeEmail(user.Email);\n\n        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class UsersControllerTests\n{\n    private readonly TestServer _server;\n    private readonly HttpClient _client;\n    private readonly Mock&lt;IEmailService&gt; _mockEmailService;\n\n    public UsersControllerTests()\n    {\n        _mockEmailService = new Mock&lt;IEmailService&gt;();\n\n        _server = new TestServer(new WebHostBuilder()\n            .UseStartup&lt;Startup&gt;()\n            .ConfigureTestServices(services =&gt;\n            {\n                services.AddScoped(_ =&gt; _mockEmailService.Object);\n            }));\n\n        _client = _server.CreateClient();\n    }\n\n    [Fact]\n    public async Task CreateUser_ShouldCreateUserAndSendEmail()\n    {\n        // Arrange\n        var userDto = new UserDto\n        {\n            Name = \"Test User\",\n            Email = \"test@example.com\"\n        };\n\n        // Act\n        var response = await _client.PostAsJsonAsync(\"/api/users\", userDto);\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n        _mockEmailService.Verify(x =&gt; x.SendWelcomeEmail(\"test@example.com\"), Times.Once);\n    }\n}\n</code></pre></p> </li> <li> <p>A\u015fa\u011f\u0131daki repository'yi test edin: <pre><code>public class UserRepository : IUserRepository\n{\n    private readonly ApplicationDbContext _context;\n\n    public UserRepository(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task&lt;User&gt; GetUserWithOrders(int userId)\n    {\n        return await _context.Users\n            .Include(u =&gt; u.Orders)\n            .FirstOrDefaultAsync(u =&gt; u.Id == userId);\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class UserRepositoryTests\n{\n    private readonly DbContextOptions&lt;ApplicationDbContext&gt; _options;\n\n    public UserRepositoryTests()\n    {\n        _options = new DbContextOptionsBuilder&lt;ApplicationDbContext&gt;()\n            .UseInMemoryDatabase(databaseName: \"TestDb\")\n            .Options;\n    }\n\n    [Fact]\n    public async Task GetUserWithOrders_ShouldReturnUserWithOrders()\n    {\n        // Arrange\n        using (var context = new ApplicationDbContext(_options))\n        {\n            var user = new User { Id = 1, Name = \"Test User\" };\n            user.Orders.Add(new Order { Id = 1, Amount = 100 });\n\n            context.Users.Add(user);\n            await context.SaveChangesAsync();\n        }\n\n        // Act\n        using (var context = new ApplicationDbContext(_options))\n        {\n            var repository = new UserRepository(context);\n            var result = await repository.GetUserWithOrders(1);\n\n            // Assert\n            Assert.NotNull(result);\n            Assert.Single(result.Orders);\n            Assert.Equal(100, result.Orders.First().Amount);\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/testing/integration-testing/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Microservices mimarisinde Integration Testing nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Service mesh kullan\u0131m\u0131</li> <li>API Gateway testleri</li> <li>Event-driven testler</li> <li>Contract testing</li> <li>Chaos engineering</li> </ul> </li> <li> <p>Distributed sistemlerde Integration Testing nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Message queue testleri</li> <li>Distributed transaction testleri</li> <li>Event sourcing testleri</li> <li>Saga pattern testleri</li> <li>Circuit breaker testleri</li> </ul> </li> <li> <p>CI/CD pipeline'da Integration Testing nas\u0131l entegre edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Test ortam\u0131 y\u00f6netimi</li> <li>Test verisi y\u00f6netimi</li> <li>Paralel test \u00e7al\u0131\u015ft\u0131rma</li> <li>Test sonu\u00e7lar\u0131 raporlama</li> <li>Test otomasyonu</li> </ul> </li> <li> <p>Performance testing ile Integration Testing nas\u0131l birle\u015ftirilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Load testing entegrasyonu</li> <li>Stress testing entegrasyonu</li> <li>Endurance testing</li> <li>Spike testing</li> <li>Scalability testing</li> </ul> </li> <li> <p>Security testing ile Integration Testing nas\u0131l birle\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Authentication testleri</li> <li>Authorization testleri</li> <li>Input validation testleri</li> <li>SQL injection testleri</li> <li>XSS testleri </li> </ul> </li> </ol>"},{"location":"mid-level/testing/mocking/","title":"Mocking","text":""},{"location":"mid-level/testing/mocking/#giris","title":"Giri\u015f","text":"<p>Mocking, yaz\u0131l\u0131m testlerinde ba\u011f\u0131ml\u0131l\u0131klar\u0131 sim\u00fcle etmek i\u00e7in kullan\u0131lan bir tekniktir. Bu teknik sayesinde, test edilen kodun ba\u011f\u0131ml\u0131 oldu\u011fu d\u0131\u015f servisler, veritabanlar\u0131 veya di\u011fer bile\u015fenler ger\u00e7ekte \u00e7al\u0131\u015ft\u0131r\u0131lmadan test edilebilir.</p>"},{"location":"mid-level/testing/mocking/#mockingin-onemi","title":"Mocking'in \u00d6nemi","text":"<ol> <li>Test \u0130zolasyonu</li> <li>Ba\u011f\u0131ml\u0131l\u0131klardan izole edilmi\u015f testler</li> <li>Daha h\u0131zl\u0131 test \u00e7al\u0131\u015ft\u0131rma</li> <li> <p>Daha g\u00fcvenilir test sonu\u00e7lar\u0131</p> </li> <li> <p>Kontrol ve Tahmin Edilebilirlik</p> </li> <li>Test senaryolar\u0131n\u0131 kontrol etme</li> <li>Beklenen davran\u0131\u015flar\u0131 sim\u00fcle etme</li> <li> <p>Edge case'leri test etme</p> </li> <li> <p>Test Edilebilirlik</p> </li> <li>Karma\u015f\u0131k ba\u011f\u0131ml\u0131l\u0131klar\u0131 test etme</li> <li>Harici servisleri test etme</li> <li>Zaman ba\u011f\u0131ml\u0131 i\u015flemleri test etme</li> </ol>"},{"location":"mid-level/testing/mocking/#mocking-turleri","title":"Mocking T\u00fcrleri","text":"<ol> <li>Mock</li> <li>Davran\u0131\u015f\u0131 kontrol edilen nesneler</li> <li>Beklenen \u00e7a\u011fr\u0131lar\u0131 do\u011frulama</li> <li> <p>Ger\u00e7ek nesnelerin yerine ge\u00e7me</p> </li> <li> <p>Stub</p> </li> <li>Sabit yan\u0131tlar d\u00f6nd\u00fcren nesneler</li> <li>Test senaryolar\u0131n\u0131 basitle\u015ftirme</li> <li> <p>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 basitle\u015ftirme</p> </li> <li> <p>Fake</p> </li> <li>Basitle\u015ftirilmi\u015f ger\u00e7ek nesneler</li> <li>Hafif implementasyonlar</li> <li>Test ama\u00e7l\u0131 kullan\u0131m</li> </ol>"},{"location":"mid-level/testing/mocking/#nette-mocking","title":".NET'te Mocking","text":""},{"location":"mid-level/testing/mocking/#moq-ornegi","title":"Moq \u00d6rne\u011fi","text":"<pre><code>public interface IUserRepository\n{\n    User GetUser(int id);\n    void SaveUser(User user);\n}\n\npublic class UserService\n{\n    private readonly IUserRepository _userRepository;\n\n    public UserService(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n\n    public User GetUser(int id)\n    {\n        return _userRepository.GetUser(id);\n    }\n}\n\n// Test\npublic class UserServiceTests\n{\n    [Fact]\n    public void GetUser_WhenUserExists_ReturnsUser()\n    {\n        // Arrange\n        var mockRepository = new Mock&lt;IUserRepository&gt;();\n        var expectedUser = new User { Id = 1, Name = \"Test User\" };\n\n        mockRepository.Setup(x =&gt; x.GetUser(1))\n                     .Returns(expectedUser);\n\n        var service = new UserService(mockRepository.Object);\n\n        // Act\n        var result = service.GetUser(1);\n\n        // Assert\n        Assert.Equal(expectedUser, result);\n        mockRepository.Verify(x =&gt; x.GetUser(1), Times.Once);\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/mocking/#nsubstitute-ornegi","title":"NSubstitute \u00d6rne\u011fi","text":"<pre><code>public class OrderServiceTests\n{\n    [Fact]\n    public void CreateOrder_WhenValid_ShouldSaveOrder()\n    {\n        // Arrange\n        var orderRepository = Substitute.For&lt;IOrderRepository&gt;();\n        var service = new OrderService(orderRepository);\n\n        var order = new Order { Id = 1, Total = 100 };\n\n        // Act\n        service.CreateOrder(order);\n\n        // Assert\n        orderRepository.Received(1).Save(order);\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/mocking/#mocking-best-practices","title":"Mocking Best Practices","text":"<ol> <li>Mock Sadece Gerekti\u011finde</li> <li>Gereksiz mocking'den ka\u00e7\u0131n\u0131n</li> <li>Ger\u00e7ek nesneleri tercih edin</li> <li> <p>Mock'lar\u0131 sadece gerekli ba\u011f\u0131ml\u0131l\u0131klar i\u00e7in kullan\u0131n</p> </li> <li> <p>Do\u011fru Mock T\u00fcr\u00fcn\u00fc Se\u00e7in</p> </li> <li>Mock: Davran\u0131\u015f do\u011frulama i\u00e7in</li> <li>Stub: Sabit yan\u0131tlar i\u00e7in</li> <li> <p>Fake: Basitle\u015ftirilmi\u015f implementasyonlar i\u00e7in</p> </li> <li> <p>Mock'lar\u0131 Do\u011fru Yap\u0131land\u0131r\u0131n</p> </li> <li>A\u00e7\u0131k ve anla\u015f\u0131l\u0131r setup'lar</li> <li>Do\u011fru verify \u00e7a\u011fr\u0131lar\u0131</li> <li>Uygun exception handling</li> </ol>"},{"location":"mid-level/testing/mocking/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/testing/mocking/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Mocking nedir ve neden kullan\u0131l\u0131r?</li> <li> <p>Cevap: Mocking, test s\u00fcrecinde ba\u011f\u0131ml\u0131l\u0131klar\u0131 sim\u00fcle etmek i\u00e7in kullan\u0131lan bir tekniktir. Kullan\u0131lma nedenleri:</p> <ul> <li>Test izolasyonu sa\u011flar</li> <li>Test s\u00fcrecini h\u0131zland\u0131r\u0131r</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 kontrol eder</li> <li>Edge case'leri test etmeyi kolayla\u015ft\u0131r\u0131r</li> <li>Harici servisleri test etmeyi m\u00fcmk\u00fcn k\u0131lar</li> </ul> </li> <li> <p>Mock, Stub ve Fake aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Mock: Davran\u0131\u015f\u0131 kontrol edilen ve do\u011frulanan nesneler</li> <li>Stub: Sabit yan\u0131tlar d\u00f6nd\u00fcren basit nesneler</li> <li>Fake: Ger\u00e7ek nesnelerin basitle\u015ftirilmi\u015f versiyonlar\u0131</li> <li>Mock'lar davran\u0131\u015f do\u011frulama yapar, Stub'lar sabit yan\u0131t verir, Fake'ler ger\u00e7ek implementasyon sa\u011flar</li> </ul> </li> <li> <p>Hangi durumlarda mocking kullan\u0131lmal\u0131d\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Harici servislerle ileti\u015fimde</li> <li>Veritaban\u0131 i\u015flemlerinde</li> <li>Zaman ba\u011f\u0131ml\u0131 i\u015flemlerde</li> <li>Karma\u015f\u0131k ba\u011f\u0131ml\u0131l\u0131klarda</li> <li>Test edilemeyen durumlarda</li> </ul> </li> <li> <p>Mocking'in dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Test bak\u0131m maliyeti</li> <li>Ger\u00e7ek davran\u0131\u015f\u0131 tam yans\u0131tmayabilir</li> <li>Test kodunun karma\u015f\u0131kl\u0131\u011f\u0131</li> <li>\u00d6\u011frenme e\u011frisi</li> <li>A\u015f\u0131r\u0131 kullan\u0131m riski</li> </ul> </li> <li> <p>Moq ve NSubstitute aras\u0131ndaki farklar nelerdir?</p> </li> <li>Cevap:<ul> <li>Moq:</li> <li>Daha yayg\u0131n kullan\u0131m</li> <li>Daha fazla \u00f6zellik</li> <li>Daha karma\u015f\u0131k syntax</li> <li>NSubstitute:</li> <li>Daha basit syntax</li> <li>Daha az \u00f6zellik</li> <li>Daha modern yakla\u015f\u0131m</li> </ul> </li> </ol>"},{"location":"mid-level/testing/mocking/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Mocking framework'lerinde setup nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Moq:    <pre><code>mock.Setup(x =&gt; x.Method()).Returns(value);\nmock.Setup(x =&gt; x.Method(It.IsAny&lt;Type&gt;())).Returns(value);\nmock.Setup(x =&gt; x.Method()).Throws&lt;Exception&gt;();\n</code></pre></li> <li>NSubstitute:    <pre><code>substitute.Method().Returns(value);\nsubstitute.Method(Arg.Any&lt;Type&gt;()).Returns(value);\nsubstitute.Method().Throws&lt;Exception&gt;();\n</code></pre></li> </ul> </li> <li> <p>Mocking'de verify nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Moq:    <pre><code>mock.Verify(x =&gt; x.Method(), Times.Once);\nmock.Verify(x =&gt; x.Method(It.IsAny&lt;Type&gt;()), Times.Exactly(2));\nmock.VerifyNoOtherCalls();\n</code></pre></li> <li>NSubstitute:    <pre><code>substitute.Received(1).Method();\nsubstitute.Received(2).Method(Arg.Any&lt;Type&gt;());\nsubstitute.DidNotReceive().Method();\n</code></pre></li> </ul> </li> <li> <p>Mocking'de exception handling nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Moq:    <pre><code>mock.Setup(x =&gt; x.Method()).Throws&lt;Exception&gt;();\nAssert.Throws&lt;Exception&gt;(() =&gt; service.Method());\n</code></pre></li> <li>NSubstitute:    <pre><code>substitute.Method().Throws&lt;Exception&gt;();\nAssert.Throws&lt;Exception&gt;(() =&gt; service.Method());\n</code></pre></li> </ul> </li> <li> <p>Mocking'de async metodlar nas\u0131l test edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Moq:    <pre><code>mock.Setup(x =&gt; x.MethodAsync())\n    .ReturnsAsync(value);\nmock.Setup(x =&gt; x.MethodAsync())\n    .ThrowsAsync&lt;Exception&gt;();\n</code></pre></li> <li>NSubstitute:    <pre><code>substitute.MethodAsync().Returns(Task.FromResult(value));\nsubstitute.MethodAsync().Throws&lt;Exception&gt;();\n</code></pre></li> </ul> </li> <li> <p>Mocking'de property'ler nas\u0131l test edilir?</p> </li> <li>Cevap:<ul> <li>Moq:    <pre><code>mock.SetupProperty(x =&gt; x.Property, initialValue);\nmock.SetupGet(x =&gt; x.Property).Returns(value);\nmock.SetupSet(x =&gt; x.Property = value);\n</code></pre></li> <li>NSubstitute:    <pre><code>substitute.Property.Returns(value);\nsubstitute.Property = value;\n</code></pre></li> </ul> </li> </ol>"},{"location":"mid-level/testing/mocking/#pratik-sorular","title":"Pratik Sorular","text":"<ol> <li> <p>A\u015fa\u011f\u0131daki servisi test etmek i\u00e7in nas\u0131l mocking yapars\u0131n\u0131z? <pre><code>public class PaymentService\n{\n    private readonly IPaymentGateway _paymentGateway;\n    private readonly IEmailService _emailService;\n\n    public PaymentService(IPaymentGateway paymentGateway, IEmailService emailService)\n    {\n        _paymentGateway = paymentGateway;\n        _emailService = emailService;\n    }\n\n    public async Task ProcessPayment(PaymentRequest request)\n    {\n        var result = await _paymentGateway.ProcessPayment(request);\n\n        if (result.Success)\n        {\n            await _emailService.SendReceipt(result.Receipt);\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class PaymentServiceTests\n{\n    [Fact]\n    public async Task ProcessPayment_WhenSuccessful_ShouldSendReceipt()\n    {\n        // Arrange\n        var mockPaymentGateway = new Mock&lt;IPaymentGateway&gt;();\n        var mockEmailService = new Mock&lt;IEmailService&gt;();\n\n        var service = new PaymentService(\n            mockPaymentGateway.Object,\n            mockEmailService.Object);\n\n        var request = new PaymentRequest { Amount = 100 };\n        var receipt = new Receipt { Id = 1 };\n\n        mockPaymentGateway.Setup(x =&gt; x.ProcessPayment(request))\n                         .ReturnsAsync(new PaymentResult \n                         { \n                             Success = true,\n                             Receipt = receipt \n                         });\n\n        // Act\n        await service.ProcessPayment(request);\n\n        // Assert\n        mockEmailService.Verify(x =&gt; x.SendReceipt(receipt), Times.Once);\n    }\n}\n</code></pre></p> </li> <li> <p>A\u015fa\u011f\u0131daki servisi test etmek i\u00e7in nas\u0131l mocking yapars\u0131n\u0131z? <pre><code>public class UserService\n{\n    private readonly IUserRepository _userRepository;\n    private readonly ILogger _logger;\n\n    public UserService(IUserRepository userRepository, ILogger logger)\n    {\n        _userRepository = userRepository;\n        _logger = logger;\n    }\n\n    public User GetUser(int id)\n    {\n        try\n        {\n            return _userRepository.GetUser(id);\n        }\n        catch (Exception ex)\n        {\n            _logger.Error($\"Error getting user {id}\", ex);\n            throw;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class UserServiceTests\n{\n    [Fact]\n    public void GetUser_WhenRepositoryThrowsException_ShouldLogError()\n    {\n        // Arrange\n        var mockRepository = new Mock&lt;IUserRepository&gt;();\n        var mockLogger = new Mock&lt;ILogger&gt;();\n\n        var service = new UserService(\n            mockRepository.Object,\n            mockLogger.Object);\n\n        var userId = 1;\n        var exception = new Exception(\"Test exception\");\n\n        mockRepository.Setup(x =&gt; x.GetUser(userId))\n                     .Throws(exception);\n\n        // Act &amp; Assert\n        Assert.Throws&lt;Exception&gt;(() =&gt; service.GetUser(userId));\n        mockLogger.Verify(x =&gt; x.Error(\n            $\"Error getting user {userId}\",\n            exception), Times.Once);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/testing/mocking/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Mocking'de circular dependency nas\u0131l y\u00f6netilir?</li> <li> <p>Cevap:</p> <ul> <li>Dependency Injection kullan\u0131n</li> <li>Interface'leri ay\u0131r\u0131n</li> <li>Mediator pattern kullan\u0131n</li> <li>Event-driven mimari kullan\u0131n</li> <li>Service locator kullan\u0131n</li> </ul> </li> <li> <p>Mocking'de distributed transaction nas\u0131l test edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Transaction scope mock'lay\u0131n</li> <li>Unit of work pattern kullan\u0131n</li> <li>Saga pattern kullan\u0131n</li> <li>Event sourcing kullan\u0131n</li> <li>Compensation transaction'lar\u0131 test edin</li> </ul> </li> <li> <p>Mocking'de cache nas\u0131l test edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Cache provider'\u0131 mock'lay\u0131n</li> <li>Cache hit/miss senaryolar\u0131n\u0131 test edin</li> <li>Cache invalidation'\u0131 test edin</li> <li>Cache expiration'\u0131 test edin</li> <li>Distributed cache'i test edin</li> </ul> </li> <li> <p>Mocking'de message queue nas\u0131l test edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Queue client'\u0131 mock'lay\u0131n</li> <li>Message publish/subscribe'\u0131 test edin</li> <li>Retry mekanizmalar\u0131n\u0131 test edin</li> <li>Dead letter queue'yu test edin</li> <li>Message ordering'i test edin</li> </ul> </li> <li> <p>Mocking'de circuit breaker nas\u0131l test edilir?</p> </li> <li>Cevap:<ul> <li>Circuit breaker state'ini mock'lay\u0131n</li> <li>Failure threshold'u test edin</li> <li>Half-open state'i test edin</li> <li>Reset mekanizmas\u0131n\u0131 test edin</li> <li>Fallback mekanizmas\u0131n\u0131 test edin </li> </ul> </li> </ol>"},{"location":"mid-level/testing/tdd/","title":"Test Driven Development (TDD)","text":""},{"location":"mid-level/testing/tdd/#giris","title":"Giri\u015f","text":"<p>Test Driven Development (TDD), yaz\u0131l\u0131m geli\u015ftirme s\u00fcrecinde \u00f6nce test yaz\u0131p sonra kodu geli\u015ftirme yakla\u015f\u0131m\u0131d\u0131r. Bu yakla\u015f\u0131m, daha temiz, test edilebilir ve bak\u0131m\u0131 kolay kod \u00fcretmeyi hedefler.</p>"},{"location":"mid-level/testing/tdd/#tdd-sureci","title":"TDD S\u00fcreci","text":"<p>TDD s\u00fcreci \u00fc\u00e7 ana ad\u0131mdan olu\u015fur:</p> <ol> <li>Red: Test yaz ve \u00e7al\u0131\u015ft\u0131r (ba\u015far\u0131s\u0131z olacak)</li> <li>Green: Kodu yaz ve testi ge\u00e7</li> <li>Refactor: Kodu iyile\u015ftir, testlerin hala ge\u00e7ti\u011finden emin ol</li> </ol>"},{"location":"mid-level/testing/tdd/#ornek-hesap-makinesi","title":"\u00d6rnek: Hesap Makinesi","text":"<pre><code>// 1. Ad\u0131m: Test yaz (Red)\npublic class CalculatorTests\n{\n    [Fact]\n    public void Add_TwoNumbers_ReturnsSum()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Add(2, 3);\n\n        // Assert\n        Assert.Equal(5, result);\n    }\n}\n\n// 2. Ad\u0131m: Kodu yaz (Green)\npublic class Calculator\n{\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n}\n\n// 3. Ad\u0131m: Refactor (gerekirse)\n</code></pre>"},{"location":"mid-level/testing/tdd/#tddnin-avantajlar","title":"TDD'nin Avantajlar\u0131","text":"<ol> <li>Daha \u0130yi Tasar\u0131m</li> <li>Test edilebilir kod</li> <li>Daha k\u00fc\u00e7\u00fck ve odakl\u0131 metodlar</li> <li> <p>Daha iyi aray\u00fcz tasar\u0131m\u0131</p> </li> <li> <p>Daha Az Hata</p> </li> <li>Erken hata tespiti</li> <li>Daha az regresyon hatas\u0131</li> <li> <p>Daha g\u00fcvenilir kod</p> </li> <li> <p>Daha \u0130yi Dok\u00fcmantasyon</p> </li> <li>Canl\u0131 dok\u00fcmantasyon</li> <li>Kullan\u0131m \u00f6rnekleri</li> <li>Beklenen davran\u0131\u015f\u0131n a\u00e7\u0131klamas\u0131</li> </ol>"},{"location":"mid-level/testing/tdd/#tdd-best-practices","title":"TDD Best Practices","text":"<ol> <li>Test \u0130simlendirme</li> <li>Given-When-Then format\u0131</li> <li>A\u00e7\u0131klay\u0131c\u0131 isimler</li> <li> <p>Test amac\u0131n\u0131 belirten isimler</p> </li> <li> <p>Test Organizasyonu</p> </li> <li>Tek bir \u015feyi test et</li> <li>Arrange-Act-Assert pattern'i</li> <li> <p>Test ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131</p> </li> <li> <p>Kod Organizasyonu</p> </li> <li>SOLID prensipleri</li> <li>Dependency Injection</li> <li>Interface'ler</li> </ol>"},{"location":"mid-level/testing/tdd/#tdd-ornek-senaryo-e-ticaret-sepeti","title":"TDD \u00d6rnek Senaryo: E-ticaret Sepeti","text":"<pre><code>// 1. Ad\u0131m: Test yaz (Red)\npublic class ShoppingCartTests\n{\n    [Fact]\n    public void AddItem_WhenItemIsValid_AddsItemToCart()\n    {\n        // Arrange\n        var cart = new ShoppingCart();\n        var item = new CartItem { ProductId = 1, Quantity = 2, Price = 100 };\n\n        // Act\n        cart.AddItem(item);\n\n        // Assert\n        Assert.Single(cart.Items);\n        Assert.Equal(2, cart.Items[0].Quantity);\n    }\n}\n\n// 2. Ad\u0131m: Kodu yaz (Green)\npublic class ShoppingCart\n{\n    private List&lt;CartItem&gt; _items = new List&lt;CartItem&gt;();\n\n    public IReadOnlyList&lt;CartItem&gt; Items =&gt; _items.AsReadOnly();\n\n    public void AddItem(CartItem item)\n    {\n        _items.Add(item);\n    }\n}\n\n// 3. Ad\u0131m: Yeni test ekle (Red)\n[Fact]\npublic void CalculateTotal_WhenCartHasItems_ReturnsCorrectTotal()\n{\n    // Arrange\n    var cart = new ShoppingCart();\n    cart.AddItem(new CartItem { ProductId = 1, Quantity = 2, Price = 100 });\n    cart.AddItem(new CartItem { ProductId = 2, Quantity = 1, Price = 50 });\n\n    // Act\n    var total = cart.CalculateTotal();\n\n    // Assert\n    Assert.Equal(250, total);\n}\n\n// 4. Ad\u0131m: Kodu g\u00fcncelle (Green)\npublic class ShoppingCart\n{\n    // ... existing code ...\n\n    public decimal CalculateTotal()\n    {\n        return _items.Sum(x =&gt; x.Price * x.Quantity);\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/tdd/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/testing/tdd/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>TDD nedir ve nas\u0131l \u00e7al\u0131\u015f\u0131r?</li> <li>Cevap: TDD, \u00f6nce test yaz\u0131p sonra kodu geli\u015ftirme yakla\u015f\u0131m\u0131d\u0131r. \u00c7al\u0131\u015fma s\u00fcreci:<ul> <li>Test yaz (Red)</li> <li>Kodu yaz (Green)</li> <li>Kodu iyile\u015ftir (Refactor)</li> </ul> </li> <li> <p>Bu d\u00f6ng\u00fc s\u00fcrekli tekrarlan\u0131r</p> </li> <li> <p>TDD'nin avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Daha temiz ve test edilebilir kod</li> <li>Daha az hata</li> <li>Daha iyi tasar\u0131m</li> <li>Canl\u0131 dok\u00fcmantasyon</li> <li>Daha g\u00fcvenli refactoring</li> </ul> </li> <li> <p>TDD'nin dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Ba\u015flang\u0131\u00e7ta daha yava\u015f geli\u015ftirme</li> <li>\u00d6\u011frenme e\u011frisi</li> <li>Test bak\u0131m maliyeti</li> <li>Legacy kodda uygulama zorlu\u011fu</li> </ul> </li> <li> <p>TDD ile BDD aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>TDD teknik odakl\u0131d\u0131r, BDD i\u015f odakl\u0131d\u0131r</li> <li>TDD developer'lar i\u00e7in, BDD t\u00fcm payda\u015flar i\u00e7in</li> <li>TDD'de test isimleri teknik, BDD'de i\u015f dili kullan\u0131l\u0131r</li> <li>TDD'de unit testler, BDD'de senaryo testleri</li> </ul> </li> <li> <p>TDD'de test coverage \u00f6nemli midir?</p> </li> <li>Cevap: Evet, \u00f6nemlidir \u00e7\u00fcnk\u00fc:<ul> <li>Test edilmemi\u015f kodlar\u0131 g\u00f6sterir</li> <li>Test stratejisini y\u00f6nlendirir</li> <li>Kod kalitesi g\u00f6stergesidir</li> <li>Risk y\u00f6netimine yard\u0131mc\u0131 olur</li> </ul> </li> </ol>"},{"location":"mid-level/testing/tdd/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>TDD'de hangi test framework'lerini kullan\u0131rs\u0131n\u0131z?</li> <li> <p>Cevap:</p> <ul> <li>xUnit (modern ve esnek)</li> <li>NUnit (kapsaml\u0131 \u00f6zellikler)</li> <li>MSTest (Visual Studio entegrasyonu)</li> <li>Moq (mocking i\u00e7in)</li> <li>NSubstitute (mocking i\u00e7in)</li> </ul> </li> <li> <p>TDD'de ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Dependency Injection kullan\u0131l\u0131r</li> <li>Interface'ler tercih edilir</li> <li>Mocking framework'leri kullan\u0131l\u0131r</li> <li>SOLID prensipleri uygulan\u0131r</li> </ul> </li> <li> <p>TDD'de test isimlendirme nas\u0131l yap\u0131lmal\u0131d\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Given-When-Then format\u0131 kullan\u0131l\u0131r</li> <li>Test edilen metod belirtilir</li> <li>Beklenen sonu\u00e7 belirtilir</li> <li>Ko\u015fullar belirtilir</li> </ul> </li> <li> <p>TDD'de refactoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Testlerin ge\u00e7ti\u011finden emin olunur</li> <li>K\u00fc\u00e7\u00fck ad\u0131mlarla ilerlenir</li> <li>Kod kalitesi art\u0131r\u0131l\u0131r</li> <li>Testler korunur</li> </ul> </li> <li> <p>TDD'de edge case'ler nas\u0131l ele al\u0131n\u0131r?</p> </li> <li>Cevap:<ul> <li>Her edge case i\u00e7in ayr\u0131 test yaz\u0131l\u0131r</li> <li>Exception handling test edilir</li> <li>S\u0131n\u0131r de\u011ferler test edilir</li> <li>Negatif senaryolar test edilir</li> </ul> </li> </ol>"},{"location":"mid-level/testing/tdd/#pratik-sorular","title":"Pratik Sorular","text":"<ol> <li> <p>A\u015fa\u011f\u0131daki senaryo i\u00e7in TDD yakla\u015f\u0131m\u0131yla nas\u0131l ilerlersiniz? <pre><code>// Bir e-posta do\u011frulama servisi geli\u015ftirin\npublic interface IEmailValidator\n{\n    bool IsValid(string email);\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>// 1. Ad\u0131m: Test yaz (Red)\npublic class EmailValidatorTests\n{\n    [Fact]\n    public void IsValid_WhenEmailIsValid_ReturnsTrue()\n    {\n        // Arrange\n        var validator = new EmailValidator();\n\n        // Act\n        var result = validator.IsValid(\"test@example.com\");\n\n        // Assert\n        Assert.True(result);\n    }\n\n    [Fact]\n    public void IsValid_WhenEmailIsInvalid_ReturnsFalse()\n    {\n        // Arrange\n        var validator = new EmailValidator();\n\n        // Act\n        var result = validator.IsValid(\"invalid-email\");\n\n        // Assert\n        Assert.False(result);\n    }\n}\n\n// 2. Ad\u0131m: Kodu yaz (Green)\npublic class EmailValidator : IEmailValidator\n{\n    public bool IsValid(string email)\n    {\n        try\n        {\n            var addr = new System.Net.Mail.MailAddress(email);\n            return addr.Address == email;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>A\u015fa\u011f\u0131daki senaryo i\u00e7in TDD yakla\u015f\u0131m\u0131yla nas\u0131l ilerlersiniz? <pre><code>// Bir indirim hesaplama servisi geli\u015ftirin\npublic interface IDiscountCalculator\n{\n    decimal CalculateDiscount(Order order);\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>// 1. Ad\u0131m: Test yaz (Red)\npublic class DiscountCalculatorTests\n{\n    [Fact]\n    public void CalculateDiscount_WhenOrderTotalIsLessThan100_ReturnsNoDiscount()\n    {\n        // Arrange\n        var calculator = new DiscountCalculator();\n        var order = new Order { TotalAmount = 50 };\n\n        // Act\n        var discount = calculator.CalculateDiscount(order);\n\n        // Assert\n        Assert.Equal(0, discount);\n    }\n\n    [Fact]\n    public void CalculateDiscount_WhenOrderTotalIsGreaterThan100_Returns10PercentDiscount()\n    {\n        // Arrange\n        var calculator = new DiscountCalculator();\n        var order = new Order { TotalAmount = 200 };\n\n        // Act\n        var discount = calculator.CalculateDiscount(order);\n\n        // Assert\n        Assert.Equal(20, discount);\n    }\n}\n\n// 2. Ad\u0131m: Kodu yaz (Green)\npublic class DiscountCalculator : IDiscountCalculator\n{\n    public decimal CalculateDiscount(Order order)\n    {\n        if (order.TotalAmount &lt; 100)\n            return 0;\n\n        return order.TotalAmount * 0.1m;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/testing/tdd/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>TDD'de legacy kodla nas\u0131l \u00e7al\u0131\u015f\u0131rs\u0131n\u0131z?</li> <li> <p>Cevap:</p> <ul> <li>\u00d6nce test edilebilir par\u00e7alar\u0131 ay\u0131r\u0131n</li> <li>Strangler Pattern kullan\u0131n</li> <li>Ad\u0131m ad\u0131m ilerleyin</li> <li>Test edilebilir aray\u00fczler olu\u015fturun</li> <li>Refactoring yap\u0131n</li> </ul> </li> <li> <p>TDD'de performans testleri nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Benchmark testleri yaz\u0131n</li> <li>Profiling yap\u0131n</li> <li>Memory kullan\u0131m\u0131n\u0131 test edin</li> <li>CPU kullan\u0131m\u0131n\u0131 test edin</li> <li>I/O operasyonlar\u0131n\u0131 test edin</li> </ul> </li> <li> <p>TDD'de distributed sistemler nas\u0131l test edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Mock'lar kullan\u0131n</li> <li>Integration testleri yaz\u0131n</li> <li>Contract testleri yaz\u0131n</li> <li>Circuit breaker testleri yaz\u0131n</li> <li>Retry mekanizmalar\u0131n\u0131 test edin</li> </ul> </li> <li> <p>TDD'de microservices nas\u0131l test edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Her servis i\u00e7in ayr\u0131 testler yaz\u0131n</li> <li>Contract testleri kullan\u0131n</li> <li>Integration testleri yaz\u0131n</li> <li>Service mesh testleri yaz\u0131n</li> <li>API testleri yaz\u0131n</li> </ul> </li> <li> <p>TDD'de security testleri nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap:<ul> <li>Input validation testleri yaz\u0131n</li> <li>Authentication testleri yaz\u0131n</li> <li>Authorization testleri yaz\u0131n</li> <li>XSS testleri yaz\u0131n</li> <li>SQL injection testleri yaz\u0131n </li> </ul> </li> </ol>"},{"location":"mid-level/testing/test-coverage/","title":"Test Coverage","text":""},{"location":"mid-level/testing/test-coverage/#giris","title":"Giri\u015f","text":"<p>Test Coverage (Test Kapsam\u0131), yaz\u0131l\u0131m kodunun ne kadar\u0131n\u0131n test edildi\u011fini \u00f6l\u00e7en bir metriktir. Bu metrik, test s\u00fcrecinin etkinli\u011fini de\u011ferlendirmek ve test edilmemi\u015f kod b\u00f6l\u00fcmlerini belirlemek i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"mid-level/testing/test-coverage/#test-coveragen-onemi","title":"Test Coverage'\u0131n \u00d6nemi","text":"<ol> <li>Kalite G\u00fcvence</li> <li>Kod kalitesini \u00f6l\u00e7me</li> <li>Test edilmemi\u015f kodlar\u0131 belirleme</li> <li> <p>Potansiyel hatalar\u0131 tespit etme</p> </li> <li> <p>Risk Y\u00f6netimi</p> </li> <li>Riskli kod b\u00f6l\u00fcmlerini belirleme</li> <li>Test \u00f6nceliklerini belirleme</li> <li> <p>Hata olas\u0131l\u0131\u011f\u0131n\u0131 azaltma</p> </li> <li> <p>S\u00fcre\u00e7 \u0130yile\u015ftirme</p> </li> <li>Test s\u00fcrecini optimize etme</li> <li>Test stratejisini geli\u015ftirme</li> <li>Kaynak kullan\u0131m\u0131n\u0131 iyile\u015ftirme</li> </ol>"},{"location":"mid-level/testing/test-coverage/#test-coverage-turleri","title":"Test Coverage T\u00fcrleri","text":"<ol> <li>Statement Coverage</li> <li>Kod sat\u0131rlar\u0131n\u0131n test edilme oran\u0131</li> <li>En temel kapsam metri\u011fi</li> <li> <p>Her ifadenin en az bir kez \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131</p> </li> <li> <p>Branch Coverage</p> </li> <li>Ko\u015fullu ifadelerin test edilme oran\u0131</li> <li>Her dal\u0131n en az bir kez \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131</li> <li> <p>If-else, switch-case gibi yap\u0131lar\u0131n kontrol\u00fc</p> </li> <li> <p>Function Coverage</p> </li> <li>Fonksiyonlar\u0131n test edilme oran\u0131</li> <li>Her fonksiyonun en az bir kez \u00e7a\u011fr\u0131lmas\u0131</li> <li> <p>Metod d\u00fczeyinde kapsam</p> </li> <li> <p>Path Coverage</p> </li> <li>Kod yollar\u0131n\u0131n test edilme oran\u0131</li> <li>En kapsaml\u0131 metrik</li> <li>T\u00fcm olas\u0131 yollar\u0131n test edilmesi</li> </ol>"},{"location":"mid-level/testing/test-coverage/#nette-test-coverage","title":".NET'te Test Coverage","text":""},{"location":"mid-level/testing/test-coverage/#coverlet-kullanm","title":"Coverlet Kullan\u0131m\u0131","text":"<pre><code>// .NET CLI ile\ndotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover\n\n// MSBuild ile\n&lt;PropertyGroup&gt;\n  &lt;CollectCoverage&gt;true&lt;/CollectCoverage&gt;\n  &lt;CoverletOutputFormat&gt;opencover&lt;/CoverletOutputFormat&gt;\n&lt;/PropertyGroup&gt;\n</code></pre>"},{"location":"mid-level/testing/test-coverage/#reportgenerator-ile-raporlama","title":"ReportGenerator ile Raporlama","text":"<pre><code>// Rapor olu\u015fturma\ndotnet tool install -g dotnet-reportgenerator-globaltool\nreportgenerator -reports:coverage.cobertura.xml -targetdir:coveragereport\n</code></pre>"},{"location":"mid-level/testing/test-coverage/#ornek-test-projesi","title":"\u00d6rnek Test Projesi","text":"<pre><code>public class Calculator\n{\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n\n    public int Subtract(int a, int b)\n    {\n        return a - b;\n    }\n}\n\npublic class CalculatorTests\n{\n    [Fact]\n    public void Add_ShouldReturnCorrectSum()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Add(2, 3);\n\n        // Assert\n        Assert.Equal(5, result);\n    }\n\n    [Fact]\n    public void Subtract_ShouldReturnCorrectDifference()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Subtract(5, 3);\n\n        // Assert\n        Assert.Equal(2, result);\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/test-coverage/#test-coverage-best-practices","title":"Test Coverage Best Practices","text":"<ol> <li>Hedef Belirleme</li> <li>Ger\u00e7ek\u00e7i hedefler koyma</li> <li>Kritik kodlar i\u00e7in y\u00fcksek hedefler</li> <li> <p>Legacy kod i\u00e7in makul hedefler</p> </li> <li> <p>\u00d6l\u00e7\u00fcm Stratejisi</p> </li> <li>D\u00fczenli \u00f6l\u00e7\u00fcm yapma</li> <li>Farkl\u0131 coverage t\u00fcrlerini kullanma</li> <li> <p>Trend analizi yapma</p> </li> <li> <p>\u0130yile\u015ftirme Stratejisi</p> </li> <li>D\u00fc\u015f\u00fck coverage'\u0131 \u00f6nceliklendirme</li> <li>Test edilebilir kod yazma</li> <li>Test otomasyonunu art\u0131rma</li> </ol>"},{"location":"mid-level/testing/test-coverage/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/testing/test-coverage/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Test Coverage nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Test Coverage, yaz\u0131l\u0131m kodunun ne kadar\u0131n\u0131n test edildi\u011fini \u00f6l\u00e7en bir metriktir. \u00d6nemi:</p> <ul> <li>Kod kalitesini \u00f6l\u00e7er</li> <li>Test edilmemi\u015f kodlar\u0131 belirler</li> <li>Risk y\u00f6netimini sa\u011flar</li> <li>Test s\u00fcrecini iyile\u015ftirir</li> <li>Kalite g\u00fcvencesi sa\u011flar</li> </ul> </li> <li> <p>Farkl\u0131 Test Coverage t\u00fcrleri nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Statement Coverage: Kod sat\u0131rlar\u0131n\u0131n test edilme oran\u0131</li> <li>Branch Coverage: Ko\u015fullu ifadelerin test edilme oran\u0131</li> <li>Function Coverage: Fonksiyonlar\u0131n test edilme oran\u0131</li> <li>Path Coverage: Kod yollar\u0131n\u0131n test edilme oran\u0131</li> </ul> </li> <li> <p>Test Coverage hedefi ne olmal\u0131d\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Kritik kodlar i\u00e7in %80-90</li> <li>Genel kod i\u00e7in %70-80</li> <li>Legacy kod i\u00e7in %50-60</li> <li>Hedefler projeye \u00f6zel belirlenmeli</li> <li>Kalite g\u00fcvencesi i\u00e7in yeterli olmal\u0131</li> </ul> </li> <li> <p>Test Coverage'\u0131n avantajlar\u0131 ve dezavantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Avantajlar:</li> <li>Kod kalitesini \u00f6l\u00e7er</li> <li>Riskleri belirler</li> <li>Test s\u00fcrecini iyile\u015ftirir</li> <li>Dezavantajlar:</li> <li>Y\u00fcksek coverage kalite garantisi de\u011fil</li> <li>Test maliyetini art\u0131rabilir</li> <li>Yanl\u0131\u015f g\u00fcven hissi verebilir</li> </ul> </li> <li> <p>Test Coverage nas\u0131l \u00f6l\u00e7\u00fcl\u00fcr?</p> </li> <li>Cevap:<ul> <li>Coverlet gibi ara\u00e7lar kullan\u0131l\u0131r</li> <li>CI/CD pipeline'da entegre edilir</li> <li>Raporlar olu\u015fturulur</li> <li>Trend analizi yap\u0131l\u0131r</li> <li>D\u00fczenli \u00f6l\u00e7\u00fcm yap\u0131l\u0131r</li> </ul> </li> </ol>"},{"location":"mid-level/testing/test-coverage/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Coverlet nas\u0131l kullan\u0131l\u0131r?</li> <li> <p>Cevap: <pre><code>&lt;ItemGroup&gt;\n  &lt;PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.2\"&gt;\n    &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;\n    &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;\n  &lt;/PackageReference&gt;\n&lt;/ItemGroup&gt;\n\n&lt;PropertyGroup&gt;\n  &lt;CollectCoverage&gt;true&lt;/CollectCoverage&gt;\n  &lt;CoverletOutputFormat&gt;opencover&lt;/CoverletOutputFormat&gt;\n  &lt;CoverletOutput&gt;./coverage/&lt;/CoverletOutput&gt;\n&lt;/PropertyGroup&gt;\n</code></pre></p> </li> <li> <p>Test Coverage raporu nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code># Rapor olu\u015fturma\ndotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover\nreportgenerator -reports:coverage.cobertura.xml -targetdir:coveragereport\n</code></pre></p> </li> <li> <p>Belirli bir s\u0131n\u0131f\u0131n coverage'\u0131 nas\u0131l \u00f6l\u00e7\u00fcl\u00fcr?</p> </li> <li> <p>Cevap: <pre><code>&lt;PropertyGroup&gt;\n  &lt;CollectCoverage&gt;true&lt;/CollectCoverage&gt;\n  &lt;CoverletOutputFormat&gt;opencover&lt;/CoverletOutputFormat&gt;\n  &lt;Include&gt;[Namespace]*&lt;/Include&gt;\n  &lt;Exclude&gt;[Namespace].Tests*&lt;/Exclude&gt;\n&lt;/PropertyGroup&gt;\n</code></pre></p> </li> <li> <p>Test Coverage nas\u0131l art\u0131r\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>// \u00d6rnek: Eksik test senaryolar\u0131n\u0131 ekleme\npublic class CalculatorTests\n{\n    [Theory]\n    [InlineData(2, 3, 5)]\n    [InlineData(-1, 1, 0)]\n    [InlineData(0, 0, 0)]\n    public void Add_ShouldReturnCorrectSum(int a, int b, int expected)\n    {\n        var calculator = new Calculator();\n        var result = calculator.Add(a, b);\n        Assert.Equal(expected, result);\n    }\n}\n</code></pre></p> </li> <li> <p>Test Coverage nas\u0131l izlenir?</p> </li> <li>Cevap: <pre><code># GitHub Actions \u00f6rne\u011fi\nname: Test Coverage\n\non: [push, pull_request]\n\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v1\n    - name: Test with coverage\n      run: dotnet test /p:CollectCoverage=true\n    - name: Generate report\n      run: reportgenerator -reports:coverage.cobertura.xml -targetdir:coveragereport\n</code></pre></li> </ol>"},{"location":"mid-level/testing/test-coverage/#pratik-sorular","title":"Pratik Sorular","text":"<ol> <li> <p>A\u015fa\u011f\u0131daki s\u0131n\u0131f\u0131n test coverage'\u0131n\u0131 art\u0131r\u0131n: <pre><code>public class UserValidator\n{\n    public bool Validate(User user)\n    {\n        if (user == null)\n            return false;\n\n        if (string.IsNullOrEmpty(user.Name))\n            return false;\n\n        if (user.Age &lt; 18)\n            return false;\n\n        return true;\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class UserValidatorTests\n{\n    [Theory]\n    [InlineData(null, false)]\n    [InlineData(\"\", false)]\n    [InlineData(\"John\", 17, false)]\n    [InlineData(\"John\", 18, true)]\n    [InlineData(\"John\", 25, true)]\n    public void Validate_ShouldReturnCorrectResult(string name, int age, bool expected)\n    {\n        // Arrange\n        var validator = new UserValidator();\n        var user = name != null ? new User { Name = name, Age = age } : null;\n\n        // Act\n        var result = validator.Validate(user);\n\n        // Assert\n        Assert.Equal(expected, result);\n    }\n}\n</code></pre></p> </li> <li> <p>A\u015fa\u011f\u0131daki servisin test coverage'\u0131n\u0131 \u00f6l\u00e7\u00fcn: <pre><code>public class PaymentService\n{\n    private readonly IPaymentGateway _gateway;\n    private readonly ILogger _logger;\n\n    public PaymentService(IPaymentGateway gateway, ILogger logger)\n    {\n        _gateway = gateway;\n        _logger = logger;\n    }\n\n    public async Task&lt;PaymentResult&gt; ProcessPayment(PaymentRequest request)\n    {\n        try\n        {\n            if (request.Amount &lt;= 0)\n                return new PaymentResult { Success = false, Message = \"Invalid amount\" };\n\n            var result = await _gateway.Process(request);\n\n            if (result.Success)\n                _logger.LogInformation($\"Payment processed: {request.Amount}\");\n            else\n                _logger.LogError($\"Payment failed: {result.Message}\");\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Payment processing failed\");\n            return new PaymentResult { Success = false, Message = \"Internal error\" };\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class PaymentServiceTests\n{\n    [Theory]\n    [InlineData(0, false, \"Invalid amount\")]\n    [InlineData(-100, false, \"Invalid amount\")]\n    [InlineData(100, true, \"Success\")]\n    public async Task ProcessPayment_ShouldHandleAmountValidation(decimal amount, bool expectedSuccess, string expectedMessage)\n    {\n        // Arrange\n        var mockGateway = new Mock&lt;IPaymentGateway&gt;();\n        var mockLogger = new Mock&lt;ILogger&gt;();\n        var service = new PaymentService(mockGateway.Object, mockLogger.Object);\n        var request = new PaymentRequest { Amount = amount };\n\n        // Act\n        var result = await service.ProcessPayment(request);\n\n        // Assert\n        Assert.Equal(expectedSuccess, result.Success);\n        Assert.Equal(expectedMessage, result.Message);\n    }\n\n    [Fact]\n    public async Task ProcessPayment_ShouldLogSuccess()\n    {\n        // Arrange\n        var mockGateway = new Mock&lt;IPaymentGateway&gt;();\n        var mockLogger = new Mock&lt;ILogger&gt;();\n        var service = new PaymentService(mockGateway.Object, mockLogger.Object);\n        var request = new PaymentRequest { Amount = 100 };\n\n        mockGateway.Setup(x =&gt; x.Process(request))\n                   .ReturnsAsync(new PaymentResult { Success = true });\n\n        // Act\n        await service.ProcessPayment(request);\n\n        // Assert\n        mockLogger.Verify(x =&gt; x.LogInformation(It.Is&lt;string&gt;(s =&gt; s.Contains(\"processed\"))), Times.Once);\n    }\n\n    [Fact]\n    public async Task ProcessPayment_ShouldHandleExceptions()\n    {\n        // Arrange\n        var mockGateway = new Mock&lt;IPaymentGateway&gt;();\n        var mockLogger = new Mock&lt;ILogger&gt;();\n        var service = new PaymentService(mockGateway.Object, mockLogger.Object);\n        var request = new PaymentRequest { Amount = 100 };\n\n        mockGateway.Setup(x =&gt; x.Process(request))\n                   .ThrowsAsync(new Exception(\"Test exception\"));\n\n        // Act\n        var result = await service.ProcessPayment(request);\n\n        // Assert\n        Assert.False(result.Success);\n        Assert.Equal(\"Internal error\", result.Message);\n        mockLogger.Verify(x =&gt; x.LogError(It.IsAny&lt;Exception&gt;(), It.Is&lt;string&gt;(s =&gt; s.Contains(\"failed\"))), Times.Once);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/testing/test-coverage/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Test Coverage ve kod kalitesi aras\u0131ndaki ili\u015fki nedir?</li> <li> <p>Cevap:</p> <ul> <li>Y\u00fcksek coverage kalite garantisi de\u011fil</li> <li>Test kalitesi \u00f6nemli</li> <li>Edge case'lerin testi \u00f6nemli</li> <li>Test maintainability \u00f6nemli</li> <li>Test readability \u00f6nemli</li> </ul> </li> <li> <p>Test Coverage'\u0131 nas\u0131l optimize edersiniz?</p> </li> <li> <p>Cevap:</p> <ul> <li>Kritik kodlar\u0131 \u00f6nceliklendirin</li> <li>Test edilebilir kod yaz\u0131n</li> <li>Test stratejisi geli\u015ftirin</li> <li>Coverage ara\u00e7lar\u0131n\u0131 etkin kullan\u0131n</li> <li>D\u00fczenli \u00f6l\u00e7\u00fcm ve analiz yap\u0131n</li> </ul> </li> <li> <p>Test Coverage'\u0131 CI/CD'ye nas\u0131l entegre edersiniz?</p> </li> <li> <p>Cevap:</p> <ul> <li>Pipeline'da coverage \u00f6l\u00e7\u00fcm\u00fc</li> <li>Coverage raporlar\u0131 olu\u015fturma</li> <li>Coverage e\u015fikleri belirleme</li> <li>Trend analizi yapma</li> <li>Otomatik uyar\u0131lar olu\u015fturma</li> </ul> </li> <li> <p>Test Coverage ve performans aras\u0131ndaki denge nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Kritik kodlar\u0131 \u00f6nceliklendirin</li> <li>Test s\u00fcresini optimize edin</li> <li>Paralel test \u00e7al\u0131\u015ft\u0131r\u0131n</li> <li>Test verilerini y\u00f6netin</li> <li>Test ortam\u0131n\u0131 optimize edin</li> </ul> </li> <li> <p>Test Coverage'\u0131 nas\u0131l raporlars\u0131n\u0131z?</p> </li> <li>Cevap:<ul> <li>HTML raporlar\u0131 olu\u015fturun</li> <li>Trend grafikleri \u00e7izin</li> <li>Ekip raporlar\u0131 haz\u0131rlay\u0131n</li> <li>Dashboard'lar olu\u015fturun</li> <li>Otomatik uyar\u0131lar ayarlay\u0131n </li> </ul> </li> </ol>"},{"location":"mid-level/testing/testing-best-practices/","title":"Testing Best Practices","text":""},{"location":"mid-level/testing/testing-best-practices/#giris","title":"Giri\u015f","text":"<p>Testing Best Practices (Test En \u0130yi Uygulamalar\u0131), yaz\u0131l\u0131m testlerinin etkinli\u011fini, bak\u0131m\u0131n\u0131 ve kalitesini art\u0131rmak i\u00e7in kullan\u0131lan y\u00f6ntem ve prensiplerdir. Bu uygulamalar, test s\u00fcrecinin verimlili\u011fini ve g\u00fcvenilirli\u011fini sa\u011flar.</p>"},{"location":"mid-level/testing/testing-best-practices/#test-yazm-best-practices","title":"Test Yaz\u0131m\u0131 Best Practices","text":"<ol> <li>Test \u0130simlendirme</li> <li>A\u00e7\u0131klay\u0131c\u0131 ve anla\u015f\u0131l\u0131r isimler</li> <li>Test_Ko\u015ful_BeklenenSonu\u00e7 format\u0131</li> <li>\u0130ngilizce kullan\u0131m\u0131</li> <li> <p>Anlaml\u0131 k\u0131saltmalar</p> </li> <li> <p>Test Organizasyonu</p> </li> <li>Mant\u0131ksal grupland\u0131rma</li> <li>Test kategorileri</li> <li>Test s\u0131ralamas\u0131</li> <li> <p>Ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimi</p> </li> <li> <p>Test Verileri</p> </li> <li>Ger\u00e7ek\u00e7i test verileri</li> <li>Test verisi y\u00f6netimi</li> <li>Veri temizleme</li> <li>Veri izolasyonu</li> </ol>"},{"location":"mid-level/testing/testing-best-practices/#nette-test-best-practices","title":".NET'te Test Best Practices","text":""},{"location":"mid-level/testing/testing-best-practices/#test-snf-ornegi","title":"Test S\u0131n\u0131f\u0131 \u00d6rne\u011fi","text":"<pre><code>public class UserServiceTests\n{\n    private readonly Mock&lt;IUserRepository&gt; _mockRepository;\n    private readonly UserService _service;\n\n    public UserServiceTests()\n    {\n        _mockRepository = new Mock&lt;IUserRepository&gt;();\n        _service = new UserService(_mockRepository.Object);\n    }\n\n    [Fact]\n    public async Task GetUser_WhenUserExists_ShouldReturnUser()\n    {\n        // Arrange\n        var userId = 1;\n        var expectedUser = new User { Id = userId, Name = \"Test User\" };\n        _mockRepository.Setup(x =&gt; x.GetById(userId))\n                      .ReturnsAsync(expectedUser);\n\n        // Act\n        var result = await _service.GetUser(userId);\n\n        // Assert\n        Assert.Equal(expectedUser, result);\n        _mockRepository.Verify(x =&gt; x.GetById(userId), Times.Once);\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/testing-best-practices/#test-kategorileri","title":"Test Kategorileri","text":"<pre><code>[Trait(\"Category\", \"Integration\")]\npublic class DatabaseTests\n{\n    [Fact]\n    public async Task SaveUser_ShouldWork()\n    {\n        // Test logic\n    }\n}\n\n[Trait(\"Category\", \"Performance\")]\npublic class PerformanceTests\n{\n    [Fact]\n    public async Task ProcessLargeData_ShouldCompleteInTime()\n    {\n        // Test logic\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/testing-best-practices/#test-verisi-yonetimi","title":"Test Verisi Y\u00f6netimi","text":"<pre><code>public static class TestData\n{\n    public static User CreateValidUser()\n    {\n        return new User\n        {\n            Id = 1,\n            Name = \"Test User\",\n            Email = \"test@example.com\"\n        };\n    }\n\n    public static List&lt;User&gt; CreateUserList(int count)\n    {\n        return Enumerable.Range(1, count)\n            .Select(i =&gt; new User { Id = i, Name = $\"User {i}\" })\n            .ToList();\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/testing-best-practices/#test-bakm-best-practices","title":"Test Bak\u0131m\u0131 Best Practices","text":"<ol> <li>Kod Organizasyonu</li> <li>DRY (Don't Repeat Yourself) prensibi</li> <li>Test yard\u0131mc\u0131 metodlar\u0131</li> <li>Test base s\u0131n\u0131flar\u0131</li> <li> <p>Test utilities</p> </li> <li> <p>Test Temizli\u011fi</p> </li> <li>Test verilerini temizleme</li> <li>Kaynaklar\u0131 serbest b\u0131rakma</li> <li>Test izolasyonu</li> <li> <p>Test ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131</p> </li> <li> <p>Test Dok\u00fcmantasyonu</p> </li> <li>Test ama\u00e7lar\u0131n\u0131 belgeleme</li> <li>Test senaryolar\u0131n\u0131 a\u00e7\u0131klama</li> <li>Test verilerini belgeleme</li> <li>Test sonu\u00e7lar\u0131n\u0131 raporlama</li> </ol>"},{"location":"mid-level/testing/testing-best-practices/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/testing/testing-best-practices/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Test yazarken dikkat edilmesi gereken en \u00f6nemli prensipler nelerdir?</li> <li> <p>Cevap:</p> <ul> <li>Test ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131</li> <li>A\u00e7\u0131klay\u0131c\u0131 test isimleri</li> <li>Tek bir \u015feyi test etme</li> <li>Arrange-Act-Assert pattern</li> <li>Test edilebilir kod yazma</li> </ul> </li> <li> <p>Test isimlendirme kurallar\u0131 nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Test_Ko\u015ful_BeklenenSonu\u00e7 format\u0131</li> <li>A\u00e7\u0131klay\u0131c\u0131 ve anla\u015f\u0131l\u0131r isimler</li> <li>\u0130ngilizce kullan\u0131m\u0131</li> <li>Anlaml\u0131 k\u0131saltmalar</li> <li>Tutarl\u0131 isimlendirme</li> </ul> </li> <li> <p>Test verileri nas\u0131l y\u00f6netilmelidir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Ger\u00e7ek\u00e7i test verileri</li> <li>Test verisi fabrikalar\u0131</li> <li>Veri temizleme stratejileri</li> <li>Veri izolasyonu</li> <li>Test verisi y\u00f6netimi</li> </ul> </li> <li> <p>Test bak\u0131m\u0131 nas\u0131l yap\u0131lmal\u0131d\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>DRY prensibi</li> <li>Test yard\u0131mc\u0131 metodlar\u0131</li> <li>Test base s\u0131n\u0131flar\u0131</li> <li>Test utilities</li> <li>D\u00fczenli refactoring</li> </ul> </li> <li> <p>Test dok\u00fcmantasyonu neden \u00f6nemlidir?</p> </li> <li>Cevap:<ul> <li>Test ama\u00e7lar\u0131n\u0131 a\u00e7\u0131klar</li> <li>Test senaryolar\u0131n\u0131 belgeler</li> <li>Test verilerini a\u00e7\u0131klar</li> <li>Test sonu\u00e7lar\u0131n\u0131 raporlar</li> <li>Test s\u00fcrecini iyile\u015ftirir</li> </ul> </li> </ol>"},{"location":"mid-level/testing/testing-best-practices/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Test base s\u0131n\u0131f\u0131 nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: <pre><code>public abstract class TestBase : IDisposable\n{\n    protected readonly Mock&lt;IUserRepository&gt; MockRepository;\n    protected readonly UserService Service;\n    protected readonly TestData TestData;\n\n    protected TestBase()\n    {\n        MockRepository = new Mock&lt;IUserRepository&gt;();\n        Service = new UserService(MockRepository.Object);\n        TestData = new TestData();\n    }\n\n    public void Dispose()\n    {\n        // Cleanup logic\n    }\n}\n\npublic class UserServiceTests : TestBase\n{\n    [Fact]\n    public async Task GetUser_ShouldWork()\n    {\n        // Test logic using base class members\n    }\n}\n</code></pre></p> </li> <li> <p>Test verisi fabrikas\u0131 nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public static class TestDataFactory\n{\n    public static User CreateUser(int? id = null, string name = null)\n    {\n        return new User\n        {\n            Id = id ?? 1,\n            Name = name ?? \"Test User\",\n            Email = \"test@example.com\"\n        };\n    }\n\n    public static List&lt;User&gt; CreateUserList(int count)\n    {\n        return Enumerable.Range(1, count)\n            .Select(i =&gt; CreateUser(i, $\"User {i}\"))\n            .ToList();\n    }\n}\n</code></pre></p> </li> <li> <p>Test kategorileri nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: <pre><code>[Trait(\"Category\", \"Integration\")]\npublic class IntegrationTests\n{\n    [Fact]\n    public async Task DatabaseTest()\n    {\n        // Test logic\n    }\n}\n\n[Trait(\"Category\", \"Performance\")]\npublic class PerformanceTests\n{\n    [Fact]\n    public async Task PerformanceTest()\n    {\n        // Test logic\n    }\n}\n</code></pre></p> </li> <li> <p>Test yard\u0131mc\u0131 metodlar\u0131 nas\u0131l olu\u015fturulur?</p> </li> <li> <p>Cevap: <pre><code>public static class TestHelper\n{\n    public static void SetupMock&lt;T&gt;(Mock&lt;T&gt; mock, Expression&lt;Action&lt;T&gt;&gt; expression)\n        where T : class\n    {\n        mock.Setup(expression);\n    }\n\n    public static void VerifyMock&lt;T&gt;(Mock&lt;T&gt; mock, Expression&lt;Action&lt;T&gt;&gt; expression, Times times)\n        where T : class\n    {\n        mock.Verify(expression, times);\n    }\n\n    public static async Task&lt;T&gt; ExecuteWithTimeout&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; action, int timeoutSeconds = 5)\n    {\n        var task = action();\n        if (await Task.WhenAny(task, Task.Delay(timeoutSeconds * 1000)) == task)\n        {\n            return await task;\n        }\n        throw new TimeoutException();\n    }\n}\n</code></pre></p> </li> <li> <p>Test izolasyonu nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap: <pre><code>public class IsolatedTests : IDisposable\n{\n    private readonly string _testDatabase;\n    private readonly DbContext _context;\n\n    public IsolatedTests()\n    {\n        _testDatabase = $\"TestDb_{Guid.NewGuid()}\";\n        _context = new DbContext($\"Server=.;Database={_testDatabase};Trusted_Connection=True;\");\n    }\n\n    [Fact]\n    public async Task TestWithIsolation()\n    {\n        // Test logic with isolated database\n    }\n\n    public void Dispose()\n    {\n        _context.Database.EnsureDeleted();\n        _context.Dispose();\n    }\n}\n</code></pre></li> </ol>"},{"location":"mid-level/testing/testing-best-practices/#pratik-sorular","title":"Pratik Sorular","text":"<ol> <li> <p>A\u015fa\u011f\u0131daki test s\u0131n\u0131f\u0131n\u0131 best practices'e g\u00f6re d\u00fczenleyin: <pre><code>public class ProductServiceTests\n{\n    [Fact]\n    public void Test1()\n    {\n        var mock = new Mock&lt;IRepository&gt;();\n        var service = new ProductService(mock.Object);\n        var result = service.GetProduct(1);\n        Assert.NotNull(result);\n    }\n\n    [Fact]\n    public void Test2()\n    {\n        var mock = new Mock&lt;IRepository&gt;();\n        var service = new ProductService(mock.Object);\n        var result = service.GetProduct(2);\n        Assert.Null(result);\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class ProductServiceTests : IDisposable\n{\n    private readonly Mock&lt;IRepository&gt; _mockRepository;\n    private readonly ProductService _service;\n\n    public ProductServiceTests()\n    {\n        _mockRepository = new Mock&lt;IRepository&gt;();\n        _service = new ProductService(_mockRepository.Object);\n    }\n\n    [Fact]\n    public async Task GetProduct_WhenProductExists_ShouldReturnProduct()\n    {\n        // Arrange\n        var productId = 1;\n        var expectedProduct = new Product { Id = productId, Name = \"Test Product\" };\n        _mockRepository.Setup(x =&gt; x.GetById(productId))\n                      .ReturnsAsync(expectedProduct);\n\n        // Act\n        var result = await _service.GetProduct(productId);\n\n        // Assert\n        Assert.Equal(expectedProduct, result);\n        _mockRepository.Verify(x =&gt; x.GetById(productId), Times.Once);\n    }\n\n    [Fact]\n    public async Task GetProduct_WhenProductNotExists_ShouldReturnNull()\n    {\n        // Arrange\n        var productId = 2;\n        _mockRepository.Setup(x =&gt; x.GetById(productId))\n                      .ReturnsAsync((Product)null);\n\n        // Act\n        var result = await _service.GetProduct(productId);\n\n        // Assert\n        Assert.Null(result);\n        _mockRepository.Verify(x =&gt; x.GetById(productId), Times.Once);\n    }\n\n    public void Dispose()\n    {\n        // Cleanup if needed\n    }\n}\n</code></pre></p> </li> <li> <p>A\u015fa\u011f\u0131daki test verisi y\u00f6netimini best practices'e g\u00f6re d\u00fczenleyin: <pre><code>public class OrderServiceTests\n{\n    [Fact]\n    public void TestOrder()\n    {\n        var order = new Order\n        {\n            Id = 1,\n            CustomerId = 1,\n            Items = new List&lt;OrderItem&gt;\n            {\n                new OrderItem { ProductId = 1, Quantity = 2 },\n                new OrderItem { ProductId = 2, Quantity = 1 }\n            }\n        };\n        // Test logic\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public static class OrderTestData\n{\n    public static Order CreateValidOrder(int? id = null, int? customerId = null)\n    {\n        return new Order\n        {\n            Id = id ?? 1,\n            CustomerId = customerId ?? 1,\n            Items = new List&lt;OrderItem&gt;\n            {\n                CreateOrderItem(1, 2),\n                CreateOrderItem(2, 1)\n            }\n        };\n    }\n\n    public static OrderItem CreateOrderItem(int productId, int quantity)\n    {\n        return new OrderItem\n        {\n            ProductId = productId,\n            Quantity = quantity\n        };\n    }\n}\n\npublic class OrderServiceTests\n{\n    [Fact]\n    public async Task ProcessOrder_WhenValid_ShouldSucceed()\n    {\n        // Arrange\n        var order = OrderTestData.CreateValidOrder();\n        // Test logic\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/testing/testing-best-practices/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Test edilebilir kod nas\u0131l yaz\u0131l\u0131r?</li> <li> <p>Cevap:</p> <ul> <li>Dependency Injection kullan\u0131n</li> <li>Interface'leri tercih edin</li> <li>Single Responsibility prensibini uygulay\u0131n</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin</li> <li>Test edilebilir tasar\u0131m desenleri kullan\u0131n</li> </ul> </li> <li> <p>Test performans\u0131 nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap:</p> <ul> <li>Paralel test \u00e7al\u0131\u015ft\u0131r\u0131n</li> <li>Test verilerini optimize edin</li> <li>Test ortam\u0131n\u0131 yap\u0131land\u0131r\u0131n</li> <li>Gereksiz testleri kald\u0131r\u0131n</li> <li>Test s\u00fcresini \u00f6l\u00e7\u00fcn</li> </ul> </li> <li> <p>Test bak\u0131m maliyeti nas\u0131l azalt\u0131l\u0131r?</p> </li> <li> <p>Cevap:</p> <ul> <li>Test kodunu mod\u00fclerle\u015ftirin</li> <li>Test yard\u0131mc\u0131 metodlar\u0131 kullan\u0131n</li> <li>Test verilerini merkezile\u015ftirin</li> <li>Test dok\u00fcmantasyonunu g\u00fcncel tutun</li> <li>D\u00fczenli refactoring yap\u0131n</li> </ul> </li> <li> <p>Test kalitesi nas\u0131l \u00f6l\u00e7\u00fcl\u00fcr?</p> </li> <li> <p>Cevap:</p> <ul> <li>Test coverage'\u0131 \u00f6l\u00e7\u00fcn</li> <li>Test ba\u015far\u0131 oran\u0131n\u0131 takip edin</li> <li>Test s\u00fcresini \u00f6l\u00e7\u00fcn</li> <li>Test bak\u0131m maliyetini hesaplay\u0131n</li> <li>Test dok\u00fcmantasyonunu de\u011ferlendirin</li> </ul> </li> <li> <p>Test stratejisi nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap:<ul> <li>Test hedeflerini belirleyin</li> <li>Test tiplerini se\u00e7in</li> <li>Test ara\u00e7lar\u0131n\u0131 belirleyin</li> <li>Test s\u00fcrecini tan\u0131mlay\u0131n</li> <li>Test metriklerini belirleyin </li> </ul> </li> </ol>"},{"location":"mid-level/testing/unit-testing/","title":"Unit Testing","text":""},{"location":"mid-level/testing/unit-testing/#giris","title":"Giri\u015f","text":"<p>Unit testing, yaz\u0131l\u0131m geli\u015ftirme s\u00fcrecinde en temel test seviyesidir. Birim testleri, yaz\u0131l\u0131m\u0131n en k\u00fc\u00e7\u00fck par\u00e7alar\u0131n\u0131n (fonksiyonlar, metodlar) ba\u011f\u0131ms\u0131z olarak test edilmesini sa\u011flar. Bu testler, kodun do\u011fru \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 do\u011frulamak ve hatalar\u0131 erken a\u015famada tespit etmek i\u00e7in kritik \u00f6neme sahiptir.</p>"},{"location":"mid-level/testing/unit-testing/#unit-testingin-onemi","title":"Unit Testing'in \u00d6nemi","text":"<ol> <li>Erken Hata Tespiti</li> <li>Hatalar\u0131n kayna\u011f\u0131nda tespit edilmesi</li> <li>D\u00fczeltme maliyetinin azalt\u0131lmas\u0131</li> <li> <p>Daha g\u00fcvenilir kod \u00fcretimi</p> </li> <li> <p>Kod Kalitesi</p> </li> <li>Daha temiz ve bak\u0131m\u0131 kolay kod</li> <li>Daha iyi tasarlanm\u0131\u015f API'ler</li> <li> <p>Daha iyi dok\u00fcmante edilmi\u015f kod</p> </li> <li> <p>G\u00fcven ve Refactoring</p> </li> <li>G\u00fcvenli refactoring imkan\u0131</li> <li>Kod de\u011fi\u015fikliklerinin etkisinin h\u0131zl\u0131 g\u00f6r\u00fclmesi</li> <li>Regresyon hatalar\u0131n\u0131n \u00f6nlenmesi</li> </ol>"},{"location":"mid-level/testing/unit-testing/#nette-unit-testing","title":".NET'te Unit Testing","text":""},{"location":"mid-level/testing/unit-testing/#test-frameworkleri","title":"Test Framework'leri","text":"<ol> <li> <p>xUnit <pre><code>public class CalculatorTests\n{\n    [Fact]\n    public void Add_TwoNumbers_ReturnsSum()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Add(2, 3);\n\n        // Assert\n        Assert.Equal(5, result);\n    }\n}\n</code></pre></p> </li> <li> <p>NUnit <pre><code>[TestFixture]\npublic class CalculatorTests\n{\n    [Test]\n    public void Add_TwoNumbers_ReturnsSum()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Add(2, 3);\n\n        // Assert\n        Assert.That(result, Is.EqualTo(5));\n    }\n}\n</code></pre></p> </li> <li> <p>MSTest <pre><code>[TestClass]\npublic class CalculatorTests\n{\n    [TestMethod]\n    public void Add_TwoNumbers_ReturnsSum()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Add(2, 3);\n\n        // Assert\n        Assert.AreEqual(5, result);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"mid-level/testing/unit-testing/#unit-testing-best-practices","title":"Unit Testing Best Practices","text":""},{"location":"mid-level/testing/unit-testing/#1-test-isimlendirme","title":"1. Test \u0130simlendirme","text":"<ul> <li>Given-When-Then format\u0131 kullan\u0131n</li> <li>Test amac\u0131n\u0131 a\u00e7\u0131k\u00e7a belirtin</li> <li>Test edilen metod ve beklenen sonucu belirtin</li> </ul> <p>\u00d6rnek: <pre><code>public void CalculateDiscount_WhenCustomerIsPremium_Returns20PercentDiscount()\npublic void ValidateEmail_WhenEmailIsInvalid_ThrowsArgumentException()\n</code></pre></p>"},{"location":"mid-level/testing/unit-testing/#2-test-organizasyonu","title":"2. Test Organizasyonu","text":"<ul> <li>Arrange-Act-Assert (AAA) pattern'ini kullan\u0131n</li> <li>Her test metodunda tek bir \u015feyi test edin</li> <li>Test s\u0131n\u0131flar\u0131n\u0131 mant\u0131kl\u0131 \u015fekilde organize edin</li> </ul>"},{"location":"mid-level/testing/unit-testing/#3-test-bagmszlg","title":"3. Test Ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131","text":"<ul> <li>Testler birbirinden ba\u011f\u0131ms\u0131z olmal\u0131</li> <li>Test s\u0131ras\u0131 \u00f6nemli olmamal\u0131</li> <li>Her test kendi ba\u015flang\u0131\u00e7 durumunu olu\u015fturmal\u0131</li> </ul>"},{"location":"mid-level/testing/unit-testing/#4-test-verileri","title":"4. Test Verileri","text":"<ul> <li>Test verilerini a\u00e7\u0131k\u00e7a tan\u0131mlay\u0131n</li> <li>Magic number'lardan ka\u00e7\u0131n\u0131n</li> <li>Anlaml\u0131 test verileri kullan\u0131n</li> </ul>"},{"location":"mid-level/testing/unit-testing/#sk-karslaslan-sorunlar-ve-cozumleri","title":"S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcmleri","text":""},{"location":"mid-level/testing/unit-testing/#1-bagmllk-yonetimi","title":"1. Ba\u011f\u0131ml\u0131l\u0131k Y\u00f6netimi","text":"<ul> <li>Dependency Injection kullan\u0131n</li> <li>Mocking framework'lerini \u00f6\u011frenin</li> <li>Interface'leri tercih edin</li> </ul>"},{"location":"mid-level/testing/unit-testing/#2-test-edilebilirlik","title":"2. Test Edilebilirlik","text":"<ul> <li>SOLID prensiplerini uygulay\u0131n</li> <li>S\u0131k\u0131 ba\u011fl\u0131l\u0131klardan ka\u00e7\u0131n\u0131n</li> <li>Single Responsibility Principle'a uyun</li> </ul>"},{"location":"mid-level/testing/unit-testing/#3-test-bakm","title":"3. Test Bak\u0131m\u0131","text":"<ul> <li>Testleri d\u00fczenli olarak g\u00fcncelleyin</li> <li>Test kodunu production kodu gibi y\u00f6netin</li> <li>Test dok\u00fcmantasyonunu g\u00fcncel tutun</li> </ul>"},{"location":"mid-level/testing/unit-testing/#ornek-senaryo-e-ticaret-sepeti","title":"\u00d6rnek Senaryo: E-ticaret Sepeti","text":"<pre><code>public class ShoppingCartTests\n{\n    [Fact]\n    public void AddItem_WhenItemIsValid_AddsItemToCart()\n    {\n        // Arrange\n        var cart = new ShoppingCart();\n        var item = new CartItem { ProductId = 1, Quantity = 2, Price = 100 };\n\n        // Act\n        cart.AddItem(item);\n\n        // Assert\n        Assert.Single(cart.Items);\n        Assert.Equal(2, cart.Items[0].Quantity);\n    }\n\n    [Fact]\n    public void CalculateTotal_WhenCartHasItems_ReturnsCorrectTotal()\n    {\n        // Arrange\n        var cart = new ShoppingCart();\n        cart.AddItem(new CartItem { ProductId = 1, Quantity = 2, Price = 100 });\n        cart.AddItem(new CartItem { ProductId = 2, Quantity = 1, Price = 50 });\n\n        // Act\n        var total = cart.CalculateTotal();\n\n        // Assert\n        Assert.Equal(250, total);\n    }\n}\n</code></pre>"},{"location":"mid-level/testing/unit-testing/#mulakat-sorular-ve-cevaplar","title":"M\u00fclakat Sorular\u0131 ve Cevaplar\u0131","text":""},{"location":"mid-level/testing/unit-testing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Unit testing nedir ve neden \u00f6nemlidir?</li> <li> <p>Cevap: Unit testing, yaz\u0131l\u0131m\u0131n en k\u00fc\u00e7\u00fck par\u00e7alar\u0131n\u0131n (fonksiyonlar, metodlar) ba\u011f\u0131ms\u0131z olarak test edilmesidir. \u00d6nemlidir \u00e7\u00fcnk\u00fc:</p> <ul> <li>Hatalar\u0131 erken a\u015famada tespit eder</li> <li>Kod kalitesini art\u0131r\u0131r</li> <li>Refactoring s\u00fcrecini g\u00fcvenli hale getirir</li> <li>Dok\u00fcmantasyon g\u00f6revi g\u00f6r\u00fcr</li> <li>Regresyon hatalar\u0131n\u0131 \u00f6nler</li> </ul> </li> <li> <p>Unit test ile integration test aras\u0131ndaki farklar nelerdir?</p> </li> <li> <p>Cevap: </p> <ul> <li>Unit testler tek bir fonksiyonu/metodu test eder, integration testler sistemin farkl\u0131 bile\u015fenlerinin birlikte \u00e7al\u0131\u015fmas\u0131n\u0131 test eder</li> <li>Unit testler ba\u011f\u0131ml\u0131l\u0131klardan izole edilmi\u015ftir, integration testler ger\u00e7ek ba\u011f\u0131ml\u0131l\u0131klar\u0131 kullan\u0131r</li> <li>Unit testler daha h\u0131zl\u0131 \u00e7al\u0131\u015f\u0131r, integration testler daha yava\u015ft\u0131r</li> <li>Unit testler daha k\u00fc\u00e7\u00fck kapsama sahiptir, integration testler daha geni\u015f kapsama sahiptir</li> </ul> </li> <li> <p>Test Driven Development (TDD) nedir ve avantajlar\u0131 nelerdir?</p> </li> <li> <p>Cevap: TDD, \u00f6nce test yaz\u0131p sonra kodu geli\u015ftirme yakla\u015f\u0131m\u0131d\u0131r. Avantajlar\u0131:</p> <ul> <li>Daha temiz ve test edilebilir kod \u00fcretir</li> <li>Gereksiz kod yaz\u0131m\u0131n\u0131 \u00f6nler</li> <li>S\u00fcrekli geri bildirim sa\u011flar</li> <li>Tasar\u0131m s\u00fcrecini iyile\u015ftirir</li> <li>Dok\u00fcmantasyon g\u00f6revi g\u00f6r\u00fcr</li> </ul> </li> <li> <p>Mocking nedir ve neden kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Mocking, test s\u00fcrecinde ba\u011f\u0131ml\u0131l\u0131klar\u0131 sim\u00fcle etmek i\u00e7in kullan\u0131lan bir tekniktir. Kullan\u0131lma nedenleri:</p> <ul> <li>Harici servisleri taklit etmek</li> <li>Test ortam\u0131n\u0131 kontrol etmek</li> <li>Test s\u00fcrecini h\u0131zland\u0131rmak</li> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 izole etmek</li> <li>Test edilemeyen durumlar\u0131 sim\u00fcle etmek</li> </ul> </li> <li> <p>Test coverage nedir ve neden \u00f6nemlidir?</p> </li> <li>Cevap: Test coverage, kodun ne kadar\u0131n\u0131n test edildi\u011fini \u00f6l\u00e7en bir metrikdir. \u00d6nemlidir \u00e7\u00fcnk\u00fc:<ul> <li>Test edilmemi\u015f alanlar\u0131 belirler</li> <li>Test stratejisini y\u00f6nlendirir</li> <li>Kod kalitesi g\u00f6stergesi sa\u011flar</li> <li>Risk y\u00f6netimine yard\u0131mc\u0131 olur</li> <li>Test odakl\u0131 geli\u015ftirmeyi te\u015fvik eder</li> </ul> </li> </ol>"},{"location":"mid-level/testing/unit-testing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>xUnit, NUnit ve MSTest aras\u0131ndaki temel farklar nelerdir?</li> <li> <p>Cevap:</p> <ul> <li>xUnit: </li> <li>Daha modern ve esnek</li> <li>[Fact] ve [Theory] attribute'lar\u0131</li> <li>Constructor ve Dispose kullan\u0131m\u0131</li> <li>Paralel test \u00e7al\u0131\u015ft\u0131rma deste\u011fi</li> <li>NUnit:</li> <li>[TestFixture] ve [Test] attribute'lar\u0131</li> <li>[SetUp] ve [TearDown] kullan\u0131m\u0131</li> <li>Kapsaml\u0131 assertion k\u00fct\u00fcphanesi</li> <li>MSTest:</li> <li>Microsoft'un resmi framework'\u00fc</li> <li>[TestClass] ve [TestMethod] attribute'lar\u0131</li> <li>Visual Studio ile tam entegrasyon</li> <li>Daha az esnek ama daha stabil</li> </ul> </li> <li> <p>Arrange-Act-Assert pattern'i nedir ve neden \u00f6nemlidir?</p> </li> <li>Cevap: AAA pattern'i, test kodunu \u00fc\u00e7 b\u00f6l\u00fcme ay\u0131ran bir yakla\u015f\u0131md\u0131r:<ul> <li>Arrange: Test i\u00e7in gerekli ortam\u0131 haz\u0131rlama</li> <li>Act: Test edilecek metodu \u00e7a\u011f\u0131rma</li> <li>Assert: Sonu\u00e7lar\u0131 do\u011frulama</li> </ul> </li> <li> <p>\u00d6nemlidir \u00e7\u00fcnk\u00fc:</p> <ul> <li>Test kodunu daha okunabilir yapar</li> <li>Test yap\u0131s\u0131n\u0131 standardize eder</li> <li>Test amac\u0131n\u0131 netle\u015ftirir</li> <li>Bak\u0131m\u0131 kolayla\u015ft\u0131r\u0131r</li> </ul> </li> <li> <p>Dependency Injection'\u0131n unit testing'deki \u00f6nemi nedir?</p> </li> <li> <p>Cevap: Dependency Injection (DI) unit testing'de \u015fu nedenlerle \u00f6nemlidir:</p> <ul> <li>Ba\u011f\u0131ml\u0131l\u0131klar\u0131 kolayca mock'lamay\u0131 sa\u011flar</li> <li>Test edilebilirli\u011fi art\u0131r\u0131r</li> <li>Kodun daha mod\u00fcler olmas\u0131n\u0131 sa\u011flar</li> <li>Test senaryolar\u0131n\u0131 kolayla\u015ft\u0131r\u0131r</li> <li>Ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimini merkezile\u015ftirir</li> </ul> </li> <li> <p>SOLID prensipleri unit testing'i nas\u0131l etkiler?</p> </li> <li> <p>Cevap: SOLID prensipleri unit testing'i \u015fu \u015fekilde etkiler:</p> <ul> <li>Single Responsibility: Her s\u0131n\u0131f\u0131n tek bir sorumlulu\u011fu olmas\u0131, test yazmay\u0131 kolayla\u015ft\u0131r\u0131r</li> <li>Open/Closed: Yeni \u00f6zellikler eklerken mevcut testlerin bozulmamas\u0131n\u0131 sa\u011flar</li> <li>Liskov Substitution: Alt s\u0131n\u0131flar\u0131n test edilebilirli\u011fini art\u0131r\u0131r</li> <li>Interface Segregation: Daha k\u00fc\u00e7\u00fck ve odakl\u0131 interface'ler, daha kolay test yazmay\u0131 sa\u011flar</li> <li>Dependency Inversion: Ba\u011f\u0131ml\u0131l\u0131klar\u0131n y\u00f6netimini kolayla\u015ft\u0131r\u0131r</li> </ul> </li> <li> <p>Test ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131 neden \u00f6nemlidir?</p> </li> <li>Cevap: Test ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131 \u00f6nemlidir \u00e7\u00fcnk\u00fc:<ul> <li>Testlerin birbirini etkilememesini sa\u011flar</li> <li>Test s\u0131ras\u0131n\u0131n \u00f6nemsiz olmas\u0131n\u0131 sa\u011flar</li> <li>Hata ay\u0131klamay\u0131 kolayla\u015ft\u0131r\u0131r</li> <li>Test sonu\u00e7lar\u0131n\u0131n g\u00fcvenilirli\u011fini art\u0131r\u0131r</li> <li>Paralel test \u00e7al\u0131\u015ft\u0131rmay\u0131 m\u00fcmk\u00fcn k\u0131lar</li> </ul> </li> </ol>"},{"location":"mid-level/testing/unit-testing/#pratik-sorular","title":"Pratik Sorular","text":"<ol> <li> <p>A\u015fa\u011f\u0131daki metodu test etmek i\u00e7in nas\u0131l bir test yazars\u0131n\u0131z? <pre><code>public class Calculator\n{\n    public int Divide(int a, int b)\n    {\n        if (b == 0)\n            throw new DivideByZeroException();\n        return a / b;\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class CalculatorTests\n{\n    [Fact]\n    public void Divide_WhenDivisorIsNotZero_ReturnsCorrectResult()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act\n        var result = calculator.Divide(10, 2);\n\n        // Assert\n        Assert.Equal(5, result);\n    }\n\n    [Fact]\n    public void Divide_WhenDivisorIsZero_ThrowsDivideByZeroException()\n    {\n        // Arrange\n        var calculator = new Calculator();\n\n        // Act &amp; Assert\n        Assert.Throws&lt;DivideByZeroException&gt;(() =&gt; calculator.Divide(10, 0));\n    }\n}\n</code></pre></p> </li> <li> <p>A\u015fa\u011f\u0131daki servisi test etmek i\u00e7in nas\u0131l bir yakla\u015f\u0131m izlersiniz? <pre><code>public class OrderService\n{\n    private readonly IOrderRepository _orderRepository;\n    private readonly IEmailService _emailService;\n\n    public OrderService(IOrderRepository orderRepository, IEmailService emailService)\n    {\n        _orderRepository = orderRepository;\n        _emailService = emailService;\n    }\n\n    public async Task&lt;Order&gt; CreateOrder(OrderRequest request)\n    {\n        var order = new Order\n        {\n            CustomerId = request.CustomerId,\n            Items = request.Items,\n            TotalAmount = request.Items.Sum(x =&gt; x.Price * x.Quantity)\n        };\n\n        await _orderRepository.SaveAsync(order);\n        await _emailService.SendOrderConfirmation(order);\n\n        return order;\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: <pre><code>public class OrderServiceTests\n{\n    [Fact]\n    public async Task CreateOrder_WhenRequestIsValid_CreatesAndSavesOrder()\n    {\n        // Arrange\n        var mockOrderRepository = new Mock&lt;IOrderRepository&gt;();\n        var mockEmailService = new Mock&lt;IEmailService&gt;();\n        var service = new OrderService(mockOrderRepository.Object, mockEmailService.Object);\n\n        var request = new OrderRequest\n        {\n            CustomerId = 1,\n            Items = new List&lt;OrderItem&gt;\n            {\n                new OrderItem { Price = 100, Quantity = 2 }\n            }\n        };\n\n        // Act\n        var result = await service.CreateOrder(request);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(1, result.CustomerId);\n        Assert.Equal(200, result.TotalAmount);\n        mockOrderRepository.Verify(x =&gt; x.SaveAsync(It.IsAny&lt;Order&gt;()), Times.Once);\n        mockEmailService.Verify(x =&gt; x.SendOrderConfirmation(It.IsAny&lt;Order&gt;()), Times.Once);\n    }\n}\n</code></pre></p> </li> <li> <p>A\u015fa\u011f\u0131daki test s\u0131n\u0131f\u0131ndaki sorunlar\u0131 belirleyin ve d\u00fczeltin: <pre><code>public class UserServiceTests\n{\n    private UserService _userService;\n    private static int _testCounter = 0;\n\n    [SetUp]\n    public void Setup()\n    {\n        _userService = new UserService();\n        _testCounter++;\n    }\n\n    [Test]\n    public void Test1()\n    {\n        var result = _userService.CreateUser(\"test@email.com\");\n        Assert.NotNull(result);\n    }\n\n    [Test]\n    public void Test2()\n    {\n        var result = _userService.CreateUser(\"test@email.com\");\n        Assert.NotNull(result);\n    }\n}\n</code></pre></p> </li> <li> <p>Cevap: Sorunlar ve d\u00fczeltilmi\u015f hali: <pre><code>public class UserServiceTests\n{\n    private UserService _userService;\n\n    [SetUp]\n    public void Setup()\n    {\n        _userService = new UserService();\n    }\n\n    [Test]\n    public void CreateUser_WhenEmailIsValid_ReturnsUser()\n    {\n        // Arrange\n        var email = \"test@email.com\";\n\n        // Act\n        var result = _userService.CreateUser(email);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(email, result.Email);\n    }\n\n    [Test]\n    public void CreateUser_WhenEmailIsInvalid_ThrowsArgumentException()\n    {\n        // Arrange\n        var invalidEmail = \"invalid-email\";\n\n        // Act &amp; Assert\n        Assert.Throws&lt;ArgumentException&gt;(() =&gt; _userService.CreateUser(invalidEmail));\n    }\n}\n</code></pre></p> </li> </ol> <p>Sorunlar: 1. Statik <code>_testCounter</code> de\u011fi\u015fkeni test ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131n\u0131 bozar 2. Test isimleri anlams\u0131z 3. Test metodlar\u0131 ayn\u0131 \u015feyi test ediyor 4. Given-When-Then format\u0131 kullan\u0131lmam\u0131\u015f 5. Eksik test senaryolar\u0131</p>"},{"location":"mid-level/testing/unit-testing/#ileri-seviye-sorular","title":"\u0130leri Seviye Sorular","text":"<ol> <li>Unit testlerde ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimi i\u00e7in hangi pattern'leri kullan\u0131rs\u0131n\u0131z?</li> <li> <p>Cevap:</p> <ul> <li>Dependency Injection: Constructor injection, property injection, method injection</li> <li>Factory Pattern: Test i\u00e7in \u00f6zel factory'ler</li> <li>Strategy Pattern: Farkl\u0131 davran\u0131\u015flar\u0131 test etmek i\u00e7in</li> <li>Adapter Pattern: Legacy sistemleri test etmek i\u00e7in</li> <li>Proxy Pattern: Test s\u0131ras\u0131nda davran\u0131\u015f\u0131 de\u011fi\u015ftirmek i\u00e7in</li> </ul> </li> <li> <p>Test edilebilir kod yazmak i\u00e7in hangi prensipleri takip edersiniz?</p> </li> <li> <p>Cevap:</p> <ul> <li>SOLID prensiplerini uygulama</li> <li>Dependency Injection kullanma</li> <li>Interface'leri tercih etme</li> <li>S\u0131k\u0131 ba\u011fl\u0131l\u0131klardan ka\u00e7\u0131nma</li> <li>Single Responsibility Principle'a uyma</li> <li>Pure function'lar yazma</li> <li>Side effect'leri minimize etme</li> </ul> </li> <li> <p>Legacy kodda unit test yazarken kar\u015f\u0131la\u015ft\u0131\u011f\u0131n\u0131z zorluklar nelerdir?</p> </li> <li> <p>Cevap:</p> <ul> <li>S\u0131k\u0131 ba\u011fl\u0131l\u0131klar</li> <li>Global state kullan\u0131m\u0131</li> <li>Statik metodlar</li> <li>Test edilemeyen tasar\u0131m</li> <li>Eksik interface'ler</li> <li>Karma\u015f\u0131k ba\u011f\u0131ml\u0131l\u0131klar</li> <li>Dok\u00fcmantasyon eksikli\u011fi</li> </ul> </li> <li> <p>Unit testlerde performans optimizasyonu i\u00e7in neler yapabilirsiniz?</p> </li> <li> <p>Cevap:</p> <ul> <li>Paralel test \u00e7al\u0131\u015ft\u0131rma</li> <li>Test verilerini \u00f6nbelle\u011fe alma</li> <li>Gereksiz setup/teardown i\u015flemlerinden ka\u00e7\u0131nma</li> <li>Test s\u00fcitlerini optimize etme</li> <li>Mock'lar\u0131 etkin kullanma</li> <li>Test veritaban\u0131n\u0131 optimize etme</li> </ul> </li> <li> <p>Unit testlerde exception handling nas\u0131l yap\u0131lmal\u0131d\u0131r?</p> </li> <li>Cevap:<ul> <li>Beklenen exception'lar\u0131 test etme</li> <li>Exception mesajlar\u0131n\u0131 do\u011frulama</li> <li>Exception tiplerini kontrol etme</li> <li>Exception stack trace'ini inceleme</li> <li>Custom exception'lar\u0131 test etme</li> <li>Exception handling stratejilerini test etme </li> </ul> </li> </ol>"},{"location":"mid-level/testing-strategies/chaos-engineering/","title":"Chaos Engineering","text":""},{"location":"mid-level/testing-strategies/chaos-engineering/#giris","title":"Giri\u015f","text":"<p>Chaos Engineering, production sistemlerinde kontroll\u00fc olarak failure'lar\u0131 tetikleyerek sistemin resilience'\u0131n\u0131 test eden ve iyile\u015ftiren yakla\u015f\u0131md\u0131r. Mid-level geli\u015ftiriciler i\u00e7in chaos engineering'i anlamak, system reliability, fault tolerance ve disaster recovery i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, chaos experiments, failure injection, resilience testing ve chaos automation konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/testing-strategies/chaos-engineering/#chaos-engineering-framework","title":"Chaos Engineering Framework","text":""},{"location":"mid-level/testing-strategies/chaos-engineering/#1-chaos-experiment-engine","title":"1. Chaos Experiment Engine","text":"<p>Chaos experiment'lar\u0131n\u0131 y\u00f6neten engine.</p> <pre><code>public class ChaosExperimentEngine : IChaosExperimentEngine\n{\n    private readonly ILogger&lt;ChaosExperimentEngine&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly IChaosExperimentRepository _experimentRepository;\n    private readonly IChaosExecutionService _executionService;\n    private readonly IChaosMonitoringService _monitoringService;\n    private readonly Dictionary&lt;string, IChaosExperiment&gt; _activeExperiments;\n\n    public ChaosExperimentEngine(ILogger&lt;ChaosExperimentEngine&gt; logger, IConfiguration configuration,\n        IChaosExperimentRepository experimentRepository, IChaosExecutionService executionService,\n        IChaosMonitoringService monitoringService)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _experimentRepository = experimentRepository;\n        _executionService = executionService;\n        _monitoringService = monitoringService;\n        _activeExperiments = new Dictionary&lt;string, IChaosExperiment&gt;();\n    }\n\n    public async Task InitializeAsync()\n    {\n        try\n        {\n            var experiments = await _experimentRepository.GetActiveExperimentsAsync();\n\n            foreach (var experiment in experiments)\n            {\n                await LoadExperimentAsync(experiment);\n            }\n\n            _logger.LogInformation(\"Chaos experiment engine initialized with {Count} experiments\", _activeExperiments.Count);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error initializing chaos experiment engine\");\n        }\n    }\n\n    public async Task&lt;string&gt; CreateExperimentAsync(ChaosExperimentDefinition definition)\n    {\n        try\n        {\n            var experiment = new ChaosExperiment\n            {\n                Id = Guid.NewGuid().ToString(),\n                Name = definition.Name,\n                Description = definition.Description,\n                Hypothesis = definition.Hypothesis,\n                SteadyState = definition.SteadyState,\n                Method = definition.Method,\n                Rollback = definition.Rollback,\n                IsEnabled = definition.IsEnabled,\n                Schedule = definition.Schedule,\n                CreatedAt = DateTime.UtcNow,\n                CreatedBy = definition.CreatedBy\n            };\n\n            await _experimentRepository.SaveExperimentAsync(experiment);\n            await LoadExperimentAsync(experiment);\n\n            _logger.LogInformation(\"Chaos experiment created: {Name}\", experiment.Name);\n            return experiment.Id;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating chaos experiment: {Name}\", definition.Name);\n            throw;\n        }\n    }\n\n    public async Task&lt;bool&gt; ExecuteExperimentAsync(string experimentId)\n    {\n        try\n        {\n            if (!_activeExperiments.TryGetValue(experimentId, out var experiment))\n            {\n                _logger.LogWarning(\"Experiment not found: {ExperimentId}\", experimentId);\n                return false;\n            }\n\n            _logger.LogInformation(\"Executing chaos experiment: {Name}\", experiment.Name);\n\n            // Record steady state before experiment\n            var steadyStateBefore = await _monitoringService.RecordSteadyStateAsync(experiment.SteadyState);\n\n            // Execute the experiment\n            var executionResult = await _executionService.ExecuteExperimentAsync(experiment);\n\n            // Record steady state after experiment\n            var steadyStateAfter = await _monitoringService.RecordSteadyStateAsync(experiment.SteadyState);\n\n            // Analyze results\n            var analysisResult = await AnalyzeExperimentResultsAsync(experiment, steadyStateBefore, steadyStateAfter, executionResult);\n\n            // Store results\n            await _experimentRepository.SaveExperimentResultAsync(experimentId, analysisResult);\n\n            _logger.LogInformation(\"Chaos experiment completed: {Name}, Success: {Success}\", \n                experiment.Name, analysisResult.IsSuccessful);\n\n            return analysisResult.IsSuccessful;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing chaos experiment: {ExperimentId}\", experimentId);\n            return false;\n        }\n    }\n\n    public async Task&lt;bool&gt; RollbackExperimentAsync(string experimentId)\n    {\n        try\n        {\n            if (!_activeExperiments.TryGetValue(experimentId, out var experiment))\n            {\n                _logger.LogWarning(\"Experiment not found: {ExperimentId}\", experimentId);\n                return false;\n            }\n\n            _logger.LogInformation(\"Rolling back chaos experiment: {Name}\", experiment.Name);\n\n            var rollbackResult = await _executionService.RollbackExperimentAsync(experiment);\n\n            _logger.LogInformation(\"Chaos experiment rollback completed: {Name}, Success: {Success}\", \n                experiment.Name, rollbackResult.IsSuccessful);\n\n            return rollbackResult.IsSuccessful;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rolling back chaos experiment: {ExperimentId}\", experimentId);\n            return false;\n        }\n    }\n\n    public async Task&lt;List&lt;ChaosExperiment&gt;&gt; GetActiveExperimentsAsync()\n    {\n        return _activeExperiments.Values.ToList();\n    }\n\n    public async Task&lt;ChaosExperimentResult&gt; GetExperimentResultAsync(string experimentId)\n    {\n        return await _experimentRepository.GetExperimentResultAsync(experimentId);\n    }\n\n    private async Task LoadExperimentAsync(ChaosExperiment experiment)\n    {\n        try\n        {\n            // Create experiment instance based on method\n            var experimentInstance = CreateExperimentInstance(experiment.Method);\n            _activeExperiments[experiment.Id] = experimentInstance;\n\n            _logger.LogDebug(\"Chaos experiment loaded: {Name}\", experiment.Name);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error loading chaos experiment: {Name}\", experiment.Name);\n        }\n    }\n\n    private IChaosExperiment CreateExperimentInstance(ChaosMethod method)\n    {\n        return method.Type switch\n        {\n            ChaosType.NetworkLatency =&gt; new NetworkLatencyExperiment(method),\n            ChaosType.NetworkPartition =&gt; new NetworkPartitionExperiment(method),\n            ChaosType.ServiceFailure =&gt; new ServiceFailureExperiment(method),\n            ChaosType.DatabaseFailure =&gt; new DatabaseFailureExperiment(method),\n            ChaosType.MemoryLeak =&gt; new MemoryLeakExperiment(method),\n            ChaosType.CpuSpike =&gt; new CpuSpikeExperiment(method),\n            ChaosType.DiskFailure =&gt; new DiskFailureExperiment(method),\n            _ =&gt; throw new ArgumentException($\"Unknown chaos type: {method.Type}\")\n        };\n    }\n\n    private async Task&lt;ChaosAnalysisResult&gt; AnalyzeExperimentResultsAsync(\n        ChaosExperiment experiment, \n        SteadyStateMetrics steadyStateBefore, \n        SteadyStateMetrics steadyStateAfter, \n        ChaosExecutionResult executionResult)\n    {\n        try\n        {\n            var analysis = new ChaosAnalysisResult\n            {\n                ExperimentId = experiment.Id,\n                ExecutedAt = DateTime.UtcNow,\n                ExecutionDuration = executionResult.Duration,\n                SteadyStateBefore = steadyStateBefore,\n                SteadyStateAfter = steadyStateAfter\n            };\n\n            // Analyze steady state changes\n            var steadyStateAnalysis = await AnalyzeSteadyStateChangesAsync(steadyStateBefore, steadyStateAfter);\n            analysis.SteadyStateAnalysis = steadyStateAnalysis;\n\n            // Determine if experiment was successful\n            analysis.IsSuccessful = steadyStateAnalysis.IsWithinAcceptableRange &amp;&amp; executionResult.IsSuccessful;\n\n            // Generate recommendations\n            analysis.Recommendations = await GenerateRecommendationsAsync(experiment, steadyStateAnalysis);\n\n            return analysis;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error analyzing experiment results\");\n            return new ChaosAnalysisResult\n            {\n                ExperimentId = experiment.Id,\n                ExecutedAt = DateTime.UtcNow,\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    private async Task&lt;SteadyStateAnalysis&gt; AnalyzeSteadyStateChangesAsync(\n        SteadyStateMetrics before, \n        SteadyStateMetrics after)\n    {\n        var analysis = new SteadyStateAnalysis();\n\n        // Analyze response time changes\n        var responseTimeChange = (after.AverageResponseTime - before.AverageResponseTime) / before.AverageResponseTime * 100;\n        analysis.ResponseTimeChange = responseTimeChange;\n\n        // Analyze error rate changes\n        var errorRateChange = (after.ErrorRate - before.ErrorRate) / Math.Max(before.ErrorRate, 0.001) * 100;\n        analysis.ErrorRateChange = errorRateChange;\n\n        // Analyze throughput changes\n        var throughputChange = (after.Throughput - before.Throughput) / before.Throughput * 100;\n        analysis.ThroughputChange = throughputChange;\n\n        // Determine if changes are within acceptable range\n        analysis.IsWithinAcceptableRange = \n            Math.Abs(responseTimeChange) &lt; 20 &amp;&amp; \n            Math.Abs(errorRateChange) &lt; 5 &amp;&amp; \n            Math.Abs(throughputChange) &lt; 15;\n\n        return analysis;\n    }\n\n    private async Task&lt;List&lt;string&gt;&gt; GenerateRecommendationsAsync(\n        ChaosExperiment experiment, \n        SteadyStateAnalysis analysis)\n    {\n        var recommendations = new List&lt;string&gt;();\n\n        if (Math.Abs(analysis.ResponseTimeChange) &gt; 20)\n        {\n            recommendations.Add(\"Consider implementing caching strategies to improve response time\");\n            recommendations.Add(\"Review database query performance and add indexes if needed\");\n        }\n\n        if (Math.Abs(analysis.ErrorRateChange) &gt; 5)\n        {\n            recommendations.Add(\"Implement circuit breaker pattern for external service calls\");\n            recommendations.Add(\"Add retry policies with exponential backoff\");\n        }\n\n        if (Math.Abs(analysis.ThroughputChange) &gt; 15)\n        {\n            recommendations.Add(\"Consider horizontal scaling for high-traffic scenarios\");\n            recommendations.Add(\"Implement connection pooling for database connections\");\n        }\n\n        return recommendations;\n    }\n}\n\npublic interface IChaosExperimentEngine\n{\n    Task InitializeAsync();\n    Task&lt;string&gt; CreateExperimentAsync(ChaosExperimentDefinition definition);\n    Task&lt;bool&gt; ExecuteExperimentAsync(string experimentId);\n    Task&lt;bool&gt; RollbackExperimentAsync(string experimentId);\n    Task&lt;List&lt;ChaosExperiment&gt;&gt; GetActiveExperimentsAsync();\n    Task&lt;ChaosExperimentResult&gt; GetExperimentResultAsync(string experimentId);\n}\n\npublic class ChaosExperiment\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public string Hypothesis { get; set; }\n    public SteadyStateDefinition SteadyState { get; set; }\n    public ChaosMethod Method { get; set; }\n    public RollbackStrategy Rollback { get; set; }\n    public bool IsEnabled { get; set; }\n    public ChaosSchedule Schedule { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public string CreatedBy { get; set; }\n}\n\npublic class ChaosExperimentDefinition\n{\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public string Hypothesis { get; set; }\n    public SteadyStateDefinition SteadyState { get; set; }\n    public ChaosMethod Method { get; set; }\n    public RollbackStrategy Rollback { get; set; }\n    public bool IsEnabled { get; set; }\n    public ChaosSchedule Schedule { get; set; }\n    public string CreatedBy { get; set; }\n}\n\npublic class SteadyStateDefinition\n{\n    public List&lt;string&gt; Metrics { get; set; } = new();\n    public Dictionary&lt;string, double&gt; Thresholds { get; set; } = new();\n    public TimeSpan MeasurementWindow { get; set; } = TimeSpan.FromMinutes(5);\n}\n\npublic class ChaosMethod\n{\n    public ChaosType Type { get; set; }\n    public Dictionary&lt;string, object&gt; Parameters { get; set; } = new();\n    public TimeSpan Duration { get; set; }\n    public int Intensity { get; set; } = 50; // 0-100\n}\n\npublic class RollbackStrategy\n{\n    public bool AutoRollback { get; set; } = true;\n    public TimeSpan RollbackDelay { get; set; } = TimeSpan.FromSeconds(30);\n    public List&lt;string&gt; RollbackActions { get; set; } = new();\n}\n\npublic class ChaosSchedule\n{\n    public bool IsScheduled { get; set; } = false;\n    public string CronExpression { get; set; }\n    public TimeZoneInfo TimeZone { get; set; } = TimeZoneInfo.Utc;\n}\n\npublic enum ChaosType\n{\n    NetworkLatency,\n    NetworkPartition,\n    ServiceFailure,\n    DatabaseFailure,\n    MemoryLeak,\n    CpuSpike,\n    DiskFailure\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/chaos-engineering/#2-network-chaos-experiments","title":"2. Network Chaos Experiments","text":"<p>Network chaos experiment'lar\u0131 implementasyonu.</p> <pre><code>public class NetworkLatencyExperiment : IChaosExperiment\n{\n    private readonly ChaosMethod _method;\n    private readonly ILogger&lt;NetworkLatencyExperiment&gt; _logger;\n\n    public NetworkLatencyExperiment(ChaosMethod method)\n    {\n        _method = method;\n        _logger = LogManager.GetCurrentClassLogger();\n    }\n\n    public async Task&lt;ChaosExecutionResult&gt; ExecuteAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Executing network latency experiment with parameters: {Parameters}\", \n                JsonSerializer.Serialize(_method.Parameters));\n\n            var latencyMs = _method.Parameters.GetValueOrDefault(\"latencyMs\", 100);\n            var jitterMs = _method.Parameters.GetValueOrDefault(\"jitterMs\", 20);\n            var duration = _method.Duration;\n\n            // Apply network latency using Windows QoS or similar\n            await ApplyNetworkLatencyAsync(latencyMs, jitterMs, duration);\n\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = true,\n                Duration = duration,\n                Details = $\"Applied {latencyMs}ms latency with {jitterMs}ms jitter for {duration}\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing network latency experiment\");\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    public async Task&lt;ChaosExecutionResult&gt; RollbackAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Rolling back network latency experiment\");\n\n            // Remove network latency rules\n            await RemoveNetworkLatencyAsync();\n\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = true,\n                Details = \"Network latency rules removed\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rolling back network latency experiment\");\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    private async Task ApplyNetworkLatencyAsync(int latencyMs, int jitterMs, TimeSpan duration)\n    {\n        // This would integrate with your network infrastructure\n        // For demonstration, simulate the operation\n        await Task.Delay(1000);\n\n        _logger.LogInformation(\"Applied network latency: {Latency}ms \u00b1 {Jitter}ms for {Duration}\", \n            latencyMs, jitterMs, duration);\n    }\n\n    private async Task RemoveNetworkLatencyAsync()\n    {\n        // Remove network latency rules\n        await Task.Delay(500);\n\n        _logger.LogInformation(\"Removed network latency rules\");\n    }\n}\n\npublic class NetworkPartitionExperiment : IChaosExperiment\n{\n    private readonly ChaosMethod _method;\n    private readonly ILogger&lt;NetworkPartitionExperiment&gt; _logger;\n\n    public NetworkPartitionExperiment(ChaosMethod method)\n    {\n        _method = method;\n        _logger = LogManager.GetCurrentClassLogger();\n    }\n\n    public async Task&lt;ChaosExecutionResult&gt; ExecuteAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Executing network partition experiment\");\n\n            var targetServices = _method.Parameters.GetValueOrDefault(\"targetServices\", new string[0]) as string[];\n            var partitionType = _method.Parameters.GetValueOrDefault(\"partitionType\", \"complete\") as string;\n            var duration = _method.Duration;\n\n            // Apply network partition\n            await ApplyNetworkPartitionAsync(targetServices, partitionType, duration);\n\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = true,\n                Duration = duration,\n                Details = $\"Applied {partitionType} network partition to {targetServices.Length} services for {duration}\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing network partition experiment\");\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    public async Task&lt;ChaosExecutionResult&gt; RollbackAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Rolling back network partition experiment\");\n\n            // Restore network connectivity\n            await RestoreNetworkConnectivityAsync();\n\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = true,\n                Details = \"Network connectivity restored\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rolling back network partition experiment\");\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    private async Task ApplyNetworkPartitionAsync(string[] targetServices, string partitionType, TimeSpan duration)\n    {\n        // This would integrate with your network infrastructure\n        // For demonstration, simulate the operation\n        await Task.Delay(1000);\n\n        _logger.LogInformation(\"Applied {PartitionType} network partition to {Services} for {Duration}\", \n            partitionType, string.Join(\", \", targetServices), duration);\n    }\n\n    private async Task RestoreNetworkConnectivityAsync()\n    {\n        // Restore network connectivity\n        await Task.Delay(500);\n\n        _logger.LogInformation(\"Network connectivity restored\");\n    }\n}\n\npublic interface IChaosExperiment\n{\n    Task&lt;ChaosExecutionResult&gt; ExecuteAsync();\n    Task&lt;ChaosExecutionResult&gt; RollbackAsync();\n}\n\npublic class ChaosExecutionResult\n{\n    public bool IsSuccessful { get; set; }\n    public TimeSpan Duration { get; set; }\n    public string Details { get; set; }\n    public string Error { get; set; }\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/chaos-engineering/#3-service-chaos-experiments","title":"3. Service Chaos Experiments","text":"<p>Service chaos experiment'lar\u0131 implementasyonu.</p> <pre><code>public class ServiceFailureExperiment : IChaosExperiment\n{\n    private readonly ChaosMethod _method;\n    private readonly ILogger&lt;ServiceFailureExperiment&gt; _logger;\n    private readonly IServiceManager _serviceManager;\n\n    public ServiceFailureExperiment(ChaosMethod method, IServiceManager serviceManager)\n    {\n        _method = method;\n        _serviceManager = serviceManager;\n        _logger = LogManager.GetCurrentClassLogger();\n    }\n\n    public async Task&lt;ChaosExecutionResult&gt; ExecuteAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Executing service failure experiment\");\n\n            var targetService = _method.Parameters.GetValueOrDefault(\"targetService\", \"PaymentService\") as string;\n            var failureType = _method.Parameters.GetValueOrDefault(\"failureType\", \"crash\") as string;\n            var duration = _method.Duration;\n\n            // Apply service failure\n            await ApplyServiceFailureAsync(targetService, failureType, duration);\n\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = true,\n                Duration = duration,\n                Details = $\"Applied {failureType} failure to {targetService} for {duration}\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing service failure experiment\");\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    public async Task&lt;ChaosExecutionResult&gt; RollbackAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Rolling back service failure experiment\");\n\n            // Restore service\n            await RestoreServiceAsync();\n\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = true,\n                Details = \"Service restored\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rolling back service failure experiment\");\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    private async Task ApplyServiceFailureAsync(string targetService, string failureType, TimeSpan duration)\n    {\n        switch (failureType.ToLower())\n        {\n            case \"crash\":\n                await _serviceManager.CrashServiceAsync(targetService);\n                break;\n            case \"slow\":\n                await _serviceManager.SlowDownServiceAsync(targetService, duration);\n                break;\n            case \"unresponsive\":\n                await _serviceManager.MakeServiceUnresponsiveAsync(targetService, duration);\n                break;\n            case \"memoryleak\":\n                await _serviceManager.InjectMemoryLeakAsync(targetService, duration);\n                break;\n            default:\n                throw new ArgumentException($\"Unknown failure type: {failureType}\");\n        }\n\n        _logger.LogInformation(\"Applied {FailureType} failure to {Service} for {Duration}\", \n            failureType, targetService, duration);\n    }\n\n    private async Task RestoreServiceAsync()\n    {\n        // Restore service to normal operation\n        await Task.Delay(1000);\n\n        _logger.LogInformation(\"Service restored to normal operation\");\n    }\n}\n\npublic class DatabaseFailureExperiment : IChaosExperiment\n{\n    private readonly ChaosMethod _method;\n    private readonly ILogger&lt;DatabaseFailureExperiment&gt; _logger;\n    private readonly IDatabaseManager _databaseManager;\n\n    public DatabaseFailureExperiment(ChaosMethod method, IDatabaseManager databaseManager)\n    {\n        _method = method;\n        _databaseManager = databaseManager;\n        _logger = LogManager.GetCurrentClassLogger();\n    }\n\n    public async Task&lt;ChaosExecutionResult&gt; ExecuteAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Executing database failure experiment\");\n\n            var targetDatabase = _method.Parameters.GetValueOrDefault(\"targetDatabase\", \"OrdersDb\") as string;\n            var failureType = _method.Parameters.GetValueOrDefault(\"failureType\", \"connection\") as string;\n            var duration = _method.Duration;\n\n            // Apply database failure\n            await ApplyDatabaseFailureAsync(targetDatabase, failureType, duration);\n\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = true,\n                Duration = duration,\n                Details = $\"Applied {failureType} failure to {targetDatabase} for {duration}\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing database failure experiment\");\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    public async Task&lt;ChaosExecutionResult&gt; RollbackAsync()\n    {\n        try\n        {\n            _logger.LogInformation(\"Rolling back database failure experiment\");\n\n            // Restore database\n            await RestoreDatabaseAsync();\n\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = true,\n                Details = \"Database restored\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rolling back database failure experiment\");\n            return new ChaosExecutionResult\n            {\n                IsSuccessful = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    private async Task ApplyDatabaseFailureAsync(string targetDatabase, string failureType, TimeSpan duration)\n    {\n        switch (failureType.ToLower())\n        {\n            case \"connection\":\n                await _databaseManager.BreakConnectionsAsync(targetDatabase, duration);\n                break;\n            case \"slow\":\n                await _databaseManager.SlowDownQueriesAsync(targetDatabase, duration);\n                break;\n            case \"timeout\":\n                await _databaseManager.InjectTimeoutsAsync(targetDatabase, duration);\n                break;\n            case \"deadlock\":\n                await _databaseManager.InjectDeadlocksAsync(targetDatabase, duration);\n                break;\n            default:\n                throw new ArgumentException($\"Unknown failure type: {failureType}\");\n        }\n\n        _logger.LogInformation(\"Applied {FailureType} failure to {Database} for {Duration}\", \n            failureType, targetDatabase, duration);\n    }\n\n    private async Task RestoreDatabaseAsync()\n    {\n        // Restore database to normal operation\n        await Task.Delay(1000);\n\n        _logger.LogInformation(\"Database restored to normal operation\");\n    }\n}\n\npublic interface IServiceManager\n{\n    Task CrashServiceAsync(string serviceName);\n    Task SlowDownServiceAsync(string serviceName, TimeSpan duration);\n    Task MakeServiceUnresponsiveAsync(string serviceName, TimeSpan duration);\n    Task InjectMemoryLeakAsync(string serviceName, TimeSpan duration);\n}\n\npublic interface IDatabaseManager\n{\n    Task BreakConnectionsAsync(string databaseName, TimeSpan duration);\n    Task SlowDownQueriesAsync(string databaseName, TimeSpan duration);\n    Task InjectTimeoutsAsync(string databaseName, TimeSpan duration);\n    Task InjectDeadlocksAsync(string databaseName, TimeSpan duration);\n}\n\npublic class ChaosAnalysisResult\n{\n    public string ExperimentId { get; set; }\n    public DateTime ExecutedAt { get; set; }\n    public TimeSpan ExecutionDuration { get; set; }\n    public SteadyStateMetrics SteadyStateBefore { get; set; }\n    public SteadyStateMetrics SteadyStateAfter { get; set; }\n    public SteadyStateAnalysis SteadyStateAnalysis { get; set; }\n    public bool IsSuccessful { get; set; }\n    public List&lt;string&gt; Recommendations { get; set; } = new();\n    public string Error { get; set; }\n}\n\npublic class SteadyStateAnalysis\n{\n    public double ResponseTimeChange { get; set; }\n    public double ErrorRateChange { get; set; }\n    public double ThroughputChange { get; set; }\n    public bool IsWithinAcceptableRange { get; set; }\n}\n\npublic class SteadyStateMetrics\n{\n    public double AverageResponseTime { get; set; }\n    public double ErrorRate { get; set; }\n    public double Throughput { get; set; }\n    public DateTime RecordedAt { get; set; }\n}\n\npublic class ChaosExperimentResult\n{\n    public string ExperimentId { get; set; }\n    public ChaosAnalysisResult Analysis { get; set; }\n    public DateTime CreatedAt { get; set; }\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/chaos-engineering/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/testing-strategies/chaos-engineering/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Chaos Engineering nedir?</li> <li> <p>Cevap: Production sistemlerinde kontroll\u00fc failure'lar\u0131 tetikleyerek resilience test etme.</p> </li> <li> <p>Steady State nedir?</p> </li> <li> <p>Cevap: Sistemin normal \u00e7al\u0131\u015fma durumunda g\u00f6sterdi\u011fi metrikler.</p> </li> <li> <p>Chaos Experiment nedir?</p> </li> <li> <p>Cevap: Belirli failure senaryolar\u0131n\u0131 test eden kontroll\u00fc deneyler.</p> </li> <li> <p>Chaos Engineering ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: System reliability, fault tolerance, disaster recovery testing.</p> </li> <li> <p>Chaos Monkey nedir?</p> </li> <li>Cevap: Netflix'in chaos engineering tool'u, random failure'lar\u0131 tetikler.</li> </ol>"},{"location":"mid-level/testing-strategies/chaos-engineering/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Chaos experiment nas\u0131l tasarlan\u0131r?</li> <li> <p>Cevap: Hypothesis, steady state, method, rollback strategy.</p> </li> <li> <p>Failure injection nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Network latency, service failure, database failure, resource exhaustion.</p> </li> <li> <p>Steady state nas\u0131l \u00f6l\u00e7\u00fcl\u00fcr?</p> </li> <li> <p>Cevap: Response time, error rate, throughput, availability metrics.</p> </li> <li> <p>Chaos engineering CI/CD'de nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Automated chaos testing, resilience validation, deployment safety.</p> </li> <li> <p>Chaos engineering risk'leri nas\u0131l minimize edilir?</p> </li> <li>Cevap: Controlled experiments, rollback strategies, monitoring, gradual rollout.</li> </ol>"},{"location":"mid-level/testing-strategies/chaos-engineering/#best-practices","title":"Best Practices","text":"<ol> <li>Experiment Design</li> <li>Clear hypothesis tan\u0131mlay\u0131n</li> <li>Steady state metrics belirleyin</li> <li>Controlled failure scenarios tasarlay\u0131n</li> <li> <p>Rollback strategies implement edin</p> </li> <li> <p>Execution Strategy</p> </li> <li>Production'da dikkatli olun</li> <li>Gradual rollout yap\u0131n</li> <li>Comprehensive monitoring ekleyin</li> <li> <p>Fast rollback sa\u011flay\u0131n</p> </li> <li> <p>Monitoring &amp; Analysis</p> </li> <li>Real-time metrics collect edin</li> <li>Alerting implement edin</li> <li>Post-experiment analysis yap\u0131n</li> <li> <p>Continuous improvement sa\u011flay\u0131n</p> </li> <li> <p>Team Collaboration</p> </li> <li>Cross-team communication sa\u011flay\u0131n</li> <li>Experiment planning yap\u0131n</li> <li>Results sharing implement edin</li> <li> <p>Knowledge transfer yap\u0131n</p> </li> <li> <p>Safety &amp; Compliance</p> </li> <li>Business impact minimize edin</li> <li>Compliance requirements follow edin</li> <li>Risk assessment yap\u0131n</li> <li>Emergency procedures tan\u0131mlay\u0131n</li> </ol>"},{"location":"mid-level/testing-strategies/chaos-engineering/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Chaos Engineering</li> <li>Netflix Chaos Monkey</li> <li>Chaos Engineering Tools</li> <li>Chaos Engineering Best Practices</li> <li>.NET Resilience</li> </ul>"},{"location":"mid-level/testing-strategies/contract-testing/","title":"Contract Testing","text":""},{"location":"mid-level/testing-strategies/contract-testing/#giris","title":"Giri\u015f","text":"<p>Contract Testing, microservices architecture'da servisler aras\u0131 API contract'lar\u0131n\u0131n tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flayan testing yakla\u015f\u0131m\u0131d\u0131r. Mid-level geli\u015ftiriciler i\u00e7in contract testing'i anlamak, service integration, API compatibility ve deployment safety i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, Pact.NET, contract definition, consumer-driven testing ve provider verification konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/testing-strategies/contract-testing/#pactnet-implementation","title":"Pact.NET Implementation","text":""},{"location":"mid-level/testing-strategies/contract-testing/#1-consumer-contract-testing","title":"1. Consumer Contract Testing","text":"<p>API consumer'lar\u0131 i\u00e7in contract testing implementasyonu.</p> <pre><code>public class OrderServiceContractTests\n{\n    private readonly IPactBuilderV3 _pactBuilder;\n    private readonly List&lt;object&gt; _pacts;\n\n    public OrderServiceContractTests()\n    {\n        var config = new PactConfig\n        {\n            PactDir = Path.Join(\"..\", \"..\", \"..\", \"pacts\"),\n            DefaultJsonSettings = new JsonSerializerSettings\n            {\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\n            }\n        };\n\n        _pactBuilder = Pact.V3(\"OrderService\", \"PaymentService\", config);\n        _pacts = new List&lt;object&gt;();\n    }\n\n    [Fact]\n    public async Task ProcessPayment_WithValidOrder_ShouldReturnSuccess()\n    {\n        // Arrange\n        var orderId = Guid.NewGuid();\n        var amount = 150.00m;\n\n        var expectedRequest = new PaymentRequest\n        {\n            OrderId = orderId,\n            Amount = amount,\n            Currency = \"USD\",\n            PaymentMethod = \"CreditCard\"\n        };\n\n        var expectedResponse = new PaymentResponse\n        {\n            PaymentId = Guid.NewGuid(),\n            Status = \"Success\",\n            TransactionId = \"TXN123456\",\n            ProcessedAt = DateTime.UtcNow\n        };\n\n        _pactBuilder\n            .UponReceiving(\"A valid payment request\")\n            .Given(\"Payment service is available\")\n            .WithRequest(HttpMethod.Post, \"/api/payments\")\n            .WithJsonBody(expectedRequest)\n            .WillRespond()\n            .WithStatus(HttpStatusCode.OK)\n            .WithJsonBody(expectedResponse);\n\n        var pact = _pactBuilder.Build();\n        _pacts.Add(pact);\n\n        // Act\n        using var client = new HttpClient { BaseAddress = new Uri(pact.MockServerUri) };\n        var response = await client.PostAsJsonAsync(\"/api/payments\", expectedRequest);\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\n        var responseContent = await response.Content.ReadFromJsonAsync&lt;PaymentResponse&gt;();\n        responseContent.Should().NotBeNull();\n        responseContent.Status.Should().Be(\"Success\");\n\n        pact.Verify();\n    }\n\n    [Fact]\n    public async Task ProcessPayment_WithInvalidOrder_ShouldReturnBadRequest()\n    {\n        // Arrange\n        var invalidRequest = new PaymentRequest\n        {\n            OrderId = Guid.Empty,\n            Amount = -100.00m,\n            Currency = \"\",\n            PaymentMethod = \"\"\n        };\n\n        var expectedError = new ErrorResponse\n        {\n            Error = \"Validation failed\",\n            Details = new List&lt;string&gt; { \"OrderId cannot be empty\", \"Amount must be positive\", \"Currency is required\" }\n        };\n\n        _pactBuilder\n            .UponReceiving(\"An invalid payment request\")\n            .Given(\"Payment service validates input\")\n            .WithRequest(HttpMethod.Post, \"/api/payments\")\n            .WithJsonBody(invalidRequest)\n            .WillRespond()\n            .WithStatus(HttpStatusCode.BadRequest)\n            .WithJsonBody(expectedError);\n\n        var pact = _pactBuilder.Build();\n        _pacts.Add(pact);\n\n        // Act\n        using var client = new HttpClient { BaseAddress = new Uri(pact.MockServerUri) };\n        var response = await client.PostAsJsonAsync(\"/api/payments\", invalidRequest);\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n        var errorContent = await response.Content.ReadFromJsonAsync&lt;ErrorResponse&gt;();\n        errorContent.Should().NotBeNull();\n        errorContent.Error.Should().Be(\"Validation failed\");\n\n        pact.Verify();\n    }\n\n    [Fact]\n    public async Task GetPaymentStatus_WithValidPaymentId_ShouldReturnStatus()\n    {\n        // Arrange\n        var paymentId = Guid.NewGuid();\n        var expectedResponse = new PaymentStatusResponse\n        {\n            PaymentId = paymentId,\n            Status = \"Completed\",\n            LastUpdated = DateTime.UtcNow,\n            ProcessingTime = TimeSpan.FromSeconds(2.5)\n        };\n\n        _pactBuilder\n            .UponReceiving(\"A request for payment status\")\n            .Given($\"Payment {paymentId} exists\")\n            .WithRequest(HttpMethod.Get, $\"/api/payments/{paymentId}/status\")\n            .WillRespond()\n            .WithStatus(HttpStatusCode.OK)\n            .WithJsonBody(expectedResponse);\n\n        var pact = _pactBuilder.Build();\n        _pacts.Add(pact);\n\n        // Act\n        using var client = new HttpClient { BaseAddress = new Uri(pact.MockServerUri) };\n        var response = await client.GetAsync($\"/api/payments/{paymentId}/status\");\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\n        var statusResponse = await response.Content.ReadFromJsonAsync&lt;PaymentStatusResponse&gt;();\n        statusResponse.Should().NotBeNull();\n        statusResponse.PaymentId.Should().Be(paymentId);\n\n        pact.Verify();\n    }\n\n    public void Dispose()\n    {\n        foreach (var pact in _pacts)\n        {\n            pact.Dispose();\n        }\n    }\n}\n\npublic class PaymentRequest\n{\n    public Guid OrderId { get; set; }\n    public decimal Amount { get; set; }\n    public string Currency { get; set; }\n    public string PaymentMethod { get; set; }\n}\n\npublic class PaymentResponse\n{\n    public Guid PaymentId { get; set; }\n    public string Status { get; set; }\n    public string TransactionId { get; set; }\n    public DateTime ProcessedAt { get; set; }\n}\n\npublic class PaymentStatusResponse\n{\n    public Guid PaymentId { get; set; }\n    public string Status { get; set; }\n    public DateTime LastUpdated { get; set; }\n    public TimeSpan ProcessingTime { get; set; }\n}\n\npublic class ErrorResponse\n{\n    public string Error { get; set; }\n    public List&lt;string&gt; Details { get; set; }\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/contract-testing/#2-provider-contract-testing","title":"2. Provider Contract Testing","text":"<p>API provider'lar\u0131 i\u00e7in contract testing implementasyonu.</p> <pre><code>public class PaymentServiceProviderTests\n{\n    private readonly WebApplicationFactory&lt;Program&gt; _factory;\n    private readonly PactVerifier _pactVerifier;\n\n    public PaymentServiceProviderTests()\n    {\n        _factory = new WebApplicationFactory&lt;Program&gt;()\n            .WithWebHostBuilder(builder =&gt;\n            {\n                builder.ConfigureServices(services =&gt;\n                {\n                    // Configure test database\n                    services.RemoveAll&lt;DbContextOptions&lt;PaymentDbContext&gt;&gt;();\n                    services.AddDbContext&lt;PaymentDbContext&gt;(options =&gt;\n                    {\n                        options.UseInMemoryDatabase(\"TestDb\");\n                    });\n\n                    // Configure test services\n                    services.AddScoped&lt;IPaymentProcessor, MockPaymentProcessor&gt;();\n                    services.AddScoped&lt;IPaymentValidator, PaymentValidator&gt;();\n                });\n            });\n\n        _pactVerifier = new PactVerifier(\"PaymentService\");\n    }\n\n    [Fact]\n    public async Task VerifyConsumerContracts()\n    {\n        // Arrange\n        var pactFiles = Directory.GetFiles(\"../../../pacts\", \"*.json\");\n\n        foreach (var pactFile in pactFiles)\n        {\n            var pactFileInfo = new FileInfo(pactFile);\n            var consumerName = pactFileInfo.Name.Split('-')[0];\n\n            // Act &amp; Assert\n            _pactVerifier\n                .ServiceProvider(\"PaymentService\", _factory.CreateClient())\n                .HonoursPactWith(consumerName)\n                .PactUri(pactFile)\n                .Verify();\n        }\n    }\n\n    [Fact]\n    public async Task VerifySpecificConsumerContract()\n    {\n        // Arrange\n        var consumerName = \"OrderService\";\n        var pactFile = $\"../../../pacts/{consumerName}-PaymentService.json\";\n\n        if (!File.Exists(pactFile))\n        {\n            throw new FileNotFoundException($\"Pact file not found: {pactFile}\");\n        }\n\n        // Act &amp; Assert\n        _pactVerifier\n            .ServiceProvider(\"PaymentService\", _factory.CreateClient())\n            .HonoursPactWith(consumerName)\n            .PactUri(pactFile)\n            .Verify();\n    }\n\n    [Fact]\n    public async Task VerifyContractWithCustomHeaders()\n    {\n        // Arrange\n        var consumerName = \"OrderService\";\n        var pactFile = $\"../../../pacts/{consumerName}-PaymentService.json\";\n\n        // Act &amp; Assert\n        _pactVerifier\n            .ServiceProvider(\"PaymentService\", _factory.CreateClient())\n            .HonoursPactWith(consumerName)\n            .PactUri(pactFile)\n            .WithRequestCustomisation(request =&gt;\n            {\n                request.Headers.Add(\"X-Test-Header\", \"TestValue\");\n                return request;\n            })\n            .Verify();\n    }\n\n    [Fact]\n    public async Task VerifyContractWithStateHandling()\n    {\n        // Arrange\n        var consumerName = \"OrderService\";\n        var pactFile = $\"../../../pacts/{consumerName}-PaymentService.json\";\n\n        // Act &amp; Assert\n        _pactVerifier\n            .ServiceProvider(\"PaymentService\", _factory.CreateClient())\n            .HonoursPactWith(consumerName)\n            .PactUri(pactFile)\n            .WithState(\"Payment service is available\", async () =&gt;\n            {\n                // Setup test data or service state\n                using var scope = _factory.Services.CreateScope();\n                var context = scope.ServiceProvider.GetRequiredService&lt;PaymentDbContext&gt;();\n\n                // Ensure database is clean and ready\n                context.Database.EnsureCreated();\n\n                return Task.CompletedTask;\n            })\n            .Verify();\n    }\n}\n\npublic class MockPaymentProcessor : IPaymentProcessor\n{\n    public async Task&lt;PaymentResult&gt; ProcessPaymentAsync(PaymentRequest request)\n    {\n        await Task.Delay(100); // Simulate processing time\n\n        if (request.Amount &lt;= 0)\n        {\n            return new PaymentResult\n            {\n                Success = false,\n                ErrorMessage = \"Amount must be positive\"\n            };\n        }\n\n        return new PaymentResult\n        {\n            Success = true,\n            PaymentId = Guid.NewGuid(),\n            TransactionId = $\"TXN{DateTime.UtcNow.Ticks}\",\n            ProcessedAt = DateTime.UtcNow\n        };\n    }\n}\n\npublic class PaymentValidator : IPaymentValidator\n{\n    public ValidationResult ValidatePayment(PaymentRequest request)\n    {\n        var errors = new List&lt;string&gt;();\n\n        if (request.OrderId == Guid.Empty)\n            errors.Add(\"OrderId cannot be empty\");\n\n        if (request.Amount &lt;= 0)\n            errors.Add(\"Amount must be positive\");\n\n        if (string.IsNullOrEmpty(request.Currency))\n            errors.Add(\"Currency is required\");\n\n        if (string.IsNullOrEmpty(request.PaymentMethod))\n            errors.Add(\"Payment method is required\");\n\n        return new ValidationResult\n        {\n            IsValid = !errors.Any(),\n            Errors = errors\n        };\n    }\n}\n\npublic interface IPaymentProcessor\n{\n    Task&lt;PaymentResult&gt; ProcessPaymentAsync(PaymentRequest request);\n}\n\npublic interface IPaymentValidator\n{\n    ValidationResult ValidatePayment(PaymentRequest request);\n}\n\npublic class PaymentResult\n{\n    public bool Success { get; set; }\n    public Guid PaymentId { get; set; }\n    public string TransactionId { get; set; }\n    public DateTime ProcessedAt { get; set; }\n    public string ErrorMessage { get; set; }\n}\n\npublic class ValidationResult\n{\n    public bool IsValid { get; set; }\n    public List&lt;string&gt; Errors { get; set; } = new();\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/contract-testing/#3-contract-testing-service","title":"3. Contract Testing Service","text":"<p>Contract testing'i y\u00f6neten servis.</p> <pre><code>public class ContractTestingService : IContractTestingService\n{\n    private readonly ILogger&lt;ContractTestingService&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private readonly string _pactBrokerUrl;\n    private readonly string _pactBrokerToken;\n\n    public ContractTestingService(ILogger&lt;ContractTestingService&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _pactBrokerUrl = _configuration[\"Pact:BrokerUrl\"] ?? \"http://localhost:9292\";\n        _pactBrokerToken = _configuration[\"Pact:BrokerToken\"];\n    }\n\n    public async Task&lt;bool&gt; PublishConsumerContractsAsync(string consumerName, string version)\n    {\n        try\n        {\n            _logger.LogInformation(\"Publishing consumer contracts for {ConsumerName} version {Version}\", \n                consumerName, version);\n\n            var pactFiles = Directory.GetFiles(\"pacts\", $\"{consumerName}-*.json\");\n\n            foreach (var pactFile in pactFiles)\n            {\n                await PublishPactFileAsync(pactFile, consumerName, version);\n            }\n\n            _logger.LogInformation(\"Successfully published {Count} contract(s) for {ConsumerName}\", \n                pactFiles.Length, consumerName);\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error publishing consumer contracts for {ConsumerName}\", consumerName);\n            return false;\n        }\n    }\n\n    public async Task&lt;bool&gt; VerifyProviderContractsAsync(string providerName, string version)\n    {\n        try\n        {\n            _logger.LogInformation(\"Verifying provider contracts for {ProviderName} version {Version}\", \n                providerName, version);\n\n            var verificationResult = await RunProviderVerificationAsync(providerName, version);\n\n            if (verificationResult.Success)\n            {\n                _logger.LogInformation(\"Provider verification completed successfully for {ProviderName}\", providerName);\n            }\n            else\n            {\n                _logger.LogWarning(\"Provider verification failed for {ProviderName}: {Error}\", \n                    providerName, verificationResult.Error);\n            }\n\n            return verificationResult.Success;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error verifying provider contracts for {ProviderName}\", providerName);\n            return false;\n        }\n    }\n\n    public async Task&lt;List&lt;ContractInfo&gt;&gt; GetContractInfoAsync()\n    {\n        try\n        {\n            var contracts = new List&lt;ContractInfo&gt;();\n\n            // Get consumer contracts\n            var consumerContracts = await GetConsumerContractsAsync();\n            contracts.AddRange(consumerContracts);\n\n            // Get provider contracts\n            var providerContracts = await GetProviderContractsAsync();\n            contracts.AddRange(providerContracts);\n\n            return contracts;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting contract information\");\n            return new List&lt;ContractInfo&gt;();\n        }\n    }\n\n    public async Task&lt;bool&gt; ValidateContractCompatibilityAsync(string consumerName, string providerName)\n    {\n        try\n        {\n            _logger.LogInformation(\"Validating contract compatibility between {ConsumerName} and {ProviderName}\", \n                consumerName, providerName);\n\n            var consumerPacts = await GetConsumerPactsAsync(consumerName);\n            var providerPacts = await GetProviderPactsAsync(providerName);\n\n            var compatibilityIssues = new List&lt;string&gt;();\n\n            foreach (var consumerPact in consumerPacts)\n            {\n                var providerPact = providerPacts.FirstOrDefault(p =&gt; p.Endpoint == consumerPact.Endpoint);\n\n                if (providerPact == null)\n                {\n                    compatibilityIssues.Add($\"Provider {providerName} does not support endpoint {consumerPact.Endpoint}\");\n                    continue;\n                }\n\n                var compatibilityResult = await ValidatePactCompatibilityAsync(consumerPact, providerPact);\n                if (!compatibilityResult.IsCompatible)\n                {\n                    compatibilityIssues.AddRange(compatibilityResult.Issues);\n                }\n            }\n\n            if (compatibilityIssues.Any())\n            {\n                _logger.LogWarning(\"Contract compatibility issues found: {Issues}\", \n                    string.Join(\", \", compatibilityIssues));\n                return false;\n            }\n\n            _logger.LogInformation(\"Contract compatibility validation passed for {ConsumerName} and {ProviderName}\", \n                consumerName, providerName);\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating contract compatibility\");\n            return false;\n        }\n    }\n\n    private async Task PublishPactFileAsync(string pactFile, string consumerName, string version)\n    {\n        try\n        {\n            var pactContent = await File.ReadAllTextAsync(pactFile);\n            var pactData = JsonSerializer.Deserialize&lt;JsonElement&gt;(pactContent);\n\n            var publishUrl = $\"{_pactBrokerUrl}/pacts/provider/{pactData.GetProperty(\"provider\").GetProperty(\"name\").GetString()}/consumer/{consumerName}/version/{version}\";\n\n            using var client = CreateHttpClient();\n            var content = new StringContent(pactContent, Encoding.UTF8, \"application/json\");\n\n            var response = await client.PutAsync(publishUrl, content);\n\n            if (!response.IsSuccessStatusCode)\n            {\n                var errorContent = await response.Content.ReadAsStringAsync();\n                throw new Exception($\"Failed to publish pact: {response.StatusCode}, Error: {errorContent}\");\n            }\n\n            _logger.LogDebug(\"Published pact file: {PactFile}\", pactFile);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error publishing pact file: {PactFile}\", pactFile);\n            throw;\n        }\n    }\n\n    private async Task&lt;VerificationResult&gt; RunProviderVerificationAsync(string providerName, string version)\n    {\n        try\n        {\n            var verificationUrl = $\"{_pactBrokerUrl}/pacts/provider/{providerName}/latest\";\n\n            using var client = CreateHttpClient();\n            var response = await client.GetAsync(verificationUrl);\n\n            if (!response.IsSuccessStatusCode)\n            {\n                return new VerificationResult\n                {\n                    Success = false,\n                    Error = $\"Failed to get verification URL: {response.StatusCode}\"\n                };\n            }\n\n            // In a real implementation, this would run the actual provider verification\n            // For now, return success\n            return new VerificationResult { Success = true };\n        }\n        catch (Exception ex)\n        {\n            return new VerificationResult\n            {\n                Success = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    private async Task&lt;List&lt;ContractInfo&gt;&gt; GetConsumerContractsAsync()\n    {\n        // Implementation to get consumer contract information\n        await Task.Delay(100);\n        return new List&lt;ContractInfo&gt;();\n    }\n\n    private async Task&lt;List&lt;ContractInfo&gt;&gt; GetProviderContractsAsync()\n    {\n        // Implementation to get provider contract information\n        await Task.Delay(100);\n        return new List&lt;ContractInfo&gt;();\n    }\n\n    private async Task&lt;List&lt;PactInfo&gt;&gt; GetConsumerPactsAsync(string consumerName)\n    {\n        // Implementation to get consumer pact information\n        await Task.Delay(100);\n        return new List&lt;PactInfo&gt;();\n    }\n\n    private async Task&lt;List&lt;PactInfo&gt;&gt; GetProviderPactsAsync(string providerName)\n    {\n        // Implementation to get provider pact information\n        await Task.Delay(100);\n        return new List&lt;PactInfo&gt;();\n    }\n\n    private async Task&lt;CompatibilityResult&gt; ValidatePactCompatibilityAsync(PactInfo consumerPact, PactInfo providerPact)\n    {\n        // Implementation to validate pact compatibility\n        await Task.Delay(100);\n        return new CompatibilityResult { IsCompatible = true };\n    }\n\n    private HttpClient CreateHttpClient()\n    {\n        var client = new HttpClient();\n\n        if (!string.IsNullOrEmpty(_pactBrokerToken))\n        {\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", _pactBrokerToken);\n        }\n\n        return client;\n    }\n}\n\npublic interface IContractTestingService\n{\n    Task&lt;bool&gt; PublishConsumerContractsAsync(string consumerName, string version);\n    Task&lt;bool&gt; VerifyProviderContractsAsync(string providerName, string version);\n    Task&lt;List&lt;ContractInfo&gt;&gt; GetContractInfoAsync();\n    Task&lt;bool&gt; ValidateContractCompatibilityAsync(string consumerName, string providerName);\n}\n\npublic class ContractInfo\n{\n    public string Name { get; set; }\n    public string Type { get; set; }\n    public string Version { get; set; }\n    public DateTime LastUpdated { get; set; }\n    public string Status { get; set; }\n}\n\npublic class PactInfo\n{\n    public string Endpoint { get; set; }\n    public string Method { get; set; }\n    public object Request { get; set; }\n    public object Response { get; set; }\n}\n\npublic class VerificationResult\n{\n    public bool Success { get; set; }\n    public string Error { get; set; }\n}\n\npublic class CompatibilityResult\n{\n    public bool IsCompatible { get; set; }\n    public List&lt;string&gt; Issues { get; set; } = new();\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/contract-testing/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/testing-strategies/contract-testing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Contract Testing nedir?</li> <li> <p>Cevap: API contract'lar\u0131n\u0131n tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flayan testing yakla\u015f\u0131m\u0131.</p> </li> <li> <p>Consumer-Driven Testing nedir?</p> </li> <li> <p>Cevap: Consumer'lar\u0131n bekledi\u011fi API behavior'lar\u0131n\u0131 test eden yakla\u015f\u0131m.</p> </li> <li> <p>Pact nedir?</p> </li> <li> <p>Cevap: Consumer ve provider aras\u0131ndaki contract'\u0131 tan\u0131mlayan format.</p> </li> <li> <p>Contract testing ne zaman kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Microservices, API integration, deployment safety.</p> </li> <li> <p>Pact Broker nedir?</p> </li> <li>Cevap: Pact contract'lar\u0131n\u0131 saklayan ve y\u00f6neten merkezi sistem.</li> </ol>"},{"location":"mid-level/testing-strategies/contract-testing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Pact.NET nas\u0131l implement edilir?</li> <li> <p>Cevap: Consumer tests, provider verification, pact publishing.</p> </li> <li> <p>Contract validation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Request/response matching, schema validation, state handling.</p> </li> <li> <p>Provider verification nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Pact broker integration, automated testing, compatibility checking.</p> </li> <li> <p>Contract testing CI/CD'de nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Pre-deployment validation, contract compatibility checks.</p> </li> <li> <p>Contract testing performance nas\u0131l optimize edilir?</p> </li> <li>Cevap: Parallel execution, caching, selective testing.</li> </ol>"},{"location":"mid-level/testing-strategies/contract-testing/#best-practices","title":"Best Practices","text":"<ol> <li>Contract Design</li> <li>Clear API specifications yaz\u0131n</li> <li>Versioning strategy belirleyin</li> <li>Backward compatibility sa\u011flay\u0131n</li> <li> <p>Documentation ekleyin</p> </li> <li> <p>Testing Strategy</p> </li> <li>Consumer-driven approach kullan\u0131n</li> <li>Comprehensive scenarios test edin</li> <li>Edge cases cover edin</li> <li> <p>Performance testing ekleyin</p> </li> <li> <p>Integration &amp; Deployment</p> </li> <li>CI/CD pipeline entegre edin</li> <li>Pre-deployment validation yap\u0131n</li> <li>Contract compatibility check edin</li> <li> <p>Rollback procedures tan\u0131mlay\u0131n</p> </li> <li> <p>Monitoring &amp; Maintenance</p> </li> <li>Contract changes track edin</li> <li>Breaking changes monitor edin</li> <li>Performance metrics collect edin</li> <li> <p>Continuous improvement sa\u011flay\u0131n</p> </li> <li> <p>Team Collaboration</p> </li> <li>Consumer-provider communication sa\u011flay\u0131n</li> <li>Contract review process implement edin</li> <li>Change management procedures tan\u0131mlay\u0131n</li> <li>Knowledge sharing yap\u0131n</li> </ol>"},{"location":"mid-level/testing-strategies/contract-testing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Pact.NET</li> <li>Contract Testing</li> <li>Consumer-Driven Contracts</li> <li>Pact Broker</li> <li>API Testing Strategies</li> </ul>"},{"location":"mid-level/testing-strategies/performance-testing/","title":"Performance Testing","text":""},{"location":"mid-level/testing-strategies/performance-testing/#giris","title":"Giri\u015f","text":"<p>Performance Testing, uygulaman\u0131n performans karakteristiklerini \u00f6l\u00e7en ve analiz eden testing yakla\u015f\u0131m\u0131d\u0131r. Mid-level geli\u015ftiriciler i\u00e7in performance testing'i anlamak, application optimization, capacity planning ve user experience i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, load testing, stress testing, benchmark testing ve performance monitoring konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/testing-strategies/performance-testing/#nbomber-implementation","title":"NBomber Implementation","text":""},{"location":"mid-level/testing-strategies/performance-testing/#1-load-testing","title":"1. Load Testing","text":"<p>Y\u00fck testi implementasyonu.</p> <pre><code>public class OrderServiceLoadTests\n{\n    [Fact]\n    public async Task CreateOrder_LoadTest()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Create Order Load Test\", async context =&gt;\n        {\n            var orderData = new CreateOrderRequest\n            {\n                CustomerId = Guid.NewGuid(),\n                Items = new List&lt;OrderItem&gt;\n                {\n                    new OrderItem { ProductId = Guid.NewGuid(), Quantity = Random.Shared.Next(1, 10), Price = Random.Shared.Next(10, 100) }\n                },\n                ShippingAddress = new Address\n                {\n                    Street = \"Test Street\",\n                    City = \"Test City\",\n                    Country = \"Test Country\",\n                    PostalCode = \"12345\"\n                }\n            };\n\n            var httpClient = context.GetHttpClient();\n            var request = HttpRequestMessage.Create(HttpMethod.Post, \"/api/orders\", \n                JsonContent.Create(orderData));\n\n            var response = await httpClient.SendAsync(request);\n\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\n        })\n        .WithLoadSimulations(\n            Simulation.Inject(rate: 100, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(5))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n\n    [Fact]\n    public async Task GetOrder_LoadTest()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Get Order Load Test\", async context =&gt;\n        {\n            var orderId = Guid.NewGuid();\n            var httpClient = context.GetHttpClient();\n            var request = HttpRequestMessage.Create(HttpMethod.Get, $\"/api/orders/{orderId}\");\n\n            var response = await httpClient.SendAsync(request);\n\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\n        })\n        .WithLoadSimulations(\n            Simulation.Inject(rate: 200, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(5))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n\n    [Fact]\n    public async Task SearchOrders_LoadTest()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Search Orders Load Test\", async context =&gt;\n        {\n            var searchTerm = $\"customer_{Random.Shared.Next(1, 1000)}\";\n            var httpClient = context.GetHttpClient();\n            var request = HttpRequestMessage.Create(HttpMethod.Get, $\"/api/orders/search?q={searchTerm}\");\n\n            var response = await httpClient.SendAsync(request);\n\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\n        })\n        .WithLoadSimulations(\n            Simulation.Inject(rate: 150, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(5))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n\n    [Fact]\n    public async Task UpdateOrder_LoadTest()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Update Order Load Test\", async context =&gt;\n        {\n            var orderId = Guid.NewGuid();\n            var updateData = new UpdateOrderRequest\n            {\n                Status = \"Processing\",\n                Notes = $\"Updated at {DateTime.UtcNow}\"\n            };\n\n            var httpClient = context.GetHttpClient();\n            var request = HttpRequestMessage.Create(HttpMethod.Put, $\"/api/orders/{orderId}\", \n                JsonContent.Create(updateData));\n\n            var response = await httpClient.SendAsync(request);\n\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\n        })\n        .WithLoadSimulations(\n            Simulation.Inject(rate: 80, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(5))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n}\n\npublic class CreateOrderRequest\n{\n    public Guid CustomerId { get; set; }\n    public List&lt;OrderItem&gt; Items { get; set; } = new();\n    public Address ShippingAddress { get; set; }\n}\n\npublic class OrderItem\n{\n    public Guid ProductId { get; set; }\n    public int Quantity { get; set; }\n    public decimal Price { get; set; }\n}\n\npublic class Address\n{\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string Country { get; set; }\n    public string PostalCode { get; set; }\n}\n\npublic class UpdateOrderRequest\n{\n    public string Status { get; set; }\n    public string Notes { get; set; }\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/performance-testing/#2-stress-testing","title":"2. Stress Testing","text":"<p>Stres testi implementasyonu.</p> <pre><code>public class OrderServiceStressTests\n{\n    [Fact]\n    public async Task CreateOrder_StressTest()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Create Order Stress Test\", async context =&gt;\n        {\n            var orderData = new CreateOrderRequest\n            {\n                CustomerId = Guid.NewGuid(),\n                Items = Enumerable.Range(1, Random.Shared.Next(1, 20))\n                    .Select(i =&gt; new OrderItem\n                    {\n                        ProductId = Guid.NewGuid(),\n                        Quantity = Random.Shared.Next(1, 50),\n                        Price = Random.Shared.Next(1, 1000)\n                    })\n                    .ToList(),\n                ShippingAddress = new Address\n                {\n                    Street = \"Test Street\",\n                    City = \"Test City\",\n                    Country = \"Test Country\",\n                    PostalCode = \"12345\"\n                }\n            };\n\n            var httpClient = context.GetHttpClient();\n            var request = HttpRequestMessage.Create(HttpMethod.Post, \"/api/orders\", \n                JsonContent.Create(orderData));\n\n            var response = await httpClient.SendAsync(request);\n\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\n        })\n        .WithLoadSimulations(\n            Simulation.Stress(\n                rate: 50,\n                interval: TimeSpan.FromSeconds(1),\n                during: TimeSpan.FromMinutes(10),\n                copies: 10,\n                rampUp: TimeSpan.FromMinutes(2)\n            )\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n\n    [Fact]\n    public async Task DatabaseConnection_StressTest()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Database Connection Stress Test\", async context =&gt;\n        {\n            try\n            {\n                using var scope = context.GetServiceProvider().CreateScope();\n                var dbContext = scope.ServiceProvider.GetRequiredService&lt;OrderDbContext&gt;();\n\n                // Perform multiple database operations\n                var orders = await dbContext.Orders\n                    .Where(o =&gt; o.CreatedAt &gt; DateTime.UtcNow.AddDays(-30))\n                    .Take(100)\n                    .ToListAsync();\n\n                var customers = await dbContext.Customers\n                    .Where(c =&gt; c.IsActive)\n                    .Take(50)\n                    .ToListAsync();\n\n                var products = await dbContext.Products\n                    .Where(p =&gt; p.Price &gt; 0)\n                    .Take(200)\n                    .ToListAsync();\n\n                return Response.Ok();\n            }\n            catch (Exception)\n            {\n                return Response.Fail();\n            }\n        })\n        .WithLoadSimulations(\n            Simulation.Stress(\n                rate: 100,\n                interval: TimeSpan.FromSeconds(1),\n                during: TimeSpan.FromMinutes(15),\n                copies: 20,\n                rampUp: TimeSpan.FromMinutes(3)\n            )\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n\n    [Fact]\n    public async Task MemoryUsage_StressTest()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Memory Usage Stress Test\", async context =&gt;\n        {\n            try\n            {\n                // Simulate memory-intensive operations\n                var largeData = new List&lt;byte[]&gt;();\n\n                for (int i = 0; i &lt; 1000; i++)\n                {\n                    largeData.Add(new byte[1024 * 1024]); // 1MB chunks\n                }\n\n                // Perform some processing\n                var processedData = largeData\n                    .SelectMany(bytes =&gt; bytes)\n                    .Where(b =&gt; b &gt; 0)\n                    .ToArray();\n\n                // Clear memory\n                largeData.Clear();\n                largeData = null;\n\n                GC.Collect();\n                GC.WaitForPendingFinalizers();\n\n                return Response.Ok();\n            }\n            catch (Exception)\n            {\n                return Response.Fail();\n            }\n        })\n        .WithLoadSimulations(\n            Simulation.Stress(\n                rate: 30,\n                interval: TimeSpan.FromSeconds(2),\n                during: TimeSpan.FromMinutes(20),\n                copies: 5,\n                rampUp: TimeSpan.FromMinutes(5)\n            )\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/performance-testing/#3-benchmark-testing","title":"3. Benchmark Testing","text":"<p>Benchmark testi implementasyonu.</p> <pre><code>public class OrderServiceBenchmarkTests\n{\n    [Fact]\n    public async Task CreateOrder_Benchmark()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Create Order Benchmark\", async context =&gt;\n        {\n            var orderData = new CreateOrderRequest\n            {\n                CustomerId = Guid.NewGuid(),\n                Items = new List&lt;OrderItem&gt;\n                {\n                    new OrderItem { ProductId = Guid.NewGuid(), Quantity = 1, Price = 100 }\n                },\n                ShippingAddress = new Address\n                {\n                    Street = \"Benchmark Street\",\n                    City = \"Benchmark City\",\n                    Country = \"Benchmark Country\",\n                    PostalCode = \"12345\"\n                }\n            };\n\n            var httpClient = context.GetHttpClient();\n            var request = HttpRequestMessage.Create(HttpMethod.Post, \"/api/orders\", \n                JsonContent.Create(orderData));\n\n            var stopwatch = Stopwatch.StartNew();\n            var response = await httpClient.SendAsync(request);\n            stopwatch.Stop();\n\n            context.Logger.Information($\"Create Order took: {stopwatch.ElapsedMilliseconds}ms\");\n\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\n        })\n        .WithLoadSimulations(\n            Simulation.Inject(rate: 1000, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(1))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n\n    [Fact]\n    public async Task DatabaseQuery_Benchmark()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Database Query Benchmark\", async context =&gt;\n        {\n            try\n            {\n                using var scope = context.GetServiceProvider().CreateScope();\n                var dbContext = scope.ServiceProvider.GetRequiredService&lt;OrderDbContext&gt;();\n\n                var stopwatch = Stopwatch.StartNew();\n\n                // Benchmark different query types\n                var simpleQuery = await dbContext.Orders\n                    .Where(o =&gt; o.Status == \"Active\")\n                    .CountAsync();\n\n                var complexQuery = await dbContext.Orders\n                    .Include(o =&gt; o.Customer)\n                    .Include(o =&gt; o.Items)\n                    .ThenInclude(i =&gt; i.Product)\n                    .Where(o =&gt; o.CreatedAt &gt; DateTime.UtcNow.AddDays(-7))\n                    .OrderByDescending(o =&gt; o.CreatedAt)\n                    .Take(100)\n                    .ToListAsync();\n\n                var aggregationQuery = await dbContext.Orders\n                    .Where(o =&gt; o.CreatedAt &gt; DateTime.UtcNow.AddDays(-30))\n                    .GroupBy(o =&gt; o.Status)\n                    .Select(g =&gt; new { Status = g.Key, Count = g.Count(), TotalAmount = g.Sum(o =&gt; o.TotalAmount) })\n                    .ToListAsync();\n\n                stopwatch.Stop();\n\n                context.Logger.Information($\"Database queries took: {stopwatch.ElapsedMilliseconds}ms\");\n                context.Logger.Information($\"Simple query result: {simpleQuery}\");\n                context.Logger.Information($\"Complex query result: {complexQuery.Count} orders\");\n                context.Logger.Information($\"Aggregation query result: {aggregationQuery.Count} groups\");\n\n                return Response.Ok();\n            }\n            catch (Exception ex)\n            {\n                context.Logger.Error(ex, \"Database benchmark failed\");\n                return Response.Fail();\n            }\n        })\n        .WithLoadSimulations(\n            Simulation.Inject(rate: 500, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(2))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n\n    [Fact]\n    public async Task Caching_Benchmark()\n    {\n        var scenario = ScenarioBuilder.CreateScenario(\"Caching Benchmark\", async context =&gt;\n        {\n            try\n            {\n                var cache = context.GetServiceProvider().GetRequiredService&lt;IDistributedCache&gt;();\n                var cacheKey = $\"benchmark_{Random.Shared.Next(1, 1000)}\";\n                var testData = new byte[1024]; // 1KB test data\n\n                var stopwatch = Stopwatch.StartNew();\n\n                // Benchmark cache operations\n                await cache.SetAsync(cacheKey, testData, new DistributedCacheEntryOptions\n                {\n                    AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5)\n                });\n\n                var retrievedData = await cache.GetAsync(cacheKey);\n                var cacheHit = retrievedData != null;\n\n                if (cacheHit)\n                {\n                    await cache.RemoveAsync(cacheKey);\n                }\n\n                stopwatch.Stop();\n\n                context.Logger.Information($\"Cache operations took: {stopwatch.ElapsedMilliseconds}ms, Cache hit: {cacheHit}\");\n\n                return Response.Ok();\n            }\n            catch (Exception ex)\n            {\n                context.Logger.Error(ex, \"Cache benchmark failed\");\n                return Response.Fail();\n            }\n        })\n        .WithLoadSimulations(\n            Simulation.Inject(rate: 2000, interval: TimeSpan.FromSeconds(1), during: TimeSpan.FromMinutes(1))\n        );\n\n        NBomberRunner\n            .RegisterScenarios(scenario)\n            .Run();\n    }\n}\n\npublic class PerformanceMetrics\n{\n    public string Operation { get; set; }\n    public long MinResponseTime { get; set; }\n    public long MaxResponseTime { get; set; }\n    public long AverageResponseTime { get; set; }\n    public long P95ResponseTime { get; set; }\n    public long P99ResponseTime { get; set; }\n    public int TotalRequests { get; set; }\n    public int SuccessfulRequests { get; set; }\n    public int FailedRequests { get; set; }\n    public double SuccessRate =&gt; TotalRequests &gt; 0 ? (double)SuccessfulRequests / TotalRequests * 100 : 0;\n    public double RequestsPerSecond =&gt; TotalRequests &gt; 0 ? (double)TotalRequests / (MaxResponseTime - MinResponseTime) * 1000 : 0;\n}\n\npublic class PerformanceTestConfiguration\n{\n    public int ConcurrentUsers { get; set; } = 100;\n    public TimeSpan TestDuration { get; set; } = TimeSpan.FromMinutes(10);\n    public TimeSpan RampUpTime { get; set; } = TimeSpan.FromMinutes(2);\n    public int RequestRate { get; set; } = 1000;\n    public TimeSpan RequestInterval { get; set; } = TimeSpan.FromSeconds(1);\n    public bool EnableMetrics { get; set; } = true;\n    public bool EnableLogging { get; set; } = true;\n    public string MetricsEndpoint { get; set; } = \"http://localhost:9090\";\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/performance-testing/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/testing-strategies/performance-testing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Performance Testing nedir?</li> <li> <p>Cevap: Uygulaman\u0131n performans karakteristiklerini \u00f6l\u00e7en testing yakla\u015f\u0131m\u0131.</p> </li> <li> <p>Load Testing nedir?</p> </li> <li> <p>Cevap: Normal y\u00fck alt\u0131nda sistem performans\u0131n\u0131 test etme.</p> </li> <li> <p>Stress Testing nedir?</p> </li> <li> <p>Cevap: Sistem limitlerini a\u015fan y\u00fck alt\u0131nda davran\u0131\u015f\u0131 test etme.</p> </li> <li> <p>Benchmark Testing nedir?</p> </li> <li> <p>Cevap: Belirli operasyonlar\u0131n performans\u0131n\u0131 \u00f6l\u00e7me ve kar\u015f\u0131la\u015ft\u0131rma.</p> </li> <li> <p>Performance testing ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Performance optimization, capacity planning, SLA validation.</li> </ol>"},{"location":"mid-level/testing-strategies/performance-testing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>NBomber nas\u0131l implement edilir?</li> <li> <p>Cevap: ScenarioBuilder, Simulation, NBomberRunner, Response handling.</p> </li> <li> <p>Load simulation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Inject, Stress, RampUp, Concurrent users, Request rate.</p> </li> <li> <p>Performance metrics nas\u0131l toplan\u0131r?</p> </li> <li> <p>Cevap: Response time, Throughput, Error rate, Resource usage.</p> </li> <li> <p>Performance testing CI/CD'de nas\u0131l kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Automated testing, Performance regression detection, SLA monitoring.</p> </li> <li> <p>Performance testing performance nas\u0131l optimize edilir?</p> </li> <li>Cevap: Efficient scenarios, Resource management, Metrics collection, Result analysis.</li> </ol>"},{"location":"mid-level/testing-strategies/performance-testing/#best-practices","title":"Best Practices","text":"<ol> <li>Test Design</li> <li>Realistic scenarios tasarlay\u0131n</li> <li>Appropriate load levels belirleyin</li> <li>Clear success criteria tan\u0131mlay\u0131n</li> <li> <p>Baseline measurements al\u0131n</p> </li> <li> <p>Test Execution</p> </li> <li>Controlled environment kullan\u0131n</li> <li>Consistent test conditions sa\u011flay\u0131n</li> <li>Resource monitoring yap\u0131n</li> <li> <p>Error handling implement edin</p> </li> <li> <p>Metrics Collection</p> </li> <li>Comprehensive metrics toplay\u0131n</li> <li>Performance baselines olu\u015fturun</li> <li>Trend analysis yap\u0131n</li> <li> <p>Alerting implement edin</p> </li> <li> <p>Result Analysis</p> </li> <li>Performance bottlenecks identify edin</li> <li>Root cause analysis yap\u0131n</li> <li>Optimization recommendations geli\u015ftirin</li> <li> <p>Continuous improvement sa\u011flay\u0131n</p> </li> <li> <p>Integration &amp; Maintenance</p> </li> <li>CI/CD pipeline entegre edin</li> <li>Automated performance testing yap\u0131n</li> <li>Performance regression detection implement edin</li> <li>Regular performance reviews yap\u0131n</li> </ol>"},{"location":"mid-level/testing-strategies/performance-testing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>NBomber</li> <li>Performance Testing</li> <li>Load Testing</li> <li>Performance Monitoring</li> <li>.NET Performance</li> </ul>"},{"location":"mid-level/testing-strategies/property-based-testing/","title":"Property-Based Testing","text":""},{"location":"mid-level/testing-strategies/property-based-testing/#giris","title":"Giri\u015f","text":"<p>Property-Based Testing, test input'lar\u0131n\u0131 otomatik olarak generate eden ve belirli property'lerin her zaman do\u011fru oldu\u011funu kan\u0131tlayan testing yakla\u015f\u0131m\u0131d\u0131r. Mid-level geli\u015ftiriciler i\u00e7in property-based testing'i anlamak, comprehensive testing, edge case discovery ve test automation i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, FsCheck, property definition, data generation ve shrinking konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/testing-strategies/property-based-testing/#fscheck-implementation","title":"FsCheck Implementation","text":""},{"location":"mid-level/testing-strategies/property-based-testing/#1-basic-property-testing","title":"1. Basic Property Testing","text":"<p>Temel property testing implementasyonu.</p> <pre><code>public class CalculatorPropertyTests\n{\n    [Property]\n    public Property Addition_IsCommutative(int a, int b)\n    {\n        var result1 = Calculator.Add(a, b);\n        var result2 = Calculator.Add(b, a);\n\n        return (result1 == result2).ToProperty()\n            .Label($\"Addition is commutative: {a} + {b} = {b} + {a}\");\n    }\n\n    [Property]\n    public Property Addition_IsAssociative(int a, int b, int c)\n    {\n        var result1 = Calculator.Add(Calculator.Add(a, b), c);\n        var result2 = Calculator.Add(a, Calculator.Add(b, c));\n\n        return (result1 == result2).ToProperty()\n            .Label($\"Addition is associative: ({a} + {b}) + {c} = {a} + ({b} + {c})\");\n    }\n\n    [Property]\n    public Property Addition_WithZero_ReturnsSameNumber(int a)\n    {\n        var result = Calculator.Add(a, 0);\n\n        return (result == a).ToProperty()\n            .Label($\"Adding zero returns the same number: {a} + 0 = {a}\");\n    }\n\n    [Property]\n    public Property Addition_IsDistributiveOverMultiplication(int a, int b, int c)\n    {\n        var result1 = Calculator.Multiply(a, Calculator.Add(b, c));\n        var result2 = Calculator.Add(Calculator.Multiply(a, b), Calculator.Multiply(a, c));\n\n        return (result1 == result2).ToProperty()\n            .Label($\"Multiplication distributes over addition: {a} * ({b} + {c}) = {a} * {b} + {a} * {c}\");\n    }\n\n    [Property]\n    public Property Division_ByNonZero_IsInverseOfMultiplication(int a, int b)\n    {\n        // Ensure b is not zero\n        var nonZeroB = b == 0 ? 1 : b;\n\n        var result = Calculator.Divide(Calculator.Multiply(a, nonZeroB), nonZeroB);\n\n        return (result == a).ToProperty()\n            .Label($\"Division by non-zero is inverse of multiplication: ({a} * {nonZeroB}) / {nonZeroB} = {a}\");\n    }\n\n    [Property]\n    public Property Square_IsAlwaysPositive(int a)\n    {\n        var result = Calculator.Square(a);\n\n        return (result &gt;= 0).ToProperty()\n            .Label($\"Square is always non-negative: {a}\u00b2 = {result} &gt;= 0\");\n    }\n\n    [Property]\n    public Property Square_IsEven_WhenInputIsEven(int a)\n    {\n        // Generate only even numbers\n        var evenA = a * 2;\n        var result = Calculator.Square(evenA);\n\n        return (result % 2 == 0).ToProperty()\n            .Label($\"Square of even number is even: {evenA}\u00b2 = {result} is even\");\n    }\n}\n\npublic static class Calculator\n{\n    public static int Add(int a, int b) =&gt; a + b;\n    public static int Multiply(int a, int b) =&gt; a * b;\n    public static int Divide(int a, int b) =&gt; b != 0 ? a / b : throw new DivideByZeroException();\n    public static int Square(int a) =&gt; a * a;\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/property-based-testing/#2-custom-data-generators","title":"2. Custom Data Generators","text":"<p>\u00d6zel veri generator'lar\u0131 implementasyonu.</p> <pre><code>public class CustomGenerators\n{\n    public static Arbitrary&lt;EmailAddress&gt; EmailAddressGenerator()\n    {\n        var localPart = Gen.Choose(1, 10).SelectMany(length =&gt; \n            Gen.Choose(0, 25).SelectMany(seed =&gt; \n                Gen.Elements(\"abcdefghijklmnopqrstuvwxyz0123456789._%+-\")\n                    .ArrayOf(length)\n                    .Select(chars =&gt; new string(chars))));\n\n        var domain = Gen.Choose(1, 20).SelectMany(length =&gt; \n            Gen.Choose(0, 25).SelectMany(seed =&gt; \n                Gen.Elements(\"abcdefghijklmnopqrstuvwxyz0123456789.-\")\n                    .ArrayOf(length)\n                    .Select(chars =&gt; new string(chars))));\n\n        var tld = Gen.Elements(\"com\", \"org\", \"net\", \"edu\", \"gov\");\n\n        return Gen.Three(localPart, domain, tld)\n            .Select(tuple =&gt; new EmailAddress($\"{tuple.Item1}@{tuple.Item2}.{tuple.Item3}\"))\n            .ToArbitrary();\n    }\n\n    public static Arbitrary&lt;PhoneNumber&gt; PhoneNumberGenerator()\n    {\n        var countryCode = Gen.Elements(\"+1\", \"+44\", \"+49\", \"+33\", \"+81\");\n        var areaCode = Gen.Choose(100, 999);\n        var prefix = Gen.Choose(100, 999);\n        var lineNumber = Gen.Choose(1000, 9999);\n\n        return Gen.Three(countryCode, areaCode, Gen.Two(prefix, lineNumber))\n            .Select(tuple =&gt; new PhoneNumber($\"{tuple.Item1} {tuple.Item2} {tuple.Item3.Item1}-{tuple.Item3.Item2}\"))\n            .ToArbitrary();\n    }\n\n    public static Arbitrary&lt;CreditCardNumber&gt; CreditCardNumberGenerator()\n    {\n        var cardTypes = new[] { \"Visa\", \"MasterCard\", \"American Express\", \"Discover\" };\n        var cardType = Gen.Elements(cardTypes);\n\n        var cardNumber = Gen.Choose(0, 9).ArrayOf(16)\n            .Select(digits =&gt; string.Join(\"\", digits));\n\n        return Gen.Two(cardType, cardNumber)\n            .Select(tuple =&gt; new CreditCardNumber(tuple.Item1, tuple.Item2))\n            .ToArbitrary();\n    }\n\n    public static Arbitrary&lt;DateRange&gt; DateRangeGenerator()\n    {\n        var startDate = Gen.Choose(DateTime.MinValue.Ticks, DateTime.MaxValue.Ticks)\n            .Select(ticks =&gt; new DateTime(ticks));\n\n        var endDate = startDate.SelectMany(start =&gt; \n            Gen.Choose(start.Ticks, start.Ticks + TimeSpan.FromDays(365).Ticks)\n                .Select(ticks =&gt; new DateTime(ticks)));\n\n        return Gen.Two(startDate, endDate)\n            .Select(tuple =&gt; new DateRange(tuple.Item1, tuple.Item2))\n            .Where(range =&gt; range.StartDate &lt; range.EndDate)\n            .ToArbitrary();\n    }\n\n    public static Arbitrary&lt;ComplexNumber&gt; ComplexNumberGenerator()\n    {\n        var realPart = Gen.Choose(-1000.0, 1000.0);\n        var imaginaryPart = Gen.Choose(-1000.0, 1000.0);\n\n        return Gen.Two(realPart, imaginaryPart)\n            .Select(tuple =&gt; new ComplexNumber(tuple.Item1, tuple.Item2))\n            .ToArbitrary();\n    }\n}\n\npublic class EmailAddress\n{\n    public string Value { get; }\n\n    public EmailAddress(string value)\n    {\n        Value = value;\n    }\n\n    public override string ToString() =&gt; Value;\n}\n\npublic class PhoneNumber\n{\n    public string Value { get; }\n\n    public PhoneNumber(string value)\n    {\n        Value = value;\n    }\n\n    public override string ToString() =&gt; Value;\n}\n\npublic class CreditCardNumber\n{\n    public string Type { get; }\n    public string Number { get; }\n\n    public CreditCardNumber(string type, string number)\n    {\n        Type = type;\n        Number = number;\n    }\n\n    public override string ToString() =&gt; $\"{Type}: {Number}\";\n}\n\npublic class DateRange\n{\n    public DateTime StartDate { get; }\n    public DateTime EndDate { get; }\n\n    public DateRange(DateTime startDate, DateTime endDate)\n    {\n        StartDate = startDate;\n        EndDate = endDate;\n    }\n\n    public TimeSpan Duration =&gt; EndDate - StartDate;\n\n    public override string ToString() =&gt; $\"{StartDate:yyyy-MM-dd} to {EndDate:yyyy-MM-dd}\";\n}\n\npublic class ComplexNumber\n{\n    public double Real { get; }\n    public double Imaginary { get; }\n\n    public ComplexNumber(double real, double imaginary)\n    {\n        Real = real;\n        Imaginary = imaginary;\n    }\n\n    public double Magnitude =&gt; Math.Sqrt(Real * Real + Imaginary * Imaginary);\n\n    public override string ToString() =&gt; $\"{Real} + {Imaginary}i\";\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/property-based-testing/#3-advanced-property-testing","title":"3. Advanced Property Testing","text":"<p>Geli\u015fmi\u015f property testing implementasyonu.</p> <pre><code>public class AdvancedPropertyTests\n{\n    [Property]\n    public Property List_Reverse_IsIdempotent(List&lt;int&gt; list)\n    {\n        var reversedOnce = list.Reverse().ToList();\n        var reversedTwice = reversedOnce.Reverse().ToList();\n\n        return list.SequenceEqual(reversedTwice).ToProperty()\n            .Label($\"Reverse is idempotent: Reverse(Reverse({list})) = {list}\");\n    }\n\n    [Property]\n    public Property List_Sort_IsIdempotent(List&lt;int&gt; list)\n    {\n        var sortedOnce = list.OrderBy(x =&gt; x).ToList();\n        var sortedTwice = sortedOnce.OrderBy(x =&gt; x).ToList();\n\n        return sortedOnce.SequenceEqual(sortedTwice).ToProperty()\n            .Label($\"Sort is idempotent: Sort(Sort({list})) = Sort({list})\");\n    }\n\n    [Property]\n    public Property List_Concat_IsAssociative(List&lt;int&gt; list1, List&lt;int&gt; list2, List&lt;int&gt; list3)\n    {\n        var result1 = list1.Concat(list2).Concat(list3).ToList();\n        var result2 = list1.Concat(list2.Concat(list3)).ToList();\n\n        return result1.SequenceEqual(result2).ToProperty()\n            .Label($\"List concatenation is associative\");\n    }\n\n    [Property]\n    public Property String_Length_IsAlwaysNonNegative(string input)\n    {\n        return (input.Length &gt;= 0).ToProperty()\n            .Label($\"String length is always non-negative: '{input}'.Length = {input.Length}\");\n    }\n\n    [Property]\n    public Property String_Substring_Length_IsValid(string input, int startIndex, int length)\n    {\n        // Ensure valid parameters\n        if (startIndex &lt; 0 || startIndex &gt;= input.Length || length &lt; 0 || startIndex + length &gt; input.Length)\n        {\n            return true.ToProperty().Label(\"Invalid parameters, skipping test\");\n        }\n\n        var substring = input.Substring(startIndex, length);\n\n        return (substring.Length == length).ToProperty()\n            .Label($\"Substring length is correct: '{input}'.Substring({startIndex}, {length}) = '{substring}'\");\n    }\n\n    [Property]\n    public Property Dictionary_Add_Then_Get_ReturnsSameValue(int key, string value)\n    {\n        var dict = new Dictionary&lt;int, string&gt;();\n        dict.Add(key, value);\n\n        var retrievedValue = dict[key];\n\n        return (retrievedValue == value).ToProperty()\n            .Label($\"Dictionary add then get returns same value: [{key}] = '{value}'\");\n    }\n\n    [Property]\n    public Property Dictionary_Remove_Then_ContainsKey_ReturnsFalse(int key, string value)\n    {\n        var dict = new Dictionary&lt;int, string&gt;();\n        dict.Add(key, value);\n        dict.Remove(key);\n\n        return (!dict.ContainsKey(key)).ToProperty()\n            .Label($\"Dictionary remove then contains key returns false: [{key}] removed\");\n    }\n\n    [Property]\n    public Property Queue_Enqueue_Then_Dequeue_ReturnsSameValue(int value)\n    {\n        var queue = new Queue&lt;int&gt;();\n        queue.Enqueue(value);\n\n        var dequeuedValue = queue.Dequeue();\n\n        return (dequeuedValue == value).ToProperty()\n            .Label($\"Queue enqueue then dequeue returns same value: {value}\");\n    }\n\n    [Property]\n    public Property Stack_Push_Then_Pop_ReturnsSameValue(int value)\n    {\n        var stack = new Stack&lt;int&gt;();\n        stack.Push(value);\n\n        var poppedValue = stack.Pop();\n\n        return (poppedValue == value).ToProperty()\n            .Label($\"Stack push then pop returns same value: {value}\");\n    }\n\n    [Property]\n    public Property HashSet_Add_Then_Contains_ReturnsTrue(int value)\n    {\n        var hashSet = new HashSet&lt;int&gt;();\n        hashSet.Add(value);\n\n        return hashSet.Contains(value).ToProperty()\n            .Label($\"HashSet add then contains returns true: {value}\");\n    }\n\n    [Property]\n    public Property HashSet_Remove_Then_Contains_ReturnsFalse(int value)\n    {\n        var hashSet = new HashSet&lt;int&gt;();\n        hashSet.Add(value);\n        hashSet.Remove(value);\n\n        return (!hashSet.Contains(value)).ToProperty()\n            .Label($\"HashSet remove then contains returns false: {value}\");\n    }\n}\n\npublic class BusinessLogicPropertyTests\n{\n    [Property]\n    public Property UserValidation_ValidUser_AlwaysPasses()\n    {\n        var validUser = new User\n        {\n            Username = \"validuser\",\n            Email = \"user@example.com\",\n            Age = 25,\n            Password = \"SecurePass123!\"\n        };\n\n        var validator = new UserValidator();\n        var result = validator.Validate(validUser);\n\n        return result.IsValid.ToProperty()\n            .Label($\"Valid user always passes validation: {validUser.Username}\");\n    }\n\n    [Property]\n    public Property UserValidation_InvalidAge_AlwaysFails()\n    {\n        var invalidUser = new User\n        {\n            Username = \"testuser\",\n            Email = \"test@example.com\",\n            Age = -5, // Invalid age\n            Password = \"Password123!\"\n        };\n\n        var validator = new UserValidator();\n        var result = validator.Validate(invalidUser);\n\n        return (!result.IsValid).ToProperty()\n            .Label($\"User with invalid age always fails validation: Age = {invalidUser.Age}\");\n    }\n\n    [Property]\n    public Property UserValidation_EmptyUsername_AlwaysFails()\n    {\n        var invalidUser = new User\n        {\n            Username = \"\", // Empty username\n            Email = \"test@example.com\",\n            Age = 25,\n            Password = \"Password123!\"\n        };\n\n        var validator = new UserValidator();\n        var result = validator.Validate(invalidUser);\n\n        return (!result.IsValid).ToProperty()\n            .Label($\"User with empty username always fails validation\");\n    }\n\n    [Property]\n    public Property UserValidation_InvalidEmail_AlwaysFails()\n    {\n        var invalidUser = new User\n        {\n            Username = \"testuser\",\n            Email = \"invalid-email\", // Invalid email\n            Age = 25,\n            Password = \"Password123!\"\n        };\n\n        var validator = new UserValidator();\n        var result = validator.Validate(invalidUser);\n\n        return (!result.IsValid).ToProperty()\n            .Label($\"User with invalid email always fails validation: {invalidUser.Email}\");\n    }\n}\n\npublic class User\n{\n    public string Username { get; set; }\n    public string Email { get; set; }\n    public int Age { get; set; }\n    public string Password { get; set; }\n}\n\npublic class UserValidator\n{\n    public ValidationResult Validate(User user)\n    {\n        var errors = new List&lt;string&gt;();\n\n        if (string.IsNullOrWhiteSpace(user.Username))\n            errors.Add(\"Username is required\");\n\n        if (string.IsNullOrWhiteSpace(user.Email) || !IsValidEmail(user.Email))\n            errors.Add(\"Valid email is required\");\n\n        if (user.Age &lt; 0 || user.Age &gt; 150)\n            errors.Add(\"Age must be between 0 and 150\");\n\n        if (string.IsNullOrWhiteSpace(user.Password) || user.Password.Length &lt; 8)\n            errors.Add(\"Password must be at least 8 characters long\");\n\n        return new ValidationResult\n        {\n            IsValid = !errors.Any(),\n            Errors = errors\n        };\n    }\n\n    private bool IsValidEmail(string email)\n    {\n        try\n        {\n            var addr = new System.Net.Mail.MailAddress(email);\n            return addr.Address == email;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n\npublic class ValidationResult\n{\n    public bool IsValid { get; set; }\n    public List&lt;string&gt; Errors { get; set; } = new();\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/property-based-testing/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/testing-strategies/property-based-testing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Property-Based Testing nedir?</li> <li> <p>Cevap: Test input'lar\u0131n\u0131 otomatik generate eden ve property'leri do\u011frulayan testing yakla\u015f\u0131m\u0131.</p> </li> <li> <p>FsCheck nedir?</p> </li> <li> <p>Cevap: .NET i\u00e7in property-based testing framework'\u00fc.</p> </li> <li> <p>Property nedir?</p> </li> <li> <p>Cevap: Test edilen kodun her zaman do\u011fru olmas\u0131 gereken \u00f6zellik.</p> </li> <li> <p>Shrinking nedir?</p> </li> <li> <p>Cevap: Test failure'lar\u0131 i\u00e7in minimal counterexample bulma s\u00fcreci.</p> </li> <li> <p>Property-based testing ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Mathematical properties, data structure invariants, business rules.</li> </ol>"},{"location":"mid-level/testing-strategies/property-based-testing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Custom generator nas\u0131l implement edilir?</li> <li> <p>Cevap: Arbitrary class, Gen combinators, ToArbitrary() extension. <li> <p>Property validation nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: ToProperty() extension, Label() method, conditional properties.</p> </li> <li> <p>Data shrinking nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Automatic shrinking, custom shrinkers, minimal counterexamples.</p> </li> <li> <p>Property-based testing performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Efficient generators, property filtering, test count optimization.</p> </li> <li> <p>Property-based testing CI/CD'de nas\u0131l kullan\u0131l\u0131r?</p> </li> <li>Cevap: Automated testing, regression detection, continuous validation.</li>"},{"location":"mid-level/testing-strategies/property-based-testing/#best-practices","title":"Best Practices","text":"<ol> <li>Property Design</li> <li>Mathematical properties tan\u0131mlay\u0131n</li> <li>Invariants identify edin</li> <li>Edge cases cover edin</li> <li> <p>Clear property names kullan\u0131n</p> </li> <li> <p>Generator Implementation</p> </li> <li>Efficient generators yaz\u0131n</li> <li>Realistic data generate edin</li> <li>Edge case data include edin</li> <li> <p>Custom types support edin</p> </li> <li> <p>Property Validation</p> </li> <li>Comprehensive validation implement edin</li> <li>Error messages ekleyin</li> <li>Property labels kullan\u0131n</li> <li> <p>Conditional properties yaz\u0131n</p> </li> <li> <p>Performance &amp; Scalability</p> </li> <li>Generator performance optimize edin</li> <li>Test count balance edin</li> <li>Shrinking efficiency sa\u011flay\u0131n</li> <li> <p>Memory usage monitor edin</p> </li> <li> <p>Integration &amp; Maintenance</p> </li> <li>CI/CD pipeline entegre edin</li> <li>Test results analyze edin</li> <li>Property coverage measure edin</li> <li>Continuous improvement sa\u011flay\u0131n</li> </ol>"},{"location":"mid-level/testing-strategies/property-based-testing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>FsCheck</li> <li>Property-Based Testing</li> <li>QuickCheck</li> <li>Property Testing Best Practices</li> <li>.NET Testing Strategies</li> </ul>"},{"location":"mid-level/testing-strategies/security-testing/","title":"Security Testing","text":""},{"location":"mid-level/testing-strategies/security-testing/#giris","title":"Giri\u015f","text":"<p>Security Testing, uygulaman\u0131n g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 tespit eden ve g\u00fcvenlik \u00f6nlemlerinin etkinli\u011fini de\u011ferlendiren testing yakla\u015f\u0131m\u0131d\u0131r. Mid-level geli\u015ftiriciler i\u00e7in security testing'i anlamak, vulnerability assessment, penetration testing ve security compliance i\u00e7in kritik \u00f6neme sahiptir. Bu dosya, OWASP testing, security scanning, vulnerability assessment ve security automation konular\u0131n\u0131 kapsar.</p>"},{"location":"mid-level/testing-strategies/security-testing/#owasp-testing-implementation","title":"OWASP Testing Implementation","text":""},{"location":"mid-level/testing-strategies/security-testing/#1-authentication-testing","title":"1. Authentication Testing","text":"<p>Authentication g\u00fcvenlik testleri implementasyonu.</p> <pre><code>public class AuthenticationSecurityTests\n{\n    private readonly WebApplicationFactory&lt;Program&gt; _factory;\n    private readonly HttpClient _client;\n\n    public AuthenticationSecurityTests()\n    {\n        _factory = new WebApplicationFactory&lt;Program&gt;()\n            .WithWebHostBuilder(builder =&gt;\n            {\n                builder.ConfigureServices(services =&gt;\n                {\n                    // Configure test services\n                    services.AddScoped&lt;IAuthenticationService, MockAuthenticationService&gt;();\n                    services.AddScoped&lt;IPasswordHasher, MockPasswordHasher&gt;();\n                });\n            });\n\n        _client = _factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task Login_WithValidCredentials_ShouldReturnJwtToken()\n    {\n        // Arrange\n        var loginRequest = new LoginRequest\n        {\n            Username = \"testuser\",\n            Password = \"TestPassword123!\"\n        };\n\n        // Act\n        var response = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\n        var loginResponse = await response.Content.ReadFromJsonAsync&lt;LoginResponse&gt;();\n        loginResponse.Should().NotBeNull();\n        loginResponse.Token.Should().NotBeNullOrEmpty();\n        loginResponse.RefreshToken.Should().NotBeNullOrEmpty();\n    }\n\n    [Fact]\n    public async Task Login_WithInvalidCredentials_ShouldReturnUnauthorized()\n    {\n        // Arrange\n        var loginRequest = new LoginRequest\n        {\n            Username = \"invaliduser\",\n            Password = \"WrongPassword\"\n        };\n\n        // Act\n        var response = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n    }\n\n    [Fact]\n    public async Task Login_WithEmptyCredentials_ShouldReturnBadRequest()\n    {\n        // Arrange\n        var loginRequest = new LoginRequest\n        {\n            Username = \"\",\n            Password = \"\"\n        };\n\n        // Act\n        var response = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n    }\n\n    [Fact]\n    public async Task Login_WithSqlInjectionAttempt_ShouldNotBeVulnerable()\n    {\n        // Arrange\n        var sqlInjectionAttempts = new[]\n        {\n            \"'; DROP TABLE Users; --\",\n            \"' OR '1'='1\",\n            \"' UNION SELECT * FROM Users --\",\n            \"admin'--\",\n            \"'; EXEC xp_cmdshell('dir'); --\"\n        };\n\n        foreach (var attempt in sqlInjectionAttempts)\n        {\n            var loginRequest = new LoginRequest\n            {\n                Username = attempt,\n                Password = \"TestPassword123!\"\n            };\n\n            // Act\n            var response = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n\n            // Assert - Should not crash or expose sensitive information\n            response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n            responseContent.Should().NotContain(\"error in your SQL syntax\");\n            responseContent.Should().NotContain(\"System.Data.SqlClient\");\n            responseContent.Should().NotContain(\"Exception\");\n        }\n    }\n\n    [Fact]\n    public async Task Login_WithXssAttempt_ShouldNotBeVulnerable()\n    {\n        // Arrange\n        var xssAttempts = new[]\n        {\n            \"&lt;script&gt;alert('XSS')&lt;/script&gt;\",\n            \"javascript:alert('XSS')\",\n            \"&lt;img src=x onerror=alert('XSS')&gt;\",\n            \"';alert('XSS');//\",\n            \"&lt;svg onload=alert('XSS')&gt;\"\n        };\n\n        foreach (var attempt in xssAttempts)\n        {\n            var loginRequest = new LoginRequest\n            {\n                Username = attempt,\n                Password = \"TestPassword123!\"\n            };\n\n            // Act\n            var response = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n\n            // Assert - Should not execute scripts\n            response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n            responseContent.Should().NotContain(\"&lt;script&gt;\");\n            responseContent.Should().NotContain(\"javascript:\");\n            responseContent.Should().NotContain(\"onerror=\");\n            responseContent.Should().NotContain(\"onload=\");\n        }\n    }\n\n    [Fact]\n    public async Task Login_WithBruteForceAttempt_ShouldImplementRateLimiting()\n    {\n        // Arrange\n        var loginRequest = new LoginRequest\n        {\n            Username = \"testuser\",\n            Password = \"WrongPassword\"\n        };\n\n        var attempts = new List&lt;HttpResponseMessage&gt;();\n\n        // Act - Attempt multiple logins\n        for (int i = 0; i &lt; 10; i++)\n        {\n            var response = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n            attempts.Add(response);\n        }\n\n        // Assert - Should implement rate limiting after multiple attempts\n        var unauthorizedCount = attempts.Count(r =&gt; r.StatusCode == HttpStatusCode.Unauthorized);\n        var tooManyRequestsCount = attempts.Count(r =&gt; r.StatusCode == HttpStatusCode.TooManyRequests);\n\n        // Should have some rate limiting response\n        (tooManyRequestsCount &gt; 0 || unauthorizedCount &lt; 10).Should().BeTrue();\n    }\n\n    [Fact]\n    public async Task Password_ComplexityRequirements_ShouldBeEnforced()\n    {\n        // Arrange\n        var weakPasswords = new[]\n        {\n            \"123456\",\n            \"password\",\n            \"qwerty\",\n            \"abc123\",\n            \"password123\"\n        };\n\n        var registerRequest = new RegisterRequest\n        {\n            Username = \"testuser\",\n            Email = \"test@example.com\",\n            Password = \"weakpassword\"\n        };\n\n        foreach (var weakPassword in weakPasswords)\n        {\n            registerRequest.Password = weakPassword;\n\n            // Act\n            var response = await _client.PostAsJsonAsync(\"/api/auth/register\", registerRequest);\n\n            // Assert - Should reject weak passwords\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n            var errorResponse = await response.Content.ReadFromJsonAsync&lt;ErrorResponse&gt;();\n            errorResponse.Should().NotBeNull();\n            errorResponse.Message.Should().Contain(\"password\");\n        }\n    }\n\n    [Fact]\n    public async Task JwtToken_ShouldBeProperlyValidated()\n    {\n        // Arrange\n        var loginRequest = new LoginRequest\n        {\n            Username = \"testuser\",\n            Password = \"TestPassword123!\"\n        };\n\n        var loginResponse = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n        var loginResult = await loginResponse.Content.ReadFromJsonAsync&lt;LoginResponse&gt;();\n\n        // Act - Try to access protected endpoint with valid token\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", loginResult.Token);\n        var protectedResponse = await _client.GetAsync(\"/api/orders\");\n\n        // Assert - Should allow access with valid token\n        protectedResponse.StatusCode.Should().Be(HttpStatusCode.OK);\n\n        // Act - Try to access with invalid token\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"invalid-token\");\n        var invalidTokenResponse = await _client.GetAsync(\"/api/orders\");\n\n        // Assert - Should reject invalid token\n        invalidTokenResponse.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n\n        // Act - Try to access with expired token (if we can generate one)\n        var expiredToken = GenerateExpiredToken();\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", expiredToken);\n        var expiredTokenResponse = await _client.GetAsync(\"/api/orders\");\n\n        // Assert - Should reject expired token\n        expiredTokenResponse.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n    }\n\n    private string GenerateExpiredToken()\n    {\n        // This would generate a JWT token that's already expired\n        // Implementation depends on your JWT library\n        return \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n    }\n}\n\npublic class LoginRequest\n{\n    public string Username { get; set; }\n    public string Password { get; set; }\n}\n\npublic class LoginResponse\n{\n    public string Token { get; set; }\n    public string RefreshToken { get; set; }\n    public DateTime ExpiresAt { get; set; }\n}\n\npublic class RegisterRequest\n{\n    public string Username { get; set; }\n    public string Email { get; set; }\n    public string Password { get; set; }\n}\n\npublic class ErrorResponse\n{\n    public string Message { get; set; }\n    public List&lt;string&gt; Details { get; set; } = new();\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/security-testing/#2-authorization-testing","title":"2. Authorization Testing","text":"<p>Authorization g\u00fcvenlik testleri implementasyonu.</p> <pre><code>public class AuthorizationSecurityTests\n{\n    private readonly WebApplicationFactory&lt;Program&gt; _factory;\n    private readonly HttpClient _client;\n\n    public AuthorizationSecurityTests()\n    {\n        _factory = new WebApplicationFactory&lt;Program&gt;()\n            .WithWebHostBuilder(builder =&gt;\n            {\n                builder.ConfigureServices(services =&gt;\n                {\n                    // Configure test services\n                    services.AddScoped&lt;IAuthorizationService, MockAuthorizationService&gt;();\n                    services.AddScoped&lt;IRoleService, MockRoleService&gt;();\n                });\n            });\n\n        _client = _factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task AdminEndpoint_WithUserRole_ShouldReturnForbidden()\n    {\n        // Arrange\n        var userToken = await GetUserTokenAsync(\"user\");\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", userToken);\n\n        // Act\n        var response = await _client.GetAsync(\"/api/admin/users\");\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.Forbidden);\n    }\n\n    [Fact]\n    public async Task AdminEndpoint_WithAdminRole_ShouldReturnOk()\n    {\n        // Arrange\n        var adminToken = await GetAdminTokenAsync(\"admin\");\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", adminToken);\n\n        // Act\n        var response = await _client.GetAsync(\"/api/admin/users\");\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\n    }\n\n    [Fact]\n    public async Task UserEndpoint_WithDifferentUserId_ShouldReturnForbidden()\n    {\n        // Arrange\n        var userToken = await GetUserTokenAsync(\"user1\");\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", userToken);\n\n        // Act - Try to access another user's data\n        var response = await _client.GetAsync(\"/api/users/user2/profile\");\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.Forbidden);\n    }\n\n    [Fact]\n    public async Task ResourceAccess_WithInsufficientPermissions_ShouldReturnForbidden()\n    {\n        // Arrange\n        var userToken = await GetUserTokenAsync(\"user\");\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", userToken);\n\n        // Act - Try to access resource without permission\n        var response = await _client.DeleteAsync(\"/api/orders/123\");\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.Forbidden);\n    }\n\n    [Fact]\n    public async Task RoleEscalation_ShouldNotBePossible()\n    {\n        // Arrange\n        var userToken = await GetUserTokenAsync(\"user\");\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", userToken);\n\n        // Act - Try to escalate role\n        var roleUpdateRequest = new RoleUpdateRequest\n        {\n            UserId = \"user\",\n            NewRole = \"Admin\"\n        };\n\n        var response = await _client.PutAsJsonAsync(\"/api/users/user/role\", roleUpdateRequest);\n\n        // Assert - Should not allow role escalation\n        response.StatusCode.Should().Be(HttpStatusCode.Forbidden);\n    }\n\n    [Fact]\n    public async Task HorizontalPrivilegeEscalation_ShouldBePrevented()\n    {\n        // Arrange\n        var user1Token = await GetUserTokenAsync(\"user1\");\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", user1Token);\n\n        // Act - Try to access user2's data\n        var response = await _client.GetAsync(\"/api/users/user2/orders\");\n\n        // Assert - Should prevent horizontal privilege escalation\n        response.StatusCode.Should().Be(HttpStatusCode.Forbidden);\n    }\n\n    [Fact]\n    public async Task VerticalPrivilegeEscalation_ShouldBePrevented()\n    {\n        // Arrange\n        var userToken = await GetUserTokenAsync(\"user\");\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", userToken);\n\n        // Act - Try to access admin functionality\n        var adminActions = new[]\n        {\n            \"/api/admin/system-status\",\n            \"/api/admin/user-management\",\n            \"/api/admin/audit-logs\",\n            \"/api/admin/configuration\"\n        };\n\n        foreach (var endpoint in adminActions)\n        {\n            var response = await _client.GetAsync(endpoint);\n            response.StatusCode.Should().Be(HttpStatusCode.Forbidden);\n        }\n    }\n\n    private async Task&lt;string&gt; GetUserTokenAsync(string username)\n    {\n        var loginRequest = new LoginRequest\n        {\n            Username = username,\n            Password = \"TestPassword123!\"\n        };\n\n        var response = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n        var loginResult = await response.Content.ReadFromJsonAsync&lt;LoginResponse&gt;();\n\n        return loginResult.Token;\n    }\n\n    private async Task&lt;string&gt; GetAdminTokenAsync(string username)\n    {\n        var loginRequest = new LoginRequest\n        {\n            Username = username,\n            Password = \"AdminPassword123!\"\n        };\n\n        var response = await _client.PostAsJsonAsync(\"/api/auth/login\", loginRequest);\n        var loginResult = await response.Content.ReadFromJsonAsync&lt;LoginResponse&gt;();\n\n        return loginResult.Token;\n    }\n}\n\npublic class RoleUpdateRequest\n{\n    public string UserId { get; set; }\n    public string NewRole { get; set; }\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/security-testing/#3-input-validation-testing","title":"3. Input Validation Testing","text":"<p>Input validation g\u00fcvenlik testleri implementasyonu.</p> <pre><code>public class InputValidationSecurityTests\n{\n    private readonly WebApplicationFactory&lt;Program&gt; _factory;\n    private readonly HttpClient _client;\n\n    public InputValidationSecurityTests()\n    {\n        _factory = new WebApplicationFactory&lt;Program&gt;()\n            .WithWebHostBuilder(builder =&gt;\n            {\n                builder.ConfigureServices(services =&gt;\n                {\n                    // Configure test services\n                    services.AddScoped&lt;IValidationService, ValidationService&gt;();\n                });\n            });\n\n        _client = _factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task CreateOrder_WithMaliciousInput_ShouldBeSanitized()\n    {\n        // Arrange\n        var maliciousInputs = new[]\n        {\n            \"&lt;script&gt;alert('XSS')&lt;/script&gt;\",\n            \"'; DROP TABLE Orders; --\",\n            \"../../../etc/passwd\",\n            \"javascript:alert('XSS')\",\n            \"&lt;img src=x onerror=alert('XSS')&gt;\"\n        };\n\n        foreach (var maliciousInput in maliciousInputs)\n        {\n            var orderRequest = new CreateOrderRequest\n            {\n                CustomerId = Guid.NewGuid(),\n                Notes = maliciousInput,\n                Items = new List&lt;OrderItem&gt;\n                {\n                    new OrderItem\n                    {\n                        ProductId = Guid.NewGuid(),\n                        Quantity = 1,\n                        Price = 100,\n                        Notes = maliciousInput\n                    }\n                }\n            };\n\n            // Act\n            var response = await _client.PostAsJsonAsync(\"/api/orders\", orderRequest);\n\n            // Assert - Should accept the request but sanitize the input\n            response.StatusCode.Should().Be(HttpStatusCode.Created);\n\n            var orderResponse = await response.Content.ReadFromJsonAsync&lt;OrderResponse&gt;();\n            orderResponse.Should().NotBeNull();\n\n            // Check that malicious content is sanitized\n            orderResponse.Notes.Should().NotContain(\"&lt;script&gt;\");\n            orderResponse.Notes.Should().NotContain(\"javascript:\");\n            orderResponse.Notes.Should().NotContain(\"onerror=\");\n            orderResponse.Notes.Should().NotContain(\"DROP TABLE\");\n        }\n    }\n\n    [Fact]\n    public async Task FileUpload_WithMaliciousFiles_ShouldBeRejected()\n    {\n        // Arrange\n        var maliciousFiles = new[]\n        {\n            (\"malicious.exe\", \"application/x-msdownload\", new byte[] { 0x4D, 0x5A, 0x90, 0x00 }),\n            (\"script.php\", \"application/x-php\", Encoding.UTF8.GetBytes(\"&lt;?php system($_GET['cmd']); ?&gt;\")),\n            (\"shell.sh\", \"application/x-sh\", Encoding.UTF8.GetBytes(\"#!/bin/bash\\nrm -rf /\")),\n            (\"test.asp\", \"application/x-asp\", Encoding.UTF8.GetBytes(\"&lt;% Response.Write(Request.QueryString(\\\"cmd\\\")) %&gt;\"))\n        };\n\n        foreach (var (filename, contentType, content) in maliciousFiles)\n        {\n            var formData = new MultipartFormDataContent();\n            var fileContent = new ByteArrayContent(content);\n            fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(contentType);\n            formData.Add(fileContent, \"file\", filename);\n\n            // Act\n            var response = await _client.PostAsync(\"/api/files/upload\", formData);\n\n            // Assert - Should reject malicious files\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n            var errorResponse = await response.Content.ReadFromJsonAsync&lt;ErrorResponse&gt;();\n            errorResponse.Should().NotBeNull();\n            errorResponse.Message.Should().Contain(\"file type\");\n        }\n    }\n\n    [Fact]\n    public async Task SearchEndpoint_WithInjectionAttempts_ShouldBeProtected()\n    {\n        // Arrange\n        var injectionAttempts = new[]\n        {\n            \"'; DROP TABLE Users; --\",\n            \"' OR '1'='1\",\n            \"' UNION SELECT * FROM Users --\",\n            \"'; EXEC xp_cmdshell('dir'); --\",\n            \"&lt;script&gt;alert('XSS')&lt;/script&gt;\",\n            \"javascript:alert('XSS')\"\n        };\n\n        foreach (var attempt in injectionAttempts)\n        {\n            // Act\n            var response = await _client.GetAsync($\"/api/orders/search?q={Uri.EscapeDataString(attempt)}\");\n\n            // Assert - Should not crash or expose sensitive information\n            response.StatusCode.Should().BeOneOf(HttpStatusCode.OK, HttpStatusCode.BadRequest, HttpStatusCode.NotFound);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseContent = await response.Content.ReadAsStringAsync();\n                responseContent.Should().NotContain(\"error in your SQL syntax\");\n                responseContent.Should().NotContain(\"System.Data.SqlClient\");\n                responseContent.Should().NotContain(\"Exception\");\n                responseContent.Should().NotContain(\"&lt;script&gt;\");\n                responseContent.Should().NotContain(\"javascript:\");\n            }\n        }\n    }\n\n    [Fact]\n    public async Task JsonPayload_WithOversizedData_ShouldBeRejected()\n    {\n        // Arrange\n        var oversizedData = new string('A', 1024 * 1024); // 1MB string\n\n        var orderRequest = new CreateOrderRequest\n        {\n            CustomerId = Guid.NewGuid(),\n            Notes = oversizedData,\n            Items = new List&lt;OrderItem&gt;\n            {\n                new OrderItem\n                {\n                    ProductId = Guid.NewGuid(),\n                    Quantity = 1,\n                    Price = 100,\n                    Notes = oversizedData\n                }\n            }\n        };\n\n        // Act\n        var response = await _client.PostAsJsonAsync(\"/api/orders\", orderRequest);\n\n        // Assert - Should reject oversized payloads\n        response.StatusCode.Should().Be(HttpStatusCode.RequestEntityTooLarge);\n    }\n\n    [Fact]\n    public async Task Headers_WithMaliciousValues_ShouldBeSanitized()\n    {\n        // Arrange\n        var maliciousHeaders = new[]\n        {\n            (\"X-Forwarded-For\", \"127.0.0.1, 192.168.1.1, 10.0.0.1\"),\n            (\"User-Agent\", \"&lt;script&gt;alert('XSS')&lt;/script&gt;\"),\n            (\"Referer\", \"javascript:alert('XSS')\"),\n            (\"X-Custom-Header\", \"'; DROP TABLE Users; --\")\n        };\n\n        foreach (var (headerName, headerValue) in maliciousHeaders)\n        {\n            _client.DefaultRequestHeaders.Add(headerName, headerValue);\n\n            // Act\n            var response = await _client.GetAsync(\"/api/orders\");\n\n            // Assert - Should handle malicious headers gracefully\n            response.StatusCode.Should().BeOneOf(HttpStatusCode.OK, HttpStatusCode.Unauthorized, HttpStatusCode.BadRequest);\n\n            // Clean up headers for next iteration\n            _client.DefaultRequestHeaders.Remove(headerName);\n        }\n    }\n}\n\npublic class OrderResponse\n{\n    public Guid Id { get; set; }\n    public string Notes { get; set; }\n    public List&lt;OrderItemResponse&gt; Items { get; set; } = new();\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class OrderItemResponse\n{\n    public Guid ProductId { get; set; }\n    public int Quantity { get; set; }\n    public decimal Price { get; set; }\n    public string Notes { get; set; }\n}\n</code></pre>"},{"location":"mid-level/testing-strategies/security-testing/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"mid-level/testing-strategies/security-testing/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Security Testing nedir?</li> <li> <p>Cevap: G\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 tespit eden ve g\u00fcvenlik \u00f6nlemlerini de\u011ferlendiren testing.</p> </li> <li> <p>OWASP nedir?</p> </li> <li> <p>Cevap: Web application security i\u00e7in open source community ve standard.</p> </li> <li> <p>Penetration Testing nedir?</p> </li> <li> <p>Cevap: G\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 aktif olarak test etme ve exploit etme.</p> </li> <li> <p>Vulnerability Assessment nedir?</p> </li> <li> <p>Cevap: G\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 sistematik olarak tespit etme ve de\u011ferlendirme.</p> </li> <li> <p>Security testing ne zaman kullan\u0131l\u0131r?</p> </li> <li>Cevap: Security compliance, vulnerability detection, risk assessment.</li> </ol>"},{"location":"mid-level/testing-strategies/security-testing/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>SQL Injection nas\u0131l test edilir?</li> <li> <p>Cevap: Malicious SQL queries, parameter manipulation, error analysis.</p> </li> <li> <p>XSS nas\u0131l test edilir?</p> </li> <li> <p>Cevap: Script injection, HTML encoding, Content Security Policy.</p> </li> <li> <p>Authentication bypass nas\u0131l test edilir?</p> </li> <li> <p>Cevap: Weak credentials, session management, token validation.</p> </li> <li> <p>Authorization testing nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Role-based access, privilege escalation, resource isolation.</p> </li> <li> <p>Security testing CI/CD'de nas\u0131l kullan\u0131l\u0131r?</p> </li> <li>Cevap: Automated scanning, security gates, vulnerability management.</li> </ol>"},{"location":"mid-level/testing-strategies/security-testing/#best-practices","title":"Best Practices","text":"<ol> <li>Test Strategy</li> <li>Comprehensive security coverage sa\u011flay\u0131n</li> <li>OWASP guidelines follow edin</li> <li>Regular security assessments yap\u0131n</li> <li> <p>Risk-based testing implement edin</p> </li> <li> <p>Test Implementation</p> </li> <li>Realistic attack scenarios tasarlay\u0131n</li> <li>Automated security tools kullan\u0131n</li> <li>Manual testing combine edin</li> <li> <p>Continuous monitoring implement edin</p> </li> <li> <p>Vulnerability Management</p> </li> <li>Security findings track edin</li> <li>Risk assessment yap\u0131n</li> <li>Remediation planning implement edin</li> <li> <p>Security metrics collect edin</p> </li> <li> <p>Compliance &amp; Reporting</p> </li> <li>Security standards follow edin</li> <li>Detailed security reports olu\u015fturun</li> <li>Compliance documentation maintain edin</li> <li> <p>Stakeholder communication sa\u011flay\u0131n</p> </li> <li> <p>Continuous Improvement</p> </li> <li>Security testing evolve edin</li> <li>New threats monitor edin</li> <li>Security tools update edin</li> <li>Team training provide edin</li> </ol>"},{"location":"mid-level/testing-strategies/security-testing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OWASP Testing Guide</li> <li>Security Testing</li> <li>Penetration Testing</li> <li>Security Best Practices</li> <li>.NET Security</li> </ul>"},{"location":"senior/advanced-devops/","title":"Advanced DevOps","text":""},{"location":"senior/advanced-devops/#giris","title":"Giri\u015f","text":"<p>Advanced DevOps, modern software development'da infrastructure automation, platform engineering ve site reliability engineering i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in advanced DevOps konular\u0131n\u0131 anlamak, infrastructure as code implement etmek, GitOps practices uygulamak ve SRE practices implement etmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, infrastructure as code, GitOps, platform engineering, SRE practices ve chaos engineering konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/advanced-devops/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/advanced-devops/#1-infrastructure-as-code","title":"1. Infrastructure as Code","text":"<p>Infrastructure automation, configuration management, ve infrastructure versioning.</p> <p>\u00d6\u011frenilecekler: - Infrastructure automation - Configuration management - Infrastructure versioning - Infrastructure testing - Infrastructure monitoring</p>"},{"location":"senior/advanced-devops/#2-gitops","title":"2. GitOps","text":"<p>Git-based operations, declarative infrastructure, ve automated deployment.</p> <p>\u00d6\u011frenilecekler: - Git-based operations - Declarative infrastructure - Automated deployment - Continuous deployment - Infrastructure drift detection</p>"},{"location":"senior/advanced-devops/#3-platform-engineering","title":"3. Platform Engineering","text":"<p>Internal developer platform, self-service infrastructure, ve developer experience.</p> <p>\u00d6\u011frenilecekler: - Internal developer platform - Self-service infrastructure - Developer experience - Platform governance - Platform monitoring</p>"},{"location":"senior/advanced-devops/#4-sre-practices","title":"4. SRE Practices","text":"<p>Site reliability engineering, error budgets, ve service level objectives.</p> <p>\u00d6\u011frenilecekler: - Site reliability engineering - Error budgets - Service level objectives - Incident management - Post-incident analysis</p>"},{"location":"senior/advanced-devops/#5-chaos-engineering","title":"5. Chaos Engineering","text":"<p>Controlled failure injection, resilience testing, ve system reliability.</p> <p>\u00d6\u011frenilecekler: - Controlled failure injection - Resilience testing - System reliability - Failure simulation - Recovery testing</p>"},{"location":"senior/advanced-devops/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/advanced-devops/#1-operational-excellence","title":"1. Operational Excellence","text":"<ul> <li>Automation</li> <li>Consistency</li> <li>Reliability</li> <li>Scalability</li> <li>Cost efficiency</li> </ul>"},{"location":"senior/advanced-devops/#2-developer-productivity","title":"2. Developer Productivity","text":"<ul> <li>Self-service</li> <li>Standardization</li> <li>Automation</li> <li>Best practices</li> <li>Faster delivery</li> </ul>"},{"location":"senior/advanced-devops/#3-system-reliability","title":"3. System Reliability","text":"<ul> <li>High availability</li> <li>Fault tolerance</li> <li>Disaster recovery</li> <li>Performance optimization</li> <li>Risk reduction</li> </ul>"},{"location":"senior/advanced-devops/#4-business-impact","title":"4. Business Impact","text":"<ul> <li>Faster time to market</li> <li>Better quality</li> <li>Reduced costs</li> <li>Improved reliability</li> <li>Competitive advantage</li> </ul>"},{"location":"senior/advanced-devops/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/advanced-devops/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Infrastructure as Code nedir?</li> <li> <p>Cevap: Infrastructure automation, configuration management, versioning.</p> </li> <li> <p>GitOps nedir?</p> </li> <li> <p>Cevap: Git-based operations, declarative infrastructure, automated deployment.</p> </li> <li> <p>Platform Engineering nedir?</p> </li> <li> <p>Cevap: Internal developer platform, self-service infrastructure, developer experience.</p> </li> <li> <p>SRE nedir?</p> </li> <li> <p>Cevap: Site reliability engineering, error budgets, service level objectives.</p> </li> <li> <p>Chaos Engineering nedir?</p> </li> <li>Cevap: Controlled failure injection, resilience testing, system reliability.</li> </ol>"},{"location":"senior/advanced-devops/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Infrastructure as Code nas\u0131l implement edilir?</li> <li> <p>Cevap: Terraform, ARM templates, CloudFormation, configuration management.</p> </li> <li> <p>GitOps workflow nas\u0131l kurulur?</p> </li> <li> <p>Cevap: Git repository, CI/CD pipeline, infrastructure automation, drift detection.</p> </li> <li> <p>Platform Engineering nas\u0131l tasarlan\u0131r?</p> </li> <li> <p>Cevap: Platform architecture, self-service capabilities, governance, monitoring.</p> </li> <li> <p>SRE practices nas\u0131l uygulan\u0131r?</p> </li> <li> <p>Cevap: Error budgets, SLIs/SLOs, incident management, post-incident analysis.</p> </li> <li> <p>Chaos Engineering nas\u0131l planlan\u0131r?</p> </li> <li>Cevap: Hypothesis, steady state, failure injection, analysis, learning.</li> </ol>"},{"location":"senior/advanced-devops/#best-practices","title":"Best Practices","text":""},{"location":"senior/advanced-devops/#1-infrastructure-as-code_1","title":"1. Infrastructure as Code","text":"<ul> <li>Use version control</li> <li>Implement testing</li> <li>Monitor changes</li> <li>Plan for rollback</li> <li>Document everything</li> </ul>"},{"location":"senior/advanced-devops/#2-gitops-implementation","title":"2. GitOps Implementation","text":"<ul> <li>Single source of truth</li> <li>Automated deployment</li> <li>Infrastructure testing</li> <li>Drift detection</li> <li>Rollback capability</li> </ul>"},{"location":"senior/advanced-devops/#3-platform-engineering_1","title":"3. Platform Engineering","text":"<ul> <li>Developer-centric design</li> <li>Self-service capabilities</li> <li>Standardization</li> <li>Governance</li> <li>Continuous improvement</li> </ul>"},{"location":"senior/advanced-devops/#4-sre-practices_1","title":"4. SRE Practices","text":"<ul> <li>Define SLIs/SLOs</li> <li>Implement error budgets</li> <li>Incident management</li> <li>Post-incident analysis</li> <li>Continuous improvement</li> </ul>"},{"location":"senior/advanced-devops/#5-chaos-engineering_1","title":"5. Chaos Engineering","text":"<ul> <li>Start small</li> <li>Define hypothesis</li> <li>Measure impact</li> <li>Learn from failures</li> <li>Improve resilience</li> </ul>"},{"location":"senior/advanced-devops/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Infrastructure as Code</li> <li>GitOps</li> <li>Platform Engineering</li> <li>Site Reliability Engineering</li> <li>Chaos Engineering</li> <li>DevOps Best Practices</li> </ul>"},{"location":"senior/advanced-security/","title":"Advanced Security","text":""},{"location":"senior/advanced-security/#giris","title":"Giri\u015f","text":"<p>Advanced Security, modern software development'da g\u00fcvenlik tehditlerini anlamak, g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 tespit etmek ve g\u00fcvenli sistemler tasarlamak i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in advanced security konular\u0131n\u0131 anlamak, secure coding practices implement etmek, security testing yapmak ve security architecture tasarlamak i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, security testing, penetration testing, secure coding, security architecture ve security monitoring konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/advanced-security/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/advanced-security/#1-security-testing","title":"1. Security Testing","text":"<p>Security testing methodologies, vulnerability assessment, ve security scanning.</p> <p>\u00d6\u011frenilecekler: - Security testing methodologies - Vulnerability assessment - Security scanning tools - Penetration testing - Security code review</p>"},{"location":"senior/advanced-security/#2-penetration-testing","title":"2. Penetration Testing","text":"<p>Manual security testing, automated security testing, ve security assessment.</p> <p>\u00d6\u011frenilecekler: - Manual security testing - Automated security testing - Security assessment tools - Exploit development - Security reporting</p>"},{"location":"senior/advanced-security/#3-secure-coding","title":"3. Secure Coding","text":"<p>Secure coding practices, security patterns, ve security best practices.</p> <p>\u00d6\u011frenilecekler: - Secure coding practices - Security patterns - Input validation - Output encoding - Authentication security</p>"},{"location":"senior/advanced-security/#4-security-architecture","title":"4. Security Architecture","text":"<p>Security architecture design, security patterns, ve security frameworks.</p> <p>\u00d6\u011frenilecekler: - Security architecture design - Security patterns - Security frameworks - Threat modeling - Risk assessment</p>"},{"location":"senior/advanced-security/#5-security-monitoring","title":"5. Security Monitoring","text":"<p>Security monitoring, threat detection, ve incident response.</p> <p>\u00d6\u011frenilecekler: - Security monitoring - Threat detection - Incident response - Security logging - Security analytics</p>"},{"location":"senior/advanced-security/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/advanced-security/#1-security-threats","title":"1. Security Threats","text":"<ul> <li>Cyber attacks</li> <li>Data breaches</li> <li>Financial losses</li> <li>Reputation damage</li> <li>Legal consequences</li> </ul>"},{"location":"senior/advanced-security/#2-business-impact","title":"2. Business Impact","text":"<ul> <li>Customer trust</li> <li>Compliance requirements</li> <li>Risk management</li> <li>Competitive advantage</li> <li>Business continuity</li> </ul>"},{"location":"senior/advanced-security/#3-technical-excellence","title":"3. Technical Excellence","text":"<ul> <li>Secure systems</li> <li>Best practices</li> <li>Proven patterns</li> <li>Quality improvement</li> <li>Risk reduction</li> </ul>"},{"location":"senior/advanced-security/#4-professional-development","title":"4. Professional Development","text":"<ul> <li>Security expertise</li> <li>Industry standards</li> <li>Career advancement</li> <li>Knowledge sharing</li> <li>Continuous learning</li> </ul>"},{"location":"senior/advanced-security/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/advanced-security/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Security testing nedir?</li> <li> <p>Cevap: Security vulnerabilities, security assessment, security validation.</p> </li> <li> <p>Penetration testing nedir?</p> </li> <li> <p>Cevap: Manual security testing, exploit development, security assessment.</p> </li> <li> <p>Secure coding nedir?</p> </li> <li> <p>Cevap: Security best practices, input validation, output encoding.</p> </li> <li> <p>Security architecture nedir?</p> </li> <li> <p>Cevap: Security design, security patterns, threat modeling.</p> </li> <li> <p>Security monitoring nedir?</p> </li> <li>Cevap: Threat detection, incident response, security analytics.</li> </ol>"},{"location":"senior/advanced-security/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Security testing nas\u0131l yap\u0131l\u0131r?</li> <li> <p>Cevap: Vulnerability scanning, penetration testing, code review, security assessment.</p> </li> <li> <p>Penetration testing nas\u0131l planlan\u0131r?</p> </li> <li> <p>Cevap: Scope definition, methodology selection, tool selection, reporting.</p> </li> <li> <p>Secure coding practices nelerdir?</p> </li> <li> <p>Cevap: Input validation, output encoding, authentication, authorization, encryption.</p> </li> <li> <p>Security architecture nas\u0131l tasarlan\u0131r?</p> </li> <li> <p>Cevap: Threat modeling, risk assessment, security patterns, security frameworks.</p> </li> <li> <p>Security monitoring nas\u0131l implement edilir?</p> </li> <li>Cevap: Log collection, threat detection, alerting, incident response.</li> </ol>"},{"location":"senior/advanced-security/#best-practices","title":"Best Practices","text":""},{"location":"senior/advanced-security/#1-security-testing_1","title":"1. Security Testing","text":"<ul> <li>Regular testing</li> <li>Multiple methodologies</li> <li>Tool automation</li> <li>Expert review</li> <li>Continuous improvement</li> </ul>"},{"location":"senior/advanced-security/#2-penetration-testing_1","title":"2. Penetration Testing","text":"<ul> <li>Professional testing</li> <li>Comprehensive coverage</li> <li>Detailed reporting</li> <li>Remediation tracking</li> <li>Regular updates</li> </ul>"},{"location":"senior/advanced-security/#3-secure-coding_1","title":"3. Secure Coding","text":"<ul> <li>Follow standards</li> <li>Input validation</li> <li>Output encoding</li> <li>Authentication</li> <li>Authorization</li> </ul>"},{"location":"senior/advanced-security/#4-security-architecture_1","title":"4. Security Architecture","text":"<ul> <li>Threat modeling</li> <li>Risk assessment</li> <li>Security patterns</li> <li>Security frameworks</li> <li>Regular review</li> </ul>"},{"location":"senior/advanced-security/#5-security-monitoring_1","title":"5. Security Monitoring","text":"<ul> <li>Real-time monitoring</li> <li>Threat detection</li> <li>Incident response</li> <li>Security analytics</li> <li>Continuous improvement</li> </ul>"},{"location":"senior/advanced-security/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Security Testing</li> <li>Penetration Testing</li> <li>Secure Coding</li> <li>Security Architecture</li> <li>Security Monitoring</li> <li>OWASP Top 10 </li> </ul>"},{"location":"senior/advanced-security/jwt/","title":"JWT (JSON Web Token)","text":""},{"location":"senior/advanced-security/jwt/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>JWT, iki taraf aras\u0131nda g\u00fcvenli bilgi al\u0131\u015fveri\u015fi i\u00e7in kullan\u0131lan a\u00e7\u0131k bir standartt\u0131r. Token'lar JSON format\u0131nda yap\u0131land\u0131r\u0131lm\u0131\u015f ve dijital olarak imzalanm\u0131\u015ft\u0131r. JWT'ler kimlik do\u011frulama ve yetkilendirme i\u00e7in yayg\u0131n olarak kullan\u0131l\u0131r.</p>"},{"location":"senior/advanced-security/jwt/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/advanced-security/jwt/#1-jwt-olusturma-ve-imzalama","title":"1. JWT Olu\u015fturma ve \u0130mzalama","text":"<pre><code>public class JwtService\n{\n    private readonly ILogger&lt;JwtService&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public JwtService(ILogger&lt;JwtService&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public string GenerateJwtToken(UserClaims claims)\n    {\n        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\"Jwt:Key\"]));\n        var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);\n\n        var token = new JwtSecurityToken(\n            issuer: _configuration[\"Jwt:Issuer\"],\n            audience: _configuration[\"Jwt:Audience\"],\n            claims: new List&lt;Claim&gt;\n            {\n                new Claim(JwtRegisteredClaimNames.Sub, claims.Subject),\n                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\n                new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString()),\n                new Claim(ClaimTypes.Name, claims.Username),\n                new Claim(ClaimTypes.Role, claims.Role)\n            },\n            expires: DateTime.UtcNow.AddMinutes(30),\n            signingCredentials: credentials\n        );\n\n        return new JwtSecurityTokenHandler().WriteToken(token);\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/jwt/#2-jwt-dogrulama","title":"2. JWT Do\u011frulama","text":"<pre><code>public class JwtValidator\n{\n    private readonly ILogger&lt;JwtValidator&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public JwtValidator(ILogger&lt;JwtValidator&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public async Task&lt;ClaimsPrincipal&gt; ValidateTokenAsync(string token)\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = Encoding.UTF8.GetBytes(_configuration[\"Jwt:Key\"]);\n\n        try\n        {\n            var tokenValidationParameters = new TokenValidationParameters\n            {\n                ValidateIssuerSigningKey = true,\n                IssuerSigningKey = new SymmetricSecurityKey(key),\n                ValidateIssuer = true,\n                ValidIssuer = _configuration[\"Jwt:Issuer\"],\n                ValidateAudience = true,\n                ValidAudience = _configuration[\"Jwt:Audience\"],\n                ValidateLifetime = true,\n                ClockSkew = TimeSpan.Zero\n            };\n\n            var principal = tokenHandler.ValidateToken(token, tokenValidationParameters, out var validatedToken);\n            return principal;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Token validation failed\");\n            throw new SecurityException(\"Invalid token\");\n        }\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/jwt/#3-jwt-yenileme","title":"3. JWT Yenileme","text":"<pre><code>public class JwtRefreshService\n{\n    private readonly ILogger&lt;JwtRefreshService&gt; _logger;\n    private readonly IJwtService _jwtService;\n    private readonly ITokenStorage _tokenStorage;\n\n    public JwtRefreshService(ILogger&lt;JwtRefreshService&gt; logger, IJwtService jwtService, ITokenStorage tokenStorage)\n    {\n        _logger = logger;\n        _jwtService = jwtService;\n        _tokenStorage = tokenStorage;\n    }\n\n    public async Task&lt;TokenResponse&gt; RefreshTokenAsync(string refreshToken)\n    {\n        // Refresh token do\u011frulama\n        var storedToken = await _tokenStorage.GetTokenByRefreshTokenAsync(refreshToken);\n        if (storedToken == null || storedToken.IsRevoked)\n        {\n            throw new SecurityException(\"Invalid refresh token\");\n        }\n\n        // Yeni access token olu\u015ftur\n        var newAccessToken = _jwtService.GenerateJwtToken(new UserClaims\n        {\n            Subject = storedToken.Subject,\n            Username = storedToken.Username,\n            Role = storedToken.Role\n        });\n\n        // Yeni refresh token olu\u015ftur\n        var newRefreshToken = Guid.NewGuid().ToString();\n\n        // Token'lar\u0131 g\u00fcncelle\n        await _tokenStorage.UpdateTokensAsync(storedToken.Id, newAccessToken, newRefreshToken);\n\n        return new TokenResponse\n        {\n            AccessToken = newAccessToken,\n            RefreshToken = newRefreshToken,\n            ExpiresIn = 1800 // 30 dakika\n        };\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/jwt/#best-practices","title":"Best Practices","text":""},{"location":"senior/advanced-security/jwt/#1-token-guvenligi","title":"1. Token G\u00fcvenli\u011fi","text":"<ul> <li>G\u00fc\u00e7l\u00fc imzalama algoritmalar\u0131</li> <li>Uygun token s\u00fcresi</li> <li>Token \u015fifreleme</li> <li>Token iptali</li> <li>Token yenileme</li> </ul>"},{"location":"senior/advanced-security/jwt/#2-token-yonetimi","title":"2. Token Y\u00f6netimi","text":"<ul> <li>G\u00fcvenli token saklama</li> <li>Token yenileme stratejisi</li> <li>Token iptal mekanizmas\u0131</li> <li>Token s\u00fcre y\u00f6netimi</li> <li>Token izleme</li> </ul>"},{"location":"senior/advanced-security/jwt/#3-guvenlik-onlemleri","title":"3. G\u00fcvenlik \u00d6nlemleri","text":"<ul> <li>HTTPS kullan\u0131m\u0131</li> <li>Token boyutu</li> <li>Claim do\u011frulama</li> <li>Token s\u0131z\u0131nt\u0131s\u0131</li> <li>Brute force korumas\u0131</li> </ul>"},{"location":"senior/advanced-security/jwt/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/advanced-security/jwt/#1-jwt-neden-kullanlr","title":"1. JWT neden kullan\u0131l\u0131r?","text":"<ul> <li>Kimlik do\u011frulama</li> <li>Yetkilendirme</li> <li>Bilgi al\u0131\u015fveri\u015fi</li> <li>Oturum y\u00f6netimi</li> <li>API g\u00fcvenli\u011fi</li> </ul>"},{"location":"senior/advanced-security/jwt/#2-jwt-guvenligi-nasl-saglanr","title":"2. JWT g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>G\u00fc\u00e7l\u00fc imzalama</li> <li>Uygun s\u00fcre</li> <li>G\u00fcvenli saklama</li> <li>Token yenileme</li> <li>Token iptali</li> </ul>"},{"location":"senior/advanced-security/jwt/#3-jwt-zorluklar-nelerdir","title":"3. JWT zorluklar\u0131 nelerdir?","text":"<ul> <li>Token boyutu</li> <li>Token iptali</li> <li>G\u00fcvenlik riskleri</li> <li>Performans etkisi</li> <li>Karma\u015f\u0131k yap\u0131</li> </ul>"},{"location":"senior/advanced-security/jwt/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>JWT Specification</li> <li>JWT Best Practices</li> <li>JWT Security Considerations</li> <li>Microsoft JWT Documentation</li> <li>JWT Libraries </li> </ul>"},{"location":"senior/advanced-security/oauth2/","title":"OAuth2","text":""},{"location":"senior/advanced-security/oauth2/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>OAuth2, \u00fc\u00e7\u00fcnc\u00fc taraf uygulamalar\u0131n kullan\u0131c\u0131 ad\u0131na s\u0131n\u0131rl\u0131 eri\u015fim sa\u011flamas\u0131na olanak tan\u0131yan bir yetkilendirme protokol\u00fcd\u00fcr. Kullan\u0131c\u0131lar\u0131n kimlik bilgilerini payla\u015fmadan, belirli kaynaklara eri\u015fim izni vermesini sa\u011flar.</p>"},{"location":"senior/advanced-security/oauth2/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/advanced-security/oauth2/#1-oauth2-akslar","title":"1. OAuth2 Ak\u0131\u015flar\u0131","text":"<pre><code>public class OAuth2Service\n{\n    private readonly ILogger&lt;OAuth2Service&gt; _logger;\n    private readonly IHttpClientFactory _httpClientFactory;\n\n    public OAuth2Service(ILogger&lt;OAuth2Service&gt; logger, IHttpClientFactory httpClientFactory)\n    {\n        _logger = logger;\n        _httpClientFactory = httpClientFactory;\n    }\n\n    // Authorization Code Flow\n    public async Task&lt;AuthorizationCodeResponse&gt; GetAuthorizationCodeAsync(AuthorizationRequest request)\n    {\n        var client = _httpClientFactory.CreateClient();\n        var response = await client.PostAsync(request.AuthorizationEndpoint, new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;\n        {\n            [\"client_id\"] = request.ClientId,\n            [\"redirect_uri\"] = request.RedirectUri,\n            [\"response_type\"] = \"code\",\n            [\"scope\"] = string.Join(\" \", request.Scopes),\n            [\"state\"] = request.State\n        }));\n\n        var content = await response.Content.ReadAsStringAsync();\n        return JsonSerializer.Deserialize&lt;AuthorizationCodeResponse&gt;(content);\n    }\n\n    // Token Exchange\n    public async Task&lt;TokenResponse&gt; ExchangeCodeForTokenAsync(TokenRequest request)\n    {\n        var client = _httpClientFactory.CreateClient();\n        var response = await client.PostAsync(request.TokenEndpoint, new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;\n        {\n            [\"grant_type\"] = \"authorization_code\",\n            [\"code\"] = request.Code,\n            [\"redirect_uri\"] = request.RedirectUri,\n            [\"client_id\"] = request.ClientId,\n            [\"client_secret\"] = request.ClientSecret\n        }));\n\n        var content = await response.Content.ReadAsStringAsync();\n        return JsonSerializer.Deserialize&lt;TokenResponse&gt;(content);\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/oauth2/#2-token-yonetimi","title":"2. Token Y\u00f6netimi","text":"<pre><code>public class TokenManagementService\n{\n    private readonly ILogger&lt;TokenManagementService&gt; _logger;\n    private readonly ITokenStorage _tokenStorage;\n\n    public TokenManagementService(ILogger&lt;TokenManagementService&gt; logger, ITokenStorage tokenStorage)\n    {\n        _logger = logger;\n        _tokenStorage = tokenStorage;\n    }\n\n    public async Task&lt;TokenInfo&gt; StoreTokenAsync(TokenResponse tokenResponse)\n    {\n        var tokenInfo = new TokenInfo\n        {\n            AccessToken = tokenResponse.AccessToken,\n            RefreshToken = tokenResponse.RefreshToken,\n            ExpiresIn = tokenResponse.ExpiresIn,\n            TokenType = tokenResponse.TokenType,\n            Scope = tokenResponse.Scope,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _tokenStorage.StoreTokenAsync(tokenInfo);\n        _logger.LogInformation(\"Token stored successfully\");\n        return tokenInfo;\n    }\n\n    public async Task&lt;TokenInfo&gt; RefreshTokenAsync(string refreshToken)\n    {\n        var tokenInfo = await _tokenStorage.GetTokenByRefreshTokenAsync(refreshToken);\n        if (tokenInfo == null)\n        {\n            throw new InvalidOperationException(\"Refresh token not found\");\n        }\n\n        // Token yenileme i\u015flemi\n        var newToken = await RefreshTokenInternalAsync(tokenInfo);\n        await _tokenStorage.UpdateTokenAsync(newToken);\n        return newToken;\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/oauth2/#3-guvenlik-uygulamalar","title":"3. G\u00fcvenlik Uygulamalar\u0131","text":"<pre><code>public class OAuth2SecurityService\n{\n    private readonly ILogger&lt;OAuth2SecurityService&gt; _logger;\n    private readonly ISecurityValidator _securityValidator;\n\n    public OAuth2SecurityService(ILogger&lt;OAuth2SecurityService&gt; logger, ISecurityValidator securityValidator)\n    {\n        _logger = logger;\n        _securityValidator = securityValidator;\n    }\n\n    public async Task ValidateRequestAsync(OAuth2Request request)\n    {\n        // State parametresi kontrol\u00fc\n        if (!await _securityValidator.ValidateStateAsync(request.State))\n        {\n            throw new SecurityException(\"Invalid state parameter\");\n        }\n\n        // Redirect URI kontrol\u00fc\n        if (!await _securityValidator.ValidateRedirectUriAsync(request.RedirectUri))\n        {\n            throw new SecurityException(\"Invalid redirect URI\");\n        }\n\n        // Scope kontrol\u00fc\n        if (!await _securityValidator.ValidateScopesAsync(request.Scopes))\n        {\n            throw new SecurityException(\"Invalid scopes\");\n        }\n\n        // PKCE kontrol\u00fc\n        if (request.CodeChallenge != null)\n        {\n            if (!await _securityValidator.ValidateCodeChallengeAsync(request.CodeChallenge, request.CodeChallengeMethod))\n            {\n                throw new SecurityException(\"Invalid code challenge\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/oauth2/#best-practices","title":"Best Practices","text":""},{"location":"senior/advanced-security/oauth2/#1-guvenlik-onlemleri","title":"1. G\u00fcvenlik \u00d6nlemleri","text":"<ul> <li>PKCE (Proof Key for Code Exchange) kullan\u0131m\u0131</li> <li>State parametresi kontrol\u00fc</li> <li>Redirect URI do\u011frulama</li> <li>Scope s\u0131n\u0131rlamas\u0131</li> <li>Token g\u00fcvenli\u011fi</li> </ul>"},{"location":"senior/advanced-security/oauth2/#2-token-yonetimi_1","title":"2. Token Y\u00f6netimi","text":"<ul> <li>G\u00fcvenli token saklama</li> <li>Token yenileme stratejisi</li> <li>Token iptal mekanizmas\u0131</li> <li>Token s\u00fcre y\u00f6netimi</li> <li>Token \u015fifreleme</li> </ul>"},{"location":"senior/advanced-security/oauth2/#3-hata-yonetimi","title":"3. Hata Y\u00f6netimi","text":"<ul> <li>G\u00fcvenli hata mesajlar\u0131</li> <li>Loglama stratejisi</li> <li>Hata izleme</li> <li>\u0130yile\u015ftirme \u00f6nerileri</li> <li>Kullan\u0131c\u0131 bildirimleri</li> </ul>"},{"location":"senior/advanced-security/oauth2/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/advanced-security/oauth2/#1-oauth2-akslar-nelerdir","title":"1. OAuth2 ak\u0131\u015flar\u0131 nelerdir?","text":"<ul> <li>Authorization Code Flow</li> <li>Implicit Flow</li> <li>Client Credentials Flow</li> <li>Resource Owner Password Credentials Flow</li> <li>Device Flow</li> </ul>"},{"location":"senior/advanced-security/oauth2/#2-oauth2-guvenligi-nasl-saglanr","title":"2. OAuth2 g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>PKCE kullan\u0131m\u0131</li> <li>State parametresi</li> <li>Redirect URI do\u011frulama</li> <li>Scope s\u0131n\u0131rlamas\u0131</li> <li>Token g\u00fcvenli\u011fi</li> </ul>"},{"location":"senior/advanced-security/oauth2/#3-oauth2-zorluklar-nelerdir","title":"3. OAuth2 zorluklar\u0131 nelerdir?","text":"<ul> <li>Token y\u00f6netimi</li> <li>G\u00fcvenlik riskleri</li> <li>Performans etkisi</li> <li>Entegrasyon karma\u015f\u0131kl\u0131\u011f\u0131</li> <li>Hata y\u00f6netimi</li> </ul>"},{"location":"senior/advanced-security/oauth2/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OAuth2 Specification</li> <li>OAuth2 Best Practices</li> <li>OAuth2 Security Considerations</li> <li>OAuth2 Implementation Guide</li> <li>OAuth2 Libraries </li> </ul>"},{"location":"senior/advanced-security/openid-connect/","title":"OpenID Connect","text":""},{"location":"senior/advanced-security/openid-connect/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>OpenID Connect, OAuth2 protokol\u00fcn\u00fcn \u00fczerine in\u015fa edilmi\u015f bir kimlik do\u011frulama katman\u0131d\u0131r. Kullan\u0131c\u0131lar\u0131n kimliklerini do\u011frulamak ve temel profil bilgilerine eri\u015fmek i\u00e7in standart bir y\u00f6ntem sa\u011flar.</p>"},{"location":"senior/advanced-security/openid-connect/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/advanced-security/openid-connect/#1-openid-connect-akslar","title":"1. OpenID Connect Ak\u0131\u015flar\u0131","text":"<pre><code>public class OpenIdConnectService\n{\n    private readonly ILogger&lt;OpenIdConnectService&gt; _logger;\n    private readonly IHttpClientFactory _httpClientFactory;\n\n    public OpenIdConnectService(ILogger&lt;OpenIdConnectService&gt; logger, IHttpClientFactory httpClientFactory)\n    {\n        _logger = logger;\n        _httpClientFactory = httpClientFactory;\n    }\n\n    // Authorization Request\n    public async Task&lt;AuthorizationResponse&gt; GetAuthorizationAsync(AuthorizationRequest request)\n    {\n        var client = _httpClientFactory.CreateClient();\n        var response = await client.PostAsync(request.AuthorizationEndpoint, new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;\n        {\n            [\"client_id\"] = request.ClientId,\n            [\"redirect_uri\"] = request.RedirectUri,\n            [\"response_type\"] = \"code\",\n            [\"scope\"] = \"openid profile email\",\n            [\"state\"] = request.State,\n            [\"nonce\"] = request.Nonce\n        }));\n\n        var content = await response.Content.ReadAsStringAsync();\n        return JsonSerializer.Deserialize&lt;AuthorizationResponse&gt;(content);\n    }\n\n    // Token Request\n    public async Task&lt;TokenResponse&gt; GetTokensAsync(TokenRequest request)\n    {\n        var client = _httpClientFactory.CreateClient();\n        var response = await client.PostAsync(request.TokenEndpoint, new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;\n        {\n            [\"grant_type\"] = \"authorization_code\",\n            [\"code\"] = request.Code,\n            [\"redirect_uri\"] = request.RedirectUri,\n            [\"client_id\"] = request.ClientId,\n            [\"client_secret\"] = request.ClientSecret\n        }));\n\n        var content = await response.Content.ReadAsStringAsync();\n        return JsonSerializer.Deserialize&lt;TokenResponse&gt;(content);\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/openid-connect/#2-id-token-dogrulama","title":"2. ID Token Do\u011frulama","text":"<pre><code>public class IdTokenValidator\n{\n    private readonly ILogger&lt;IdTokenValidator&gt; _logger;\n    private readonly IJwtValidator _jwtValidator;\n\n    public IdTokenValidator(ILogger&lt;IdTokenValidator&gt; logger, IJwtValidator jwtValidator)\n    {\n        _logger = logger;\n        _jwtValidator = jwtValidator;\n    }\n\n    public async Task&lt;IdTokenClaims&gt; ValidateIdTokenAsync(string idToken, string clientId, string issuer)\n    {\n        // Token imza do\u011frulama\n        var isValid = await _jwtValidator.ValidateSignatureAsync(idToken);\n        if (!isValid)\n        {\n            throw new SecurityException(\"Invalid token signature\");\n        }\n\n        // Token claims do\u011frulama\n        var claims = await _jwtValidator.ValidateClaimsAsync(idToken, new TokenValidationParameters\n        {\n            ValidIssuer = issuer,\n            ValidAudience = clientId,\n            RequireExpirationTime = true,\n            ValidateLifetime = true,\n            ClockSkew = TimeSpan.FromMinutes(5)\n        });\n\n        return new IdTokenClaims\n        {\n            Subject = claims.Subject,\n            Issuer = claims.Issuer,\n            Audience = claims.Audience,\n            Expiration = claims.Expiration,\n            IssuedAt = claims.IssuedAt,\n            Nonce = claims.Nonce\n        };\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/openid-connect/#3-userinfo-endpoint","title":"3. UserInfo Endpoint","text":"<pre><code>public class UserInfoService\n{\n    private readonly ILogger&lt;UserInfoService&gt; _logger;\n    private readonly IHttpClientFactory _httpClientFactory;\n\n    public UserInfoService(ILogger&lt;UserInfoService&gt; logger, IHttpClientFactory httpClientFactory)\n    {\n        _logger = logger;\n        _httpClientFactory = httpClientFactory;\n    }\n\n    public async Task&lt;UserInfo&gt; GetUserInfoAsync(string accessToken, string userInfoEndpoint)\n    {\n        var client = _httpClientFactory.CreateClient();\n        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n\n        var response = await client.GetAsync(userInfoEndpoint);\n        var content = await response.Content.ReadAsStringAsync();\n\n        return JsonSerializer.Deserialize&lt;UserInfo&gt;(content);\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/openid-connect/#best-practices","title":"Best Practices","text":""},{"location":"senior/advanced-security/openid-connect/#1-guvenlik-onlemleri","title":"1. G\u00fcvenlik \u00d6nlemleri","text":"<ul> <li>ID Token do\u011frulama</li> <li>Nonce kontrol\u00fc</li> <li>Token yenileme</li> <li>PKCE kullan\u0131m\u0131</li> <li>State parametresi</li> </ul>"},{"location":"senior/advanced-security/openid-connect/#2-kimlik-yonetimi","title":"2. Kimlik Y\u00f6netimi","text":"<ul> <li>Kullan\u0131c\u0131 bilgileri</li> <li>Profil y\u00f6netimi</li> <li>Oturum y\u00f6netimi</li> <li>\u00c7oklu oturum</li> <li>Oturum sonland\u0131rma</li> </ul>"},{"location":"senior/advanced-security/openid-connect/#3-entegrasyon","title":"3. Entegrasyon","text":"<ul> <li>Client uygulamas\u0131</li> <li>Identity Provider</li> <li>Token y\u00f6netimi</li> <li>Hata y\u00f6netimi</li> <li>Loglama</li> </ul>"},{"location":"senior/advanced-security/openid-connect/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/advanced-security/openid-connect/#1-openid-connect-ve-oauth2-arasndaki-fark-nedir","title":"1. OpenID Connect ve OAuth2 aras\u0131ndaki fark nedir?","text":"<ul> <li>Kimlik do\u011frulama vs yetkilendirme</li> <li>ID Token vs Access Token</li> <li>Kullan\u0131c\u0131 bilgileri</li> <li>Profil y\u00f6netimi</li> <li>G\u00fcvenlik \u00f6nlemleri</li> </ul>"},{"location":"senior/advanced-security/openid-connect/#2-openid-connect-guvenligi-nasl-saglanr","title":"2. OpenID Connect g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>ID Token do\u011frulama</li> <li>Nonce kontrol\u00fc</li> <li>Token yenileme</li> <li>PKCE kullan\u0131m\u0131</li> <li>State parametresi</li> </ul>"},{"location":"senior/advanced-security/openid-connect/#3-openid-connect-zorluklar-nelerdir","title":"3. OpenID Connect zorluklar\u0131 nelerdir?","text":"<ul> <li>Token y\u00f6netimi</li> <li>G\u00fcvenlik riskleri</li> <li>Entegrasyon karma\u015f\u0131kl\u0131\u011f\u0131</li> <li>Performans etkisi</li> <li>Hata y\u00f6netimi</li> </ul>"},{"location":"senior/advanced-security/openid-connect/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OpenID Connect Specification</li> <li>OpenID Connect Core</li> <li>OpenID Connect Best Practices</li> <li>Microsoft Identity Platform</li> <li>OpenID Connect Libraries </li> </ul>"},{"location":"senior/advanced-security/penetration-testing/","title":"Penetration Testing (S\u0131zma Testi)","text":""},{"location":"senior/advanced-security/penetration-testing/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>S\u0131zma testi, bir sistemin g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 tespit etmek ve de\u011ferlendirmek i\u00e7in yap\u0131lan kontroll\u00fc sald\u0131r\u0131 sim\u00fclasyonlar\u0131d\u0131r. Bu testler, sistemin g\u00fcvenlik \u00f6nlemlerinin etkinli\u011fini \u00f6l\u00e7er ve potansiyel zay\u0131f noktalar\u0131 ortaya \u00e7\u0131kar\u0131r.</p>"},{"location":"senior/advanced-security/penetration-testing/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/advanced-security/penetration-testing/#1-szma-testi-planlamas","title":"1. S\u0131zma Testi Planlamas\u0131","text":"<pre><code>public class PenetrationTestPlan\n{\n    public string Scope { get; set; }\n    public List&lt;string&gt; TestObjectives { get; set; }\n    public List&lt;string&gt; TestMethods { get; set; }\n    public DateTime StartDate { get; set; }\n    public DateTime EndDate { get; set; }\n    public List&lt;string&gt; ExcludedSystems { get; set; }\n    public List&lt;string&gt; Testers { get; set; }\n    public string ReportingFormat { get; set; }\n\n    public void ValidatePlan()\n    {\n        if (string.IsNullOrEmpty(Scope))\n            throw new ArgumentException(\"Test kapsam\u0131 belirtilmelidir\");\n\n        if (TestObjectives == null || !TestObjectives.Any())\n            throw new ArgumentException(\"Test hedefleri belirtilmelidir\");\n\n        if (StartDate &gt;= EndDate)\n            throw new ArgumentException(\"Test tarihleri ge\u00e7erli de\u011fil\");\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/penetration-testing/#2-guvenlik-acg-taramas","title":"2. G\u00fcvenlik A\u00e7\u0131\u011f\u0131 Taramas\u0131","text":"<pre><code>public class VulnerabilityScanner\n{\n    private readonly ILogger&lt;VulnerabilityScanner&gt; _logger;\n    private readonly List&lt;string&gt; _targetUrls;\n    private readonly List&lt;string&gt; _scanTypes;\n\n    public VulnerabilityScanner(ILogger&lt;VulnerabilityScanner&gt; logger)\n    {\n        _logger = logger;\n        _targetUrls = new List&lt;string&gt;();\n        _scanTypes = new List&lt;string&gt; { \"SQL Injection\", \"XSS\", \"CSRF\", \"File Inclusion\" };\n    }\n\n    public async Task&lt;List&lt;Vulnerability&gt;&gt; ScanTarget(string url)\n    {\n        var vulnerabilities = new List&lt;Vulnerability&gt;();\n\n        foreach (var scanType in _scanTypes)\n        {\n            try\n            {\n                var result = await PerformScan(url, scanType);\n                if (result.IsVulnerable)\n                {\n                    vulnerabilities.Add(new Vulnerability\n                    {\n                        Type = scanType,\n                        Severity = result.Severity,\n                        Description = result.Description,\n                        Recommendation = result.Recommendation\n                    });\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $\"Tarama hatas\u0131: {scanType}\");\n            }\n        }\n\n        return vulnerabilities;\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/penetration-testing/#3-raporlama-ve-analiz","title":"3. Raporlama ve Analiz","text":"<pre><code>public class PenetrationTestReport\n{\n    public string ProjectName { get; set; }\n    public DateTime TestDate { get; set; }\n    public List&lt;Vulnerability&gt; Findings { get; set; }\n    public RiskAssessment RiskLevel { get; set; }\n    public List&lt;string&gt; Recommendations { get; set; }\n\n    public void GenerateReport()\n    {\n        var report = new StringBuilder();\n        report.AppendLine($\"S\u0131zma Testi Raporu: {ProjectName}\");\n        report.AppendLine($\"Test Tarihi: {TestDate}\");\n        report.AppendLine($\"Risk Seviyesi: {RiskLevel}\");\n\n        report.AppendLine(\"\\nBulunan G\u00fcvenlik A\u00e7\u0131klar\u0131:\");\n        foreach (var finding in Findings.OrderByDescending(f =&gt; f.Severity))\n        {\n            report.AppendLine($\"- {finding.Type} (\u00d6nem: {finding.Severity})\");\n            report.AppendLine($\"  A\u00e7\u0131klama: {finding.Description}\");\n            report.AppendLine($\"  \u00d6neri: {finding.Recommendation}\");\n        }\n\n        report.AppendLine(\"\\nGenel \u00d6neriler:\");\n        foreach (var recommendation in Recommendations)\n        {\n            report.AppendLine($\"- {recommendation}\");\n        }\n\n        File.WriteAllText($\"PenetrationTestReport_{DateTime.Now:yyyyMMdd}.txt\", report.ToString());\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/penetration-testing/#best-practices","title":"Best Practices","text":""},{"location":"senior/advanced-security/penetration-testing/#1-test-planlamas","title":"1. Test Planlamas\u0131","text":"<ul> <li>Kapsam belirleme</li> <li>Hedef sistemlerin tan\u0131mlanmas\u0131</li> <li>Test y\u00f6ntemlerinin se\u00e7imi</li> <li>Zaman planlamas\u0131</li> <li>\u0130zin ve onay s\u00fcre\u00e7leri</li> </ul>"},{"location":"senior/advanced-security/penetration-testing/#2-test-yurutme","title":"2. Test Y\u00fcr\u00fctme","text":"<ul> <li>Etik kurallara uyum</li> <li>Sistem etkisinin minimize edilmesi</li> <li>Veri g\u00fcvenli\u011fi</li> <li>Dok\u00fcmantasyon</li> <li>\u0130leti\u015fim y\u00f6netimi</li> </ul>"},{"location":"senior/advanced-security/penetration-testing/#3-raporlama-ve-takip","title":"3. Raporlama ve Takip","text":"<ul> <li>Bulgular\u0131n detayl\u0131 raporlanmas\u0131</li> <li>Risk de\u011ferlendirmesi</li> <li>\u00d6nerilerin sunulmas\u0131</li> <li>D\u00fczeltme plan\u0131</li> <li>Takip testleri</li> </ul>"},{"location":"senior/advanced-security/penetration-testing/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/advanced-security/penetration-testing/#1-szma-testi-neden-onemlidir","title":"1. S\u0131zma testi neden \u00f6nemlidir?","text":"<ul> <li>G\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131n tespiti</li> <li>Risk de\u011ferlendirmesi</li> <li>Yasal uyumluluk</li> <li>M\u00fc\u015fteri g\u00fcveni</li> <li>S\u00fcrekli iyile\u015ftirme</li> </ul>"},{"location":"senior/advanced-security/penetration-testing/#2-szma-testi-nasl-yaplr","title":"2. S\u0131zma testi nas\u0131l yap\u0131l\u0131r?","text":"<ul> <li>Planlama</li> <li>Bilgi toplama</li> <li>G\u00fcvenlik a\u00e7\u0131\u011f\u0131 taramas\u0131</li> <li>S\u00f6m\u00fcr\u00fc testleri</li> <li>Raporlama</li> </ul>"},{"location":"senior/advanced-security/penetration-testing/#3-szma-testi-zorluklar-nelerdir","title":"3. S\u0131zma testi zorluklar\u0131 nelerdir?","text":"<ul> <li>Kapsam belirleme</li> <li>Sistem etkisi</li> <li>Yasal s\u0131n\u0131rlamalar</li> <li>Uzmanl\u0131k gereksinimi</li> <li>Zaman ve maliyet</li> </ul>"},{"location":"senior/advanced-security/penetration-testing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OWASP Penetration Testing Guide</li> <li>NIST Penetration Testing Guidelines</li> <li>PTES Technical Guidelines</li> <li>Kali Linux Tools</li> <li>Metasploit Framework </li> </ul>"},{"location":"senior/advanced-security/security-headers/","title":"Security Headers (G\u00fcvenlik Ba\u015fl\u0131klar\u0131)","text":""},{"location":"senior/advanced-security/security-headers/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>G\u00fcvenlik ba\u015fl\u0131klar\u0131, web uygulamalar\u0131n\u0131n g\u00fcvenli\u011fini art\u0131rmak i\u00e7in kullan\u0131lan HTTP yan\u0131t ba\u015fl\u0131klar\u0131d\u0131r. Bu ba\u015fl\u0131klar, taray\u0131c\u0131lar\u0131n uygulamay\u0131 nas\u0131l i\u015fleyece\u011fini ve hangi g\u00fcvenlik politikalar\u0131n\u0131 uygulayaca\u011f\u0131n\u0131 belirler.</p>"},{"location":"senior/advanced-security/security-headers/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/advanced-security/security-headers/#1-content-security-policy-csp","title":"1. Content Security Policy (CSP)","text":"<pre><code>public class SecurityHeadersMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;SecurityHeadersMiddleware&gt; _logger;\n\n    public SecurityHeadersMiddleware(RequestDelegate next, ILogger&lt;SecurityHeadersMiddleware&gt; logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        // CSP ba\u015fl\u0131\u011f\u0131 ekle\n        context.Response.Headers.Add(\"Content-Security-Policy\", \n            \"default-src 'self'; \" +\n            \"script-src 'self' 'unsafe-inline' 'unsafe-eval'; \" +\n            \"style-src 'self' 'unsafe-inline'; \" +\n            \"img-src 'self' data:; \" +\n            \"font-src 'self'; \" +\n            \"connect-src 'self'; \" +\n            \"frame-ancestors 'none'; \" +\n            \"form-action 'self'; \" +\n            \"base-uri 'self'; \" +\n            \"object-src 'none'\");\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/security-headers/#2-http-strict-transport-security-hsts","title":"2. HTTP Strict Transport Security (HSTS)","text":"<pre><code>public class HstsMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;HstsMiddleware&gt; _logger;\n\n    public HstsMiddleware(RequestDelegate next, ILogger&lt;HstsMiddleware&gt; logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.IsHttps)\n        {\n            // HSTS ba\u015fl\u0131\u011f\u0131 ekle\n            context.Response.Headers.Add(\"Strict-Transport-Security\", \n                \"max-age=31536000; includeSubDomains; preload\");\n        }\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/security-headers/#3-x-frame-options-ve-x-content-type-options","title":"3. X-Frame-Options ve X-Content-Type-Options","text":"<pre><code>public class FrameOptionsMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;FrameOptionsMiddleware&gt; _logger;\n\n    public FrameOptionsMiddleware(RequestDelegate next, ILogger&lt;FrameOptionsMiddleware&gt; logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        // X-Frame-Options ba\u015fl\u0131\u011f\u0131 ekle\n        context.Response.Headers.Add(\"X-Frame-Options\", \"DENY\");\n\n        // X-Content-Type-Options ba\u015fl\u0131\u011f\u0131 ekle\n        context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\");\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/security-headers/#4-referrer-policy-ve-permissions-policy","title":"4. Referrer Policy ve Permissions Policy","text":"<pre><code>public class ReferrerPolicyMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;ReferrerPolicyMiddleware&gt; _logger;\n\n    public ReferrerPolicyMiddleware(RequestDelegate next, ILogger&lt;ReferrerPolicyMiddleware&gt; logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        // Referrer-Policy ba\u015fl\u0131\u011f\u0131 ekle\n        context.Response.Headers.Add(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n\n        // Permissions-Policy ba\u015fl\u0131\u011f\u0131 ekle\n        context.Response.Headers.Add(\"Permissions-Policy\", \n            \"geolocation=(), \" +\n            \"microphone=(), \" +\n            \"camera=(), \" +\n            \"payment=(), \" +\n            \"usb=()\");\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"senior/advanced-security/security-headers/#best-practices","title":"Best Practices","text":""},{"location":"senior/advanced-security/security-headers/#1-baslk-konfigurasyonu","title":"1. Ba\u015fl\u0131k Konfig\u00fcrasyonu","text":"<ul> <li>CSP politikalar\u0131</li> <li>HSTS ayarlar\u0131</li> <li>Frame se\u00e7enekleri</li> <li>\u0130\u00e7erik t\u00fcr\u00fc se\u00e7enekleri</li> <li>Referrer politikalar\u0131</li> </ul>"},{"location":"senior/advanced-security/security-headers/#2-guvenlik-politikalar","title":"2. G\u00fcvenlik Politikalar\u0131","text":"<ul> <li>Kaynak k\u0131s\u0131tlamalar\u0131</li> <li>\u0130\u00e7erik g\u00fcvenli\u011fi</li> <li>\u00c7er\u00e7eve korumas\u0131</li> <li>MIME t\u00fcr\u00fc korumas\u0131</li> <li>\u0130zin politikalar\u0131</li> </ul>"},{"location":"senior/advanced-security/security-headers/#3-tarayc-uyumlulugu","title":"3. Taray\u0131c\u0131 Uyumlulu\u011fu","text":"<ul> <li>Taray\u0131c\u0131 deste\u011fi</li> <li>Geriye d\u00f6n\u00fck uyumluluk</li> <li>Politika uygulamas\u0131</li> <li>Hata y\u00f6netimi</li> <li>Test stratejisi</li> </ul>"},{"location":"senior/advanced-security/security-headers/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/advanced-security/security-headers/#1-guvenlik-baslklar-neden-onemlidir","title":"1. G\u00fcvenlik ba\u015fl\u0131klar\u0131 neden \u00f6nemlidir?","text":"<ul> <li>XSS korumas\u0131</li> <li>Clickjacking korumas\u0131</li> <li>MIME t\u00fcr\u00fc korumas\u0131</li> <li>Referrer bilgisi korumas\u0131</li> <li>SSL/TLS zorunlulu\u011fu</li> </ul>"},{"location":"senior/advanced-security/security-headers/#2-guvenlik-baslklar-nasl-yaplandrlr","title":"2. G\u00fcvenlik ba\u015fl\u0131klar\u0131 nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?","text":"<ul> <li>CSP politikalar\u0131</li> <li>HSTS ayarlar\u0131</li> <li>Frame se\u00e7enekleri</li> <li>\u0130\u00e7erik t\u00fcr\u00fc se\u00e7enekleri</li> <li>Referrer politikalar\u0131</li> </ul>"},{"location":"senior/advanced-security/security-headers/#3-guvenlik-baslklar-zorluklar-nelerdir","title":"3. G\u00fcvenlik ba\u015fl\u0131klar\u0131 zorluklar\u0131 nelerdir?","text":"<ul> <li>Politika karma\u015f\u0131kl\u0131\u011f\u0131</li> <li>Taray\u0131c\u0131 uyumlulu\u011fu</li> <li>Performans etkisi</li> <li>Hata ay\u0131klama</li> <li>Test zorluklar\u0131</li> </ul>"},{"location":"senior/advanced-security/security-headers/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Content Security Policy</li> <li>HTTP Strict Transport Security</li> <li>X-Frame-Options</li> <li>Referrer Policy</li> <li>Permissions Policy </li> </ul>"},{"location":"senior/advanced-system-design/","title":"Advanced System Design","text":""},{"location":"senior/advanced-system-design/#giris","title":"Giri\u015f","text":"<p>Advanced System Design, large-scale, distributed ve complex sistemlerin tasar\u0131m\u0131, implementasyonu ve y\u00f6netimi i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in advanced system design konular\u0131n\u0131 anlamak, scalable systems tasarlamak, distributed systems implement etmek ve system architecture optimize etmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, distributed systems, event sourcing, CQRS, saga pattern, outbox pattern ve two-phase commit konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/advanced-system-design/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/advanced-system-design/#1-distributed-systems","title":"1. Distributed Systems","text":"<p>Distributed system design, CAP theorem, consistency models, ve distributed algorithms.</p> <p>\u00d6\u011frenilecekler: - CAP theorem - Consistency models - Distributed algorithms - Network partitioning - Failure handling</p>"},{"location":"senior/advanced-system-design/#2-event-sourcing-cqrs","title":"2. Event Sourcing &amp; CQRS","text":"<p>Event-driven architecture, command query responsibility segregation, ve event store.</p> <p>\u00d6\u011frenilecekler: - Event sourcing - CQRS pattern - Event store - Event replay - Event versioning</p>"},{"location":"senior/advanced-system-design/#3-saga-pattern","title":"3. Saga Pattern","text":"<p>Distributed transaction management, saga orchestration, ve saga choreography.</p> <p>\u00d6\u011frenilecekler: - Saga pattern - Saga orchestration - Saga choreography - Compensation logic - Saga monitoring</p>"},{"location":"senior/advanced-system-design/#4-outbox-pattern","title":"4. Outbox Pattern","text":"<p>Reliable message delivery, transactional outbox, ve message processing.</p> <p>\u00d6\u011frenilecekler: - Outbox pattern - Transactional outbox - Message processing - Idempotency - Dead letter queues</p>"},{"location":"senior/advanced-system-design/#5-two-phase-commit","title":"5. Two-Phase Commit","text":"<p>Distributed transaction coordination, consensus protocols, ve failure recovery.</p> <p>\u00d6\u011frenilecekler: - Two-phase commit - Consensus protocols - Failure recovery - Performance optimization - Alternative approaches</p>"},{"location":"senior/advanced-system-design/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/advanced-system-design/#1-system-scalability","title":"1. System Scalability","text":"<ul> <li>Handle large scale</li> <li>Support growth</li> <li>Performance optimization</li> <li>Resource management</li> <li>Load distribution</li> </ul>"},{"location":"senior/advanced-system-design/#2-system-reliability","title":"2. System Reliability","text":"<ul> <li>Fault tolerance</li> <li>High availability</li> <li>Data consistency</li> <li>Failure recovery</li> <li>Disaster recovery</li> </ul>"},{"location":"senior/advanced-system-design/#3-business-requirements","title":"3. Business Requirements","text":"<ul> <li>Complex workflows</li> <li>Data integrity</li> <li>Transaction management</li> <li>Event processing</li> <li>Real-time systems</li> </ul>"},{"location":"senior/advanced-system-design/#4-technical-excellence","title":"4. Technical Excellence","text":"<ul> <li>Modern architecture</li> <li>Best practices</li> <li>Proven patterns</li> <li>Performance optimization</li> <li>Maintainability</li> </ul>"},{"location":"senior/advanced-system-design/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/advanced-system-design/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Distributed system nedir?</li> <li> <p>Cevap: Multiple nodes, network communication, shared state, failure handling.</p> </li> <li> <p>CAP theorem nedir?</p> </li> <li> <p>Cevap: Consistency, Availability, Partition tolerance - pick two.</p> </li> <li> <p>Event sourcing nedir?</p> </li> <li> <p>Cevap: Store events, replay history, audit trail, temporal queries.</p> </li> <li> <p>CQRS nedir?</p> </li> <li> <p>Cevap: Command Query Responsibility Segregation, separate read/write models.</p> </li> <li> <p>Saga pattern nedir?</p> </li> <li>Cevap: Distributed transaction management, compensation logic, failure handling.</li> </ol>"},{"location":"senior/advanced-system-design/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Distributed system nas\u0131l tasarlan\u0131r?</li> <li> <p>Cevap: Network topology, communication protocols, failure handling, consistency models.</p> </li> <li> <p>Event sourcing nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Event store, event handlers, event replay, event versioning.</p> </li> <li> <p>Saga pattern nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Saga definition, orchestration/choreography, compensation logic, monitoring.</p> </li> <li> <p>Outbox pattern neden kullan\u0131l\u0131r?</p> </li> <li> <p>Cevap: Reliable messaging, transactional consistency, idempotency, failure handling.</p> </li> <li> <p>Two-phase commit nas\u0131l optimize edilir?</p> </li> <li>Cevap: Performance tuning, failure handling, alternative protocols, monitoring.</li> </ol>"},{"location":"senior/advanced-system-design/#best-practices","title":"Best Practices","text":""},{"location":"senior/advanced-system-design/#1-distributed-system-design","title":"1. Distributed System Design","text":"<ul> <li>Design for failure</li> <li>Implement retry logic</li> <li>Use circuit breakers</li> <li>Monitor network latency</li> <li>Plan for scaling</li> </ul>"},{"location":"senior/advanced-system-design/#2-event-sourcing-implementation","title":"2. Event Sourcing Implementation","text":"<ul> <li>Design event schema</li> <li>Implement event handlers</li> <li>Plan for event replay</li> <li>Handle event versioning</li> <li>Monitor event processing</li> </ul>"},{"location":"senior/advanced-system-design/#3-cqrs-implementation","title":"3. CQRS Implementation","text":"<ul> <li>Separate read/write models</li> <li>Optimize read models</li> <li>Handle eventual consistency</li> <li>Implement caching</li> <li>Monitor performance</li> </ul>"},{"location":"senior/advanced-system-design/#4-saga-pattern-implementation","title":"4. Saga Pattern Implementation","text":"<ul> <li>Design saga steps</li> <li>Implement compensation</li> <li>Handle failures</li> <li>Monitor saga execution</li> <li>Plan for rollback</li> </ul>"},{"location":"senior/advanced-system-design/#5-outbox-pattern-implementation","title":"5. Outbox Pattern Implementation","text":"<ul> <li>Ensure transactional consistency</li> <li>Handle message processing</li> <li>Implement idempotency</li> <li>Monitor message delivery</li> <li>Plan for failure recovery</li> </ul>"},{"location":"senior/advanced-system-design/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Distributed Systems</li> <li>CAP Theorem</li> <li>Event Sourcing</li> <li>CQRS</li> <li>Saga Pattern</li> <li>Outbox Pattern</li> <li>Two-Phase Commit </li> </ul>"},{"location":"senior/cloud-architecture/","title":"Cloud Architecture","text":""},{"location":"senior/cloud-architecture/#giris","title":"Giri\u015f","text":"<p>Cloud Architecture, modern software development'da scalability, flexibility ve cost optimization i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in cloud architecture'i anlamak, cloud-native applications geli\u015ftirmek, multi-cloud strategies implement etmek ve cloud migration planlamak i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, Azure services, AWS services, containerization, serverless ve cloud security konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/cloud-architecture/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/cloud-architecture/#1-azure-services","title":"1. Azure Services","text":"<p>Microsoft Azure cloud services, Azure architecture patterns, ve Azure best practices.</p> <p>\u00d6\u011frenilecekler: - Azure compute services - Azure storage services - Azure networking - Azure security - Azure monitoring</p>"},{"location":"senior/cloud-architecture/#2-aws-services","title":"2. AWS Services","text":"<p>Amazon Web Services, AWS architecture patterns, ve AWS best practices.</p> <p>\u00d6\u011frenilecekler: - AWS compute services - AWS storage services - AWS networking - AWS security - AWS monitoring</p>"},{"location":"senior/cloud-architecture/#3-containerization","title":"3. Containerization","text":"<p>Docker, container orchestration, ve container-based architecture.</p> <p>\u00d6\u011frenilecekler: - Docker containers - Container orchestration - Kubernetes - Container security - Container monitoring</p>"},{"location":"senior/cloud-architecture/#4-serverless","title":"4. Serverless","text":"<p>Function-as-a-Service, serverless architecture, ve serverless patterns.</p> <p>\u00d6\u011frenilecekler: - FaaS platforms - Serverless patterns - Event-driven architecture - Cost optimization - Performance considerations</p>"},{"location":"senior/cloud-architecture/#5-cloud-security","title":"5. Cloud Security","text":"<p>Cloud security best practices, identity management, ve security monitoring.</p> <p>\u00d6\u011frenilecekler: - Identity and access management - Network security - Data encryption - Security monitoring - Compliance requirements</p>"},{"location":"senior/cloud-architecture/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/cloud-architecture/#1-modern-development","title":"1. Modern Development","text":"<ul> <li>Cloud-native applications</li> <li>Scalable architecture</li> <li>Cost optimization</li> <li>Global deployment</li> <li>Rapid development</li> </ul>"},{"location":"senior/cloud-architecture/#2-business-requirements","title":"2. Business Requirements","text":"<ul> <li>Scalability needs</li> <li>Cost optimization</li> <li>Global presence</li> <li>Compliance requirements</li> <li>Competitive advantage</li> </ul>"},{"location":"senior/cloud-architecture/#3-technical-excellence","title":"3. Technical Excellence","text":"<ul> <li>Best practices</li> <li>Proven patterns</li> <li>Security standards</li> <li>Performance optimization</li> <li>Future-proof design</li> </ul>"},{"location":"senior/cloud-architecture/#4-career-growth","title":"4. Career Growth","text":"<ul> <li>Senior engineer requirements</li> <li>Cloud expertise</li> <li>Architecture decisions</li> <li>Technical leadership</li> <li>Industry knowledge</li> </ul>"},{"location":"senior/cloud-architecture/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/cloud-architecture/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Cloud architecture nedir?</li> <li> <p>Cevap: Cloud-based system design, scalability, cost optimization, global deployment.</p> </li> <li> <p>Azure vs AWS farklar\u0131 nelerdir?</p> </li> <li> <p>Cevap: Service offerings, pricing models, integration, ecosystem, support.</p> </li> <li> <p>Containerization nedir?</p> </li> <li> <p>Cevap: Application packaging, deployment consistency, resource isolation, portability.</p> </li> <li> <p>Serverless nedir?</p> </li> <li> <p>Cevap: FaaS, event-driven, auto-scaling, cost optimization, managed services.</p> </li> <li> <p>Cloud security nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap: Identity management, network security, data encryption, monitoring, compliance.</li> </ol>"},{"location":"senior/cloud-architecture/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Multi-cloud strategy nas\u0131l implement edilir?</li> <li> <p>Cevap: Service abstraction, cloud-agnostic design, cost optimization, risk mitigation.</p> </li> <li> <p>Container orchestration nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Kubernetes, service discovery, load balancing, auto-scaling, health monitoring.</p> </li> <li> <p>Cloud migration nas\u0131l planlan\u0131r?</p> </li> <li> <p>Cevap: Assessment, strategy, execution, testing, optimization.</p> </li> <li> <p>Serverless performance nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Cold start optimization, function design, resource allocation, monitoring.</p> </li> <li> <p>Cloud cost optimization nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Resource optimization, auto-scaling, reserved instances, monitoring, optimization.</li> </ol>"},{"location":"senior/cloud-architecture/#best-practices","title":"Best Practices","text":""},{"location":"senior/cloud-architecture/#1-cloud-design","title":"1. Cloud Design","text":"<ul> <li>Design for scalability</li> <li>Use managed services</li> <li>Implement security first</li> <li>Plan for cost optimization</li> <li>Monitor performance</li> </ul>"},{"location":"senior/cloud-architecture/#2-multi-cloud-strategy","title":"2. Multi-Cloud Strategy","text":"<ul> <li>Service abstraction</li> <li>Cloud-agnostic design</li> <li>Cost optimization</li> <li>Risk mitigation</li> <li>Vendor lock-in avoidance</li> </ul>"},{"location":"senior/cloud-architecture/#3-security-implementation","title":"3. Security Implementation","text":"<ul> <li>Identity management</li> <li>Network security</li> <li>Data encryption</li> <li>Security monitoring</li> <li>Compliance adherence</li> </ul>"},{"location":"senior/cloud-architecture/#4-performance-optimization","title":"4. Performance Optimization","text":"<ul> <li>Use appropriate services</li> <li>Implement caching</li> <li>Optimize networking</li> <li>Monitor performance</li> <li>Plan for scaling</li> </ul>"},{"location":"senior/cloud-architecture/#5-cost-management","title":"5. Cost Management","text":"<ul> <li>Resource optimization</li> <li>Auto-scaling</li> <li>Reserved instances</li> <li>Cost monitoring</li> <li>Regular optimization</li> </ul>"},{"location":"senior/cloud-architecture/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Azure Architecture Center</li> <li>AWS Architecture Center</li> <li>Container Best Practices</li> <li>Serverless Architecture</li> <li>Cloud Security</li> <li>Multi-Cloud Strategy </li> </ul>"},{"location":"senior/cloud-architecture/aws-services/","title":"AWS Services","text":""},{"location":"senior/cloud-architecture/aws-services/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Amazon Web Services (AWS), Amazon'un bulut bili\u015fim platformudur ve geni\u015f bir yelpazede hizmet sunar. Bu hizmetler, uygulamalar\u0131n geli\u015ftirilmesi, da\u011f\u0131t\u0131lmas\u0131 ve y\u00f6netilmesi i\u00e7in gerekli t\u00fcm altyap\u0131y\u0131 ve ara\u00e7lar\u0131 sa\u011flar.</p>"},{"location":"senior/cloud-architecture/aws-services/#temel-hizmetler","title":"Temel Hizmetler","text":""},{"location":"senior/cloud-architecture/aws-services/#1-compute-services","title":"1. Compute Services","text":"<pre><code>public class AWSComputeService\n{\n    private readonly ILogger&lt;AWSComputeService&gt; _logger;\n    private readonly IAmazonEC2 _ec2Client;\n\n    public AWSComputeService(\n        ILogger&lt;AWSComputeService&gt; logger,\n        IAmazonEC2 ec2Client)\n    {\n        _logger = logger;\n        _ec2Client = ec2Client;\n    }\n\n    public async Task LaunchEC2InstanceAsync(EC2Config config)\n    {\n        var request = new RunInstancesRequest\n        {\n            ImageId = config.ImageId,\n            InstanceType = config.InstanceType,\n            MinCount = 1,\n            MaxCount = 1,\n            SecurityGroupIds = config.SecurityGroupIds,\n            SubnetId = config.SubnetId,\n            KeyName = config.KeyName\n        };\n\n        var response = await _ec2Client.RunInstancesAsync(request);\n        _logger.LogInformation($\"EC2 instance launched with ID: {response.Reservation.Instances[0].InstanceId}\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/aws-services/#2-storage-services","title":"2. Storage Services","text":"<pre><code>public class AWSStorageService\n{\n    private readonly ILogger&lt;AWSStorageService&gt; _logger;\n    private readonly IAmazonS3 _s3Client;\n\n    public AWSStorageService(\n        ILogger&lt;AWSStorageService&gt; logger,\n        IAmazonS3 s3Client)\n    {\n        _logger = logger;\n        _s3Client = s3Client;\n    }\n\n    public async Task UploadFileAsync(string bucketName, string key, Stream content)\n    {\n        var request = new PutObjectRequest\n        {\n            BucketName = bucketName,\n            Key = key,\n            InputStream = content\n        };\n\n        await _s3Client.PutObjectAsync(request);\n        _logger.LogInformation($\"File uploaded to S3: {bucketName}/{key}\");\n    }\n\n    public async Task&lt;Stream&gt; DownloadFileAsync(string bucketName, string key)\n    {\n        var request = new GetObjectRequest\n        {\n            BucketName = bucketName,\n            Key = key\n        };\n\n        var response = await _s3Client.GetObjectAsync(request);\n        return response.ResponseStream;\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/aws-services/#3-networking-services","title":"3. Networking Services","text":"<pre><code>public class AWSNetworkingService\n{\n    private readonly ILogger&lt;AWSNetworkingService&gt; _logger;\n    private readonly IAmazonEC2 _ec2Client;\n\n    public AWSNetworkingService(\n        ILogger&lt;AWSNetworkingService&gt; logger,\n        IAmazonEC2 ec2Client)\n    {\n        _logger = logger;\n        _ec2Client = ec2Client;\n    }\n\n    public async Task CreateVPCAsync(string cidrBlock)\n    {\n        var request = new CreateVpcRequest\n        {\n            CidrBlock = cidrBlock\n        };\n\n        var response = await _ec2Client.CreateVpcAsync(request);\n        _logger.LogInformation($\"VPC created with ID: {response.Vpc.VpcId}\");\n    }\n\n    public async Task CreateSubnetAsync(string vpcId, string cidrBlock, string availabilityZone)\n    {\n        var request = new CreateSubnetRequest\n        {\n            VpcId = vpcId,\n            CidrBlock = cidrBlock,\n            AvailabilityZone = availabilityZone\n        };\n\n        var response = await _ec2Client.CreateSubnetAsync(request);\n        _logger.LogInformation($\"Subnet created with ID: {response.Subnet.SubnetId}\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/aws-services/#4-database-services","title":"4. Database Services","text":"<pre><code>public class AWSDatabaseService\n{\n    private readonly ILogger&lt;AWSDatabaseService&gt; _logger;\n    private readonly IAmazonRDS _rdsClient;\n\n    public AWSDatabaseService(\n        ILogger&lt;AWSDatabaseService&gt; logger,\n        IAmazonRDS rdsClient)\n    {\n        _logger = logger;\n        _rdsClient = rdsClient;\n    }\n\n    public async Task CreateRDSInstanceAsync(RDSConfig config)\n    {\n        var request = new CreateDBInstanceRequest\n        {\n            DBInstanceIdentifier = config.InstanceIdentifier,\n            DBInstanceClass = config.InstanceClass,\n            Engine = config.Engine,\n            MasterUsername = config.MasterUsername,\n            MasterUserPassword = config.MasterUserPassword,\n            AllocatedStorage = config.AllocatedStorage,\n            VpcSecurityGroupIds = config.SecurityGroupIds,\n            DBSubnetGroupName = config.SubnetGroupName\n        };\n\n        var response = await _rdsClient.CreateDBInstanceAsync(request);\n        _logger.LogInformation($\"RDS instance created with ID: {response.DBInstance.DBInstanceIdentifier}\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/aws-services/#5-ai-machine-learning-services","title":"5. AI &amp; Machine Learning Services","text":"<pre><code>public class AWSMachineLearningService\n{\n    private readonly ILogger&lt;AWSMachineLearningService&gt; _logger;\n    private readonly IAmazonComprehend _comprehendClient;\n\n    public AWSMachineLearningService(\n        ILogger&lt;AWSMachineLearningService&gt; logger,\n        IAmazonComprehend comprehendClient)\n    {\n        _logger = logger;\n        _comprehendClient = comprehendClient;\n    }\n\n    public async Task&lt;SentimentAnalysisResult&gt; AnalyzeSentimentAsync(string text)\n    {\n        var request = new DetectSentimentRequest\n        {\n            Text = text,\n            LanguageCode = \"tr\"\n        };\n\n        var response = await _comprehendClient.DetectSentimentAsync(request);\n        return new SentimentAnalysisResult\n        {\n            Sentiment = response.Sentiment,\n            SentimentScore = response.SentimentScore\n        };\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/aws-services/#best-practices","title":"Best Practices","text":""},{"location":"senior/cloud-architecture/aws-services/#1-servis-secimi-ve-yaplandrma","title":"1. Servis Se\u00e7imi ve Yap\u0131land\u0131rma","text":"<ul> <li>\u0130\u015f gereksinimlerine uygun servis se\u00e7imi</li> <li>Do\u011fru servis katman\u0131 se\u00e7imi</li> <li>B\u00f6lge se\u00e7imi ve replikasyon</li> <li>\u00d6l\u00e7eklendirme stratejisi</li> <li>Maliyet optimizasyonu</li> </ul>"},{"location":"senior/cloud-architecture/aws-services/#2-guvenlik-ve-uyumluluk","title":"2. G\u00fcvenlik ve Uyumluluk","text":"<ul> <li>AWS IAM yap\u0131land\u0131rmas\u0131</li> <li>G\u00fcvenlik gruplar\u0131 ve NACL'ler</li> <li>AWS KMS kullan\u0131m\u0131</li> <li>AWS WAF yap\u0131land\u0131rmas\u0131</li> <li>Uyumluluk sertifikalar\u0131</li> </ul>"},{"location":"senior/cloud-architecture/aws-services/#3-monitoring-ve-yonetim","title":"3. Monitoring ve Y\u00f6netim","text":"<ul> <li>CloudWatch kullan\u0131m\u0131</li> <li>CloudTrail yap\u0131land\u0131rmas\u0131</li> <li>Alert kurallar\u0131</li> <li>Otomatik \u00f6l\u00e7eklendirme</li> <li>Yedekleme ve felaket kurtarma</li> </ul>"},{"location":"senior/cloud-architecture/aws-services/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/cloud-architecture/aws-services/#1-aws-servisleri-arasnda-nasl-secim-yaplr","title":"1. AWS servisleri aras\u0131nda nas\u0131l se\u00e7im yap\u0131l\u0131r?","text":"<ul> <li>\u0130\u015f gereksinimleri analizi</li> <li>Maliyet analizi</li> <li>\u00d6l\u00e7eklenebilirlik gereksinimleri</li> <li>G\u00fcvenlik gereksinimleri</li> <li>Entegrasyon kolayl\u0131\u011f\u0131</li> </ul>"},{"location":"senior/cloud-architecture/aws-services/#2-aws-maliyetlerini-nasl-optimize-edebiliriz","title":"2. AWS maliyetlerini nas\u0131l optimize edebiliriz?","text":"<ul> <li>Rezerve edilmi\u015f \u00f6rnekler</li> <li>Spot \u00f6rnekleri</li> <li>Otomatik \u00f6l\u00e7eklendirme</li> <li>Kaynak kullan\u0131m\u0131n\u0131 izleme</li> <li>Kullan\u0131lmayan kaynaklar\u0131 kapatma</li> </ul>"},{"location":"senior/cloud-architecture/aws-services/#3-aws-guvenligi-nasl-saglanr","title":"3. AWS g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>IAM kimlik do\u011frulama</li> <li>G\u00fcvenlik gruplar\u0131</li> <li>AWS KMS</li> <li>AWS WAF</li> <li>G\u00fcvenlik izleme ve raporlama</li> </ul>"},{"location":"senior/cloud-architecture/aws-services/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>AWS Documentation</li> <li>AWS Architecture Center</li> <li>AWS Best Practices</li> <li>AWS Pricing Calculator </li> </ul>"},{"location":"senior/cloud-architecture/azure-services/","title":"Azure Services","text":""},{"location":"senior/cloud-architecture/azure-services/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Azure, Microsoft'un bulut bili\u015fim platformudur ve geni\u015f bir yelpazede hizmet sunar. Bu hizmetler, uygulamalar\u0131n geli\u015ftirilmesi, da\u011f\u0131t\u0131lmas\u0131 ve y\u00f6netilmesi i\u00e7in gerekli t\u00fcm altyap\u0131y\u0131 ve ara\u00e7lar\u0131 sa\u011flar.</p>"},{"location":"senior/cloud-architecture/azure-services/#temel-hizmetler","title":"Temel Hizmetler","text":""},{"location":"senior/cloud-architecture/azure-services/#1-compute-services","title":"1. Compute Services","text":"<pre><code>public class AzureComputeService\n{\n    private readonly ILogger&lt;AzureComputeService&gt; _logger;\n    private readonly IConfiguration _configuration;\n\n    public AzureComputeService(\n        ILogger&lt;AzureComputeService&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n    }\n\n    public async Task DeployVirtualMachineAsync(VirtualMachineConfig config)\n    {\n        // Azure VM olu\u015fturma ve yap\u0131land\u0131rma\n        var credentials = new DefaultAzureCredential();\n        var computeClient = new ComputeManagementClient(credentials)\n        {\n            SubscriptionId = _configuration[\"Azure:SubscriptionId\"]\n        };\n\n        var vmParameters = new VirtualMachine\n        {\n            Location = config.Location,\n            HardwareProfile = new HardwareProfile\n            {\n                VmSize = config.VmSize\n            },\n            StorageProfile = new StorageProfile\n            {\n                ImageReference = new ImageReference\n                {\n                    Publisher = config.ImagePublisher,\n                    Offer = config.ImageOffer,\n                    Sku = config.ImageSku,\n                    Version = \"latest\"\n                }\n            },\n            NetworkProfile = new NetworkProfile\n            {\n                NetworkInterfaces = new List&lt;NetworkInterfaceReference&gt;\n                {\n                    new NetworkInterfaceReference\n                    {\n                        Id = config.NetworkInterfaceId\n                    }\n                }\n            }\n        };\n\n        await computeClient.VirtualMachines\n            .CreateOrUpdateAsync(config.ResourceGroupName, config.VmName, vmParameters);\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/azure-services/#2-storage-services","title":"2. Storage Services","text":"<pre><code>public class AzureStorageService\n{\n    private readonly ILogger&lt;AzureStorageService&gt; _logger;\n    private readonly BlobServiceClient _blobServiceClient;\n\n    public AzureStorageService(\n        ILogger&lt;AzureStorageService&gt; logger,\n        string connectionString)\n    {\n        _logger = logger;\n        _blobServiceClient = new BlobServiceClient(connectionString);\n    }\n\n    public async Task UploadFileAsync(string containerName, string blobName, Stream content)\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(containerName);\n        await containerClient.CreateIfNotExistsAsync();\n\n        var blobClient = containerClient.GetBlobClient(blobName);\n        await blobClient.UploadAsync(content, true);\n    }\n\n    public async Task&lt;Stream&gt; DownloadFileAsync(string containerName, string blobName)\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(containerName);\n        var blobClient = containerClient.GetBlobClient(blobName);\n\n        var response = await blobClient.DownloadAsync();\n        return response.Value.Content;\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/azure-services/#3-networking-services","title":"3. Networking Services","text":"<pre><code>public class AzureNetworkingService\n{\n    private readonly ILogger&lt;AzureNetworkingService&gt; _logger;\n    private readonly NetworkManagementClient _networkClient;\n\n    public AzureNetworkingService(\n        ILogger&lt;AzureNetworkingService&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        var credentials = new DefaultAzureCredential();\n        _networkClient = new NetworkManagementClient(credentials)\n        {\n            SubscriptionId = configuration[\"Azure:SubscriptionId\"]\n        };\n    }\n\n    public async Task CreateVirtualNetworkAsync(string resourceGroupName, string vnetName, string location)\n    {\n        var vnet = new VirtualNetwork\n        {\n            Location = location,\n            AddressSpace = new AddressSpace\n            {\n                AddressPrefixes = new List&lt;string&gt; { \"10.0.0.0/16\" }\n            },\n            Subnets = new List&lt;Subnet&gt;\n            {\n                new Subnet\n                {\n                    Name = \"default\",\n                    AddressPrefix = \"10.0.0.0/24\"\n                }\n            }\n        };\n\n        await _networkClient.VirtualNetworks\n            .CreateOrUpdateAsync(resourceGroupName, vnetName, vnet);\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/azure-services/#4-database-services","title":"4. Database Services","text":"<pre><code>public class AzureDatabaseService\n{\n    private readonly ILogger&lt;AzureDatabaseService&gt; _logger;\n    private readonly SqlManagementClient _sqlClient;\n\n    public AzureDatabaseService(\n        ILogger&lt;AzureDatabaseService&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        var credentials = new DefaultAzureCredential();\n        _sqlClient = new SqlManagementClient(credentials)\n        {\n            SubscriptionId = configuration[\"Azure:SubscriptionId\"]\n        };\n    }\n\n    public async Task CreateSqlDatabaseAsync(\n        string resourceGroupName,\n        string serverName,\n        string databaseName)\n    {\n        var database = new Database\n        {\n            Location = \"West Europe\",\n            Sku = new Sku\n            {\n                Name = \"S0\",\n                Tier = \"Standard\"\n            }\n        };\n\n        await _sqlClient.Databases\n            .CreateOrUpdateAsync(resourceGroupName, serverName, databaseName, database);\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/azure-services/#5-ai-machine-learning-services","title":"5. AI &amp; Machine Learning Services","text":"<pre><code>public class AzureAIService\n{\n    private readonly ILogger&lt;AzureAIService&gt; _logger;\n    private readonly TextAnalyticsClient _textAnalyticsClient;\n\n    public AzureAIService(\n        ILogger&lt;AzureAIService&gt; logger,\n        string endpoint,\n        string key)\n    {\n        _logger = logger;\n        _textAnalyticsClient = new TextAnalyticsClient(\n            new Uri(endpoint),\n            new AzureKeyCredential(key));\n    }\n\n    public async Task&lt;SentimentAnalysisResult&gt; AnalyzeSentimentAsync(string text)\n    {\n        var response = await _textAnalyticsClient.AnalyzeSentimentAsync(text);\n        return new SentimentAnalysisResult\n        {\n            Sentiment = response.Value.Sentiment,\n            ConfidenceScores = response.Value.ConfidenceScores\n        };\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/azure-services/#best-practices","title":"Best Practices","text":""},{"location":"senior/cloud-architecture/azure-services/#1-servis-secimi-ve-yaplandrma","title":"1. Servis Se\u00e7imi ve Yap\u0131land\u0131rma","text":"<ul> <li>\u0130\u015f gereksinimlerine uygun servis se\u00e7imi</li> <li>Do\u011fru servis katman\u0131 se\u00e7imi</li> <li>B\u00f6lge se\u00e7imi ve replikasyon</li> <li>\u00d6l\u00e7eklendirme stratejisi</li> <li>Maliyet optimizasyonu</li> </ul>"},{"location":"senior/cloud-architecture/azure-services/#2-guvenlik-ve-uyumluluk","title":"2. G\u00fcvenlik ve Uyumluluk","text":"<ul> <li>Azure Active Directory entegrasyonu</li> <li>Rol tabanl\u0131 eri\u015fim kontrol\u00fc (RBAC)</li> <li>A\u011f g\u00fcvenli\u011fi ve g\u00fcvenlik duvar\u0131 kurallar\u0131</li> <li>Veri \u015fifreleme</li> <li>Uyumluluk sertifikalar\u0131</li> </ul>"},{"location":"senior/cloud-architecture/azure-services/#3-monitoring-ve-yonetim","title":"3. Monitoring ve Y\u00f6netim","text":"<ul> <li>Azure Monitor kullan\u0131m\u0131</li> <li>Log Analytics yap\u0131land\u0131rmas\u0131</li> <li>Alert kurallar\u0131</li> <li>Otomatik \u00f6l\u00e7eklendirme</li> <li>Yedekleme ve felaket kurtarma</li> </ul>"},{"location":"senior/cloud-architecture/azure-services/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/cloud-architecture/azure-services/#1-azure-servisleri-arasnda-nasl-secim-yaplr","title":"1. Azure servisleri aras\u0131nda nas\u0131l se\u00e7im yap\u0131l\u0131r?","text":"<ul> <li>\u0130\u015f gereksinimleri analizi</li> <li>Maliyet analizi</li> <li>\u00d6l\u00e7eklenebilirlik gereksinimleri</li> <li>G\u00fcvenlik gereksinimleri</li> <li>Entegrasyon kolayl\u0131\u011f\u0131</li> </ul>"},{"location":"senior/cloud-architecture/azure-services/#2-azure-maliyetlerini-nasl-optimize-edebiliriz","title":"2. Azure maliyetlerini nas\u0131l optimize edebiliriz?","text":"<ul> <li>Rezerve edilmi\u015f \u00f6rnekler</li> <li>Spot \u00f6rnekleri</li> <li>Otomatik \u00f6l\u00e7eklendirme</li> <li>Kaynak kullan\u0131m\u0131n\u0131 izleme</li> <li>Kullan\u0131lmayan kaynaklar\u0131 kapatma</li> </ul>"},{"location":"senior/cloud-architecture/azure-services/#3-azure-guvenligi-nasl-saglanr","title":"3. Azure g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>Azure AD kimlik do\u011frulama</li> <li>A\u011f g\u00fcvenlik gruplar\u0131</li> <li>Azure Key Vault</li> <li>Azure Security Center</li> <li>G\u00fcvenlik izleme ve raporlama</li> </ul>"},{"location":"senior/cloud-architecture/azure-services/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Azure Documentation</li> <li>Azure Architecture Center</li> <li>Azure Best Practices</li> <li>Azure Pricing Calculator </li> </ul>"},{"location":"senior/cloud-architecture/containerization/","title":"Containerization","text":""},{"location":"senior/cloud-architecture/containerization/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Containerization, uygulamalar\u0131 ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131 izole edilmi\u015f, ta\u015f\u0131nabilir ve tutarl\u0131 bir ortamda paketleme s\u00fcrecidir. Bu sayede uygulamalar farkl\u0131 ortamlarda sorunsuz \u00e7al\u0131\u015fabilir ve da\u011f\u0131t\u0131m s\u00fcre\u00e7leri kolayla\u015f\u0131r.</p>"},{"location":"senior/cloud-architecture/containerization/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/cloud-architecture/containerization/#1-docker-container","title":"1. Docker Container","text":"<pre><code>public class DockerService\n{\n    private readonly ILogger&lt;DockerService&gt; _logger;\n    private readonly DockerClient _dockerClient;\n\n    public DockerService(\n        ILogger&lt;DockerService&gt; logger,\n        DockerClient dockerClient)\n    {\n        _logger = logger;\n        _dockerClient = dockerClient;\n    }\n\n    public async Task CreateContainerAsync(ContainerConfig config)\n    {\n        var createContainerResponse = await _dockerClient.Containers.CreateContainerAsync(\n            new CreateContainerParameters\n            {\n                Image = config.ImageName,\n                Name = config.ContainerName,\n                Env = config.EnvironmentVariables,\n                ExposedPorts = config.ExposedPorts,\n                HostConfig = new HostConfig\n                {\n                    PortBindings = config.PortBindings,\n                    Binds = config.VolumeBindings\n                }\n            });\n\n        _logger.LogInformation($\"Container created with ID: {createContainerResponse.ID}\");\n    }\n\n    public async Task StartContainerAsync(string containerId)\n    {\n        await _dockerClient.Containers.StartContainerAsync(\n            containerId,\n            new ContainerStartParameters());\n\n        _logger.LogInformation($\"Container started: {containerId}\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/containerization/#2-container-orchestration","title":"2. Container Orchestration","text":"<pre><code>public class KubernetesService\n{\n    private readonly ILogger&lt;KubernetesService&gt; _logger;\n    private readonly IKubernetes _kubernetesClient;\n\n    public KubernetesService(\n        ILogger&lt;KubernetesService&gt; logger,\n        IKubernetes kubernetesClient)\n    {\n        _logger = logger;\n        _kubernetesClient = kubernetesClient;\n    }\n\n    public async Task DeployPodAsync(PodConfig config)\n    {\n        var pod = new V1Pod\n        {\n            Metadata = new V1ObjectMeta\n            {\n                Name = config.PodName,\n                Namespace = config.Namespace\n            },\n            Spec = new V1PodSpec\n            {\n                Containers = new List&lt;V1Container&gt;\n                {\n                    new V1Container\n                    {\n                        Name = config.ContainerName,\n                        Image = config.Image,\n                        Ports = config.Ports.Select(p =&gt; new V1ContainerPort\n                        {\n                            ContainerPort = p\n                        }).ToList(),\n                        Env = config.EnvironmentVariables.Select(e =&gt; new V1EnvVar\n                        {\n                            Name = e.Key,\n                            Value = e.Value\n                        }).ToList()\n                    }\n                }\n            }\n        };\n\n        await _kubernetesClient.CreateNamespacedPodAsync(pod, config.Namespace);\n        _logger.LogInformation($\"Pod deployed: {config.PodName}\");\n    }\n\n    public async Task ScaleDeploymentAsync(string deploymentName, string @namespace, int replicas)\n    {\n        var scale = new V1Scale\n        {\n            Spec = new V1ScaleSpec\n            {\n                Replicas = replicas\n            }\n        };\n\n        await _kubernetesClient.ReplaceNamespacedDeploymentScaleAsync(\n            scale,\n            deploymentName,\n            @namespace);\n\n        _logger.LogInformation($\"Deployment scaled to {replicas} replicas\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/containerization/#3-container-registry","title":"3. Container Registry","text":"<pre><code>public class ContainerRegistryService\n{\n    private readonly ILogger&lt;ContainerRegistryService&gt; _logger;\n    private readonly DockerClient _dockerClient;\n\n    public ContainerRegistryService(\n        ILogger&lt;ContainerRegistryService&gt; logger,\n        DockerClient dockerClient)\n    {\n        _logger = logger;\n        _dockerClient = dockerClient;\n    }\n\n    public async Task PushImageAsync(string imageName, string tag)\n    {\n        var authConfig = new AuthConfig\n        {\n            Username = \"username\",\n            Password = \"password\",\n            ServerAddress = \"registry.example.com\"\n        };\n\n        await _dockerClient.Images.PushImageAsync(\n            imageName,\n            new ImagePushParameters\n            {\n                Tag = tag\n            },\n            new AuthConfigParameters\n            {\n                RegistryAuth = authConfig\n            });\n\n        _logger.LogInformation($\"Image pushed: {imageName}:{tag}\");\n    }\n\n    public async Task PullImageAsync(string imageName, string tag)\n    {\n        await _dockerClient.Images.PullImageAsync(\n            new ImagesPullParameters\n            {\n                FromImage = imageName,\n                Tag = tag\n            });\n\n        _logger.LogInformation($\"Image pulled: {imageName}:{tag}\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/containerization/#4-container-security","title":"4. Container Security","text":"<pre><code>public class ContainerSecurityService\n{\n    private readonly ILogger&lt;ContainerSecurityService&gt; _logger;\n    private readonly DockerClient _dockerClient;\n\n    public ContainerSecurityService(\n        ILogger&lt;ContainerSecurityService&gt; logger,\n        DockerClient dockerClient)\n    {\n        _logger = logger;\n        _dockerClient = dockerClient;\n    }\n\n    public async Task ScanContainerAsync(string containerId)\n    {\n        var container = await _dockerClient.Containers.InspectContainerAsync(containerId);\n\n        // G\u00fcvenlik kontrolleri\n        if (container.Config.User == \"root\")\n        {\n            _logger.LogWarning($\"Container {containerId} running as root\");\n        }\n\n        if (container.HostConfig.Privileged)\n        {\n            _logger.LogWarning($\"Container {containerId} running in privileged mode\");\n        }\n\n        // Port taramas\u0131\n        foreach (var port in container.NetworkSettings.Ports)\n        {\n            if (port.Value.Any(p =&gt; p.HostPort == \"0.0.0.0\"))\n            {\n                _logger.LogWarning($\"Container {containerId} exposing port {port.Key} to all interfaces\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/containerization/#best-practices","title":"Best Practices","text":""},{"location":"senior/cloud-architecture/containerization/#1-container-yaplandrmas","title":"1. Container Yap\u0131land\u0131rmas\u0131","text":"<ul> <li>Minimal base image kullan\u0131m\u0131</li> <li>Multi-stage builds</li> <li>Layer optimizasyonu</li> <li>Environment variable y\u00f6netimi</li> <li>Volume kullan\u0131m\u0131</li> </ul>"},{"location":"senior/cloud-architecture/containerization/#2-guvenlik","title":"2. G\u00fcvenlik","text":"<ul> <li>Non-root user kullan\u0131m\u0131</li> <li>Image signing</li> <li>Vulnerability scanning</li> <li>Network isolation</li> <li>Resource limits</li> </ul>"},{"location":"senior/cloud-architecture/containerization/#3-monitoring-ve-logging","title":"3. Monitoring ve Logging","text":"<ul> <li>Container metrics</li> <li>Log aggregation</li> <li>Health checks</li> <li>Alerting</li> <li>Tracing</li> </ul>"},{"location":"senior/cloud-architecture/containerization/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/cloud-architecture/containerization/#1-container-ve-vm-arasndaki-farklar-nelerdir","title":"1. Container ve VM aras\u0131ndaki farklar nelerdir?","text":"<ul> <li>\u0130zolasyon seviyesi</li> <li>Kaynak kullan\u0131m\u0131</li> <li>Ba\u015flatma s\u00fcresi</li> <li>Ta\u015f\u0131nabilirlik</li> <li>Y\u00f6netim kolayl\u0131\u011f\u0131</li> </ul>"},{"location":"senior/cloud-architecture/containerization/#2-container-orchestration-neden-onemlidir","title":"2. Container orchestration neden \u00f6nemlidir?","text":"<ul> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Y\u00fcksek eri\u015filebilirlik</li> <li>Servis ke\u015ffi</li> <li>Load balancing</li> <li>Otomatik kurtarma</li> </ul>"},{"location":"senior/cloud-architecture/containerization/#3-container-guvenligi-nasl-saglanr","title":"3. Container g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>Image g\u00fcvenli\u011fi</li> <li>Runtime g\u00fcvenli\u011fi</li> <li>Network g\u00fcvenli\u011fi</li> <li>Access control</li> <li>Monitoring</li> </ul>"},{"location":"senior/cloud-architecture/containerization/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Docker Documentation</li> <li>Kubernetes Documentation</li> <li>Container Security Best Practices</li> <li>Container Orchestration Patterns </li> </ul>"},{"location":"senior/cloud-architecture/serverless/","title":"Serverless Architecture","text":""},{"location":"senior/cloud-architecture/serverless/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Serverless mimari, geli\u015ftiricilerin sunucu y\u00f6netimi olmadan uygulama geli\u015ftirmesine ve \u00e7al\u0131\u015ft\u0131rmas\u0131na olanak tan\u0131yan bir bulut bili\u015fim modelidir. Bu modelde, uygulamalar olay odakl\u0131 (event-driven) olarak \u00e7al\u0131\u015f\u0131r ve sadece kullan\u0131ld\u0131\u011f\u0131nda kaynak t\u00fcketir.</p>"},{"location":"senior/cloud-architecture/serverless/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/cloud-architecture/serverless/#1-azure-functions","title":"1. Azure Functions","text":"<pre><code>public class AzureFunctionService\n{\n    private readonly ILogger&lt;AzureFunctionService&gt; _logger;\n\n    public AzureFunctionService(ILogger&lt;AzureFunctionService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    [FunctionName(\"ProcessOrder\")]\n    public async Task&lt;IActionResult&gt; ProcessOrder(\n        [HttpTrigger(AuthorizationLevel.Function, \"post\", Route = null)] HttpRequest req)\n    {\n        _logger.LogInformation(\"Order processing started\");\n\n        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n        var order = JsonSerializer.Deserialize&lt;Order&gt;(requestBody);\n\n        // Sipari\u015f i\u015fleme mant\u0131\u011f\u0131\n        await ProcessOrderAsync(order);\n\n        return new OkObjectResult(\"Order processed successfully\");\n    }\n\n    private async Task ProcessOrderAsync(Order order)\n    {\n        // Sipari\u015f i\u015fleme i\u015flemleri\n        await Task.Delay(1000); // Sim\u00fcle edilmi\u015f i\u015flem\n        _logger.LogInformation($\"Order {order.Id} processed\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/serverless/#2-aws-lambda","title":"2. AWS Lambda","text":"<pre><code>public class AWSLambdaService\n{\n    private readonly ILogger&lt;AWSLambdaService&gt; _logger;\n\n    public AWSLambdaService(ILogger&lt;AWSLambdaService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    [LambdaFunction]\n    public async Task&lt;APIGatewayProxyResponse&gt; ProcessRequest(\n        APIGatewayProxyRequest request,\n        ILambdaContext context)\n    {\n        _logger.LogInformation(\"Request processing started\");\n\n        var body = JsonSerializer.Deserialize&lt;RequestData&gt;(request.Body);\n\n        // \u0130stek i\u015fleme mant\u0131\u011f\u0131\n        var result = await ProcessRequestAsync(body);\n\n        return new APIGatewayProxyResponse\n        {\n            StatusCode = 200,\n            Body = JsonSerializer.Serialize(result)\n        };\n    }\n\n    private async Task&lt;ResponseData&gt; ProcessRequestAsync(RequestData data)\n    {\n        // \u0130stek i\u015fleme i\u015flemleri\n        await Task.Delay(1000); // Sim\u00fcle edilmi\u015f i\u015flem\n        return new ResponseData { Success = true };\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/serverless/#3-event-driven-architecture","title":"3. Event-Driven Architecture","text":"<pre><code>public class EventDrivenService\n{\n    private readonly ILogger&lt;EventDrivenService&gt; _logger;\n    private readonly IEventGridClient _eventGridClient;\n\n    public EventDrivenService(\n        ILogger&lt;EventDrivenService&gt; logger,\n        IEventGridClient eventGridClient)\n    {\n        _logger = logger;\n        _eventGridClient = eventGridClient;\n    }\n\n    public async Task PublishEventAsync(EventData data)\n    {\n        var @event = new EventGridEvent\n        {\n            Id = Guid.NewGuid().ToString(),\n            EventType = data.EventType,\n            Data = data,\n            EventTime = DateTime.UtcNow,\n            Subject = data.Subject,\n            DataVersion = \"1.0\"\n        };\n\n        await _eventGridClient.PublishEventsAsync(\n            \"topic-name\",\n            new List&lt;EventGridEvent&gt; { @event });\n\n        _logger.LogInformation($\"Event published: {data.EventType}\");\n    }\n\n    [FunctionName(\"ProcessEvent\")]\n    public async Task ProcessEvent(\n        [EventGridTrigger] EventGridEvent eventGridEvent)\n    {\n        _logger.LogInformation($\"Event received: {eventGridEvent.EventType}\");\n\n        var data = eventGridEvent.Data.ToObjectFromJson&lt;EventData&gt;();\n        await ProcessEventDataAsync(data);\n    }\n\n    private async Task ProcessEventDataAsync(EventData data)\n    {\n        // Olay i\u015fleme mant\u0131\u011f\u0131\n        await Task.Delay(1000); // Sim\u00fcle edilmi\u015f i\u015flem\n        _logger.LogInformation($\"Event processed: {data.EventType}\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/serverless/#4-serverless-monitoring","title":"4. Serverless Monitoring","text":"<pre><code>public class ServerlessMonitoringService\n{\n    private readonly ILogger&lt;ServerlessMonitoringService&gt; _logger;\n    private readonly IApplicationInsightsClient _appInsightsClient;\n\n    public ServerlessMonitoringService(\n        ILogger&lt;ServerlessMonitoringService&gt; logger,\n        IApplicationInsightsClient appInsightsClient)\n    {\n        _logger = logger;\n        _appInsightsClient = appInsightsClient;\n    }\n\n    public async Task TrackFunctionExecutionAsync(\n        string functionName,\n        string operationId,\n        TimeSpan duration,\n        bool success)\n    {\n        var telemetry = new RequestTelemetry\n        {\n            Name = functionName,\n            Id = operationId,\n            Duration = duration,\n            Success = success,\n            Timestamp = DateTime.UtcNow\n        };\n\n        await _appInsightsClient.TrackRequestAsync(telemetry);\n        _logger.LogInformation($\"Function execution tracked: {functionName}\");\n    }\n\n    public async Task TrackExceptionAsync(\n        string functionName,\n        Exception exception)\n    {\n        var telemetry = new ExceptionTelemetry\n        {\n            Exception = exception,\n            Message = exception.Message,\n            Timestamp = DateTime.UtcNow\n        };\n\n        await _appInsightsClient.TrackExceptionAsync(telemetry);\n        _logger.LogError(exception, $\"Exception in function: {functionName}\");\n    }\n}\n</code></pre>"},{"location":"senior/cloud-architecture/serverless/#best-practices","title":"Best Practices","text":""},{"location":"senior/cloud-architecture/serverless/#1-function-tasarm","title":"1. Function Tasar\u0131m\u0131","text":"<ul> <li>Stateless fonksiyonlar</li> <li>K\u0131sa \u00e7al\u0131\u015fma s\u00fcreleri</li> <li>Ba\u011f\u0131ml\u0131l\u0131k enjeksiyonu</li> <li>Hata y\u00f6netimi</li> <li>Retry politikalar\u0131</li> </ul>"},{"location":"senior/cloud-architecture/serverless/#2-performans-optimizasyonu","title":"2. Performans Optimizasyonu","text":"<ul> <li>Cold start azaltma</li> <li>Memory optimizasyonu</li> <li>Timeout y\u00f6netimi</li> <li>Concurrent execution</li> <li>Caching stratejileri</li> </ul>"},{"location":"senior/cloud-architecture/serverless/#3-guvenlik","title":"3. G\u00fcvenlik","text":"<ul> <li>IAM yap\u0131land\u0131rmas\u0131</li> <li>API Gateway g\u00fcvenli\u011fi</li> <li>Environment variables</li> <li>Secret management</li> <li>Network isolation</li> </ul>"},{"location":"senior/cloud-architecture/serverless/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/cloud-architecture/serverless/#1-serverless-mimarinin-avantajlar-nelerdir","title":"1. Serverless mimarinin avantajlar\u0131 nelerdir?","text":"<ul> <li>Otomatik \u00f6l\u00e7eklendirme</li> <li>Maliyet optimizasyonu</li> <li>Operasyonel y\u00fck azaltma</li> <li>H\u0131zl\u0131 geli\u015ftirme</li> <li>Y\u00fcksek eri\u015filebilirlik</li> </ul>"},{"location":"senior/cloud-architecture/serverless/#2-serverless-mimarinin-dezavantajlar-nelerdir","title":"2. Serverless mimarinin dezavantajlar\u0131 nelerdir?","text":"<ul> <li>Cold start sorunu</li> <li>Uzun s\u00fcreli i\u015flemler i\u00e7in uygun de\u011fil</li> <li>Debug zorlu\u011fu</li> <li>Vendor lock-in riski</li> <li>Karma\u015f\u0131k uygulamalar i\u00e7in uygun de\u011fil</li> </ul>"},{"location":"senior/cloud-architecture/serverless/#3-serverless-mimari-ne-zaman-kullanlmaldr","title":"3. Serverless mimari ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Event-driven uygulamalar</li> <li>API endpoints</li> <li>Background jobs</li> <li>Microservices</li> <li>Batch processing</li> </ul>"},{"location":"senior/cloud-architecture/serverless/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Azure Functions Documentation</li> <li>AWS Lambda Documentation</li> <li>Serverless Best Practices</li> <li>Event-Driven Architecture </li> </ul>"},{"location":"senior/cloud-native/","title":"Cloud-Native Architecture","text":""},{"location":"senior/cloud-native/#giris","title":"Giri\u015f","text":"<p>Cloud-Native Architecture, modern cloud environments'da scalable, resilient ve maintainable sistemler tasarlamak i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in cloud-native architecture konular\u0131n\u0131 anlamak, container orchestration implement etmek, service mesh tasarlamak ve cloud migration stratejileri geli\u015ftirmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, Kubernetes, service mesh, serverless architecture, multi-cloud strategy ve cloud migration konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/cloud-native/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/cloud-native/#1-kubernetes","title":"1. Kubernetes","text":"<p>Container orchestration, deployment management, ve cluster management.</p> <p>\u00d6\u011frenilecekler: - Container orchestration - Deployment management - Cluster management - Service discovery - Resource management</p>"},{"location":"senior/cloud-native/#2-service-mesh","title":"2. Service Mesh","text":"<p>Service-to-service communication, traffic management, ve observability.</p> <p>\u00d6\u011frenilecekler: - Service mesh architecture - Traffic management - Security policies - Observability - Performance optimization</p>"},{"location":"senior/cloud-native/#3-serverless-architecture","title":"3. Serverless Architecture","text":"<p>Function-as-a-Service, event-driven architecture, ve auto-scaling.</p> <p>\u00d6\u011frenilecekler: - Serverless computing - Function-as-a-Service - Event-driven architecture - Auto-scaling - Cost optimization</p>"},{"location":"senior/cloud-native/#4-multi-cloud-strategy","title":"4. Multi-Cloud Strategy","text":"<p>Multi-cloud deployment, vendor lock-in avoidance, ve hybrid cloud.</p> <p>\u00d6\u011frenilecekler: - Multi-cloud deployment - Vendor lock-in avoidance - Hybrid cloud - Cloud portability - Cost optimization</p>"},{"location":"senior/cloud-native/#5-cloud-migration","title":"5. Cloud Migration","text":"<p>Migration strategies, legacy system modernization, ve cloud adoption.</p> <p>\u00d6\u011frenilecekler: - Migration strategies - Legacy modernization - Cloud adoption - Risk assessment - Success metrics</p>"},{"location":"senior/cloud-native/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/cloud-native/#1-scalability-performance","title":"1. Scalability &amp; Performance","text":"<ul> <li>Auto-scaling</li> <li>Load distribution</li> <li>Performance optimization</li> <li>Resource utilization</li> <li>Cost efficiency</li> </ul>"},{"location":"senior/cloud-native/#2-reliability-resilience","title":"2. Reliability &amp; Resilience","text":"<ul> <li>High availability</li> <li>Fault tolerance</li> <li>Disaster recovery</li> <li>Self-healing</li> <li>Zero-downtime deployment</li> </ul>"},{"location":"senior/cloud-native/#3-business-agility","title":"3. Business Agility","text":"<ul> <li>Faster deployment</li> <li>Rapid scaling</li> <li>Cost optimization</li> <li>Innovation speed</li> <li>Market responsiveness</li> </ul>"},{"location":"senior/cloud-native/#4-technical-excellence","title":"4. Technical Excellence","text":"<ul> <li>Modern architecture</li> <li>Best practices</li> <li>Proven patterns</li> <li>Maintainability</li> <li>Developer productivity</li> </ul>"},{"location":"senior/cloud-native/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/cloud-native/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Cloud-native nedir?</li> <li> <p>Cevap: Cloud-first design, containerization, microservices, auto-scaling.</p> </li> <li> <p>Kubernetes nedir?</p> </li> <li> <p>Cevap: Container orchestration, deployment management, cluster management.</p> </li> <li> <p>Service mesh nedir?</p> </li> <li> <p>Cevap: Service-to-service communication, traffic management, observability.</p> </li> <li> <p>Serverless nedir?</p> </li> <li> <p>Cevap: Function-as-a-Service, event-driven, auto-scaling, pay-per-use.</p> </li> <li> <p>Multi-cloud neden kullan\u0131l\u0131r?</p> </li> <li>Cevap: Vendor lock-in avoidance, cost optimization, risk distribution.</li> </ol>"},{"location":"senior/cloud-native/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Kubernetes cluster nas\u0131l y\u00f6netilir?</li> <li> <p>Cevap: Node management, resource allocation, monitoring, scaling.</p> </li> <li> <p>Service mesh nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Sidecar injection, traffic policies, security, observability.</p> </li> <li> <p>Serverless architecture nas\u0131l tasarlan\u0131r?</p> </li> <li> <p>Cevap: Event-driven design, function design, state management, integration.</p> </li> <li> <p>Multi-cloud deployment nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Cloud abstraction, portability, monitoring, cost management.</p> </li> <li> <p>Cloud migration nas\u0131l planlan\u0131r?</p> </li> <li>Cevap: Assessment, strategy, execution, validation, optimization.</li> </ol>"},{"location":"senior/cloud-native/#best-practices","title":"Best Practices","text":""},{"location":"senior/cloud-native/#1-kubernetes-implementation","title":"1. Kubernetes Implementation","text":"<ul> <li>Use namespaces</li> <li>Implement RBAC</li> <li>Use resource limits</li> <li>Monitor cluster health</li> <li>Plan for scaling</li> </ul>"},{"location":"senior/cloud-native/#2-service-mesh-design","title":"2. Service Mesh Design","text":"<ul> <li>Start simple</li> <li>Implement gradually</li> <li>Monitor performance</li> <li>Secure communication</li> <li>Optimize traffic</li> </ul>"},{"location":"senior/cloud-native/#3-serverless-architecture_1","title":"3. Serverless Architecture","text":"<ul> <li>Design for statelessness</li> <li>Use event-driven patterns</li> <li>Implement proper error handling</li> <li>Monitor costs</li> <li>Plan for cold starts</li> </ul>"},{"location":"senior/cloud-native/#4-multi-cloud-strategy_1","title":"4. Multi-Cloud Strategy","text":"<ul> <li>Abstract cloud services</li> <li>Implement portability</li> <li>Monitor costs</li> <li>Plan for migration</li> <li>Avoid vendor lock-in</li> </ul>"},{"location":"senior/cloud-native/#5-cloud-migration_1","title":"5. Cloud Migration","text":"<ul> <li>Assess current state</li> <li>Plan migration strategy</li> <li>Execute incrementally</li> <li>Validate results</li> <li>Optimize continuously</li> </ul>"},{"location":"senior/cloud-native/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Cloud Native Computing Foundation</li> <li>Kubernetes Documentation</li> <li>Service Mesh</li> <li>Serverless Architecture</li> <li>Multi-Cloud Strategy</li> <li>Cloud Migration</li> </ul>"},{"location":"senior/data-engineering/","title":"Data Engineering","text":""},{"location":"senior/data-engineering/#giris","title":"Giri\u015f","text":"<p>Data Engineering, modern software systems'de data pipeline design, data warehousing ve data processing i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in data engineering konular\u0131n\u0131 anlamak, data pipelines tasarlamak, data warehouses kurmak ve real-time processing implement etmek i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, data pipeline design, data warehousing, real-time processing, data governance ve data quality konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/data-engineering/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/data-engineering/#1-data-pipeline-design","title":"1. Data Pipeline Design","text":"<p>ETL/ELT processes, data flow design, ve pipeline orchestration.</p> <p>\u00d6\u011frenilecekler: - ETL/ELT processes - Data flow design - Pipeline orchestration - Data transformation - Pipeline monitoring</p>"},{"location":"senior/data-engineering/#2-data-warehousing","title":"2. Data Warehousing","text":"<p>Data warehouse design, data modeling, ve data storage strategies.</p> <p>\u00d6\u011frenilecekler: - Data warehouse design - Data modeling - Data storage strategies - Data partitioning - Data indexing</p>"},{"location":"senior/data-engineering/#3-real-time-processing","title":"3. Real-Time Processing","text":"<p>Stream processing, real-time analytics, ve event processing.</p> <p>\u00d6\u011frenilecekler: - Stream processing - Real-time analytics - Event processing - Real-time pipelines - Performance optimization</p>"},{"location":"senior/data-engineering/#4-data-governance","title":"4. Data Governance","text":"<p>Data quality, data lineage, ve data security.</p> <p>\u00d6\u011frenilecekler: - Data quality - Data lineage - Data security - Data catalog - Data policies</p>"},{"location":"senior/data-engineering/#5-data-quality","title":"5. Data Quality","text":"<p>Data validation, data cleansing, ve data monitoring.</p> <p>\u00d6\u011frenilecekler: - Data validation - Data cleansing - Data monitoring - Quality metrics - Quality improvement</p>"},{"location":"senior/data-engineering/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/data-engineering/#1-business-intelligence","title":"1. Business Intelligence","text":"<ul> <li>Data-driven decisions</li> <li>Business insights</li> <li>Performance analytics</li> <li>Trend analysis</li> <li>Competitive advantage</li> </ul>"},{"location":"senior/data-engineering/#2-system-integration","title":"2. System Integration","text":"<ul> <li>Data consistency</li> <li>System interoperability</li> <li>Data synchronization</li> <li>Real-time updates</li> <li>Operational efficiency</li> </ul>"},{"location":"senior/data-engineering/#3-compliance-security","title":"3. Compliance &amp; Security","text":"<ul> <li>Data governance</li> <li>Regulatory compliance</li> <li>Data security</li> <li>Privacy protection</li> <li>Risk management</li> </ul>"},{"location":"senior/data-engineering/#4-technical-excellence","title":"4. Technical Excellence","text":"<ul> <li>Scalable architecture</li> <li>Performance optimization</li> <li>Data reliability</li> <li>System maintainability</li> <li>Continuous improvement</li> </ul>"},{"location":"senior/data-engineering/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/data-engineering/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Data engineering nedir?</li> <li> <p>Cevap: Data pipeline design, data processing, data warehousing, data governance.</p> </li> <li> <p>ETL nedir?</p> </li> <li> <p>Cevap: Extract, Transform, Load - data integration process.</p> </li> <li> <p>Data warehouse nedir?</p> </li> <li> <p>Cevap: Centralized data storage, optimized for analytics and reporting.</p> </li> <li> <p>Real-time processing nedir?</p> </li> <li> <p>Cevap: Stream processing, real-time analytics, immediate data processing.</p> </li> <li> <p>Data governance nedir?</p> </li> <li>Cevap: Data quality, data lineage, data security, data policies.</li> </ol>"},{"location":"senior/data-engineering/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Data pipeline nas\u0131l tasarlan\u0131r?</li> <li> <p>Cevap: Source identification, transformation logic, target design, monitoring setup.</p> </li> <li> <p>Data warehouse nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Data modeling, partitioning, indexing, query optimization.</p> </li> <li> <p>Real-time processing nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Stream processing framework, event handling, performance optimization.</p> </li> <li> <p>Data quality nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: Validation rules, cleansing processes, monitoring, quality metrics.</p> </li> <li> <p>Data governance nas\u0131l kurulur?</p> </li> <li>Cevap: Policies definition, data catalog, lineage tracking, security measures.</li> </ol>"},{"location":"senior/data-engineering/#best-practices","title":"Best Practices","text":""},{"location":"senior/data-engineering/#1-data-pipeline-design_1","title":"1. Data Pipeline Design","text":"<ul> <li>Design for scalability</li> <li>Implement error handling</li> <li>Monitor pipeline health</li> <li>Plan for failure recovery</li> <li>Document data flow</li> </ul>"},{"location":"senior/data-engineering/#2-data-warehousing_1","title":"2. Data Warehousing","text":"<ul> <li>Use proper data modeling</li> <li>Implement partitioning</li> <li>Optimize queries</li> <li>Monitor performance</li> <li>Plan for growth</li> </ul>"},{"location":"senior/data-engineering/#3-real-time-processing_1","title":"3. Real-Time Processing","text":"<ul> <li>Design for performance</li> <li>Handle backpressure</li> <li>Implement error handling</li> <li>Monitor latency</li> <li>Plan for scaling</li> </ul>"},{"location":"senior/data-engineering/#4-data-governance_1","title":"4. Data Governance","text":"<ul> <li>Define clear policies</li> <li>Implement data catalog</li> <li>Track data lineage</li> <li>Ensure security</li> <li>Monitor compliance</li> </ul>"},{"location":"senior/data-engineering/#5-data-quality_1","title":"5. Data Quality","text":"<ul> <li>Define quality metrics</li> <li>Implement validation</li> <li>Monitor quality</li> <li>Clean data regularly</li> <li>Plan for improvement</li> </ul>"},{"location":"senior/data-engineering/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Data Engineering</li> <li>ETL Process</li> <li>Data Warehousing</li> <li>Real-Time Processing</li> <li>Data Governance</li> <li>Data Quality</li> </ul>"},{"location":"senior/devops-practices/","title":"DevOps Practices","text":""},{"location":"senior/devops-practices/#giris","title":"Giri\u015f","text":"<p>DevOps Practices, modern software development'da development ve operations aras\u0131ndaki collaboration, automation ve continuous improvement i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in DevOps practices'i anlamak, CI/CD pipelines implement etmek, infrastructure automation yapmak ve operational excellence sa\u011flamak i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, CI/CD, infrastructure as code, monitoring, logging ve deployment strategies konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/devops-practices/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/devops-practices/#1-cicd","title":"1. CI/CD","text":"<p>Continuous Integration, Continuous Delivery, ve deployment automation.</p> <p>\u00d6\u011frenilecekler: - CI/CD pipeline design - Build automation - Test automation - Deployment automation - Pipeline optimization</p>"},{"location":"senior/devops-practices/#2-infrastructure-as-code","title":"2. Infrastructure as Code","text":"<p>Infrastructure automation, configuration management, ve infrastructure versioning.</p> <p>\u00d6\u011frenilecekler: - Infrastructure automation - Configuration management - Infrastructure versioning - Infrastructure testing - Infrastructure monitoring</p>"},{"location":"senior/devops-practices/#3-monitoring","title":"3. Monitoring","text":"<p>System monitoring, application monitoring, ve operational monitoring.</p> <p>\u00d6\u011frenilecekler: - System monitoring - Application monitoring - Performance monitoring - Alerting systems - Dashboard creation</p>"},{"location":"senior/devops-practices/#4-logging","title":"4. Logging","text":"<p>Centralized logging, log aggregation, ve log analysis.</p> <p>\u00d6\u011frenilecekler: - Centralized logging - Log aggregation - Log analysis - Log retention - Log security</p>"},{"location":"senior/devops-practices/#5-deployment-strategies","title":"5. Deployment Strategies","text":"<p>Blue-green deployment, rolling deployment, ve canary deployment.</p> <p>\u00d6\u011frenilecekler: - Blue-green deployment - Rolling deployment - Canary deployment - Rollback strategies - Deployment monitoring</p>"},{"location":"senior/devops-practices/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/devops-practices/#1-operational-excellence","title":"1. Operational Excellence","text":"<ul> <li>Faster delivery</li> <li>Better quality</li> <li>Reduced errors</li> <li>Improved collaboration</li> <li>Continuous improvement</li> </ul>"},{"location":"senior/devops-practices/#2-business-impact","title":"2. Business Impact","text":"<ul> <li>Faster time to market</li> <li>Better customer satisfaction</li> <li>Reduced costs</li> <li>Improved reliability</li> <li>Competitive advantage</li> </ul>"},{"location":"senior/devops-practices/#3-technical-excellence","title":"3. Technical Excellence","text":"<ul> <li>Automation</li> <li>Best practices</li> <li>Proven patterns</li> <li>Quality improvement</li> <li>Risk reduction</li> </ul>"},{"location":"senior/devops-practices/#4-team-collaboration","title":"4. Team Collaboration","text":"<ul> <li>Development and operations</li> <li>Shared responsibility</li> <li>Better communication</li> <li>Knowledge sharing</li> <li>Continuous learning</li> </ul>"},{"location":"senior/devops-practices/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/devops-practices/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>DevOps nedir?</li> <li> <p>Cevap: Development and operations collaboration, automation, continuous improvement.</p> </li> <li> <p>CI/CD nedir?</p> </li> <li> <p>Cevap: Continuous integration, continuous delivery, deployment automation.</p> </li> <li> <p>Infrastructure as Code nedir?</p> </li> <li> <p>Cevap: Infrastructure automation, configuration management, versioning.</p> </li> <li> <p>Monitoring neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: System health, performance tracking, issue detection, alerting.</p> </li> <li> <p>Deployment strategies nelerdir?</p> </li> <li>Cevap: Blue-green, rolling, canary deployment, rollback strategies.</li> </ol>"},{"location":"senior/devops-practices/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>CI/CD pipeline nas\u0131l design edilir?</li> <li> <p>Cevap: Build stages, test automation, deployment automation, monitoring.</p> </li> <li> <p>Infrastructure as Code nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Terraform, ARM templates, CloudFormation, configuration management.</p> </li> <li> <p>Monitoring system nas\u0131l kurulur?</p> </li> <li> <p>Cevap: Metrics collection, alerting, dashboard creation, performance tracking.</p> </li> <li> <p>Logging system nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Centralized logging, log aggregation, log analysis, retention policies.</p> </li> <li> <p>Blue-green deployment nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li>Cevap: Environment switching, health checks, rollback strategies, monitoring.</li> </ol>"},{"location":"senior/devops-practices/#best-practices","title":"Best Practices","text":""},{"location":"senior/devops-practices/#1-cicd-implementation","title":"1. CI/CD Implementation","text":"<ul> <li>Automate everything</li> <li>Implement testing</li> <li>Monitor pipeline health</li> <li>Optimize performance</li> <li>Plan for scaling</li> </ul>"},{"location":"senior/devops-practices/#2-infrastructure-management","title":"2. Infrastructure Management","text":"<ul> <li>Use version control</li> <li>Implement testing</li> <li>Monitor changes</li> <li>Plan for rollback</li> <li>Document everything</li> </ul>"},{"location":"senior/devops-practices/#3-monitoring-strategy","title":"3. Monitoring Strategy","text":"<ul> <li>Define key metrics</li> <li>Set up alerting</li> <li>Create dashboards</li> <li>Monitor performance</li> <li>Plan for improvement</li> </ul>"},{"location":"senior/devops-practices/#4-logging-strategy","title":"4. Logging Strategy","text":"<ul> <li>Centralize logs</li> <li>Implement retention</li> <li>Secure log access</li> <li>Analyze logs</li> <li>Plan for scaling</li> </ul>"},{"location":"senior/devops-practices/#5-deployment-strategy","title":"5. Deployment Strategy","text":"<ul> <li>Choose appropriate strategy</li> <li>Implement health checks</li> <li>Plan for rollback</li> <li>Monitor deployments</li> <li>Plan for improvement</li> </ul>"},{"location":"senior/devops-practices/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>DevOps Practices</li> <li>CI/CD Best Practices</li> <li>Infrastructure as Code</li> <li>Monitoring Best Practices</li> <li>Logging Best Practices</li> <li>Deployment Strategies </li> </ul>"},{"location":"senior/devops-practices/ci-cd/","title":"CI/CD (S\u00fcrekli Entegrasyon ve S\u00fcrekli Da\u011f\u0131t\u0131m)","text":""},{"location":"senior/devops-practices/ci-cd/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>CI/CD, yaz\u0131l\u0131m geli\u015ftirme s\u00fcrecinde kod de\u011fi\u015fikliklerinin s\u0131k ve g\u00fcvenilir bir \u015fekilde entegre edilmesini ve da\u011f\u0131t\u0131lmas\u0131n\u0131 sa\u011flayan bir uygulamalar b\u00fct\u00fcn\u00fcd\u00fcr. S\u00fcrekli Entegrasyon (CI), geli\u015ftiricilerin kod de\u011fi\u015fikliklerini s\u0131k s\u0131k merkezi bir depoya entegre etmesini sa\u011flarken, S\u00fcrekli Da\u011f\u0131t\u0131m (CD) bu de\u011fi\u015fikliklerin otomatik olarak test edilip da\u011f\u0131t\u0131lmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"senior/devops-practices/ci-cd/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/devops-practices/ci-cd/#1-ci-pipeline","title":"1. CI Pipeline","text":"<pre><code>public class CIConfiguration\n{\n    public string RepositoryUrl { get; set; }\n    public string Branch { get; set; }\n    public List&lt;string&gt; BuildSteps { get; set; }\n    public List&lt;string&gt; TestSteps { get; set; }\n    public Dictionary&lt;string, string&gt; EnvironmentVariables { get; set; }\n}\n\npublic class CIConfigurationService\n{\n    private readonly ILogger&lt;CIConfigurationService&gt; _logger;\n\n    public CIConfigurationService(ILogger&lt;CIConfigurationService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task ConfigurePipelineAsync(CIConfiguration config)\n    {\n        // Pipeline yap\u0131land\u0131rmas\u0131\n        var pipeline = new Pipeline\n        {\n            Name = \"CI Pipeline\",\n            Repository = new Repository\n            {\n                Url = config.RepositoryUrl,\n                Branch = config.Branch\n            },\n            Steps = new List&lt;PipelineStep&gt;\n            {\n                new BuildStep\n                {\n                    Name = \"Build\",\n                    Commands = config.BuildSteps\n                },\n                new TestStep\n                {\n                    Name = \"Test\",\n                    Commands = config.TestSteps\n                }\n            },\n            Environment = new Environment\n            {\n                Variables = config.EnvironmentVariables\n            }\n        };\n\n        await SavePipelineConfigurationAsync(pipeline);\n        _logger.LogInformation(\"CI pipeline configured successfully\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/ci-cd/#2-cd-pipeline","title":"2. CD Pipeline","text":"<pre><code>public class CDConfiguration\n{\n    public string Environment { get; set; }\n    public List&lt;string&gt; DeploymentSteps { get; set; }\n    public Dictionary&lt;string, string&gt; EnvironmentVariables { get; set; }\n    public List&lt;string&gt; ApprovalSteps { get; set; }\n}\n\npublic class CDConfigurationService\n{\n    private readonly ILogger&lt;CDConfigurationService&gt; _logger;\n\n    public CDConfigurationService(ILogger&lt;CDConfigurationService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task ConfigurePipelineAsync(CDConfiguration config)\n    {\n        // Pipeline yap\u0131land\u0131rmas\u0131\n        var pipeline = new Pipeline\n        {\n            Name = $\"CD Pipeline - {config.Environment}\",\n            Steps = new List&lt;PipelineStep&gt;\n            {\n                new ApprovalStep\n                {\n                    Name = \"Approval\",\n                    Approvers = config.ApprovalSteps\n                },\n                new DeploymentStep\n                {\n                    Name = \"Deploy\",\n                    Commands = config.DeploymentSteps,\n                    Environment = new Environment\n                    {\n                        Name = config.Environment,\n                        Variables = config.EnvironmentVariables\n                    }\n                }\n            }\n        };\n\n        await SavePipelineConfigurationAsync(pipeline);\n        _logger.LogInformation($\"CD pipeline configured for {config.Environment}\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/ci-cd/#3-test-otomasyonu","title":"3. Test Otomasyonu","text":"<pre><code>public class TestAutomationService\n{\n    private readonly ILogger&lt;TestAutomationService&gt; _logger;\n\n    public TestAutomationService(ILogger&lt;TestAutomationService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task RunTestsAsync(TestConfiguration config)\n    {\n        // Unit testleri \u00e7al\u0131\u015ft\u0131r\n        var unitTestResults = await RunUnitTestsAsync(config.UnitTestPath);\n        _logger.LogInformation($\"Unit tests completed: {unitTestResults.Passed} passed, {unitTestResults.Failed} failed\");\n\n        // Integration testleri \u00e7al\u0131\u015ft\u0131r\n        var integrationTestResults = await RunIntegrationTestsAsync(config.IntegrationTestPath);\n        _logger.LogInformation($\"Integration tests completed: {integrationTestResults.Passed} passed, {integrationTestResults.Failed} failed\");\n\n        // E2E testleri \u00e7al\u0131\u015ft\u0131r\n        var e2eTestResults = await RunE2ETestsAsync(config.E2ETestPath);\n        _logger.LogInformation($\"E2E tests completed: {e2eTestResults.Passed} passed, {e2eTestResults.Failed} failed\");\n\n        // Test sonu\u00e7lar\u0131n\u0131 raporla\n        await GenerateTestReportAsync(unitTestResults, integrationTestResults, e2eTestResults);\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/ci-cd/#4-deployment-otomasyonu","title":"4. Deployment Otomasyonu","text":"<pre><code>public class DeploymentService\n{\n    private readonly ILogger&lt;DeploymentService&gt; _logger;\n\n    public DeploymentService(ILogger&lt;DeploymentService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task DeployAsync(DeploymentConfig config)\n    {\n        // Deployment \u00f6ncesi kontroller\n        await ValidateDeploymentConfigAsync(config);\n        _logger.LogInformation(\"Deployment configuration validated\");\n\n        // Artifact haz\u0131rlama\n        var artifact = await PrepareArtifactAsync(config);\n        _logger.LogInformation(\"Artifact prepared\");\n\n        // Ortam haz\u0131rlama\n        await PrepareEnvironmentAsync(config.Environment);\n        _logger.LogInformation(\"Environment prepared\");\n\n        // Deployment\n        await ExecuteDeploymentAsync(artifact, config);\n        _logger.LogInformation(\"Deployment completed\");\n\n        // Post-deployment kontroller\n        await VerifyDeploymentAsync(config);\n        _logger.LogInformation(\"Deployment verified\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/ci-cd/#best-practices","title":"Best Practices","text":""},{"location":"senior/devops-practices/ci-cd/#1-ci-best-practices","title":"1. CI Best Practices","text":"<ul> <li>S\u0131k ve k\u00fc\u00e7\u00fck commit'ler</li> <li>Otomatik test entegrasyonu</li> <li>H\u0131zl\u0131 geri bildirim</li> <li>Kalite kontrolleri</li> <li>Versiyon kontrol\u00fc</li> </ul>"},{"location":"senior/devops-practices/ci-cd/#2-cd-best-practices","title":"2. CD Best Practices","text":"<ul> <li>Otomatik da\u011f\u0131t\u0131m</li> <li>Ortam y\u00f6netimi</li> <li>Rollback stratejileri</li> <li>G\u00fcvenlik kontrolleri</li> <li>Monitoring</li> </ul>"},{"location":"senior/devops-practices/ci-cd/#3-test-best-practices","title":"3. Test Best Practices","text":"<ul> <li>Test otomasyonu</li> <li>Test kapsam\u0131</li> <li>Test verileri</li> <li>Test ortamlar\u0131</li> <li>Test raporlama</li> </ul>"},{"location":"senior/devops-practices/ci-cd/#4-deployment-best-practices","title":"4. Deployment Best Practices","text":"<ul> <li>Canary deployments</li> <li>Blue-green deployments</li> <li>Feature flags</li> <li>A/B testing</li> <li>Monitoring</li> </ul>"},{"location":"senior/devops-practices/ci-cd/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/devops-practices/ci-cd/#1-cicd-neden-onemlidir","title":"1. CI/CD neden \u00f6nemlidir?","text":"<ul> <li>H\u0131zl\u0131 geri bildirim</li> <li>Kalite art\u0131\u015f\u0131</li> <li>Risk azaltma</li> <li>Verimlilik</li> <li>G\u00fcvenilirlik</li> </ul>"},{"location":"senior/devops-practices/ci-cd/#2-cicd-nasl-uygulanr","title":"2. CI/CD nas\u0131l uygulan\u0131r?","text":"<ul> <li>Pipeline yap\u0131land\u0131rmas\u0131</li> <li>Test otomasyonu</li> <li>Deployment stratejileri</li> <li>Monitoring</li> <li>G\u00fcvenlik</li> </ul>"},{"location":"senior/devops-practices/ci-cd/#3-cicd-zorluklar-nelerdir","title":"3. CI/CD zorluklar\u0131 nelerdir?","text":"<ul> <li>K\u00fclt\u00fcr de\u011fi\u015fimi</li> <li>Test otomasyonu</li> <li>Ortam y\u00f6netimi</li> <li>G\u00fcvenlik</li> <li>Performans</li> </ul>"},{"location":"senior/devops-practices/ci-cd/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Azure DevOps CI/CD</li> <li>GitHub Actions</li> <li>Jenkins Documentation</li> <li>CI/CD Best Practices </li> </ul>"},{"location":"senior/devops-practices/health-checks/","title":"Health Checks","text":""},{"location":"senior/devops-practices/health-checks/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Health checks, uygulaman\u0131n sa\u011fl\u0131k durumunu izlemek ve raporlamak i\u00e7in kullan\u0131lan bir mekanizmad\u0131r. Bu b\u00f6l\u00fcmde, health checks'in temel kavramlar\u0131n\u0131 ve C# implementasyonlar\u0131n\u0131 inceleyece\u011fiz.</p>"},{"location":"senior/devops-practices/health-checks/#temel-health-checks-islemleri","title":"Temel Health Checks \u0130\u015flemleri","text":""},{"location":"senior/devops-practices/health-checks/#1-temel-health-check","title":"1. Temel Health Check","text":"<pre><code>public class BasicHealthCheck : IHealthCheck\n{\n    public Task&lt;HealthCheckResult&gt; CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // Sa\u011fl\u0131k kontrol\u00fc\n            return Task.FromResult(\n                HealthCheckResult.Healthy(\"Uygulama sa\u011fl\u0131kl\u0131 \u00e7al\u0131\u015f\u0131yor.\"));\n        }\n        catch (Exception ex)\n        {\n            return Task.FromResult(\n                HealthCheckResult.Unhealthy(\"Uygulama sa\u011fl\u0131ks\u0131z durumda.\", ex));\n        }\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/health-checks/#2-veritaban-health-check","title":"2. Veritaban\u0131 Health Check","text":"<pre><code>public class DatabaseHealthCheck : IHealthCheck\n{\n    private readonly DbContext _dbContext;\n\n    public DatabaseHealthCheck(DbContext dbContext)\n    {\n        _dbContext = dbContext;\n    }\n\n    public async Task&lt;HealthCheckResult&gt; CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            await _dbContext.Database.ExecuteSqlRawAsync(\"SELECT 1\");\n            return HealthCheckResult.Healthy(\"Veritaban\u0131 ba\u011flant\u0131s\u0131 sa\u011fl\u0131kl\u0131.\");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy(\"Veritaban\u0131 ba\u011flant\u0131s\u0131 sa\u011fl\u0131ks\u0131z.\", ex);\n        }\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/health-checks/#3-harici-servis-health-check","title":"3. Harici Servis Health Check","text":"<pre><code>public class ExternalServiceHealthCheck : IHealthCheck\n{\n    private readonly HttpClient _httpClient;\n\n    public ExternalServiceHealthCheck(HttpClient httpClient)\n    {\n        _httpClient = httpClient;\n    }\n\n    public async Task&lt;HealthCheckResult&gt; CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var response = await _httpClient.GetAsync(\"health\", cancellationToken);\n            response.EnsureSuccessStatusCode();\n            return HealthCheckResult.Healthy(\"Harici servis sa\u011fl\u0131kl\u0131 \u00e7al\u0131\u015f\u0131yor.\");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy(\"Harici servis sa\u011fl\u0131ks\u0131z durumda.\", ex);\n        }\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/health-checks/#ileri-health-checks-algoritmalar","title":"\u0130leri Health Checks Algoritmalar\u0131","text":""},{"location":"senior/devops-practices/health-checks/#1-ozel-health-check-publisher","title":"1. \u00d6zel Health Check Publisher","text":"<pre><code>public class CustomHealthCheckPublisher : IHealthCheckPublisher\n{\n    private readonly ILogger&lt;CustomHealthCheckPublisher&gt; _logger;\n\n    public CustomHealthCheckPublisher(ILogger&lt;CustomHealthCheckPublisher&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public Task PublishAsync(HealthReport report, CancellationToken cancellationToken)\n    {\n        if (report.Status == HealthStatus.Healthy)\n        {\n            _logger.LogInformation(\"Uygulama sa\u011fl\u0131kl\u0131: {Report}\", report);\n        }\n        else\n        {\n            _logger.LogError(\"Uygulama sa\u011fl\u0131ks\u0131z: {Report}\", report);\n        }\n\n        return Task.CompletedTask;\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/health-checks/#2-health-check-ui","title":"2. Health Check UI","text":"<pre><code>public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddHealthChecks()\n            .AddCheck&lt;BasicHealthCheck&gt;(\"basic\")\n            .AddCheck&lt;DatabaseHealthCheck&gt;(\"database\")\n            .AddCheck&lt;ExternalServiceHealthCheck&gt;(\"external-service\");\n\n        services.AddHealthChecksUI()\n            .AddInMemoryStorage();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseHealthChecks(\"/health\", new HealthCheckOptions\n        {\n            ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse\n        });\n\n        app.UseHealthChecksUI();\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/health-checks/#3-health-check-middleware","title":"3. Health Check Middleware","text":"<pre><code>public class HealthCheckMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IHealthCheckService _healthCheckService;\n\n    public HealthCheckMiddleware(RequestDelegate next, IHealthCheckService healthCheckService)\n    {\n        _next = next;\n        _healthCheckService = healthCheckService;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (context.Request.Path == \"/health\")\n        {\n            var report = await _healthCheckService.CheckHealthAsync();\n            context.Response.ContentType = \"application/json\";\n            await context.Response.WriteAsync(JsonSerializer.Serialize(report));\n            return;\n        }\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/health-checks/#performans-analizi","title":"Performans Analizi","text":"Algoritma En \u0130yi Durum Ortalama Durum En K\u00f6t\u00fc Durum Bellek Kullan\u0131m\u0131 Temel Health Check O(1) O(1) O(1) O(1) Veritaban\u0131 Health Check O(1) O(1) O(n) O(1) Harici Servis Health Check O(1) O(1) O(n) O(1)"},{"location":"senior/devops-practices/health-checks/#best-practices","title":"Best Practices","text":"<ol> <li>D\u00fczenli aral\u0131klarla kontrol et</li> <li>Kritik servisleri izle</li> <li>Hata durumlar\u0131n\u0131 logla</li> <li>Performans\u0131 optimize et</li> <li>G\u00fcvenli\u011fi sa\u011fla</li> </ol>"},{"location":"senior/devops-practices/health-checks/#ornek-uygulamalar","title":"\u00d6rnek Uygulamalar","text":"<ol> <li>Uygulama izleme</li> <li>Servis sa\u011fl\u0131\u011f\u0131</li> <li>Kaynak kullan\u0131m\u0131</li> <li>Performans metrikleri</li> <li>Hata tespiti</li> </ol>"},{"location":"senior/devops-practices/health-checks/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Health Checks in ASP.NET Core</li> <li>Health Checks UI</li> <li>Monitoring and Diagnostics </li> </ul>"},{"location":"senior/devops-practices/infrastructure-as-code/","title":"Infrastructure as Code (Altyap\u0131 Kod Olarak)","text":""},{"location":"senior/devops-practices/infrastructure-as-code/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Infrastructure as Code (IaC), altyap\u0131 kaynaklar\u0131n\u0131n kod olarak tan\u0131mlanmas\u0131 ve y\u00f6netilmesi yakla\u015f\u0131m\u0131d\u0131r. Bu sayede altyap\u0131 kaynaklar\u0131 versiyon kontrol\u00fc alt\u0131nda tutulabilir, otomatik olarak sa\u011flanabilir ve tekrar tekrar olu\u015fturulabilir.</p>"},{"location":"senior/devops-practices/infrastructure-as-code/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/devops-practices/infrastructure-as-code/#1-terraform-ile-altyap-tanmlama","title":"1. Terraform ile Altyap\u0131 Tan\u0131mlama","text":"<pre><code>public class TerraformService\n{\n    private readonly ILogger&lt;TerraformService&gt; _logger;\n\n    public TerraformService(ILogger&lt;TerraformService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task CreateInfrastructureAsync(InfrastructureConfig config)\n    {\n        // Terraform konfig\u00fcrasyonu olu\u015ftur\n        var terraformConfig = new TerraformConfiguration\n        {\n            Provider = new Provider\n            {\n                Name = \"azurerm\",\n                Version = \"~&gt; 2.0\",\n                Features = new ProviderFeatures()\n            },\n            ResourceGroups = config.ResourceGroups.Select(rg =&gt; new ResourceGroup\n            {\n                Name = rg.Name,\n                Location = rg.Location\n            }).ToList(),\n            VirtualNetworks = config.VirtualNetworks.Select(vnet =&gt; new VirtualNetwork\n            {\n                Name = vnet.Name,\n                AddressSpace = vnet.AddressSpace,\n                Subnets = vnet.Subnets.Select(s =&gt; new Subnet\n                {\n                    Name = s.Name,\n                    AddressPrefix = s.AddressPrefix\n                }).ToList()\n            }).ToList()\n        };\n\n        await SaveTerraformConfigurationAsync(terraformConfig);\n        _logger.LogInformation(\"Terraform configuration created\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/infrastructure-as-code/#2-arm-template-ile-azure-kaynaklar","title":"2. ARM Template ile Azure Kaynaklar\u0131","text":"<pre><code>public class ARMTemplateService\n{\n    private readonly ILogger&lt;ARMTemplateService&gt; _logger;\n\n    public ARMTemplateService(ILogger&lt;ARMTemplateService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task CreateARMTemplateAsync(ARMConfig config)\n    {\n        var template = new ARMTemplate\n        {\n            Schema = \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n            ContentVersion = \"1.0.0.0\",\n            Parameters = config.Parameters.ToDictionary(\n                p =&gt; p.Name,\n                p =&gt; new Parameter\n                {\n                    Type = p.Type,\n                    DefaultValue = p.DefaultValue,\n                    AllowedValues = p.AllowedValues\n                }),\n            Variables = config.Variables.ToDictionary(\n                v =&gt; v.Name,\n                v =&gt; v.Value),\n            Resources = config.Resources.Select(r =&gt; new Resource\n            {\n                Type = r.Type,\n                Name = r.Name,\n                ApiVersion = r.ApiVersion,\n                Location = r.Location,\n                Properties = r.Properties\n            }).ToList()\n        };\n\n        await SaveARMTemplateAsync(template);\n        _logger.LogInformation(\"ARM template created\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/infrastructure-as-code/#3-ansible-ile-konfigurasyon-yonetimi","title":"3. Ansible ile Konfig\u00fcrasyon Y\u00f6netimi","text":"<pre><code>public class AnsibleService\n{\n    private readonly ILogger&lt;AnsibleService&gt; _logger;\n\n    public AnsibleService(ILogger&lt;AnsibleService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task CreatePlaybookAsync(PlaybookConfig config)\n    {\n        var playbook = new Playbook\n        {\n            Name = config.Name,\n            Hosts = config.Hosts,\n            Tasks = config.Tasks.Select(t =&gt; new Task\n            {\n                Name = t.Name,\n                Module = t.Module,\n                Args = t.Args,\n                When = t.When\n            }).ToList(),\n            Handlers = config.Handlers.Select(h =&gt; new Handler\n            {\n                Name = h.Name,\n                Module = h.Module,\n                Args = h.Args\n            }).ToList()\n        };\n\n        await SavePlaybookAsync(playbook);\n        _logger.LogInformation(\"Ansible playbook created\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/infrastructure-as-code/#4-pulumi-ile-programatik-altyap","title":"4. Pulumi ile Programatik Altyap\u0131","text":"<pre><code>public class PulumiService\n{\n    private readonly ILogger&lt;PulumiService&gt; _logger;\n\n    public PulumiService(ILogger&lt;PulumiService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task CreateStackAsync(StackConfig config)\n    {\n        var stack = new Stack\n        {\n            Name = config.Name,\n            Description = config.Description,\n            Resources = config.Resources.Select(r =&gt; new Resource\n            {\n                Type = r.Type,\n                Name = r.Name,\n                Properties = r.Properties,\n                Options = r.Options\n            }).ToList(),\n            Outputs = config.Outputs.ToDictionary(\n                o =&gt; o.Name,\n                o =&gt; o.Value)\n        };\n\n        await SaveStackAsync(stack);\n        _logger.LogInformation(\"Pulumi stack created\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/infrastructure-as-code/#best-practices","title":"Best Practices","text":""},{"location":"senior/devops-practices/infrastructure-as-code/#1-kod-organizasyonu","title":"1. Kod Organizasyonu","text":"<ul> <li>Mod\u00fcler yap\u0131</li> <li>Tekrar kullan\u0131labilir mod\u00fcller</li> <li>Versiyon kontrol\u00fc</li> <li>Dok\u00fcmantasyon</li> <li>Kod kalitesi</li> </ul>"},{"location":"senior/devops-practices/infrastructure-as-code/#2-guvenlik","title":"2. G\u00fcvenlik","text":"<ul> <li>Hassas veri y\u00f6netimi</li> <li>Eri\u015fim kontrol\u00fc</li> <li>G\u00fcvenlik politikalar\u0131</li> <li>\u015eifreleme</li> <li>Denetim</li> </ul>"},{"location":"senior/devops-practices/infrastructure-as-code/#3-test-ve-dogrulama","title":"3. Test ve Do\u011frulama","text":"<ul> <li>Altyap\u0131 testleri</li> <li>Konfig\u00fcrasyon do\u011frulama</li> <li>G\u00fcvenlik taramalar\u0131</li> <li>Performans testleri</li> <li>Uyumluluk kontrolleri</li> </ul>"},{"location":"senior/devops-practices/infrastructure-as-code/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/devops-practices/infrastructure-as-code/#1-iac-neden-onemlidir","title":"1. IaC neden \u00f6nemlidir?","text":"<ul> <li>Tutarl\u0131l\u0131k</li> <li>H\u0131z</li> <li>G\u00fcvenilirlik</li> <li>Versiyon kontrol\u00fc</li> <li>Otomasyon</li> </ul>"},{"location":"senior/devops-practices/infrastructure-as-code/#2-iac-nasl-uygulanr","title":"2. IaC nas\u0131l uygulan\u0131r?","text":"<ul> <li>Ara\u00e7 se\u00e7imi</li> <li>Kod organizasyonu</li> <li>Test stratejisi</li> <li>G\u00fcvenlik</li> <li>Monitoring</li> </ul>"},{"location":"senior/devops-practices/infrastructure-as-code/#3-iac-zorluklar-nelerdir","title":"3. IaC zorluklar\u0131 nelerdir?","text":"<ul> <li>\u00d6\u011frenme e\u011frisi</li> <li>Ara\u00e7 se\u00e7imi</li> <li>Karma\u015f\u0131k yap\u0131lar</li> <li>G\u00fcvenlik</li> <li>Performans</li> </ul>"},{"location":"senior/devops-practices/infrastructure-as-code/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Terraform Documentation</li> <li>Azure Resource Manager Templates</li> <li>Ansible Documentation</li> <li>Pulumi Documentation </li> </ul>"},{"location":"senior/devops-practices/logging/","title":"Logging (G\u00fcnl\u00fck Kayd\u0131)","text":""},{"location":"senior/devops-practices/logging/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Logging, uygulama ve sistem davran\u0131\u015flar\u0131n\u0131n kaydedilmesi, analiz edilmesi ve izlenmesi s\u00fcrecidir. Etkili bir logging stratejisi, sorunlar\u0131n tespit edilmesi, performans optimizasyonu ve g\u00fcvenlik denetimleri i\u00e7in kritik \u00f6neme sahiptir.</p>"},{"location":"senior/devops-practices/logging/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/devops-practices/logging/#1-yaplandrlms-logging","title":"1. Yap\u0131land\u0131r\u0131lm\u0131\u015f Logging","text":"<pre><code>public class StructuredLoggingService\n{\n    private readonly ILogger&lt;StructuredLoggingService&gt; _logger;\n\n    public StructuredLoggingService(ILogger&lt;StructuredLoggingService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogUserAction(UserAction action)\n    {\n        _logger.LogInformation(\n            \"User {UserId} performed {ActionType} on {ResourceType} at {Timestamp}\",\n            action.UserId,\n            action.ActionType,\n            action.ResourceType,\n            action.Timestamp\n        );\n    }\n\n    public void LogError(Exception ex, string context)\n    {\n        _logger.LogError(\n            ex,\n            \"Error occurred in {Context}. Error: {ErrorMessage}\",\n            context,\n            ex.Message\n        );\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/logging/#2-log-seviyeleri-ve-filtreleme","title":"2. Log Seviyeleri ve Filtreleme","text":"<pre><code>public class LogLevelService\n{\n    private readonly ILogger&lt;LogLevelService&gt; _logger;\n\n    public LogLevelService(ILogger&lt;LogLevelService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public void LogWithDifferentLevels(string message)\n    {\n        // Debug seviyesi - detayl\u0131 bilgi\n        _logger.LogDebug($\"Debug: {message}\");\n\n        // Information seviyesi - genel bilgi\n        _logger.LogInformation($\"Info: {message}\");\n\n        // Warning seviyesi - uyar\u0131\n        _logger.LogWarning($\"Warning: {message}\");\n\n        // Error seviyesi - hata\n        _logger.LogError($\"Error: {message}\");\n\n        // Critical seviyesi - kritik hata\n        _logger.LogCritical($\"Critical: {message}\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/logging/#3-log-toplama-ve-analiz","title":"3. Log Toplama ve Analiz","text":"<pre><code>public class LogAggregationService\n{\n    private readonly ILogger&lt;LogAggregationService&gt; _logger;\n    private readonly ILogCollector _logCollector;\n\n    public LogAggregationService(ILogger&lt;LogAggregationService&gt; logger, ILogCollector logCollector)\n    {\n        _logger = logger;\n        _logCollector = logCollector;\n    }\n\n    public async Task AnalyzeLogsAsync(DateTime startTime, DateTime endTime)\n    {\n        // Loglar\u0131 topla\n        var logs = await _logCollector.GetLogsAsync(startTime, endTime);\n\n        // Hata analizi\n        var errorLogs = logs.Where(l =&gt; l.Level == LogLevel.Error).ToList();\n        _logger.LogInformation($\"Found {errorLogs.Count} error logs\");\n\n        // Performans analizi\n        var slowRequests = logs.Where(l =&gt; l.Duration &gt; TimeSpan.FromSeconds(1)).ToList();\n        _logger.LogInformation($\"Found {slowRequests.Count} slow requests\");\n\n        // Kullan\u0131c\u0131 aktivite analizi\n        var userActivities = logs.GroupBy(l =&gt; l.UserId)\n            .Select(g =&gt; new { UserId = g.Key, Count = g.Count() })\n            .ToList();\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/logging/#4-log-rotasyonu-ve-arsivleme","title":"4. Log Rotasyonu ve Ar\u015fivleme","text":"<pre><code>public class LogRotationService\n{\n    private readonly ILogger&lt;LogRotationService&gt; _logger;\n    private readonly ILogStorage _logStorage;\n\n    public LogRotationService(ILogger&lt;LogRotationService&gt; logger, ILogStorage logStorage)\n    {\n        _logger = logger;\n        _logStorage = logStorage;\n    }\n\n    public async Task RotateLogsAsync()\n    {\n        // Eski loglar\u0131 ar\u015fivle\n        var oldLogs = await _logStorage.GetOldLogsAsync(TimeSpan.FromDays(30));\n        await _logStorage.ArchiveLogsAsync(oldLogs);\n\n        // Log dosyalar\u0131n\u0131 d\u00f6nd\u00fcr\n        await _logStorage.RotateLogFilesAsync();\n\n        _logger.LogInformation(\"Log rotation completed successfully\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/logging/#best-practices","title":"Best Practices","text":""},{"location":"senior/devops-practices/logging/#1-log-stratejisi","title":"1. Log Stratejisi","text":"<ul> <li>Log seviyelerinin do\u011fru kullan\u0131m\u0131</li> <li>Yap\u0131land\u0131r\u0131lm\u0131\u015f log format\u0131</li> <li>Anlaml\u0131 log mesajlar\u0131</li> <li>Ba\u011flam bilgisi</li> <li>Performans etkisi</li> </ul>"},{"location":"senior/devops-practices/logging/#2-guvenlik-ve-gizlilik","title":"2. G\u00fcvenlik ve Gizlilik","text":"<ul> <li>Hassas veri filtreleme</li> <li>Log \u015fifreleme</li> <li>Eri\u015fim kontrol\u00fc</li> <li>Veri saklama politikalar\u0131</li> <li>Uyumluluk gereksinimleri</li> </ul>"},{"location":"senior/devops-practices/logging/#3-performans-ve-olceklenebilirlik","title":"3. Performans ve \u00d6l\u00e7eklenebilirlik","text":"<ul> <li>Asenkron logging</li> <li>Toplu log g\u00f6nderimi</li> <li>Log s\u0131k\u0131\u015ft\u0131rma</li> <li>Depolama optimizasyonu</li> <li>Kaynak kullan\u0131m\u0131</li> </ul>"},{"location":"senior/devops-practices/logging/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/devops-practices/logging/#1-logging-neden-onemlidir","title":"1. Logging neden \u00f6nemlidir?","text":"<ul> <li>Sorun tespiti</li> <li>Performans analizi</li> <li>G\u00fcvenlik denetimi</li> <li>Kullan\u0131c\u0131 davran\u0131\u015f\u0131 analizi</li> <li>Uyumluluk gereksinimleri</li> </ul>"},{"location":"senior/devops-practices/logging/#2-hangi-bilgiler-loglanmaldr","title":"2. Hangi bilgiler loglanmal\u0131d\u0131r?","text":"<ul> <li>Hata mesajlar\u0131</li> <li>Performans metrikleri</li> <li>Kullan\u0131c\u0131 i\u015flemleri</li> <li>Sistem olaylar\u0131</li> <li>G\u00fcvenlik olaylar\u0131</li> </ul>"},{"location":"senior/devops-practices/logging/#3-logging-zorluklar-nelerdir","title":"3. Logging zorluklar\u0131 nelerdir?","text":"<ul> <li>Veri hacmi</li> <li>Performans etkisi</li> <li>Depolama maliyeti</li> <li>Veri analizi</li> <li>G\u00fcvenlik endi\u015feleri</li> </ul>"},{"location":"senior/devops-practices/logging/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Serilog Documentation</li> <li>NLog Documentation</li> <li>ELK Stack Documentation</li> <li>Microsoft Logging Documentation </li> </ul>"},{"location":"senior/devops-practices/monitoring/","title":"Monitoring (\u0130zleme)","text":""},{"location":"senior/devops-practices/monitoring/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Monitoring, sistemlerin performans\u0131n\u0131, sa\u011fl\u0131\u011f\u0131n\u0131 ve g\u00fcvenli\u011fini s\u00fcrekli olarak izleme ve analiz etme s\u00fcrecidir. Modern uygulamalar\u0131n karma\u015f\u0131kl\u0131\u011f\u0131 ve da\u011f\u0131t\u0131k yap\u0131s\u0131, etkili bir monitoring stratejisini zorunlu k\u0131lmaktad\u0131r.</p>"},{"location":"senior/devops-practices/monitoring/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/devops-practices/monitoring/#1-metrik-toplama-ve-analiz","title":"1. Metrik Toplama ve Analiz","text":"<pre><code>public class MetricsService\n{\n    private readonly ILogger&lt;MetricsService&gt; _logger;\n    private readonly IMetricsCollector _metricsCollector;\n\n    public MetricsService(ILogger&lt;MetricsService&gt; logger, IMetricsCollector metricsCollector)\n    {\n        _logger = logger;\n        _metricsCollector = metricsCollector;\n    }\n\n    public async Task CollectAndAnalyzeMetricsAsync()\n    {\n        // CPU kullan\u0131m\u0131\n        var cpuMetrics = await _metricsCollector.GetCpuMetricsAsync();\n        _logger.LogInformation($\"CPU Usage: {cpuMetrics.UsagePercentage}%\");\n\n        // Bellek kullan\u0131m\u0131\n        var memoryMetrics = await _metricsCollector.GetMemoryMetricsAsync();\n        _logger.LogInformation($\"Memory Usage: {memoryMetrics.UsedBytes} bytes\");\n\n        // Disk kullan\u0131m\u0131\n        var diskMetrics = await _metricsCollector.GetDiskMetricsAsync();\n        _logger.LogInformation($\"Disk Usage: {diskMetrics.UsedSpacePercentage}%\");\n\n        // A\u011f trafi\u011fi\n        var networkMetrics = await _metricsCollector.GetNetworkMetricsAsync();\n        _logger.LogInformation($\"Network Traffic: {networkMetrics.BytesReceived} bytes received\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/monitoring/#2-log-yonetimi","title":"2. Log Y\u00f6netimi","text":"<pre><code>public class LoggingService\n{\n    private readonly ILogger&lt;LoggingService&gt; _logger;\n    private readonly ILogStorage _logStorage;\n\n    public LoggingService(ILogger&lt;LoggingService&gt; logger, ILogStorage logStorage)\n    {\n        _logger = logger;\n        _logStorage = logStorage;\n    }\n\n    public async Task ProcessLogsAsync(LogEntry logEntry)\n    {\n        // Log seviyesine g\u00f6re i\u015flem\n        switch (logEntry.Level)\n        {\n            case LogLevel.Information:\n                _logger.LogInformation(logEntry.Message);\n                break;\n            case LogLevel.Warning:\n                _logger.LogWarning(logEntry.Message);\n                break;\n            case LogLevel.Error:\n                _logger.LogError(logEntry.Message);\n                break;\n            case LogLevel.Critical:\n                _logger.LogCritical(logEntry.Message);\n                break;\n        }\n\n        // Log'u depolama\n        await _logStorage.StoreLogAsync(logEntry);\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/monitoring/#3-uygulama-performans-izleme-apm","title":"3. Uygulama Performans \u0130zleme (APM)","text":"<pre><code>public class APMService\n{\n    private readonly ILogger&lt;APMService&gt; _logger;\n    private readonly IPerformanceMonitor _performanceMonitor;\n\n    public APMService(ILogger&lt;APMService&gt; logger, IPerformanceMonitor performanceMonitor)\n    {\n        _logger = logger;\n        _performanceMonitor = performanceMonitor;\n    }\n\n    public async Task MonitorApplicationPerformanceAsync()\n    {\n        // Yan\u0131t s\u00fcreleri\n        var responseTimes = await _performanceMonitor.GetResponseTimesAsync();\n        _logger.LogInformation($\"Average Response Time: {responseTimes.Average}ms\");\n\n        // \u0130stek h\u0131zlar\u0131\n        var requestRates = await _performanceMonitor.GetRequestRatesAsync();\n        _logger.LogInformation($\"Request Rate: {requestRates.RatePerSecond} req/s\");\n\n        // Hata oranlar\u0131\n        var errorRates = await _performanceMonitor.GetErrorRatesAsync();\n        _logger.LogInformation($\"Error Rate: {errorRates.Percentage}%\");\n\n        // Ba\u011f\u0131ml\u0131l\u0131k izleme\n        var dependencyMetrics = await _performanceMonitor.GetDependencyMetricsAsync();\n        _logger.LogInformation($\"Dependency Latency: {dependencyMetrics.AverageLatency}ms\");\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/monitoring/#4-alerting-ve-bildirimler","title":"4. Alerting ve Bildirimler","text":"<pre><code>public class AlertingService\n{\n    private readonly ILogger&lt;AlertingService&gt; _logger;\n    private readonly IAlertManager _alertManager;\n\n    public AlertingService(ILogger&lt;AlertingService&gt; logger, IAlertManager alertManager)\n    {\n        _logger = logger;\n        _alertManager = alertManager;\n    }\n\n    public async Task ProcessAlertsAsync(MetricAlert alert)\n    {\n        // E\u015fik de\u011fer kontrol\u00fc\n        if (alert.Value &gt; alert.Threshold)\n        {\n            // Alert olu\u015ftur\n            var alertMessage = new AlertMessage\n            {\n                Title = alert.Title,\n                Message = alert.Message,\n                Severity = alert.Severity,\n                Timestamp = DateTime.UtcNow\n            };\n\n            // Bildirim g\u00f6nder\n            await _alertManager.SendAlertAsync(alertMessage);\n            _logger.LogWarning($\"Alert sent: {alert.Title}\");\n        }\n    }\n}\n</code></pre>"},{"location":"senior/devops-practices/monitoring/#best-practices","title":"Best Practices","text":""},{"location":"senior/devops-practices/monitoring/#1-monitoring-stratejisi","title":"1. Monitoring Stratejisi","text":"<ul> <li>KPI'lar\u0131n belirlenmesi</li> <li>Metrik se\u00e7imi</li> <li>E\u015fik de\u011ferlerin ayarlanmas\u0131</li> <li>Raporlama stratejisi</li> <li>Trend analizi</li> </ul>"},{"location":"senior/devops-practices/monitoring/#2-performans-optimizasyonu","title":"2. Performans Optimizasyonu","text":"<ul> <li>Veri toplama s\u0131kl\u0131\u011f\u0131</li> <li>Veri saklama politikalar\u0131</li> <li>Kaynak kullan\u0131m\u0131</li> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Veri s\u0131k\u0131\u015ft\u0131rma</li> </ul>"},{"location":"senior/devops-practices/monitoring/#3-guvenlik-ve-uyumluluk","title":"3. G\u00fcvenlik ve Uyumluluk","text":"<ul> <li>Veri gizlili\u011fi</li> <li>Eri\u015fim kontrol\u00fc</li> <li>Denetim izleri</li> <li>Uyumluluk gereksinimleri</li> <li>G\u00fcvenlik izleme</li> </ul>"},{"location":"senior/devops-practices/monitoring/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/devops-practices/monitoring/#1-monitoring-neden-onemlidir","title":"1. Monitoring neden \u00f6nemlidir?","text":"<ul> <li>Sistem sa\u011fl\u0131\u011f\u0131</li> <li>Performans optimizasyonu</li> <li>Sorun tespiti</li> <li>Kapasite planlamas\u0131</li> <li>Kullan\u0131c\u0131 deneyimi</li> </ul>"},{"location":"senior/devops-practices/monitoring/#2-hangi-metrikler-izlenmelidir","title":"2. Hangi metrikler izlenmelidir?","text":"<ul> <li>Sistem metrikleri</li> <li>Uygulama metrikleri</li> <li>\u0130\u015f metrikleri</li> <li>Kullan\u0131c\u0131 metrikleri</li> <li>G\u00fcvenlik metrikleri</li> </ul>"},{"location":"senior/devops-practices/monitoring/#3-monitoring-zorluklar-nelerdir","title":"3. Monitoring zorluklar\u0131 nelerdir?","text":"<ul> <li>Veri hacmi</li> <li>Ger\u00e7ek zamanl\u0131 analiz</li> <li>Yanl\u0131\u015f pozitifler</li> <li>Kaynak kullan\u0131m\u0131</li> <li>Entegrasyon</li> </ul>"},{"location":"senior/devops-practices/monitoring/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Azure Monitor Documentation</li> <li>Prometheus Documentation</li> <li>Grafana Documentation</li> <li>ELK Stack Documentation </li> </ul>"},{"location":"senior/interview-examples/interview-1/","title":"M\u00fclakat \u00d6rne\u011fi 1","text":""},{"location":"senior/interview-examples/interview-1/#1-yuksek-olceklenebilir-bir-e-ticaret-sistemi-nasl-tasarlanr","title":"1. Y\u00fcksek \u00f6l\u00e7eklenebilir bir e-ticaret sistemi nas\u0131l tasarlan\u0131r?","text":"<p>Cevap: Mikroservis mimarisi, veritaban\u0131 sharding, caching stratejileri, load balancing ve CDN kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#2-sistem-yuksek-erisilebilirlik-high-availability-icin-nasl-tasarlanr","title":"2. Sistem y\u00fcksek eri\u015filebilirlik (high availability) i\u00e7in nas\u0131l tasarlan\u0131r?","text":"<p>Cevap: Multi-region deployment, failover mekanizmalar\u0131, health checks ve circuit breaker pattern'leri kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#3-load-balancing-stratejileri-nelerdir-ve-nasl-uygulanr","title":"3. Load balancing stratejileri nelerdir ve nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Round-robin, least connections, IP hash ve weighted distribution gibi stratejiler kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#4-veritaban-sharding-nasl-uygulanr-ve-hangi-durumlarda-kullanlr","title":"4. Veritaban\u0131 sharding nas\u0131l uygulan\u0131r ve hangi durumlarda kullan\u0131l\u0131r?","text":"<p>Cevap: Horizontal partitioning, consistent hashing ve shard key stratejileri kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#5-cloud-mimarisi-icin-hangi-azure-servislerini-kullanrsnz","title":"5. Cloud mimarisi i\u00e7in hangi Azure servislerini kullan\u0131rs\u0131n\u0131z?","text":"<p>Cevap: Azure Kubernetes Service, Azure Functions, Azure SQL, Azure Cache for Redis ve Azure Service Bus. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#6-awsde-serverless-mimari-nasl-tasarlanr","title":"6. AWS'de serverless mimari nas\u0131l tasarlan\u0131r?","text":"<p>Cevap: AWS Lambda, API Gateway, DynamoDB, S3 ve EventBridge kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#7-cicd-pipeline-nasl-tasarlanr-ve-otomatize-edilir","title":"7. CI/CD pipeline nas\u0131l tasarlan\u0131r ve otomatize edilir?","text":"<p>Cevap: GitHub Actions, Azure DevOps veya Jenkins kullanarak, test otomasyonu ve deployment stratejileri ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#8-infrastructure-as-code-nasl-uygulanr","title":"8. Infrastructure as Code nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Terraform veya ARM templates kullanarak, version control ve modular yap\u0131 ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#9-sistem-monitoring-ve-alerting-nasl-yaplandrlr","title":"9. Sistem monitoring ve alerting nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?","text":"<p>Cevap: Application Insights, Prometheus, Grafana ve Azure Monitor kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#10-distributed-logging-nasl-implemente-edilir","title":"10. Distributed logging nas\u0131l implemente edilir?","text":"<p>Cevap: ELK Stack, Azure Log Analytics veya AWS CloudWatch kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#11-blue-green-ve-canary-deployment-stratejileri-nasl-uygulanr","title":"11. Blue-Green ve Canary deployment stratejileri nas\u0131l uygulan\u0131r?","text":"<p>Cevap: Traffic routing, health checks ve rollback mekanizmalar\u0131 ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#12-oauth2-ve-openid-connect-nasl-implemente-edilir","title":"12. OAuth2 ve OpenID Connect nas\u0131l implemente edilir?","text":"<p>Cevap: IdentityServer, Azure AD veya AWS Cognito kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#13-jwt-tokenlar-nasl-guvenli-bir-sekilde-yonetilir","title":"13. JWT token'lar\u0131 nas\u0131l g\u00fcvenli bir \u015fekilde y\u00f6netilir?","text":"<p>Cevap: Token signing, encryption, refresh token mekanizmas\u0131 ve token revocation ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#14-security-headers-nasl-yaplandrlr","title":"14. Security headers nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?","text":"<p>Cevap: CSP, HSTS, X-Frame-Options ve di\u011fer g\u00fcvenlik ba\u015fl\u0131klar\u0131 ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#15-penetration-testing-nasl-yaplr","title":"15. Penetration testing nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: OWASP ZAP, Burp Suite ve di\u011fer g\u00fcvenlik test ara\u00e7lar\u0131 ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#16-container-orchestration-nasl-yaplandrlr","title":"16. Container orchestration nas\u0131l yap\u0131land\u0131r\u0131l\u0131r?","text":"<p>Cevap: Kubernetes, Docker Swarm veya Azure Service Fabric kullanarak. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#17-cloud-security-best-practiceleri-nelerdir","title":"17. Cloud security best practice'leri nelerdir?","text":"<p>Cevap: Network security, identity management, encryption ve compliance standartlar\u0131 ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#18-disaster-recovery-plan-nasl-olusturulur","title":"18. Disaster recovery plan\u0131 nas\u0131l olu\u015fturulur?","text":"<p>Cevap: Backup stratejileri, RTO/RPO hedefleri ve failover senaryolar\u0131 ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#19-performance-testing-ve-optimization-nasl-yaplr","title":"19. Performance testing ve optimization nas\u0131l yap\u0131l\u0131r?","text":"<p>Cevap: Load testing, stress testing ve performance profiling ara\u00e7lar\u0131 ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n</p>"},{"location":"senior/interview-examples/interview-1/#20-microservices-aras-guvenlik-nasl-saglanr","title":"20. Microservices aras\u0131 g\u00fcvenlik nas\u0131l sa\u011flan\u0131r?","text":"<p>Cevap: Service mesh, mutual TLS ve API gateway g\u00fcvenli\u011fi ile. Detayl\u0131 bilgi i\u00e7in t\u0131klay\u0131n </p>"},{"location":"senior/performance-engineering/","title":"Performance Engineering","text":""},{"location":"senior/performance-engineering/#giris","title":"Giri\u015f","text":"<p>Performance Engineering, modern software systems'de performance optimization, capacity planning ve scalability i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in performance engineering konular\u0131n\u0131 anlamak, performance testing implement etmek, capacity planning yapmak ve performance monitoring kurmak i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, performance testing, capacity planning, performance monitoring, performance optimization ve scalability patterns konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/performance-engineering/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/performance-engineering/#1-performance-testing","title":"1. Performance Testing","text":"<p>Load testing, stress testing, ve performance validation.</p> <p>\u00d6\u011frenilecekler: - Load testing - Stress testing - Performance validation - Performance metrics - Performance analysis</p>"},{"location":"senior/performance-engineering/#2-capacity-planning","title":"2. Capacity Planning","text":"<p>Resource planning, scaling strategies, ve capacity optimization.</p> <p>\u00d6\u011frenilecekler: - Resource planning - Scaling strategies - Capacity optimization - Growth forecasting - Cost optimization</p>"},{"location":"senior/performance-engineering/#3-performance-monitoring","title":"3. Performance Monitoring","text":"<p>Real-time monitoring, performance metrics, ve alerting.</p> <p>\u00d6\u011frenilecekler: - Real-time monitoring - Performance metrics - Alerting systems - Performance dashboards - Trend analysis</p>"},{"location":"senior/performance-engineering/#4-performance-optimization","title":"4. Performance Optimization","text":"<p>Code optimization, system optimization, ve bottleneck identification.</p> <p>\u00d6\u011frenilecekler: - Code optimization - System optimization - Bottleneck identification - Performance profiling - Optimization techniques</p>"},{"location":"senior/performance-engineering/#5-scalability-patterns","title":"5. Scalability Patterns","text":"<p>Horizontal scaling, vertical scaling, ve distributed scaling.</p> <p>\u00d6\u011frenilecekler: - Horizontal scaling - Vertical scaling - Distributed scaling - Load balancing - Auto-scaling</p>"},{"location":"senior/performance-engineering/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/performance-engineering/#1-user-experience","title":"1. User Experience","text":"<ul> <li>Fast response times</li> <li>Smooth interactions</li> <li>Reliable performance</li> <li>User satisfaction</li> <li>Competitive advantage</li> </ul>"},{"location":"senior/performance-engineering/#2-system-reliability","title":"2. System Reliability","text":"<ul> <li>High availability</li> <li>Fault tolerance</li> <li>Performance stability</li> <li>Resource efficiency</li> <li>Cost optimization</li> </ul>"},{"location":"senior/performance-engineering/#3-business-impact","title":"3. Business Impact","text":"<ul> <li>Customer satisfaction</li> <li>Revenue growth</li> <li>Cost reduction</li> <li>Market position</li> <li>Operational efficiency</li> </ul>"},{"location":"senior/performance-engineering/#4-technical-excellence","title":"4. Technical Excellence","text":"<ul> <li>Performance optimization</li> <li>Best practices</li> <li>Proven patterns</li> <li>Monitoring capabilities</li> <li>Continuous improvement</li> </ul>"},{"location":"senior/performance-engineering/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/performance-engineering/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Performance testing nedir?</li> <li> <p>Cevap: Load testing, stress testing, performance validation, metrics collection.</p> </li> <li> <p>Capacity planning nedir?</p> </li> <li> <p>Cevap: Resource planning, scaling strategies, growth forecasting, cost optimization.</p> </li> <li> <p>Performance monitoring nedir?</p> </li> <li> <p>Cevap: Real-time monitoring, metrics collection, alerting, trend analysis.</p> </li> <li> <p>Performance optimization nedir?</p> </li> <li> <p>Cevap: Code optimization, system optimization, bottleneck identification, profiling.</p> </li> <li> <p>Scalability nedir?</p> </li> <li>Cevap: Horizontal scaling, vertical scaling, load distribution, auto-scaling.</li> </ol>"},{"location":"senior/performance-engineering/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Performance testing nas\u0131l planlan\u0131r?</li> <li> <p>Cevap: Test scenarios, metrics definition, environment setup, result analysis.</p> </li> <li> <p>Capacity planning nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Current usage analysis, growth projection, resource planning, scaling strategy.</p> </li> <li> <p>Performance monitoring nas\u0131l kurulur?</p> </li> <li> <p>Cevap: Metrics collection, alerting setup, dashboard creation, trend monitoring.</p> </li> <li> <p>Performance bottlenecks nas\u0131l tespit edilir?</p> </li> <li> <p>Cevap: Profiling tools, metrics analysis, load testing, system monitoring.</p> </li> <li> <p>Scalability patterns nas\u0131l implement edilir?</p> </li> <li>Cevap: Load balancing, auto-scaling, distributed systems, caching strategies.</li> </ol>"},{"location":"senior/performance-engineering/#best-practices","title":"Best Practices","text":""},{"location":"senior/performance-engineering/#1-performance-testing_1","title":"1. Performance Testing","text":"<ul> <li>Define clear objectives</li> <li>Use realistic test data</li> <li>Monitor system resources</li> <li>Analyze results thoroughly</li> <li>Plan for scaling</li> </ul>"},{"location":"senior/performance-engineering/#2-capacity-planning_1","title":"2. Capacity Planning","text":"<ul> <li>Monitor current usage</li> <li>Project future growth</li> <li>Plan for peak loads</li> <li>Optimize resource usage</li> <li>Plan for scaling</li> </ul>"},{"location":"senior/performance-engineering/#3-performance-monitoring_1","title":"3. Performance Monitoring","text":"<ul> <li>Define key metrics</li> <li>Set up alerting</li> <li>Create dashboards</li> <li>Monitor trends</li> <li>Plan for improvement</li> </ul>"},{"location":"senior/performance-engineering/#4-performance-optimization_1","title":"4. Performance Optimization","text":"<ul> <li>Profile before optimizing</li> <li>Focus on bottlenecks</li> <li>Measure improvements</li> <li>Test thoroughly</li> <li>Plan for maintenance</li> </ul>"},{"location":"senior/performance-engineering/#5-scalability-implementation","title":"5. Scalability Implementation","text":"<ul> <li>Design for scaling</li> <li>Implement load balancing</li> <li>Use caching strategies</li> <li>Monitor performance</li> <li>Plan for growth</li> </ul>"},{"location":"senior/performance-engineering/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Performance Testing</li> <li>Capacity Planning</li> <li>Performance Monitoring</li> <li>Performance Optimization</li> <li>Scalability Patterns</li> <li>Performance Engineering</li> </ul>"},{"location":"senior/system-design/","title":"System Design","text":""},{"location":"senior/system-design/#giris","title":"Giri\u015f","text":"<p>System Design, senior-level software engineers i\u00e7in kritik \u00f6neme sahip bir skill'dir. Large-scale, distributed systems tasarlamak, scalability, availability ve performance requirements'lar\u0131 kar\u015f\u0131lamak i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, scalability, high availability, load balancing, caching strategies ve database sharding konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/system-design/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/system-design/#1-scalability","title":"1. Scalability","text":"<p>Horizontal vs vertical scaling, scaling strategies, ve capacity planning.</p> <p>\u00d6\u011frenilecekler: - Horizontal scaling - Vertical scaling - Auto-scaling - Capacity planning - Performance optimization</p>"},{"location":"senior/system-design/#2-high-availability","title":"2. High Availability","text":"<p>Fault tolerance, redundancy, ve disaster recovery strategies.</p> <p>\u00d6\u011frenilecekler: - Fault tolerance patterns - Redundancy strategies - Disaster recovery - Failover mechanisms - Health monitoring</p>"},{"location":"senior/system-design/#3-load-balancing","title":"3. Load Balancing","text":"<p>Load distribution, traffic management, ve health checking.</p> <p>\u00d6\u011frenilecekler: - Load balancing algorithms - Traffic distribution - Health checking - Session persistence - Geographic distribution</p>"},{"location":"senior/system-design/#4-caching-strategies","title":"4. Caching Strategies","text":"<p>Multi-level caching, cache invalidation, ve cache distribution.</p> <p>\u00d6\u011frenilecekler: - Multi-level caching - Cache invalidation - Cache distribution - Cache consistency - Cache performance</p>"},{"location":"senior/system-design/#5-database-sharding","title":"5. Database Sharding","text":"<p>Data partitioning, sharding strategies, ve cross-shard operations.</p> <p>\u00d6\u011frenilecekler: - Sharding strategies - Data partitioning - Cross-shard operations - Shard management - Data consistency</p>"},{"location":"senior/system-design/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/system-design/#1-large-scale-systems","title":"1. Large-Scale Systems","text":"<ul> <li>Enterprise applications</li> <li>Cloud services</li> <li>Distributed systems</li> <li>High-traffic applications</li> <li>Mission-critical systems</li> </ul>"},{"location":"senior/system-design/#2-career-growth","title":"2. Career Growth","text":"<ul> <li>Senior engineer requirements</li> <li>Technical leadership</li> <li>Architecture decisions</li> <li>System design interviews</li> <li>Technical expertise</li> </ul>"},{"location":"senior/system-design/#3-business-impact","title":"3. Business Impact","text":"<ul> <li>System reliability</li> <li>Performance optimization</li> <li>Cost optimization</li> <li>User experience</li> <li>Competitive advantage</li> </ul>"},{"location":"senior/system-design/#4-technical-excellence","title":"4. Technical Excellence","text":"<ul> <li>Best practices</li> <li>Proven patterns</li> <li>Scalable solutions</li> <li>Maintainable architecture</li> <li>Future-proof design</li> </ul>"},{"location":"senior/system-design/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/system-design/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>System design nedir?</li> <li> <p>Cevap: Large-scale system architecture, scalability, availability, performance.</p> </li> <li> <p>Scalability nedir?</p> </li> <li> <p>Cevap: System capacity, performance improvement, resource utilization.</p> </li> <li> <p>High availability nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: Fault tolerance, redundancy, failover, health monitoring.</p> </li> <li> <p>Load balancing nas\u0131l \u00e7al\u0131\u015f\u0131r?</p> </li> <li> <p>Cevap: Traffic distribution, health checking, algorithm selection.</p> </li> <li> <p>Database sharding nedir?</p> </li> <li>Cevap: Data partitioning, horizontal scaling, shard management.</li> </ol>"},{"location":"senior/system-design/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Horizontal scaling nas\u0131l implement edilir?</li> <li> <p>Cevap: Stateless design, load balancing, data distribution, auto-scaling.</p> </li> <li> <p>Fault tolerance nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: Circuit breaker, retry policies, fallback mechanisms, health checks.</p> </li> <li> <p>Cache consistency nas\u0131l sa\u011flan\u0131r?</p> </li> <li> <p>Cevap: Cache invalidation, write-through, write-behind, eventual consistency.</p> </li> <li> <p>Cross-shard transactions nas\u0131l handle edilir?</p> </li> <li> <p>Cevap: Saga pattern, two-phase commit, eventual consistency, compensation.</p> </li> <li> <p>System monitoring nas\u0131l yap\u0131l\u0131r?</p> </li> <li>Cevap: Metrics collection, alerting, health checks, performance monitoring.</li> </ol>"},{"location":"senior/system-design/#best-practices","title":"Best Practices","text":""},{"location":"senior/system-design/#1-scalability-design","title":"1. Scalability Design","text":"<ul> <li>Design for horizontal scaling</li> <li>Use stateless services</li> <li>Implement auto-scaling</li> <li>Plan for capacity growth</li> <li>Monitor performance</li> </ul>"},{"location":"senior/system-design/#2-availability-planning","title":"2. Availability Planning","text":"<ul> <li>Implement redundancy</li> <li>Design fault tolerance</li> <li>Plan disaster recovery</li> <li>Monitor system health</li> <li>Test failover scenarios</li> </ul>"},{"location":"senior/system-design/#3-performance-optimization","title":"3. Performance Optimization","text":"<ul> <li>Use appropriate caching</li> <li>Optimize database queries</li> <li>Implement load balancing</li> <li>Monitor bottlenecks</li> <li>Plan for optimization</li> </ul>"},{"location":"senior/system-design/#4-data-management","title":"4. Data Management","text":"<ul> <li>Choose appropriate sharding</li> <li>Plan for data growth</li> <li>Implement backup strategies</li> <li>Monitor data consistency</li> <li>Plan for migration</li> </ul>"},{"location":"senior/system-design/#5-monitoring-maintenance","title":"5. Monitoring &amp; Maintenance","text":"<ul> <li>Implement comprehensive monitoring</li> <li>Set up alerting</li> <li>Monitor system health</li> <li>Plan for maintenance</li> <li>Document architecture</li> </ul>"},{"location":"senior/system-design/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>System Design Primer</li> <li>Scalable System Design</li> <li>High Availability</li> <li>Load Balancing</li> <li>Database Sharding</li> <li>System Design Interview </li> </ul>"},{"location":"senior/system-design/caching-strategies/","title":"\u00d6nbellekleme Stratejileri (Caching Strategies)","text":""},{"location":"senior/system-design/caching-strategies/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>\u00d6nbellekleme, s\u0131k eri\u015filen verilerin h\u0131zl\u0131 eri\u015filebilir bir depoda saklanarak sistem performans\u0131n\u0131 art\u0131ran bir tekniktir. Farkl\u0131 \u00f6nbellekleme stratejileri, veri tutarl\u0131l\u0131\u011f\u0131, \u00f6l\u00e7eklenebilirlik ve performans gereksinimlerine g\u00f6re kullan\u0131l\u0131r.</p>"},{"location":"senior/system-design/caching-strategies/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/system-design/caching-strategies/#1-in-memory-caching","title":"1. In-Memory Caching","text":"<pre><code>public class InMemoryCacheService : ICacheService\n{\n    private readonly ILogger&lt;InMemoryCacheService&gt; _logger;\n    private readonly IMemoryCache _cache;\n    private readonly TimeSpan _defaultExpiration;\n\n    public InMemoryCacheService(\n        ILogger&lt;InMemoryCacheService&gt; logger,\n        IMemoryCache cache,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _cache = cache;\n        _defaultExpiration = TimeSpan.FromMinutes(\n            configuration.GetValue&lt;int&gt;(\"Cache:DefaultExpirationMinutes\", 30));\n    }\n\n    public async Task&lt;T&gt; GetOrSetAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory)\n    {\n        if (_cache.TryGetValue(key, out T cachedValue))\n        {\n            return cachedValue;\n        }\n\n        var value = await factory();\n        var cacheEntryOptions = new MemoryCacheEntryOptions()\n            .SetAbsoluteExpiration(_defaultExpiration)\n            .SetPriority(CacheItemPriority.Normal)\n            .RegisterPostEvictionCallback((key, value, reason, state) =&gt;\n            {\n                _logger.LogInformation($\"Cache entry {key} was evicted due to {reason}\");\n            });\n\n        _cache.Set(key, value, cacheEntryOptions);\n        return value;\n    }\n\n    public Task RemoveAsync(string key)\n    {\n        _cache.Remove(key);\n        return Task.CompletedTask;\n    }\n}\n</code></pre>"},{"location":"senior/system-design/caching-strategies/#2-distributed-caching","title":"2. Distributed Caching","text":"<pre><code>public class RedisCacheService : ICacheService\n{\n    private readonly ILogger&lt;RedisCacheService&gt; _logger;\n    private readonly IDistributedCache _cache;\n    private readonly DistributedCacheEntryOptions _defaultOptions;\n\n    public RedisCacheService(\n        ILogger&lt;RedisCacheService&gt; logger,\n        IDistributedCache cache,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _cache = cache;\n        _defaultOptions = new DistributedCacheEntryOptions\n        {\n            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(\n                configuration.GetValue&lt;int&gt;(\"Cache:DefaultExpirationMinutes\", 30)),\n            SlidingExpiration = TimeSpan.FromMinutes(5)\n        };\n    }\n\n    public async Task&lt;T&gt; GetOrSetAsync&lt;T&gt;(string key, Func&lt;Task&lt;T&gt;&gt; factory)\n    {\n        var cachedValue = await _cache.GetStringAsync(key);\n        if (cachedValue != null)\n        {\n            return JsonSerializer.Deserialize&lt;T&gt;(cachedValue);\n        }\n\n        var value = await factory();\n        var serializedValue = JsonSerializer.Serialize(value);\n        await _cache.SetStringAsync(key, serializedValue, _defaultOptions);\n        return value;\n    }\n\n    public Task RemoveAsync(string key)\n    {\n        return _cache.RemoveAsync(key);\n    }\n}\n</code></pre>"},{"location":"senior/system-design/caching-strategies/#3-cache-aside-pattern","title":"3. Cache-Aside Pattern","text":"<pre><code>public class CacheAsideService\n{\n    private readonly ILogger&lt;CacheAsideService&gt; _logger;\n    private readonly ICacheService _cache;\n    private readonly IRepository _repository;\n\n    public CacheAsideService(\n        ILogger&lt;CacheAsideService&gt; logger,\n        ICacheService cache,\n        IRepository repository)\n    {\n        _logger = logger;\n        _cache = cache;\n        _repository = repository;\n    }\n\n    public async Task&lt;T&gt; GetDataAsync&lt;T&gt;(string key)\n    {\n        try\n        {\n            // \u00d6nbellekten kontrol et\n            var cachedValue = await _cache.GetAsync&lt;T&gt;(key);\n            if (cachedValue != null)\n            {\n                return cachedValue;\n            }\n\n            // Veritaban\u0131ndan al\n            var value = await _repository.GetAsync&lt;T&gt;(key);\n\n            // \u00d6nbelle\u011fe kaydet\n            await _cache.SetAsync(key, value);\n\n            return value;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Veri alma hatas\u0131\");\n            throw;\n        }\n    }\n\n    public async Task UpdateDataAsync&lt;T&gt;(string key, T value)\n    {\n        try\n        {\n            // Veritaban\u0131n\u0131 g\u00fcncelle\n            await _repository.UpdateAsync(key, value);\n\n            // \u00d6nbelle\u011fi g\u00fcncelle\n            await _cache.SetAsync(key, value);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Veri g\u00fcncelleme hatas\u0131\");\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"senior/system-design/caching-strategies/#4-write-through-caching","title":"4. Write-Through Caching","text":"<pre><code>public class WriteThroughCacheService\n{\n    private readonly ILogger&lt;WriteThroughCacheService&gt; _logger;\n    private readonly ICacheService _cache;\n    private readonly IRepository _repository;\n\n    public WriteThroughCacheService(\n        ILogger&lt;WriteThroughCacheService&gt; logger,\n        ICacheService cache,\n        IRepository repository)\n    {\n        _logger = logger;\n        _cache = cache;\n        _repository = repository;\n    }\n\n    public async Task&lt;T&gt; GetDataAsync&lt;T&gt;(string key)\n    {\n        try\n        {\n            // \u00d6nbellekten kontrol et\n            var cachedValue = await _cache.GetAsync&lt;T&gt;(key);\n            if (cachedValue != null)\n            {\n                return cachedValue;\n            }\n\n            // Veritaban\u0131ndan al ve \u00f6nbelle\u011fe kaydet\n            var value = await _repository.GetAsync&lt;T&gt;(key);\n            await _cache.SetAsync(key, value);\n\n            return value;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Veri alma hatas\u0131\");\n            throw;\n        }\n    }\n\n    public async Task UpdateDataAsync&lt;T&gt;(string key, T value)\n    {\n        try\n        {\n            // \u00d6nce \u00f6nbelle\u011fi g\u00fcncelle\n            await _cache.SetAsync(key, value);\n\n            // Sonra veritaban\u0131n\u0131 g\u00fcncelle\n            await _repository.UpdateAsync(key, value);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Veri g\u00fcncelleme hatas\u0131\");\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"senior/system-design/caching-strategies/#best-practices","title":"Best Practices","text":""},{"location":"senior/system-design/caching-strategies/#1-onbellekleme-stratejileri","title":"1. \u00d6nbellekleme Stratejileri","text":"<ul> <li>Veri eri\u015fim desenlerini analiz et</li> <li>Uygun \u00f6nbellek boyutunu belirle</li> <li>\u00d6nbellek s\u00fcresini optimize et</li> <li>\u00d6nbellek temizleme stratejisi belirle</li> <li>\u00d6nbellek tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011fla</li> </ul>"},{"location":"senior/system-design/caching-strategies/#2-performans-optimizasyonu","title":"2. Performans Optimizasyonu","text":"<ul> <li>\u00d6nbellek hit oran\u0131n\u0131 izle</li> <li>\u00d6nbellek boyutunu monit\u00f6rle</li> <li>\u00d6nbellek s\u00fcresini ayarla</li> <li>\u00d6nbellek s\u0131k\u0131\u015ft\u0131rmas\u0131 kullan</li> <li>\u00d6nbellek da\u011f\u0131t\u0131m\u0131n\u0131 optimize et</li> </ul>"},{"location":"senior/system-design/caching-strategies/#3-monitoring-ve-logging","title":"3. Monitoring ve Logging","text":"<ul> <li>\u00d6nbellek istatistiklerini topla</li> <li>\u00d6nbellek hatalar\u0131n\u0131 izle</li> <li>\u00d6nbellek performans\u0131n\u0131 takip et</li> <li>\u00d6nbellek kullan\u0131m\u0131n\u0131 raporla</li> <li>Otomatik alarmlar kur</li> </ul>"},{"location":"senior/system-design/caching-strategies/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/system-design/caching-strategies/#1-hangi-onbellekleme-stratejisi-ne-zaman-kullanlmaldr","title":"1. Hangi \u00f6nbellekleme stratejisi ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>In-Memory: Tek sunucu, h\u0131zl\u0131 eri\u015fim</li> <li>Distributed: \u00c7oklu sunucu, \u00f6l\u00e7eklenebilirlik</li> <li>Cache-Aside: Basit, esnek</li> <li>Write-Through: Tutarl\u0131l\u0131k \u00f6nemli</li> <li>Write-Behind: Performans \u00f6nemli</li> </ul>"},{"location":"senior/system-design/caching-strategies/#2-onbelleklemede-veri-tutarllg-nasl-saglanr","title":"2. \u00d6nbelleklemede veri tutarl\u0131l\u0131\u011f\u0131 nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>TTL (Time-To-Live) kullan</li> <li>Versiyonlama uygula</li> <li>Etiketleme yap</li> <li>Temizleme stratejisi belirle</li> <li>Senkronizasyon mekanizmas\u0131 kur</li> </ul>"},{"location":"senior/system-design/caching-strategies/#3-onbelleklemede-karslaslan-zorluklar-nelerdir","title":"3. \u00d6nbelleklemede kar\u015f\u0131la\u015f\u0131lan zorluklar nelerdir?","text":"<ul> <li>Veri tutarl\u0131l\u0131\u011f\u0131</li> <li>\u00d6nbellek \u0131skalama</li> <li>\u00d6nbellek kirlenmesi</li> <li>Bellek y\u00f6netimi</li> <li>\u00d6l\u00e7eklendirme</li> </ul>"},{"location":"senior/system-design/caching-strategies/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Caching Patterns</li> <li>Redis Caching</li> <li>Caching Best Practices</li> <li>Distributed Caching </li> </ul>"},{"location":"senior/system-design/database-sharding/","title":"Veritaban\u0131 Sharding","text":""},{"location":"senior/system-design/database-sharding/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Veritaban\u0131 sharding, b\u00fcy\u00fck veritabanlar\u0131n\u0131 daha k\u00fc\u00e7\u00fck, y\u00f6netilebilir par\u00e7alara (shard) b\u00f6lerek \u00f6l\u00e7eklenebilirli\u011fi art\u0131ran bir tekniktir. Her shard, veritaban\u0131n\u0131n bir alt k\u00fcmesini i\u00e7erir ve ba\u011f\u0131ms\u0131z olarak \u00e7al\u0131\u015fabilir.</p>"},{"location":"senior/system-design/database-sharding/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/system-design/database-sharding/#1-hash-based-sharding","title":"1. Hash-Based Sharding","text":"<pre><code>public class HashBasedShardingStrategy : IShardingStrategy\n{\n    private readonly ILogger&lt;HashBasedShardingStrategy&gt; _logger;\n    private readonly IReadOnlyList&lt;IDatabase&gt; _shards;\n\n    public HashBasedShardingStrategy(\n        ILogger&lt;HashBasedShardingStrategy&gt; logger,\n        IReadOnlyList&lt;IDatabase&gt; shards)\n    {\n        _logger = logger;\n        _shards = shards;\n    }\n\n    public IDatabase GetShard(string key)\n    {\n        var hash = GetHash(key);\n        var shardIndex = hash % _shards.Count;\n        return _shards[shardIndex];\n    }\n\n    private int GetHash(string key)\n    {\n        return Math.Abs(key.GetHashCode());\n    }\n}\n\npublic class ShardedDatabaseService\n{\n    private readonly ILogger&lt;ShardedDatabaseService&gt; _logger;\n    private readonly IShardingStrategy _shardingStrategy;\n\n    public ShardedDatabaseService(\n        ILogger&lt;ShardedDatabaseService&gt; logger,\n        IShardingStrategy shardingStrategy)\n    {\n        _logger = logger;\n        _shardingStrategy = shardingStrategy;\n    }\n\n    public async Task SaveDataAsync(Data data)\n    {\n        var shard = _shardingStrategy.GetShard(data.Id);\n        await shard.SaveAsync(data);\n    }\n\n    public async Task&lt;Data&gt; GetDataAsync(string id)\n    {\n        var shard = _shardingStrategy.GetShard(id);\n        return await shard.GetAsync(id);\n    }\n}\n</code></pre>"},{"location":"senior/system-design/database-sharding/#2-range-based-sharding","title":"2. Range-Based Sharding","text":"<pre><code>public class RangeBasedShardingStrategy : IShardingStrategy\n{\n    private readonly ILogger&lt;RangeBasedShardingStrategy&gt; _logger;\n    private readonly IReadOnlyList&lt;ShardRange&gt; _shardRanges;\n\n    public RangeBasedShardingStrategy(\n        ILogger&lt;RangeBasedShardingStrategy&gt; logger,\n        IReadOnlyList&lt;ShardRange&gt; shardRanges)\n    {\n        _logger = logger;\n        _shardRanges = shardRanges.OrderBy(s =&gt; s.StartValue).ToList();\n    }\n\n    public IDatabase GetShard(string key)\n    {\n        var value = GetNumericValue(key);\n        var shard = _shardRanges.FirstOrDefault(s =&gt; \n            value &gt;= s.StartValue &amp;&amp; value &lt; s.EndValue);\n\n        if (shard == null)\n        {\n            throw new ShardNotFoundException(key);\n        }\n\n        return shard.Database;\n    }\n\n    private long GetNumericValue(string key)\n    {\n        return long.Parse(key);\n    }\n}\n\npublic class ShardRange\n{\n    public long StartValue { get; }\n    public long EndValue { get; }\n    public IDatabase Database { get; }\n\n    public ShardRange(long startValue, long endValue, IDatabase database)\n    {\n        StartValue = startValue;\n        EndValue = endValue;\n        Database = database;\n    }\n}\n</code></pre>"},{"location":"senior/system-design/database-sharding/#3-directory-based-sharding","title":"3. Directory-Based Sharding","text":"<pre><code>public class DirectoryBasedShardingStrategy : IShardingStrategy\n{\n    private readonly ILogger&lt;DirectoryBasedShardingStrategy&gt; _logger;\n    private readonly IDictionary&lt;string, IDatabase&gt; _shardMap;\n    private readonly IDatabase _defaultShard;\n\n    public DirectoryBasedShardingStrategy(\n        ILogger&lt;DirectoryBasedShardingStrategy&gt; logger,\n        IDictionary&lt;string, IDatabase&gt; shardMap,\n        IDatabase defaultShard)\n    {\n        _logger = logger;\n        _shardMap = shardMap;\n        _defaultShard = defaultShard;\n    }\n\n    public IDatabase GetShard(string key)\n    {\n        if (_shardMap.TryGetValue(key, out var shard))\n        {\n            return shard;\n        }\n\n        _logger.LogWarning($\"Shard bulunamad\u0131, varsay\u0131lan shard kullan\u0131l\u0131yor: {key}\");\n        return _defaultShard;\n    }\n}\n\npublic class ShardDirectoryService\n{\n    private readonly ILogger&lt;ShardDirectoryService&gt; _logger;\n    private readonly IShardingStrategy _shardingStrategy;\n\n    public ShardDirectoryService(\n        ILogger&lt;ShardDirectoryService&gt; logger,\n        IShardingStrategy shardingStrategy)\n    {\n        _logger = logger;\n        _shardingStrategy = shardingStrategy;\n    }\n\n    public async Task UpdateShardMappingAsync(string key, IDatabase newShard)\n    {\n        // Shard mapping g\u00fcncelleme i\u015flemi\n        await Task.Delay(100); // Sim\u00fclasyon\n        _logger.LogInformation($\"Shard mapping g\u00fcncellendi: {key}\");\n    }\n\n    public async Task&lt;IDatabase&gt; GetShardAsync(string key)\n    {\n        return _shardingStrategy.GetShard(key);\n    }\n}\n</code></pre>"},{"location":"senior/system-design/database-sharding/#4-shard-rebalancing","title":"4. Shard Rebalancing","text":"<pre><code>public class ShardRebalancingService\n{\n    private readonly ILogger&lt;ShardRebalancingService&gt; _logger;\n    private readonly IShardingStrategy _shardingStrategy;\n    private readonly IReadOnlyList&lt;IDatabase&gt; _shards;\n\n    public ShardRebalancingService(\n        ILogger&lt;ShardRebalancingService&gt; logger,\n        IShardingStrategy shardingStrategy,\n        IReadOnlyList&lt;IDatabase&gt; shards)\n    {\n        _logger = logger;\n        _shardingStrategy = shardingStrategy;\n        _shards = shards;\n    }\n\n    public async Task RebalanceShardsAsync()\n    {\n        foreach (var shard in _shards)\n        {\n            var data = await shard.GetAllDataAsync();\n            foreach (var item in data)\n            {\n                var targetShard = _shardingStrategy.GetShard(item.Id);\n                if (targetShard != shard)\n                {\n                    await targetShard.SaveAsync(item);\n                    await shard.DeleteAsync(item.Id);\n                }\n            }\n        }\n    }\n\n    public async Task AddNewShardAsync(IDatabase newShard)\n    {\n        // Yeni shard ekleme ve rebalancing i\u015flemi\n        await Task.Delay(100); // Sim\u00fclasyon\n        _logger.LogInformation(\"Yeni shard eklendi ve rebalancing tamamland\u0131\");\n    }\n}\n</code></pre>"},{"location":"senior/system-design/database-sharding/#best-practices","title":"Best Practices","text":""},{"location":"senior/system-design/database-sharding/#1-sharding-stratejileri","title":"1. Sharding Stratejileri","text":"<ul> <li>Veri da\u011f\u0131l\u0131m\u0131n\u0131 analiz et</li> <li>Shard boyutunu optimize et</li> <li>Shard say\u0131s\u0131n\u0131 belirle</li> <li>Shard key se\u00e7imini yap</li> <li>Shard mapping stratejisini belirle</li> </ul>"},{"location":"senior/system-design/database-sharding/#2-performans-optimizasyonu","title":"2. Performans Optimizasyonu","text":"<ul> <li>Shard lokasyonunu optimize et</li> <li>\u00c7apraz shard sorgular\u0131n\u0131 minimize et</li> <li>Shard y\u00fck\u00fcn\u00fc dengele</li> <li>\u00d6nbellekleme stratejisi uygula</li> <li>\u0130ndeksleme stratejisini belirle</li> </ul>"},{"location":"senior/system-design/database-sharding/#3-monitoring-ve-logging","title":"3. Monitoring ve Logging","text":"<ul> <li>Shard performans\u0131n\u0131 izle</li> <li>Shard boyutunu takip et</li> <li>Shard y\u00fck\u00fcn\u00fc monit\u00f6rle</li> <li>Hata oranlar\u0131n\u0131 izle</li> <li>Otomatik alarmlar kur</li> </ul>"},{"location":"senior/system-design/database-sharding/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/system-design/database-sharding/#1-hangi-sharding-stratejisi-ne-zaman-kullanlmaldr","title":"1. Hangi sharding stratejisi ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Hash-Based: E\u015fit da\u011f\u0131l\u0131m gerekti\u011finde</li> <li>Range-Based: S\u0131ral\u0131 veri eri\u015fimi oldu\u011funda</li> <li>Directory-Based: Esnek shard mapping gerekti\u011finde</li> <li>Composite: Karma\u015f\u0131k gereksinimler oldu\u011funda</li> </ul>"},{"location":"senior/system-design/database-sharding/#2-shardingde-veri-tutarllg-nasl-saglanr","title":"2. Sharding'de veri tutarl\u0131l\u0131\u011f\u0131 nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>Transaction y\u00f6netimi</li> <li>Veri replikasyonu</li> <li>Tutarl\u0131l\u0131k kontrolleri</li> <li>Senkronizasyon mekanizmalar\u0131</li> <li>Hata tolerans\u0131</li> </ul>"},{"location":"senior/system-design/database-sharding/#3-shardingde-karslaslan-zorluklar-nelerdir","title":"3. Sharding'de kar\u015f\u0131la\u015f\u0131lan zorluklar nelerdir?","text":"<ul> <li>\u00c7apraz shard sorgular\u0131</li> <li>Veri tutarl\u0131l\u0131\u011f\u0131</li> <li>Shard rebalancing</li> <li>Yedekleme ve kurtarma</li> <li>Monitoring ve y\u00f6netim</li> </ul>"},{"location":"senior/system-design/database-sharding/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Database Sharding</li> <li>Database Sharding Strategies</li> <li>Sharding Best Practices</li> <li>Sharding Patterns </li> </ul>"},{"location":"senior/system-design/high-availability/","title":"Y\u00fcksek Eri\u015filebilirlik (High Availability)","text":""},{"location":"senior/system-design/high-availability/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Y\u00fcksek Eri\u015filebilirlik, bir sistemin kesintisiz \u00e7al\u0131\u015fma ve hizmet verme yetene\u011fidir. Sistemlerin %99.9 ve \u00fczeri uptime oranlar\u0131na sahip olmas\u0131, hata tolerans\u0131 ve felaket kurtarma stratejileri y\u00fcksek eri\u015filebilirli\u011fi sa\u011flamak i\u00e7in kullan\u0131lan temel yakla\u015f\u0131mlard\u0131r.</p>"},{"location":"senior/system-design/high-availability/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/system-design/high-availability/#1-hata-tolerans-fault-tolerance","title":"1. Hata Tolerans\u0131 (Fault Tolerance)","text":"<pre><code>public class FaultTolerantService\n{\n    private readonly ILogger&lt;FaultTolerantService&gt; _logger;\n    private readonly IRetryPolicy _retryPolicy;\n    private readonly ICircuitBreaker _circuitBreaker;\n\n    public FaultTolerantService(\n        ILogger&lt;FaultTolerantService&gt; logger,\n        IRetryPolicy retryPolicy,\n        ICircuitBreaker circuitBreaker)\n    {\n        _logger = logger;\n        _retryPolicy = retryPolicy;\n        _circuitBreaker = circuitBreaker;\n    }\n\n    public async Task&lt;Result&gt; ProcessRequestAsync(Request request)\n    {\n        try\n        {\n            return await _circuitBreaker.ExecuteAsync(async () =&gt;\n            {\n                return await _retryPolicy.ExecuteAsync(async () =&gt;\n                {\n                    // Kritik i\u015flem\n                    return await ProcessCriticalOperationAsync(request);\n                });\n            });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"\u0130\u015flem ba\u015far\u0131s\u0131z oldu\");\n            return Result.Failure(\"\u0130\u015flem ba\u015far\u0131s\u0131z oldu\");\n        }\n    }\n\n    private async Task&lt;Result&gt; ProcessCriticalOperationAsync(Request request)\n    {\n        // Kritik i\u015flem mant\u0131\u011f\u0131\n        await Task.Delay(100);\n        return Result.Success();\n    }\n}\n\npublic interface ICircuitBreaker\n{\n    Task&lt;T&gt; ExecuteAsync&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; action);\n}\n\npublic class CircuitBreaker : ICircuitBreaker\n{\n    private readonly ILogger&lt;CircuitBreaker&gt; _logger;\n    private readonly int _failureThreshold;\n    private readonly TimeSpan _resetTimeout;\n    private int _failureCount;\n    private DateTime _lastFailureTime;\n\n    public CircuitBreaker(\n        ILogger&lt;CircuitBreaker&gt; logger,\n        int failureThreshold = 3,\n        TimeSpan resetTimeout = default)\n    {\n        _logger = logger;\n        _failureThreshold = failureThreshold;\n        _resetTimeout = resetTimeout == default ? TimeSpan.FromMinutes(1) : resetTimeout;\n    }\n\n    public async Task&lt;T&gt; ExecuteAsync&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; action)\n    {\n        if (IsCircuitOpen())\n        {\n            _logger.LogWarning(\"Circuit breaker a\u00e7\u0131k, i\u015flem reddedildi\");\n            throw new CircuitBreakerOpenException();\n        }\n\n        try\n        {\n            var result = await action();\n            Reset();\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _failureCount++;\n            _lastFailureTime = DateTime.UtcNow;\n            throw;\n        }\n    }\n\n    private bool IsCircuitOpen()\n    {\n        if (_failureCount &gt;= _failureThreshold)\n        {\n            if (DateTime.UtcNow - _lastFailureTime &gt; _resetTimeout)\n            {\n                Reset();\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    private void Reset()\n    {\n        _failureCount = 0;\n        _lastFailureTime = DateTime.MinValue;\n    }\n}\n</code></pre>"},{"location":"senior/system-design/high-availability/#2-veri-replikasyonu-data-replication","title":"2. Veri Replikasyonu (Data Replication)","text":"<pre><code>public class DataReplicationService\n{\n    private readonly ILogger&lt;DataReplicationService&gt; _logger;\n    private readonly IReadOnlyList&lt;IDatabase&gt; _replicas;\n    private readonly IConsistencyChecker _consistencyChecker;\n\n    public DataReplicationService(\n        ILogger&lt;DataReplicationService&gt; logger,\n        IReadOnlyList&lt;IDatabase&gt; replicas,\n        IConsistencyChecker consistencyChecker)\n    {\n        _logger = logger;\n        _replicas = replicas;\n        _consistencyChecker = consistencyChecker;\n    }\n\n    public async Task SaveDataAsync(Data data)\n    {\n        // Primary veritaban\u0131na kaydet\n        await _replicas[0].SaveAsync(data);\n\n        // Replikalara asenkron olarak yay\u0131nla\n        var replicationTasks = _replicas.Skip(1).Select(replica =&gt;\n            Task.Run(async () =&gt;\n            {\n                try\n                {\n                    await replica.SaveAsync(data);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Replikasyon hatas\u0131\");\n                }\n            }));\n\n        await Task.WhenAll(replicationTasks);\n\n        // Tutarl\u0131l\u0131k kontrol\u00fc\n        await _consistencyChecker.VerifyConsistencyAsync(data.Id);\n    }\n\n    public async Task&lt;Data&gt; GetDataAsync(string id)\n    {\n        // En yak\u0131n replikadan oku\n        foreach (var replica in _replicas)\n        {\n            try\n            {\n                return await replica.GetAsync(id);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogWarning(ex, \"Replika okuma hatas\u0131\");\n            }\n        }\n\n        throw new DataNotFoundException(id);\n    }\n}\n</code></pre>"},{"location":"senior/system-design/high-availability/#3-yuk-dengeleme-load-balancing","title":"3. Y\u00fck Dengeleme (Load Balancing)","text":"<pre><code>public class LoadBalancedService\n{\n    private readonly ILogger&lt;LoadBalancedService&gt; _logger;\n    private readonly IHealthChecker _healthChecker;\n    private readonly ILoadBalancer _loadBalancer;\n\n    public LoadBalancedService(\n        ILogger&lt;LoadBalancedService&gt; logger,\n        IHealthChecker healthChecker,\n        ILoadBalancer loadBalancer)\n    {\n        _logger = logger;\n        _healthChecker = healthChecker;\n        _loadBalancer = loadBalancer;\n    }\n\n    public async Task&lt;Response&gt; HandleRequestAsync(Request request)\n    {\n        // Sa\u011fl\u0131kl\u0131 sunucular\u0131 kontrol et\n        var healthyServers = await _healthChecker.GetHealthyServersAsync();\n\n        if (!healthyServers.Any())\n        {\n            throw new NoHealthyServersException();\n        }\n\n        // Y\u00fck dengeleyici \u00fczerinden iste\u011fi y\u00f6nlendir\n        var server = await _loadBalancer.GetNextServerAsync(healthyServers);\n        return await server.ProcessRequestAsync(request);\n    }\n}\n\npublic interface IHealthChecker\n{\n    Task&lt;IReadOnlyList&lt;Server&gt;&gt; GetHealthyServersAsync();\n}\n\npublic class HealthChecker : IHealthChecker\n{\n    private readonly ILogger&lt;HealthChecker&gt; _logger;\n    private readonly IReadOnlyList&lt;Server&gt; _servers;\n    private readonly TimeSpan _healthCheckInterval;\n\n    public HealthChecker(\n        ILogger&lt;HealthChecker&gt; logger,\n        IReadOnlyList&lt;Server&gt; servers,\n        TimeSpan healthCheckInterval)\n    {\n        _logger = logger;\n        _servers = servers;\n        _healthCheckInterval = healthCheckInterval;\n    }\n\n    public async Task&lt;IReadOnlyList&lt;Server&gt;&gt; GetHealthyServersAsync()\n    {\n        var healthCheckTasks = _servers.Select(CheckServerHealthAsync);\n        var results = await Task.WhenAll(healthCheckTasks);\n        return results.Where(r =&gt; r.IsHealthy).Select(r =&gt; r.Server).ToList();\n    }\n\n    private async Task&lt;(Server Server, bool IsHealthy)&gt; CheckServerHealthAsync(Server server)\n    {\n        try\n        {\n            var isHealthy = await server.CheckHealthAsync();\n            return (server, isHealthy);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Sa\u011fl\u0131k kontrol\u00fc hatas\u0131\");\n            return (server, false);\n        }\n    }\n}\n</code></pre>"},{"location":"senior/system-design/high-availability/#best-practices","title":"Best Practices","text":""},{"location":"senior/system-design/high-availability/#1-hata-yonetimi","title":"1. Hata Y\u00f6netimi","text":"<ul> <li>Circuit breaker pattern uygula</li> <li>Retry mekanizmalar\u0131 kullan</li> <li>Fallback stratejileri belirle</li> <li>Hata izleme ve raporlama yap</li> <li>Otomatik kurtarma mekanizmalar\u0131 kur</li> </ul>"},{"location":"senior/system-design/high-availability/#2-veri-yonetimi","title":"2. Veri Y\u00f6netimi","text":"<ul> <li>Veri replikasyonu uygula</li> <li>Tutarl\u0131l\u0131k kontrolleri yap</li> <li>Veri yedekleme stratejileri belirle</li> <li>Veri senkronizasyonu sa\u011fla</li> <li>Veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc koru</li> </ul>"},{"location":"senior/system-design/high-availability/#3-sistem-yonetimi","title":"3. Sistem Y\u00f6netimi","text":"<ul> <li>Y\u00fck dengeleme stratejileri uygula</li> <li>Sa\u011fl\u0131k kontrolleri yap</li> <li>Otomatik \u00f6l\u00e7eklendirme kullan</li> <li>Monitoring ve alerting kur</li> <li>Felaket kurtarma planlar\u0131 haz\u0131rla</li> </ul>"},{"location":"senior/system-design/high-availability/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/system-design/high-availability/#1-yuksek-erisilebilirlik-icin-hangi-stratejiler-kullanlmaldr","title":"1. Y\u00fcksek eri\u015filebilirlik i\u00e7in hangi stratejiler kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Hata tolerans\u0131</li> <li>Veri replikasyonu</li> <li>Y\u00fck dengeleme</li> <li>Otomatik kurtarma</li> <li>Felaket kurtarma</li> </ul>"},{"location":"senior/system-design/high-availability/#2-veri-tutarllg-nasl-saglanr","title":"2. Veri tutarl\u0131l\u0131\u011f\u0131 nas\u0131l sa\u011flan\u0131r?","text":"<ul> <li>Strong consistency</li> <li>Eventual consistency</li> <li>Read-your-writes consistency</li> <li>Monotonic reads</li> <li>Monotonic writes</li> </ul>"},{"location":"senior/system-design/high-availability/#3-felaket-kurtarma-plan-nasl-hazrlanr","title":"3. Felaket kurtarma plan\u0131 nas\u0131l haz\u0131rlan\u0131r?","text":"<ul> <li>Risk analizi yap</li> <li>Kurtarma stratejileri belirle</li> <li>Test senaryolar\u0131 haz\u0131rla</li> <li>Dok\u00fcmantasyon olu\u015ftur</li> <li>D\u00fczenli testler yap</li> </ul>"},{"location":"senior/system-design/high-availability/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft High Availability</li> <li>AWS High Availability</li> <li>Google Cloud High Availability</li> <li>High Availability Patterns </li> </ul>"},{"location":"senior/system-design/load-balancing/","title":"Y\u00fck Dengeleme (Load Balancing)","text":""},{"location":"senior/system-design/load-balancing/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Y\u00fck dengeleme, gelen istekleri birden fazla sunucu aras\u0131nda da\u011f\u0131tarak sistem kaynaklar\u0131n\u0131n verimli kullan\u0131lmas\u0131n\u0131 ve y\u00fcksek eri\u015filebilirli\u011fi sa\u011flayan bir tekniktir. Y\u00fck dengeleyiciler, istekleri farkl\u0131 stratejilere g\u00f6re da\u011f\u0131tarak sistem performans\u0131n\u0131 optimize eder.</p>"},{"location":"senior/system-design/load-balancing/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/system-design/load-balancing/#1-round-robin-yuk-dengeleme","title":"1. Round Robin Y\u00fck Dengeleme","text":"<pre><code>public class RoundRobinLoadBalancer : ILoadBalancer\n{\n    private readonly ILogger&lt;RoundRobinLoadBalancer&gt; _logger;\n    private readonly IReadOnlyList&lt;Server&gt; _servers;\n    private int _currentIndex;\n    private readonly object _lock = new object();\n\n    public RoundRobinLoadBalancer(\n        ILogger&lt;RoundRobinLoadBalancer&gt; logger,\n        IReadOnlyList&lt;Server&gt; servers)\n    {\n        _logger = logger;\n        _servers = servers;\n        _currentIndex = 0;\n    }\n\n    public Task&lt;Server&gt; GetNextServerAsync()\n    {\n        lock (_lock)\n        {\n            var server = _servers[_currentIndex];\n            _currentIndex = (_currentIndex + 1) % _servers.Count;\n            return Task.FromResult(server);\n        }\n    }\n}\n</code></pre>"},{"location":"senior/system-design/load-balancing/#2-weighted-round-robin-yuk-dengeleme","title":"2. Weighted Round Robin Y\u00fck Dengeleme","text":"<pre><code>public class WeightedRoundRobinLoadBalancer : ILoadBalancer\n{\n    private readonly ILogger&lt;WeightedRoundRobinLoadBalancer&gt; _logger;\n    private readonly IReadOnlyList&lt;WeightedServer&gt; _servers;\n    private int _currentIndex;\n    private int _currentWeight;\n    private readonly object _lock = new object();\n\n    public WeightedRoundRobinLoadBalancer(\n        ILogger&lt;WeightedRoundRobinLoadBalancer&gt; logger,\n        IReadOnlyList&lt;WeightedServer&gt; servers)\n    {\n        _logger = logger;\n        _servers = servers;\n        _currentIndex = -1;\n        _currentWeight = 0;\n    }\n\n    public Task&lt;Server&gt; GetNextServerAsync()\n    {\n        lock (_lock)\n        {\n            while (true)\n            {\n                _currentIndex = (_currentIndex + 1) % _servers.Count;\n                if (_currentIndex == 0)\n                {\n                    _currentWeight = _currentWeight - 1;\n                    if (_currentWeight &lt;= 0)\n                    {\n                        _currentWeight = _servers.Max(s =&gt; s.Weight);\n                    }\n                }\n\n                if (_servers[_currentIndex].Weight &gt;= _currentWeight)\n                {\n                    return Task.FromResult(_servers[_currentIndex].Server);\n                }\n            }\n        }\n    }\n}\n\npublic class WeightedServer\n{\n    public Server Server { get; }\n    public int Weight { get; }\n\n    public WeightedServer(Server server, int weight)\n    {\n        Server = server;\n        Weight = weight;\n    }\n}\n</code></pre>"},{"location":"senior/system-design/load-balancing/#3-least-connections-yuk-dengeleme","title":"3. Least Connections Y\u00fck Dengeleme","text":"<pre><code>public class LeastConnectionsLoadBalancer : ILoadBalancer\n{\n    private readonly ILogger&lt;LeastConnectionsLoadBalancer&gt; _logger;\n    private readonly IReadOnlyList&lt;Server&gt; _servers;\n    private readonly ConcurrentDictionary&lt;Server, int&gt; _connectionCounts;\n    private readonly object _lock = new object();\n\n    public LeastConnectionsLoadBalancer(\n        ILogger&lt;LeastConnectionsLoadBalancer&gt; logger,\n        IReadOnlyList&lt;Server&gt; servers)\n    {\n        _logger = logger;\n        _servers = servers;\n        _connectionCounts = new ConcurrentDictionary&lt;Server, int&gt;();\n    }\n\n    public Task&lt;Server&gt; GetNextServerAsync()\n    {\n        lock (_lock)\n        {\n            var server = _servers\n                .OrderBy(s =&gt; _connectionCounts.GetOrAdd(s, 0))\n                .First();\n\n            _connectionCounts.AddOrUpdate(server, 1, (_, count) =&gt; count + 1);\n            return Task.FromResult(server);\n        }\n    }\n\n    public Task ReleaseConnectionAsync(Server server)\n    {\n        lock (_lock)\n        {\n            _connectionCounts.AddOrUpdate(server, 0, (_, count) =&gt; Math.Max(0, count - 1));\n            return Task.CompletedTask;\n        }\n    }\n}\n</code></pre>"},{"location":"senior/system-design/load-balancing/#4-health-check-ve-yuk-dengeleme","title":"4. Health Check ve Y\u00fck Dengeleme","text":"<pre><code>public class HealthCheckLoadBalancer : ILoadBalancer\n{\n    private readonly ILogger&lt;HealthCheckLoadBalancer&gt; _logger;\n    private readonly IReadOnlyList&lt;Server&gt; _servers;\n    private readonly IHealthChecker _healthChecker;\n    private readonly TimeSpan _healthCheckInterval;\n    private readonly ConcurrentDictionary&lt;Server, bool&gt; _healthyServers;\n    private readonly Timer _healthCheckTimer;\n\n    public HealthCheckLoadBalancer(\n        ILogger&lt;HealthCheckLoadBalancer&gt; logger,\n        IReadOnlyList&lt;Server&gt; servers,\n        IHealthChecker healthChecker,\n        TimeSpan healthCheckInterval)\n    {\n        _logger = logger;\n        _servers = servers;\n        _healthChecker = healthChecker;\n        _healthCheckInterval = healthCheckInterval;\n        _healthyServers = new ConcurrentDictionary&lt;Server, bool&gt;();\n\n        // \u0130lk sa\u011fl\u0131k kontrol\u00fc\n        _ = CheckHealthAsync();\n\n        // Periyodik sa\u011fl\u0131k kontrol\u00fc\n        _healthCheckTimer = new Timer(async _ =&gt; await CheckHealthAsync(), \n            null, _healthCheckInterval, _healthCheckInterval);\n    }\n\n    public async Task&lt;Server&gt; GetNextServerAsync()\n    {\n        var healthyServers = _healthyServers\n            .Where(kvp =&gt; kvp.Value)\n            .Select(kvp =&gt; kvp.Key)\n            .ToList();\n\n        if (!healthyServers.Any())\n        {\n            throw new NoHealthyServersException();\n        }\n\n        // Round Robin stratejisi ile sa\u011fl\u0131kl\u0131 sunuculardan birini se\u00e7\n        var index = new Random().Next(healthyServers.Count);\n        return healthyServers[index];\n    }\n\n    private async Task CheckHealthAsync()\n    {\n        foreach (var server in _servers)\n        {\n            try\n            {\n                var isHealthy = await _healthChecker.CheckHealthAsync(server);\n                _healthyServers[server] = isHealthy;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Sa\u011fl\u0131k kontrol\u00fc hatas\u0131\");\n                _healthyServers[server] = false;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"senior/system-design/load-balancing/#best-practices","title":"Best Practices","text":""},{"location":"senior/system-design/load-balancing/#1-yuk-dengeleme-stratejileri","title":"1. Y\u00fck Dengeleme Stratejileri","text":"<ul> <li>Uygulama ihtiya\u00e7lar\u0131na g\u00f6re strateji se\u00e7</li> <li>Sunucu kapasitelerini dikkate al</li> <li>Sa\u011fl\u0131k kontrollerini d\u00fczenli yap</li> <li>Otomatik \u00f6l\u00e7eklendirme ile entegre et</li> <li>Sticky session deste\u011fi sa\u011fla</li> </ul>"},{"location":"senior/system-design/load-balancing/#2-performans-optimizasyonu","title":"2. Performans Optimizasyonu","text":"<ul> <li>\u00d6nbellekleme stratejileri uygula</li> <li>SSL/TLS terminasyonu yap</li> <li>Gzip s\u0131k\u0131\u015ft\u0131rma kullan</li> <li>Keep-alive ba\u011flant\u0131lar\u0131 y\u00f6net</li> <li>Ba\u011flant\u0131 havuzu olu\u015ftur</li> </ul>"},{"location":"senior/system-design/load-balancing/#3-monitoring-ve-logging","title":"3. Monitoring ve Logging","text":"<ul> <li>Performans metriklerini topla</li> <li>Hata oranlar\u0131n\u0131 izle</li> <li>Yan\u0131t s\u00fcrelerini takip et</li> <li>Kaynak kullan\u0131m\u0131n\u0131 monit\u00f6rle</li> <li>Otomatik alarmlar kur</li> </ul>"},{"location":"senior/system-design/load-balancing/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/system-design/load-balancing/#1-hangi-yuk-dengeleme-stratejisi-ne-zaman-kullanlmaldr","title":"1. Hangi y\u00fck dengeleme stratejisi ne zaman kullan\u0131lmal\u0131d\u0131r?","text":"<ul> <li>Round Robin: Basit ve e\u015fit y\u00fck da\u011f\u0131l\u0131m\u0131</li> <li>Weighted Round Robin: Sunucu kapasiteleri farkl\u0131 oldu\u011funda</li> <li>Least Connections: Uzun s\u00fcren ba\u011flant\u0131lar oldu\u011funda</li> <li>IP Hash: Oturum tutarl\u0131l\u0131\u011f\u0131 gerekti\u011finde</li> <li>Least Response Time: Performans optimizasyonu gerekti\u011finde</li> </ul>"},{"location":"senior/system-design/load-balancing/#2-yuk-dengeleyici-seciminde-nelere-dikkat-edilmelidir","title":"2. Y\u00fck dengeleyici se\u00e7iminde nelere dikkat edilmelidir?","text":"<ul> <li>\u00d6l\u00e7eklenebilirlik</li> <li>Y\u00fcksek eri\u015filebilirlik</li> <li>SSL/TLS deste\u011fi</li> <li>Monitoring yetenekleri</li> <li>Maliyet</li> </ul>"},{"location":"senior/system-design/load-balancing/#3-yuk-dengelemede-karslaslan-zorluklar-nelerdir","title":"3. Y\u00fck dengelemede kar\u015f\u0131la\u015f\u0131lan zorluklar nelerdir?","text":"<ul> <li>Oturum y\u00f6netimi</li> <li>Veri tutarl\u0131l\u0131\u011f\u0131</li> <li>SSL terminasyonu</li> <li>Sa\u011fl\u0131k kontrol\u00fc</li> <li>\u00d6l\u00e7eklendirme</li> </ul>"},{"location":"senior/system-design/load-balancing/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Load Balancing</li> <li>AWS Load Balancing</li> <li>NGINX Load Balancing</li> <li>Load Balancing Algorithms </li> </ul>"},{"location":"senior/system-design/scalability/","title":"\u00d6l\u00e7eklenebilirlik","text":""},{"location":"senior/system-design/scalability/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>\u00d6l\u00e7eklenebilirlik, bir sistemin artan y\u00fck\u00fc kar\u015f\u0131layabilme ve kaynaklar\u0131 verimli kullanabilme yetene\u011fidir. Sistemlerin dikey (vertical) ve yatay (horizontal) olarak \u00f6l\u00e7eklendirilmesi, y\u00fck dengeleme stratejileri ve \u00f6nbellekleme mekanizmalar\u0131 \u00f6l\u00e7eklenebilirli\u011fi sa\u011flamak i\u00e7in kullan\u0131lan temel yakla\u015f\u0131mlard\u0131r.</p>"},{"location":"senior/system-design/scalability/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"senior/system-design/scalability/#1-dikey-olceklendirme-vertical-scaling","title":"1. Dikey \u00d6l\u00e7eklendirme (Vertical Scaling)","text":"<pre><code>public class VerticalScalingExample\n{\n    private readonly ILogger&lt;VerticalScalingExample&gt; _logger;\n    private readonly SemaphoreSlim _semaphore;\n    private readonly int _maxConcurrentOperations;\n\n    public VerticalScalingExample(\n        ILogger&lt;VerticalScalingExample&gt; logger,\n        IConfiguration configuration)\n    {\n        _logger = logger;\n        _maxConcurrentOperations = configuration.GetValue&lt;int&gt;(\"MaxConcurrentOperations\", 100);\n        _semaphore = new SemaphoreSlim(_maxConcurrentOperations);\n    }\n\n    public async Task ProcessRequestAsync(Request request)\n    {\n        await _semaphore.WaitAsync();\n        try\n        {\n            // CPU yo\u011fun i\u015flem\n            await Task.Run(() =&gt; ProcessCpuIntensiveOperation(request));\n\n            // Bellek yo\u011fun i\u015flem\n            await ProcessMemoryIntensiveOperation(request);\n        }\n        finally\n        {\n            _semaphore.Release();\n        }\n    }\n\n    private void ProcessCpuIntensiveOperation(Request request)\n    {\n        // CPU kaynaklar\u0131n\u0131 verimli kullan\n        Parallel.For(0, request.Items.Count, new ParallelOptions\n        {\n            MaxDegreeOfParallelism = Environment.ProcessorCount\n        }, i =&gt;\n        {\n            ProcessItem(request.Items[i]);\n        });\n    }\n\n    private async Task ProcessMemoryIntensiveOperation(Request request)\n    {\n        // Bellek kullan\u0131m\u0131n\u0131 optimize et\n        using var memoryStream = new MemoryStream();\n        await JsonSerializer.SerializeAsync(memoryStream, request);\n\n        // B\u00fcy\u00fck nesneleri temizle\n        GC.Collect();\n    }\n}\n</code></pre>"},{"location":"senior/system-design/scalability/#2-yatay-olceklendirme-horizontal-scaling","title":"2. Yatay \u00d6l\u00e7eklendirme (Horizontal Scaling)","text":"<pre><code>public class HorizontalScalingExample\n{\n    private readonly ILogger&lt;HorizontalScalingExample&gt; _logger;\n    private readonly ILoadBalancer _loadBalancer;\n    private readonly IRedisCache _cache;\n\n    public HorizontalScalingExample(\n        ILogger&lt;HorizontalScalingExample&gt; logger,\n        ILoadBalancer loadBalancer,\n        IRedisCache cache)\n    {\n        _logger = logger;\n        _loadBalancer = loadBalancer;\n        _cache = cache;\n    }\n\n    public async Task&lt;Response&gt; HandleRequestAsync(Request request)\n    {\n        // \u00d6nbellekten kontrol et\n        var cachedResponse = await _cache.GetAsync&lt;Response&gt;(request.Id);\n        if (cachedResponse != null)\n        {\n            return cachedResponse;\n        }\n\n        // Y\u00fck dengeleyici \u00fczerinden iste\u011fi y\u00f6nlendir\n        var server = await _loadBalancer.GetNextServerAsync();\n        var response = await server.ProcessRequestAsync(request);\n\n        // Yan\u0131t\u0131 \u00f6nbelle\u011fe al\n        await _cache.SetAsync(request.Id, response, TimeSpan.FromMinutes(30));\n\n        return response;\n    }\n}\n\npublic interface ILoadBalancer\n{\n    Task&lt;Server&gt; GetNextServerAsync();\n}\n\npublic class RoundRobinLoadBalancer : ILoadBalancer\n{\n    private readonly List&lt;Server&gt; _servers;\n    private int _currentIndex;\n\n    public RoundRobinLoadBalancer(List&lt;Server&gt; servers)\n    {\n        _servers = servers;\n        _currentIndex = 0;\n    }\n\n    public Task&lt;Server&gt; GetNextServerAsync()\n    {\n        var server = _servers[_currentIndex];\n        _currentIndex = (_currentIndex + 1) % _servers.Count;\n        return Task.FromResult(server);\n    }\n}\n</code></pre>"},{"location":"senior/system-design/scalability/#3-veritaban-olceklendirme","title":"3. Veritaban\u0131 \u00d6l\u00e7eklendirme","text":"<pre><code>public class DatabaseScalingExample\n{\n    private readonly ILogger&lt;DatabaseScalingExample&gt; _logger;\n    private readonly IDatabaseShardingStrategy _shardingStrategy;\n    private readonly IReadWriteSplittingStrategy _splittingStrategy;\n\n    public DatabaseScalingExample(\n        ILogger&lt;DatabaseScalingExample&gt; logger,\n        IDatabaseShardingStrategy shardingStrategy,\n        IReadWriteSplittingStrategy splittingStrategy)\n    {\n        _logger = logger;\n        _shardingStrategy = shardingStrategy;\n        _splittingStrategy = splittingStrategy;\n    }\n\n    public async Task SaveDataAsync(Data data)\n    {\n        // Sharding stratejisine g\u00f6re veritaban\u0131 se\u00e7\n        var shard = _shardingStrategy.GetShard(data.Id);\n\n        // Write i\u015flemi i\u00e7in primary veritaban\u0131n\u0131 kullan\n        var writeConnection = await _splittingStrategy.GetWriteConnectionAsync();\n        await writeConnection.SaveAsync(data);\n\n        // Replikasyon gecikmesini bekle\n        await Task.Delay(TimeSpan.FromMilliseconds(100));\n    }\n\n    public async Task&lt;Data&gt; GetDataAsync(string id)\n    {\n        // Sharding stratejisine g\u00f6re veritaban\u0131 se\u00e7\n        var shard = _shardingStrategy.GetShard(id);\n\n        // Read i\u015flemi i\u00e7in replica veritaban\u0131n\u0131 kullan\n        var readConnection = await _splittingStrategy.GetReadConnectionAsync();\n        return await readConnection.GetAsync(id);\n    }\n}\n</code></pre>"},{"location":"senior/system-design/scalability/#best-practices","title":"Best Practices","text":""},{"location":"senior/system-design/scalability/#1-olceklendirme-stratejileri","title":"1. \u00d6l\u00e7eklendirme Stratejileri","text":"<ul> <li>Sistem y\u00fck\u00fcn\u00fc s\u00fcrekli izle</li> <li>Otomatik \u00f6l\u00e7eklendirme politikalar\u0131 belirle</li> <li>Stateless tasar\u0131m prensiplerini uygula</li> <li>Servis ke\u015ffi (service discovery) kullan</li> <li>Circuit breaker pattern uygula</li> </ul>"},{"location":"senior/system-design/scalability/#2-performans-optimizasyonu","title":"2. Performans Optimizasyonu","text":"<ul> <li>\u00d6nbellekleme stratejileri uygula</li> <li>Asenkron i\u015fleme kullan</li> <li>Batch i\u015flemleri optimize et</li> <li>Veritaban\u0131 sorgular\u0131n\u0131 iyile\u015ftir</li> <li>CDN kullan</li> </ul>"},{"location":"senior/system-design/scalability/#3-monitoring-ve-alerting","title":"3. Monitoring ve Alerting","text":"<ul> <li>Performans metriklerini topla</li> <li>Kaynak kullan\u0131m\u0131n\u0131 izle</li> <li>Hata oranlar\u0131n\u0131 takip et</li> <li>Otomatik alarmlar kur</li> <li>Kapasite planlamas\u0131 yap</li> </ul>"},{"location":"senior/system-design/scalability/#sk-sorulan-sorular","title":"S\u0131k Sorulan Sorular","text":""},{"location":"senior/system-design/scalability/#1-dikey-ve-yatay-olceklendirme-arasndaki-farklar-nelerdir","title":"1. Dikey ve yatay \u00f6l\u00e7eklendirme aras\u0131ndaki farklar nelerdir?","text":"<ul> <li>Dikey: Tek sunucu kapasitesini art\u0131rma</li> <li>Yatay: Sunucu say\u0131s\u0131n\u0131 art\u0131rma</li> <li>Dikey: S\u0131n\u0131rl\u0131 \u00f6l\u00e7eklenebilirlik</li> <li>Yatay: Teorik olarak s\u0131n\u0131rs\u0131z \u00f6l\u00e7eklenebilirlik</li> <li>Dikey: Daha basit y\u00f6netim</li> <li>Yatay: Daha karma\u015f\u0131k y\u00f6netim</li> </ul>"},{"location":"senior/system-design/scalability/#2-yatay-olceklendirmede-hangi-zorluklarla-karslaslr","title":"2. Yatay \u00f6l\u00e7eklendirmede hangi zorluklarla kar\u015f\u0131la\u015f\u0131l\u0131r?","text":"<ul> <li>Veri tutarl\u0131l\u0131\u011f\u0131</li> <li>Oturum y\u00f6netimi</li> <li>Servis ke\u015ffi</li> <li>Y\u00fck dengeleme</li> <li>Monitoring ve logging</li> </ul>"},{"location":"senior/system-design/scalability/#3-veritaban-olceklendirme-stratejileri-nelerdir","title":"3. Veritaban\u0131 \u00f6l\u00e7eklendirme stratejileri nelerdir?","text":"<ul> <li>Read/Write splitting</li> <li>Database sharding</li> <li>Replication</li> <li>Partitioning</li> <li>Caching</li> </ul>"},{"location":"senior/system-design/scalability/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Microsoft Scalability Patterns</li> <li>AWS Scalability Best Practices</li> <li>Google Cloud Scalability</li> <li>Database Scaling Strategies </li> </ul>"},{"location":"senior/team-leadership/","title":"Team Leadership","text":""},{"location":"senior/team-leadership/#giris","title":"Giri\u015f","text":"<p>Team Leadership, modern software development'da technical leadership, team management ve knowledge sharing i\u00e7in kritik \u00f6neme sahiptir. Senior-level developers i\u00e7in team leadership konular\u0131n\u0131 anlamak, technical decisions vermek, code review processes y\u00f6netmek ve team collaboration sa\u011flamak i\u00e7in gereklidir. Bu b\u00f6l\u00fcm, technical leadership, code review best practices, technical decision making, architecture governance ve knowledge sharing konular\u0131n\u0131 kapsar.</p>"},{"location":"senior/team-leadership/#kapsanan-konular","title":"Kapsanan Konular","text":""},{"location":"senior/team-leadership/#1-technical-leadership","title":"1. Technical Leadership","text":"<p>Technical vision, team guidance, ve technical mentorship.</p> <p>\u00d6\u011frenilecekler: - Technical vision - Team guidance - Technical mentorship - Technical strategy - Innovation leadership</p>"},{"location":"senior/team-leadership/#2-code-review-best-practices","title":"2. Code Review Best Practices","text":"<p>Code review processes, quality standards, ve feedback mechanisms.</p> <p>\u00d6\u011frenilecekler: - Code review processes - Quality standards - Feedback mechanisms - Review automation - Best practices</p>"},{"location":"senior/team-leadership/#3-technical-decision-making","title":"3. Technical Decision Making","text":"<p>Decision frameworks, trade-off analysis, ve decision documentation.</p> <p>\u00d6\u011frenilecekler: - Decision frameworks - Trade-off analysis - Decision documentation - Stakeholder communication - Decision review</p>"},{"location":"senior/team-leadership/#4-architecture-governance","title":"4. Architecture Governance","text":"<p>Architecture standards, review processes, ve compliance management.</p> <p>\u00d6\u011frenilecekler: - Architecture standards - Review processes - Compliance management - Architecture evolution - Governance frameworks</p>"},{"location":"senior/team-leadership/#5-knowledge-sharing","title":"5. Knowledge Sharing","text":"<p>Knowledge management, documentation, ve team learning.</p> <p>\u00d6\u011frenilecekler: - Knowledge management - Documentation - Team learning - Mentoring programs - Knowledge transfer</p>"},{"location":"senior/team-leadership/#neden-onemli","title":"Neden \u00d6nemli?","text":""},{"location":"senior/team-leadership/#1-team-productivity","title":"1. Team Productivity","text":"<ul> <li>Better collaboration</li> <li>Knowledge sharing</li> <li>Quality improvement</li> <li>Innovation speed</li> <li>Team growth</li> </ul>"},{"location":"senior/team-leadership/#2-technical-excellence","title":"2. Technical Excellence","text":"<ul> <li>Best practices</li> <li>Quality standards</li> <li>Innovation leadership</li> <li>Technical strategy</li> <li>Continuous improvement</li> </ul>"},{"location":"senior/team-leadership/#3-business-impact","title":"3. Business Impact","text":"<ul> <li>Faster delivery</li> <li>Better quality</li> <li>Reduced risks</li> <li>Innovation leadership</li> <li>Competitive advantage</li> </ul>"},{"location":"senior/team-leadership/#4-professional-growth","title":"4. Professional Growth","text":"<ul> <li>Leadership skills</li> <li>Technical expertise</li> <li>Team management</li> <li>Strategic thinking</li> <li>Career advancement</li> </ul>"},{"location":"senior/team-leadership/#mulakat-sorular","title":"M\u00fclakat Sorular\u0131","text":""},{"location":"senior/team-leadership/#temel-sorular","title":"Temel Sorular","text":"<ol> <li>Technical leadership nedir?</li> <li> <p>Cevap: Technical vision, team guidance, technical mentorship, innovation leadership.</p> </li> <li> <p>Code review neden \u00f6nemlidir?</p> </li> <li> <p>Cevap: Quality assurance, knowledge sharing, best practices, team learning.</p> </li> <li> <p>Technical decision making nas\u0131l yap\u0131l\u0131r?</p> </li> <li> <p>Cevap: Decision frameworks, trade-off analysis, stakeholder communication, documentation.</p> </li> <li> <p>Architecture governance nedir?</p> </li> <li> <p>Cevap: Architecture standards, review processes, compliance management, evolution.</p> </li> <li> <p>Knowledge sharing nas\u0131l sa\u011flan\u0131r?</p> </li> <li>Cevap: Documentation, mentoring, team learning, knowledge transfer.</li> </ol>"},{"location":"senior/team-leadership/#teknik-sorular","title":"Teknik Sorular","text":"<ol> <li>Technical vision nas\u0131l olu\u015fturulur?</li> <li> <p>Cevap: Technology assessment, business alignment, innovation planning, team buy-in.</p> </li> <li> <p>Code review process nas\u0131l optimize edilir?</p> </li> <li> <p>Cevap: Automation, standards definition, feedback mechanisms, review metrics.</p> </li> <li> <p>Technical decisions nas\u0131l document edilir?</p> </li> <li> <p>Cevap: Decision records, rationale documentation, stakeholder communication, review processes.</p> </li> <li> <p>Architecture standards nas\u0131l implement edilir?</p> </li> <li> <p>Cevap: Standards definition, review processes, compliance monitoring, evolution planning.</p> </li> <li> <p>Team learning nas\u0131l geli\u015ftirilir?</p> </li> <li>Cevap: Mentoring programs, knowledge sharing, documentation, continuous learning.</li> </ol>"},{"location":"senior/team-leadership/#best-practices","title":"Best Practices","text":""},{"location":"senior/team-leadership/#1-technical-leadership_1","title":"1. Technical Leadership","text":"<ul> <li>Set clear vision</li> <li>Lead by example</li> <li>Mentor team members</li> <li>Foster innovation</li> <li>Communicate effectively</li> </ul>"},{"location":"senior/team-leadership/#2-code-review-process","title":"2. Code Review Process","text":"<ul> <li>Define standards</li> <li>Automate where possible</li> <li>Provide constructive feedback</li> <li>Measure effectiveness</li> <li>Continuously improve</li> </ul>"},{"location":"senior/team-leadership/#3-technical-decision-making_1","title":"3. Technical Decision Making","text":"<ul> <li>Use decision frameworks</li> <li>Analyze trade-offs</li> <li>Document decisions</li> <li>Communicate with stakeholders</li> <li>Review and learn</li> </ul>"},{"location":"senior/team-leadership/#4-architecture-governance_1","title":"4. Architecture Governance","text":"<ul> <li>Define clear standards</li> <li>Implement review processes</li> <li>Monitor compliance</li> <li>Plan for evolution</li> <li>Document decisions</li> </ul>"},{"location":"senior/team-leadership/#5-knowledge-sharing_1","title":"5. Knowledge Sharing","text":"<ul> <li>Create documentation</li> <li>Implement mentoring</li> <li>Foster team learning</li> <li>Share best practices</li> <li>Plan for knowledge transfer</li> </ul>"},{"location":"senior/team-leadership/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Technical Leadership</li> <li>Code Review Best Practices</li> <li>Technical Decision Making</li> <li>Architecture Governance</li> <li>Knowledge Sharing</li> <li>Team Leadership</li> </ul>"}]}